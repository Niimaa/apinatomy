/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(17);
	var $ = __webpack_require__(14);
	var P = __webpack_require__(16);
	var circuitboard = __webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(13);
	circuitboard.plugin(['tile-skin', 'tile-click-to-open', 'tile-grow-when-open', 'tile-spacing', 'tile-active']);
	var modelPrototype = {
	  get id() {
	    return this.name;
	  },
	  getChildIds: function() {
	    return this.children || [];
	  },
	  getModels: function(ids) {
	    return getModelsByIds(ids);
	  }
	};
	function bgColor(color) {
	  return {normal: {css: {'&': {
	          backgroundColor: color,
	          borderColor: 'black'
	        }}}};
	}
	var models = {
	  root: {
	    name: 'root',
	    children: ['A', 'B', 'C', 'D', 'E']
	  },
	  A: {
	    name: 'A',
	    children: ['A1', 'A2', 'A3'],
	    tile: bgColor('lightblue')
	  },
	  B: {
	    name: 'B',
	    children: ['B1', 'B2', 'B3'],
	    tile: bgColor('lightgreen')
	  },
	  C: {
	    name: 'C',
	    children: ['C1', 'C2', 'C3']
	  },
	  D: {
	    name: 'D',
	    children: ['D1', 'D2', 'D3']
	  },
	  E: {
	    name: 'E',
	    children: ['E1', 'E2', 'E3']
	  },
	  A1: {
	    name: 'A1',
	    tile: bgColor('orange')
	  },
	  A2: {name: 'A2'},
	  A3: {name: 'A3'},
	  B1: {name: 'B1'},
	  B2: {name: 'B2'},
	  B3: {name: 'B3'},
	  C1: {name: 'C1'},
	  C2: {name: 'C2'},
	  C3: {name: 'C3'},
	  D1: {name: 'D1'},
	  D2: {name: 'D2'},
	  D3: {name: 'D3'},
	  E1: {name: 'E1'},
	  E2: {name: 'E2'},
	  E3: {name: 'E3'}
	};
	function getModelsByIds(ids) {
	  var result = [];
	  ids.forEach(function(id) {
	    var model = Object.create(modelPrototype);
	    Object.keys(models[id]).forEach(function(key) {
	      model[key] = models[id][key];
	    });
	    result.push(P.resolve(model));
	  });
	  return result;
	}
	$(document).ready(function() {
	  $('#circuitboard').circuitboard({
	    model: getModelsByIds(['root'])[0],
	    tileSpacing: 4,
	    tilemapMargin: 4
	  }).circuitboard('instance').then(function(circuitboard) {
	    console.info('circuitboard loaded');
	  });
	});
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(16), __webpack_require__(19), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, newWidgetType, plugin) {
	  'use strict';
	  $.circuitboard = {plugin: plugin};
	  var CircuitboardP = newWidgetType('Circuitboard', {
	    cssClass: "circuitboard",
	    filter: (function() {
	      return P.resolve(true);
	    })
	  });
	  var TilemapP = newWidgetType('Tilemap', {cssClass: "tilemap"});
	  var TileP = newWidgetType('Tile', {cssClass: "tile"});
	  CircuitboardP.then((function(c) {
	    $.circuitboard.Circuitboard = c;
	  }));
	  TilemapP.then((function(c) {
	    $.circuitboard.Tilemap = c;
	  }));
	  TileP.then((function(c) {
	    $.circuitboard.Tile = c;
	  }));
	  return $.circuitboard;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(16), __webpack_require__(21), __webpack_require__(22), __webpack_require__(23), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, U, defer) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'core',
	    if: true
	  });
	  plugin.modify('Circuitboard.prototype').add('_registerTile', function _registerTile(tile) {
	    U.getDef(this._p_circuitboardCore_tilesByModelId, tile.model.id, defer).resolve(tile);
	  }).add('allTiles', function() {
	    var $__0 = this;
	    var tiles = {};
	    Object.keys(this._p_circuitboardCore_tilesByModelId).forEach((function(id) {
	      tiles[id] = $__0._p_circuitboardCore_tilesByModelId[id].promise;
	    }));
	    return tiles;
	  }).add('tile', function(tileSelector) {
	    return U.getDef(this._p_circuitboardCore_tilesByModelId, tileSelector, defer).promise;
	  }).add('construct', function() {
	    this._p_circuitboardCore_tilesByModelId = {};
	    $('<div/>').appendTo(this.element).css('flex-grow', 1).tilemap({
	      model: this.options.model,
	      parent: this
	    }).tilemap('instance');
	  });
	  plugin.modify('Tilemap.prototype').add('refreshTiles', function() {
	    var $__0 = this;
	    U.assert(U.isDefined(this.model), "An ApiNATOMY tilemap should have a model.");
	    return P.resolve(this.model).call('getChildIds').map((function(id) {
	      return P.resolve($__0.circuitboard.options.filter(id, U.bind(P.resolve($__0.model).value(), 'getModels', id))).then((function(show) {
	        return {
	          id: id,
	          show: show
	        };
	      }));
	    })).filter(U.field('show')).map(U.field('id')).then((function(ids) {
	      return P.resolve($__0.model).value().getModels(ids);
	    })).then((function(childrenToDisplay) {
	      $__0.element.children().empty();
	      $__0.element.empty();
	      $__0._p_tilemapCore_tiles = [];
	      var rowCount = Math.floor(Math.sqrt(childrenToDisplay.length));
	      var colCount = Math.ceil(childrenToDisplay.length / rowCount);
	      while (rowCount--) {
	        var row = $('<div/>').addClass('tilerow').appendTo($__0.element);
	        for (var column = 0; column < colCount && childrenToDisplay.length > 0; column += 1) {
	          $('<div/>').tile({
	            model: childrenToDisplay.shift(),
	            parent: $__0
	          }).appendTo(row).amyNestedFlexGrow(1);
	        }
	      }
	    })).then((function() {
	      $__0.trigger('tiles-refreshed');
	    }));
	  }).add('construct', function() {
	    var $__0 = this;
	    this.newEvent('tiles-refreshed');
	    this._p_tilemapCore_tiles = null;
	    Object.defineProperty(this, 'tiles', {get: (function() {
	        return $__0._p_tilemapCore_tiles;
	      })});
	    this.refreshTiles();
	  });
	  plugin.modify('Tile.prototype').add('populateInnerTilemap', function populateInnerTilemap() {
	    if (!this._p_tileCore_tilemap) {
	      this._p_tileCore_tilemap = this.dom.tilemap({
	        model: this.options.model,
	        parent: this
	      }).tilemap('instance');
	    }
	  }).add('construct', function() {
	    var $__0 = this;
	    this._p_tileCore_tilemap = null;
	    ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'].forEach((function(event) {
	      $__0.newEvent(event, {source: $__0.element.asKefirStream(event)});
	    }));
	    this.newEvent('click', {source: this.element.mouseClick({threshold: this.circuitboard.options.dragThreshold})});
	    this.dom = this.element;
	    this.element.attr('id', this.id);
	    this.circuitboard._registerTile(this);
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(36), __webpack_require__(21), __webpack_require__(26), __webpack_require__(27), __webpack_require__(28), __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, color, U, Kefir, defaults) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-skin',
	    requires: ['tile-open', 'position-tracking']
	  }).modify('Tile.prototype');
	  var applyStyleDefaults = defaults({
	    '&': {
	      backgroundColor: " 'white'                                                                ",
	      borderColor: " color(`['&'].backgroundColor`).brighten(20).css()                      ",
	      color: " color(`['&'].backgroundColor`).luminance() > 0.5 && 'black' || 'white' "
	    },
	    '& > header': {borderColor: " `['&'].borderColor` "},
	    '& > icon-btn': {backgroundColor: " `['&'].backgroundColor` "}
	  }, {color: color});
	  plugin.insert('construct', function() {
	    var $__0 = this;
	    var origElement = this.dom;
	    origElement.addClass('skinned-tile');
	    this._p_tileSkin_headerElement = $("<header/>").appendTo(origElement);
	    this.dom = $("<section/>").appendTo(origElement);
	    this.model.get('name').then((function(name) {
	      $__0._p_tileSkin_headerElement.text(name);
	    }));
	    this.model.get('tile').get('normal').get('css').then((function(css) {
	      $__0.element.amyPutCssRules(applyStyleDefaults(css));
	    })).catch((function() {}));
	    this.on('size').filterBy(this.p('open').not()).onValue((function(size) {
	      $__0._p_tileSkin_headerElement.css('fontSize', Math.min(0.2 * Math.pow(size.height, 1.01), 0.13 * Math.pow(size.width, 1.01)));
	    }));
	    this.newProperty('headerSize', {
	      settable: false,
	      isEqual: U.Size.equals
	    }).plug(Kefir.merge([Kefir.once(), this.on('size').changes(), this.on('open').changes()]).map((function() {
	      return new U.Size($__0._p_tileSkin_headerElement.height(), $__0.size.width);
	    })));
	    this.newProperty('headerPosition', {settable: false}).plug(this.on('position'));
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function($) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-spacing',
	    requires: ['core']
	  }).modify('Tilemap.prototype');
	  plugin.add('refreshTileSpacing', function() {
	    this.element.css('margin', this.circuitboard.options.tilemapMargin);
	    this.element.children().css('margin-bottom', this.circuitboard.options.tileSpacing);
	    this.element.children().children().css('margin-right', this.circuitboard.options.tileSpacing);
	  });
	  plugin.after('refreshTiles', function() {
	    this.refreshTileSpacing();
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(31), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, $__1) {
	  'use strict';
	  var button = $__1.button;
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-click-to-open',
	    requires: ['tile-open']
	  }).modify('Tile.prototype');
	  plugin.insert('construct', function() {
	    var $__0 = this;
	    this.on('click').which(button.LEFT).skipPropagation('tile-left-click').onValue((function() {
	      $__0.open = !$__0.open;
	    }));
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function($) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-weight',
	    requires: ['core']
	  }).modify('Tile.prototype');
	  plugin.insert('construct', function() {});
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, U) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-active',
	    requires: ['core']
	  }).modify('Tile.prototype');
	  plugin.insert('construct', function() {
	    var $__0 = this;
	    if (!this.model) {
	      return;
	    }
	    this.newProperty('active', {initial: false});
	    var _activateProperTile = (function() {
	      var tiles = $__0.model._p_amyActiveTileQueue;
	      if (tiles[1]) {
	        tiles[1].active = false;
	      }
	      if (tiles[0]) {
	        tiles[0].active = true;
	      }
	    });
	    U.array(this.model, '_p_amyActiveTileQueue').push(this);
	    _activateProperTile();
	    this.on('destroy').take(1).onValue((function() {
	      var index = $__0.model._p_amyActiveTileQueue.indexOf($__0);
	      $__0.model._p_amyActiveTileQueue.splice(index, 1);
	      _activateProperTile();
	    }));
	    this.p('active').value(true).onValue((function() {
	      var index = $__0.model._p_amyActiveTileQueue.indexOf($__0);
	      if (index !== 0) {
	        $__0.model._p_amyActiveTileQueue.splice(index, 1);
	        $__0.model._p_amyActiveTileQueue.unshift($__0);
	        _activateProperTile();
	      }
	    }));
	    this.on('active').onValue((function(a) {
	      $__0.element.toggleClass('active', a);
	    }));
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function($) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-open',
	    requires: ['core']
	  }).modify('Tile.prototype');
	  plugin.insert('construct', function() {
	    var $__0 = this;
	    this.newProperty('open', {initial: false});
	    this.p('open').value(true).take(1).onValue((function() {
	      $__0.populateInnerTilemap();
	    }));
	    this.p('open').onValue((function(o) {
	      $__0.element.toggleClass('open', o);
	    }));
	    this.p('open').value(false).onValue((function() {
	      $__0.closestDescendantsByType('Tile').forEach((function(tile) {
	        tile.open = false;
	      }));
	    }));
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(16), __webpack_require__(26), __webpack_require__(35)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, Kefir) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-grow-when-open',
	    requires: ['tile-open']
	  }).modify('Tile.prototype');
	  plugin.add('weightWhenOpen', function() {
	    return this.circuitboard.options.weightWhenOpen || 2;
	  }).add('weightWhenClosed', (function() {
	    return 1;
	  }));
	  plugin.add('growWhenOpen', function(open) {
	    var $__0 = this;
	    var flexGrowFrom = parseFloat(this.element.data('amyFlexGrowTarget') || 1);
	    var flexGrowTo = open ? this.weightWhenOpen() : this.weightWhenClosed();
	    this.element.data('amyFlexGrowTarget', flexGrowTo);
	    var rowFlexGrowTo = 0;
	    this.element.parent().children().each(function() {
	      rowFlexGrowTo += parseFloat($(this).data('amyFlexGrowTarget') || 1);
	    });
	    var rowFlexGrowFrom = rowFlexGrowTo - flexGrowTo + flexGrowFrom;
	    return P.all([new P((function(resolve) {
	      $__0.element.velocity({flexGrow: [flexGrowTo, flexGrowFrom]}, {
	        complete: resolve,
	        duration: 300
	      });
	    })), new P((function(resolve) {
	      $__0.element.parent().velocity({flexGrow: [rowFlexGrowTo, rowFlexGrowFrom]}, {
	        complete: resolve,
	        duration: 300
	      });
	    }))]);
	  });
	  plugin.insert('construct', function() {
	    var $__0 = this;
	    this.p('open').changes().onValue((function(open) {
	      $__0.growWhenOpen(open).then((function() {
	        if (open) {
	          finishedOpeningBus.emit();
	        } else {
	          finishedClosingBus.emit();
	        }
	      }));
	    }));
	    var finishedOpeningBus = Kefir.bus();
	    var finishedClosingBus = Kefir.bus();
	    this.newProperty('fullyOpen', {
	      settable: false,
	      initial: this.open
	    }).plug(this.p('open').value(false)).plug(finishedOpeningBus.mapTo(true));
	    this.newProperty('fullyClosed', {
	      settable: false,
	      initial: !this.open
	    }).plug(this.p('open').not().value(false)).plug(finishedClosingBus.mapTo(true));
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, U) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-open-active',
	    resolves: ['tile-open', 'tile-active']
	  }).modify('Tile.prototype');
	  plugin.insert('construct', function() {
	    var $__0 = this;
	    if (U.isUndefined(this.active)) {
	      return;
	    }
	    this.on('open').value(true).onValue((function() {
	      $__0.active = true;
	    }));
	    this.on('active').value(false).onValue((function() {
	      $__0.open = false;
	    }));
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(16), __webpack_require__(32)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'tile-skin-grow-when-open',
	    resolves: ['tile-skin', 'tile-grow-when-open']
	  }).modify('Tile.prototype');
	  plugin.append('construct', function() {
	    var flexGrowFrom = 1;
	    var rowFlexGrowFrom = this.element.parent().children().length;
	    this.element.velocity({flexGrow: [flexGrowFrom, flexGrowFrom]}, {duration: 1});
	    this.element.parent().velocity({flexGrow: [rowFlexGrowFrom, rowFlexGrowFrom]}, {duration: 1});
	  });
	  plugin.replace('growWhenOpen', function(open) {
	    var $__0 = this;
	    var openCloseTransition = (function() {
	      var flexGrowFrom = parseFloat($__0.element.data('amyFlexGrowTarget') || 1);
	      var flexGrowTo = open ? $__0.weightWhenOpen() : $__0.weightWhenClosed();
	      $__0.element.data('amyFlexGrowTarget', flexGrowTo);
	      var rowFlexGrowTo = 0;
	      $__0.element.parent().children().each(function() {
	        rowFlexGrowTo += parseFloat($(this).data('amyFlexGrowTarget') || 1);
	      });
	      var rowFlexGrowFrom = rowFlexGrowTo - flexGrowTo + flexGrowFrom;
	      return P.all([new P((function(resolve) {
	        $__0.element.velocity({flexGrow: [flexGrowTo, flexGrowFrom]}, {
	          complete: resolve,
	          duration: 300
	        });
	      })), new P((function(resolve) {
	        $__0.element.parent().velocity({flexGrow: [rowFlexGrowTo, rowFlexGrowFrom]}, {
	          complete: resolve,
	          duration: 300
	        });
	      }))]);
	    });
	    var sectionElement = this.element.children('section');
	    if (open) {
	      sectionElement.css({
	        visibility: 'hidden',
	        opacity: 0
	      });
	      return openCloseTransition().then((function() {
	        return new P((function(resolve) {
	          sectionElement.css('visibility', 'visible');
	          sectionElement.velocity({opacity: [1, 0]}, {
	            complete: resolve,
	            duration: 200
	          });
	        }));
	      }));
	    } else {
	      sectionElement.css('visibility', 'visible');
	      return openCloseTransition().then((function() {
	        sectionElement.css('visibility', 'hidden');
	      }));
	    }
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(21), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, U, Kefir) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'position-tracking',
	    expects: ['core', 'tile-grow-when-open', 'tile-grow-when-maximized', 'tile-shrink-when-hidden']
	  });
	  plugin.add('Circuitboard.prototype._posTrackingWindow', function(window) {
	    window();
	  });
	  plugin.insert('Circuitboard.prototype.construct', function() {
	    this._posTrackingLimiter = Kefir.limiter(Kefir.merge([Kefir.once(), Kefir.interval(100)]), this._posTrackingWindow.bind(this));
	  });
	  plugin.insert('Tile.prototype.construct', function() {
	    this.newProperty('animationIdle', {
	      settable: false,
	      initial: true
	    }).plug(Kefir.and([this.p('fullyOpen').or(this.p('fullyClosed')), this.p('fullyHidden').or(this.p('fullyVisible')), this.p('fullyMaximized').or(this.p('fullyNotMaximized'))]));
	  });
	  plugin.insert('Circuitboard.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('offset', {
	      settable: false,
	      isEqual: U.Position.equals,
	      initial: this.element.offset()
	    }).plug(Kefir.merge([Kefir.once(), Kefir.interval(1000)]).limitedBy(this._posTrackingLimiter).map((function() {
	      return $__0.element.offset();
	    })));
	  }).insert('Tilemap.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('offset', {
	      settable: false,
	      isEqual: U.Position.equals,
	      initial: this.element.offset()
	    }).plug(Kefir.merge([Kefir.once(), this.parent.p('size').changes(), this.parent.p('offset').changes()]).limitedBy(this.circuitboard._posTrackingLimiter).map((function() {
	      return $__0.element.offset();
	    })));
	  }).insert('Tile.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('offset', {
	      settable: false,
	      isEqual: U.Position.equals,
	      initial: this.element.offset()
	    }).plug(Kefir.merge([Kefir.once(), this.parent.p('size').changes(), this.parent.p('offset').changes(), this.parent.on('reorganize'), this.p('animationIdle').value(true), Kefir.interval(1000).filterBy(this.p('animationIdle'))]).filter((function() {
	      return !$__0._offsetUpdated;
	    })).limitedBy(this.circuitboard._posTrackingLimiter).map((function() {
	      $__0._offsetUpdated = true;
	      return $__0.element.offset();
	    })));
	    this._offsetUpdated = false;
	    Kefir.interval(100).onValue((function() {
	      $__0._offsetUpdated = false;
	    }));
	  });
	  plugin.insert('Circuitboard.prototype.construct', function() {
	    this.newProperty('position', {
	      settable: false,
	      initial: new U.Position(0, 0)
	    });
	  }).insert('Tilemap.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('position', {
	      settable: false,
	      isEqual: U.Position.equals
	    }).plug(Kefir.merge([Kefir.once(), this.p('offset').changes(), this.circuitboard.p('offset').changes()]).map((function() {
	      return U.Position.subtract($__0.offset, $__0.circuitboard.offset);
	    })));
	  }).insert('Tile.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('position', {
	      settable: false,
	      isEqual: U.Position.equals
	    }).plug(Kefir.merge([Kefir.once(), this.p('offset').changes(), this.circuitboard.p('offset').changes(), this.p('animationIdle').value(true), Kefir.interval(1000).filterBy(this.p('animationIdle'))]).filter((function() {
	      return !$__0._positionUpdated;
	    })).map((function() {
	      $__0._positionUpdated = true;
	      return U.Position.subtract($__0.offset, $__0.circuitboard.offset);
	    })));
	    this._positionUpdated = false;
	    Kefir.interval(100).onValue((function() {
	      $__0._positionUpdated = false;
	    }));
	  });
	  plugin.insert('Circuitboard.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('size', {
	      settable: false,
	      isEqual: U.Size.equals
	    }).plug(Kefir.merge([Kefir.once(), this.options.resizeEvent || $(window).asKefirStream('resize')]).map((function() {
	      return new U.Size($__0.element.height(), $__0.element.width());
	    })));
	  }).insert('Tilemap.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('size', {
	      settable: false,
	      isEqual: U.Size.equals
	    }).plug(Kefir.merge([Kefir.once(), this.parent.p('size').changes()]).map((function() {
	      return new U.Size($__0.element.height(), $__0.element.width());
	    })));
	  }).insert('Tile.prototype.construct', function() {
	    var $__0 = this;
	    this.newProperty('size', {
	      settable: false,
	      isEqual: U.Size.equals
	    }).plug(Kefir.merge([Kefir.once(), this.parent.p('size').changes(), this.parent.on('reorganize'), this.p('animationIdle').value(true), Kefir.interval(1000).filterBy(this.p('animationIdle'))]).filter((function() {
	      return !$__0._sizeUpdated;
	    })).map((function() {
	      $__0._sizeUpdated = true;
	      return new U.Size($__0.element.height(), $__0.element.width());
	    })));
	    this._sizeUpdated = false;
	    Kefir.interval(100).onValue((function() {
	      $__0._sizeUpdated = false;
	    }));
	  });
	  plugin.insert('Tilemap.prototype.construct', function() {
	    this.newEvent('reorganize');
	  }).insert('Tile.prototype.construct', function() {
	    var $__0 = this;
	    this.p('size').onValue((function() {
	      $__0.parent.trigger('reorganize');
	    }));
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(26), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, Kefir) {
	  'use strict';
	  var plugin = $.circuitboard.plugin({
	    name: 'transition-position-tracking',
	    resolves: ['position-tracking', 'tile-grow-when-open']
	  });
	  plugin.insert('Tile.prototype.construct', function() {});
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(15);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(global, factory) {
	  if (typeof module === "object" && typeof module.exports === "object") {
	    module.exports = global.document ? factory(global, true) : function(w) {
	      if (!w.document) {
	        throw new Error("jQuery requires a window with a document");
	      }
	      return factory(w);
	    };
	  } else {
	    factory(global);
	  }
	}(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
	  var arr = [];
	  var slice = arr.slice;
	  var concat = arr.concat;
	  var push = arr.push;
	  var indexOf = arr.indexOf;
	  var class2type = {};
	  var toString = class2type.toString;
	  var hasOwn = class2type.hasOwnProperty;
	  var support = {};
	  var document = window.document,
	      version = "2.1.3",
	      jQuery = function(selector, context) {
	        return new jQuery.fn.init(selector, context);
	      },
	      rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	      rmsPrefix = /^-ms-/,
	      rdashAlpha = /-([\da-z])/gi,
	      fcamelCase = function(all, letter) {
	        return letter.toUpperCase();
	      };
	  jQuery.fn = jQuery.prototype = {
	    jquery: version,
	    constructor: jQuery,
	    selector: "",
	    length: 0,
	    toArray: function() {
	      return slice.call(this);
	    },
	    get: function(num) {
	      return num != null ? (num < 0 ? this[num + this.length] : this[num]) : slice.call(this);
	    },
	    pushStack: function(elems) {
	      var ret = jQuery.merge(this.constructor(), elems);
	      ret.prevObject = this;
	      ret.context = this.context;
	      return ret;
	    },
	    each: function(callback, args) {
	      return jQuery.each(this, callback, args);
	    },
	    map: function(callback) {
	      return this.pushStack(jQuery.map(this, function(elem, i) {
	        return callback.call(elem, i, elem);
	      }));
	    },
	    slice: function() {
	      return this.pushStack(slice.apply(this, arguments));
	    },
	    first: function() {
	      return this.eq(0);
	    },
	    last: function() {
	      return this.eq(-1);
	    },
	    eq: function(i) {
	      var len = this.length,
	          j = +i + (i < 0 ? len : 0);
	      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
	    },
	    end: function() {
	      return this.prevObject || this.constructor(null);
	    },
	    push: push,
	    sort: arr.sort,
	    splice: arr.splice
	  };
	  jQuery.extend = jQuery.fn.extend = function() {
	    var options,
	        name,
	        src,
	        copy,
	        copyIsArray,
	        clone,
	        target = arguments[0] || {},
	        i = 1,
	        length = arguments.length,
	        deep = false;
	    if (typeof target === "boolean") {
	      deep = target;
	      target = arguments[i] || {};
	      i++;
	    }
	    if (typeof target !== "object" && !jQuery.isFunction(target)) {
	      target = {};
	    }
	    if (i === length) {
	      target = this;
	      i--;
	    }
	    for (; i < length; i++) {
	      if ((options = arguments[i]) != null) {
	        for (name in options) {
	          src = target[name];
	          copy = options[name];
	          if (target === copy) {
	            continue;
	          }
	          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
	            if (copyIsArray) {
	              copyIsArray = false;
	              clone = src && jQuery.isArray(src) ? src : [];
	            } else {
	              clone = src && jQuery.isPlainObject(src) ? src : {};
	            }
	            target[name] = jQuery.extend(deep, clone, copy);
	          } else if (copy !== undefined) {
	            target[name] = copy;
	          }
	        }
	      }
	    }
	    return target;
	  };
	  jQuery.extend({
	    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
	    isReady: true,
	    error: function(msg) {
	      throw new Error(msg);
	    },
	    noop: function() {},
	    isFunction: function(obj) {
	      return jQuery.type(obj) === "function";
	    },
	    isArray: Array.isArray,
	    isWindow: function(obj) {
	      return obj != null && obj === obj.window;
	    },
	    isNumeric: function(obj) {
	      return !jQuery.isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
	    },
	    isPlainObject: function(obj) {
	      if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
	        return false;
	      }
	      if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
	        return false;
	      }
	      return true;
	    },
	    isEmptyObject: function(obj) {
	      var name;
	      for (name in obj) {
	        return false;
	      }
	      return true;
	    },
	    type: function(obj) {
	      if (obj == null) {
	        return obj + "";
	      }
	      return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
	    },
	    globalEval: function(code) {
	      var script,
	          indirect = eval;
	      code = jQuery.trim(code);
	      if (code) {
	        if (code.indexOf("use strict") === 1) {
	          script = document.createElement("script");
	          script.text = code;
	          document.head.appendChild(script).parentNode.removeChild(script);
	        } else {
	          indirect(code);
	        }
	      }
	    },
	    camelCase: function(string) {
	      return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
	    },
	    nodeName: function(elem, name) {
	      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	    },
	    each: function(obj, callback, args) {
	      var value,
	          i = 0,
	          length = obj.length,
	          isArray = isArraylike(obj);
	      if (args) {
	        if (isArray) {
	          for (; i < length; i++) {
	            value = callback.apply(obj[i], args);
	            if (value === false) {
	              break;
	            }
	          }
	        } else {
	          for (i in obj) {
	            value = callback.apply(obj[i], args);
	            if (value === false) {
	              break;
	            }
	          }
	        }
	      } else {
	        if (isArray) {
	          for (; i < length; i++) {
	            value = callback.call(obj[i], i, obj[i]);
	            if (value === false) {
	              break;
	            }
	          }
	        } else {
	          for (i in obj) {
	            value = callback.call(obj[i], i, obj[i]);
	            if (value === false) {
	              break;
	            }
	          }
	        }
	      }
	      return obj;
	    },
	    trim: function(text) {
	      return text == null ? "" : (text + "").replace(rtrim, "");
	    },
	    makeArray: function(arr, results) {
	      var ret = results || [];
	      if (arr != null) {
	        if (isArraylike(Object(arr))) {
	          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
	        } else {
	          push.call(ret, arr);
	        }
	      }
	      return ret;
	    },
	    inArray: function(elem, arr, i) {
	      return arr == null ? -1 : indexOf.call(arr, elem, i);
	    },
	    merge: function(first, second) {
	      var len = +second.length,
	          j = 0,
	          i = first.length;
	      for (; j < len; j++) {
	        first[i++] = second[j];
	      }
	      first.length = i;
	      return first;
	    },
	    grep: function(elems, callback, invert) {
	      var callbackInverse,
	          matches = [],
	          i = 0,
	          length = elems.length,
	          callbackExpect = !invert;
	      for (; i < length; i++) {
	        callbackInverse = !callback(elems[i], i);
	        if (callbackInverse !== callbackExpect) {
	          matches.push(elems[i]);
	        }
	      }
	      return matches;
	    },
	    map: function(elems, callback, arg) {
	      var value,
	          i = 0,
	          length = elems.length,
	          isArray = isArraylike(elems),
	          ret = [];
	      if (isArray) {
	        for (; i < length; i++) {
	          value = callback(elems[i], i, arg);
	          if (value != null) {
	            ret.push(value);
	          }
	        }
	      } else {
	        for (i in elems) {
	          value = callback(elems[i], i, arg);
	          if (value != null) {
	            ret.push(value);
	          }
	        }
	      }
	      return concat.apply([], ret);
	    },
	    guid: 1,
	    proxy: function(fn, context) {
	      var tmp,
	          args,
	          proxy;
	      if (typeof context === "string") {
	        tmp = fn[context];
	        context = fn;
	        fn = tmp;
	      }
	      if (!jQuery.isFunction(fn)) {
	        return undefined;
	      }
	      args = slice.call(arguments, 2);
	      proxy = function() {
	        return fn.apply(context || this, args.concat(slice.call(arguments)));
	      };
	      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	      return proxy;
	    },
	    now: Date.now,
	    support: support
	  });
	  jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	    class2type["[object " + name + "]"] = name.toLowerCase();
	  });
	  function isArraylike(obj) {
	    var length = obj.length,
	        type = jQuery.type(obj);
	    if (type === "function" || jQuery.isWindow(obj)) {
	      return false;
	    }
	    if (obj.nodeType === 1 && length) {
	      return true;
	    }
	    return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
	  }
	  var Sizzle = (function(window) {
	    var i,
	        support,
	        Expr,
	        getText,
	        isXML,
	        tokenize,
	        compile,
	        select,
	        outermostContext,
	        sortInput,
	        hasDuplicate,
	        setDocument,
	        document,
	        docElem,
	        documentIsHTML,
	        rbuggyQSA,
	        rbuggyMatches,
	        matches,
	        contains,
	        expando = "sizzle" + 1 * new Date(),
	        preferredDoc = window.document,
	        dirruns = 0,
	        done = 0,
	        classCache = createCache(),
	        tokenCache = createCache(),
	        compilerCache = createCache(),
	        sortOrder = function(a, b) {
	          if (a === b) {
	            hasDuplicate = true;
	          }
	          return 0;
	        },
	        MAX_NEGATIVE = 1 << 31,
	        hasOwn = ({}).hasOwnProperty,
	        arr = [],
	        pop = arr.pop,
	        push_native = arr.push,
	        push = arr.push,
	        slice = arr.slice,
	        indexOf = function(list, elem) {
	          var i = 0,
	              len = list.length;
	          for (; i < len; i++) {
	            if (list[i] === elem) {
	              return i;
	            }
	          }
	          return -1;
	        },
	        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	        whitespace = "[\\x20\\t\\r\\n\\f]",
	        characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	        identifier = characterEncoding.replace("w", "w#"),
	        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
	        pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)",
	        rwhitespace = new RegExp(whitespace + "+", "g"),
	        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
	        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
	        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
	        rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
	        rpseudo = new RegExp(pseudos),
	        ridentifier = new RegExp("^" + identifier + "$"),
	        matchExpr = {
	          "ID": new RegExp("^#(" + characterEncoding + ")"),
	          "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
	          "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
	          "ATTR": new RegExp("^" + attributes),
	          "PSEUDO": new RegExp("^" + pseudos),
	          "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
	          "bool": new RegExp("^(?:" + booleans + ")$", "i"),
	          "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
	        },
	        rinputs = /^(?:input|select|textarea|button)$/i,
	        rheader = /^h\d$/i,
	        rnative = /^[^{]+\{\s*\[native \w/,
	        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	        rsibling = /[+~]/,
	        rescape = /'|\\/g,
	        runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
	        funescape = function(_, escaped, escapedWhitespace) {
	          var high = "0x" + escaped - 0x10000;
	          return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
	        },
	        unloadHandler = function() {
	          setDocument();
	        };
	    try {
	      push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);
	      arr[preferredDoc.childNodes.length].nodeType;
	    } catch (e) {
	      push = {apply: arr.length ? function(target, els) {
	          push_native.apply(target, slice.call(els));
	        } : function(target, els) {
	          var j = target.length,
	              i = 0;
	          while ((target[j++] = els[i++])) {}
	          target.length = j - 1;
	        }};
	    }
	    function Sizzle(selector, context, results, seed) {
	      var match,
	          elem,
	          m,
	          nodeType,
	          i,
	          groups,
	          old,
	          nid,
	          newContext,
	          newSelector;
	      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
	        setDocument(context);
	      }
	      context = context || document;
	      results = results || [];
	      nodeType = context.nodeType;
	      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
	        return results;
	      }
	      if (!seed && documentIsHTML) {
	        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
	          if ((m = match[1])) {
	            if (nodeType === 9) {
	              elem = context.getElementById(m);
	              if (elem && elem.parentNode) {
	                if (elem.id === m) {
	                  results.push(elem);
	                  return results;
	                }
	              } else {
	                return results;
	              }
	            } else {
	              if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
	                results.push(elem);
	                return results;
	              }
	            }
	          } else if (match[2]) {
	            push.apply(results, context.getElementsByTagName(selector));
	            return results;
	          } else if ((m = match[3]) && support.getElementsByClassName) {
	            push.apply(results, context.getElementsByClassName(m));
	            return results;
	          }
	        }
	        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
	          nid = old = expando;
	          newContext = context;
	          newSelector = nodeType !== 1 && selector;
	          if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
	            groups = tokenize(selector);
	            if ((old = context.getAttribute("id"))) {
	              nid = old.replace(rescape, "\\$&");
	            } else {
	              context.setAttribute("id", nid);
	            }
	            nid = "[id='" + nid + "'] ";
	            i = groups.length;
	            while (i--) {
	              groups[i] = nid + toSelector(groups[i]);
	            }
	            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
	            newSelector = groups.join(",");
	          }
	          if (newSelector) {
	            try {
	              push.apply(results, newContext.querySelectorAll(newSelector));
	              return results;
	            } catch (qsaError) {} finally {
	              if (!old) {
	                context.removeAttribute("id");
	              }
	            }
	          }
	        }
	      }
	      return select(selector.replace(rtrim, "$1"), context, results, seed);
	    }
	    function createCache() {
	      var keys = [];
	      function cache(key, value) {
	        if (keys.push(key + " ") > Expr.cacheLength) {
	          delete cache[keys.shift()];
	        }
	        return (cache[key + " "] = value);
	      }
	      return cache;
	    }
	    function markFunction(fn) {
	      fn[expando] = true;
	      return fn;
	    }
	    function assert(fn) {
	      var div = document.createElement("div");
	      try {
	        return !!fn(div);
	      } catch (e) {
	        return false;
	      } finally {
	        if (div.parentNode) {
	          div.parentNode.removeChild(div);
	        }
	        div = null;
	      }
	    }
	    function addHandle(attrs, handler) {
	      var arr = attrs.split("|"),
	          i = attrs.length;
	      while (i--) {
	        Expr.attrHandle[arr[i]] = handler;
	      }
	    }
	    function siblingCheck(a, b) {
	      var cur = b && a,
	          diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
	      if (diff) {
	        return diff;
	      }
	      if (cur) {
	        while ((cur = cur.nextSibling)) {
	          if (cur === b) {
	            return -1;
	          }
	        }
	      }
	      return a ? 1 : -1;
	    }
	    function createInputPseudo(type) {
	      return function(elem) {
	        var name = elem.nodeName.toLowerCase();
	        return name === "input" && elem.type === type;
	      };
	    }
	    function createButtonPseudo(type) {
	      return function(elem) {
	        var name = elem.nodeName.toLowerCase();
	        return (name === "input" || name === "button") && elem.type === type;
	      };
	    }
	    function createPositionalPseudo(fn) {
	      return markFunction(function(argument) {
	        argument = +argument;
	        return markFunction(function(seed, matches) {
	          var j,
	              matchIndexes = fn([], seed.length, argument),
	              i = matchIndexes.length;
	          while (i--) {
	            if (seed[(j = matchIndexes[i])]) {
	              seed[j] = !(matches[j] = seed[j]);
	            }
	          }
	        });
	      });
	    }
	    function testContext(context) {
	      return context && typeof context.getElementsByTagName !== "undefined" && context;
	    }
	    support = Sizzle.support = {};
	    isXML = Sizzle.isXML = function(elem) {
	      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	      return documentElement ? documentElement.nodeName !== "HTML" : false;
	    };
	    setDocument = Sizzle.setDocument = function(node) {
	      var hasCompare,
	          parent,
	          doc = node ? node.ownerDocument || node : preferredDoc;
	      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
	        return document;
	      }
	      document = doc;
	      docElem = doc.documentElement;
	      parent = doc.defaultView;
	      if (parent && parent !== parent.top) {
	        if (parent.addEventListener) {
	          parent.addEventListener("unload", unloadHandler, false);
	        } else if (parent.attachEvent) {
	          parent.attachEvent("onunload", unloadHandler);
	        }
	      }
	      documentIsHTML = !isXML(doc);
	      support.attributes = assert(function(div) {
	        div.className = "i";
	        return !div.getAttribute("className");
	      });
	      support.getElementsByTagName = assert(function(div) {
	        div.appendChild(doc.createComment(""));
	        return !div.getElementsByTagName("*").length;
	      });
	      support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
	      support.getById = assert(function(div) {
	        docElem.appendChild(div).id = expando;
	        return !doc.getElementsByName || !doc.getElementsByName(expando).length;
	      });
	      if (support.getById) {
	        Expr.find["ID"] = function(id, context) {
	          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
	            var m = context.getElementById(id);
	            return m && m.parentNode ? [m] : [];
	          }
	        };
	        Expr.filter["ID"] = function(id) {
	          var attrId = id.replace(runescape, funescape);
	          return function(elem) {
	            return elem.getAttribute("id") === attrId;
	          };
	        };
	      } else {
	        delete Expr.find["ID"];
	        Expr.filter["ID"] = function(id) {
	          var attrId = id.replace(runescape, funescape);
	          return function(elem) {
	            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
	            return node && node.value === attrId;
	          };
	        };
	      }
	      Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
	        if (typeof context.getElementsByTagName !== "undefined") {
	          return context.getElementsByTagName(tag);
	        } else if (support.qsa) {
	          return context.querySelectorAll(tag);
	        }
	      } : function(tag, context) {
	        var elem,
	            tmp = [],
	            i = 0,
	            results = context.getElementsByTagName(tag);
	        if (tag === "*") {
	          while ((elem = results[i++])) {
	            if (elem.nodeType === 1) {
	              tmp.push(elem);
	            }
	          }
	          return tmp;
	        }
	        return results;
	      };
	      Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
	        if (documentIsHTML) {
	          return context.getElementsByClassName(className);
	        }
	      };
	      rbuggyMatches = [];
	      rbuggyQSA = [];
	      if ((support.qsa = rnative.test(doc.querySelectorAll))) {
	        assert(function(div) {
	          docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";
	          if (div.querySelectorAll("[msallowcapture^='']").length) {
	            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
	          }
	          if (!div.querySelectorAll("[selected]").length) {
	            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
	          }
	          if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
	            rbuggyQSA.push("~=");
	          }
	          if (!div.querySelectorAll(":checked").length) {
	            rbuggyQSA.push(":checked");
	          }
	          if (!div.querySelectorAll("a#" + expando + "+*").length) {
	            rbuggyQSA.push(".#.+[+~]");
	          }
	        });
	        assert(function(div) {
	          var input = doc.createElement("input");
	          input.setAttribute("type", "hidden");
	          div.appendChild(input).setAttribute("name", "D");
	          if (div.querySelectorAll("[name=d]").length) {
	            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
	          }
	          if (!div.querySelectorAll(":enabled").length) {
	            rbuggyQSA.push(":enabled", ":disabled");
	          }
	          div.querySelectorAll("*,:x");
	          rbuggyQSA.push(",.*:");
	        });
	      }
	      if ((support.matchesSelector = rnative.test((matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)))) {
	        assert(function(div) {
	          support.disconnectedMatch = matches.call(div, "div");
	          matches.call(div, "[s!='']:x");
	          rbuggyMatches.push("!=", pseudos);
	        });
	      }
	      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
	      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
	      hasCompare = rnative.test(docElem.compareDocumentPosition);
	      contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
	        var adown = a.nodeType === 9 ? a.documentElement : a,
	            bup = b && b.parentNode;
	        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
	      } : function(a, b) {
	        if (b) {
	          while ((b = b.parentNode)) {
	            if (b === a) {
	              return true;
	            }
	          }
	        }
	        return false;
	      };
	      sortOrder = hasCompare ? function(a, b) {
	        if (a === b) {
	          hasDuplicate = true;
	          return 0;
	        }
	        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
	        if (compare) {
	          return compare;
	        }
	        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
	        if (compare & 1 || (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {
	          if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
	            return -1;
	          }
	          if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
	            return 1;
	          }
	          return sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0;
	        }
	        return compare & 4 ? -1 : 1;
	      } : function(a, b) {
	        if (a === b) {
	          hasDuplicate = true;
	          return 0;
	        }
	        var cur,
	            i = 0,
	            aup = a.parentNode,
	            bup = b.parentNode,
	            ap = [a],
	            bp = [b];
	        if (!aup || !bup) {
	          return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0;
	        } else if (aup === bup) {
	          return siblingCheck(a, b);
	        }
	        cur = a;
	        while ((cur = cur.parentNode)) {
	          ap.unshift(cur);
	        }
	        cur = b;
	        while ((cur = cur.parentNode)) {
	          bp.unshift(cur);
	        }
	        while (ap[i] === bp[i]) {
	          i++;
	        }
	        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
	      };
	      return doc;
	    };
	    Sizzle.matches = function(expr, elements) {
	      return Sizzle(expr, null, null, elements);
	    };
	    Sizzle.matchesSelector = function(elem, expr) {
	      if ((elem.ownerDocument || elem) !== document) {
	        setDocument(elem);
	      }
	      expr = expr.replace(rattributeQuotes, "='$1']");
	      if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
	        try {
	          var ret = matches.call(elem, expr);
	          if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
	            return ret;
	          }
	        } catch (e) {}
	      }
	      return Sizzle(expr, document, null, [elem]).length > 0;
	    };
	    Sizzle.contains = function(context, elem) {
	      if ((context.ownerDocument || context) !== document) {
	        setDocument(context);
	      }
	      return contains(context, elem);
	    };
	    Sizzle.attr = function(elem, name) {
	      if ((elem.ownerDocument || elem) !== document) {
	        setDocument(elem);
	      }
	      var fn = Expr.attrHandle[name.toLowerCase()],
	          val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
	      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
	    };
	    Sizzle.error = function(msg) {
	      throw new Error("Syntax error, unrecognized expression: " + msg);
	    };
	    Sizzle.uniqueSort = function(results) {
	      var elem,
	          duplicates = [],
	          j = 0,
	          i = 0;
	      hasDuplicate = !support.detectDuplicates;
	      sortInput = !support.sortStable && results.slice(0);
	      results.sort(sortOrder);
	      if (hasDuplicate) {
	        while ((elem = results[i++])) {
	          if (elem === results[i]) {
	            j = duplicates.push(i);
	          }
	        }
	        while (j--) {
	          results.splice(duplicates[j], 1);
	        }
	      }
	      sortInput = null;
	      return results;
	    };
	    getText = Sizzle.getText = function(elem) {
	      var node,
	          ret = "",
	          i = 0,
	          nodeType = elem.nodeType;
	      if (!nodeType) {
	        while ((node = elem[i++])) {
	          ret += getText(node);
	        }
	      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
	        if (typeof elem.textContent === "string") {
	          return elem.textContent;
	        } else {
	          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
	            ret += getText(elem);
	          }
	        }
	      } else if (nodeType === 3 || nodeType === 4) {
	        return elem.nodeValue;
	      }
	      return ret;
	    };
	    Expr = Sizzle.selectors = {
	      cacheLength: 50,
	      createPseudo: markFunction,
	      match: matchExpr,
	      attrHandle: {},
	      find: {},
	      relative: {
	        ">": {
	          dir: "parentNode",
	          first: true
	        },
	        " ": {dir: "parentNode"},
	        "+": {
	          dir: "previousSibling",
	          first: true
	        },
	        "~": {dir: "previousSibling"}
	      },
	      preFilter: {
	        "ATTR": function(match) {
	          match[1] = match[1].replace(runescape, funescape);
	          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
	          if (match[2] === "~=") {
	            match[3] = " " + match[3] + " ";
	          }
	          return match.slice(0, 4);
	        },
	        "CHILD": function(match) {
	          match[1] = match[1].toLowerCase();
	          if (match[1].slice(0, 3) === "nth") {
	            if (!match[3]) {
	              Sizzle.error(match[0]);
	            }
	            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
	            match[5] = +((match[7] + match[8]) || match[3] === "odd");
	          } else if (match[3]) {
	            Sizzle.error(match[0]);
	          }
	          return match;
	        },
	        "PSEUDO": function(match) {
	          var excess,
	              unquoted = !match[6] && match[2];
	          if (matchExpr["CHILD"].test(match[0])) {
	            return null;
	          }
	          if (match[3]) {
	            match[2] = match[4] || match[5] || "";
	          } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
	            match[0] = match[0].slice(0, excess);
	            match[2] = unquoted.slice(0, excess);
	          }
	          return match.slice(0, 3);
	        }
	      },
	      filter: {
	        "TAG": function(nodeNameSelector) {
	          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
	          return nodeNameSelector === "*" ? function() {
	            return true;
	          } : function(elem) {
	            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
	          };
	        },
	        "CLASS": function(className) {
	          var pattern = classCache[className + " "];
	          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
	            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
	          });
	        },
	        "ATTR": function(name, operator, check) {
	          return function(elem) {
	            var result = Sizzle.attr(elem, name);
	            if (result == null) {
	              return operator === "!=";
	            }
	            if (!operator) {
	              return true;
	            }
	            result += "";
	            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
	          };
	        },
	        "CHILD": function(type, what, argument, first, last) {
	          var simple = type.slice(0, 3) !== "nth",
	              forward = type.slice(-4) !== "last",
	              ofType = what === "of-type";
	          return first === 1 && last === 0 ? function(elem) {
	            return !!elem.parentNode;
	          } : function(elem, context, xml) {
	            var cache,
	                outerCache,
	                node,
	                diff,
	                nodeIndex,
	                start,
	                dir = simple !== forward ? "nextSibling" : "previousSibling",
	                parent = elem.parentNode,
	                name = ofType && elem.nodeName.toLowerCase(),
	                useCache = !xml && !ofType;
	            if (parent) {
	              if (simple) {
	                while (dir) {
	                  node = elem;
	                  while ((node = node[dir])) {
	                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
	                      return false;
	                    }
	                  }
	                  start = dir = type === "only" && !start && "nextSibling";
	                }
	                return true;
	              }
	              start = [forward ? parent.firstChild : parent.lastChild];
	              if (forward && useCache) {
	                outerCache = parent[expando] || (parent[expando] = {});
	                cache = outerCache[type] || [];
	                nodeIndex = cache[0] === dirruns && cache[1];
	                diff = cache[0] === dirruns && cache[2];
	                node = nodeIndex && parent.childNodes[nodeIndex];
	                while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
	                  if (node.nodeType === 1 && ++diff && node === elem) {
	                    outerCache[type] = [dirruns, nodeIndex, diff];
	                    break;
	                  }
	                }
	              } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
	                diff = cache[1];
	              } else {
	                while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
	                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
	                    if (useCache) {
	                      (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
	                    }
	                    if (node === elem) {
	                      break;
	                    }
	                  }
	                }
	              }
	              diff -= last;
	              return diff === first || (diff % first === 0 && diff / first >= 0);
	            }
	          };
	        },
	        "PSEUDO": function(pseudo, argument) {
	          var args,
	              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
	          if (fn[expando]) {
	            return fn(argument);
	          }
	          if (fn.length > 1) {
	            args = [pseudo, pseudo, "", argument];
	            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
	              var idx,
	                  matched = fn(seed, argument),
	                  i = matched.length;
	              while (i--) {
	                idx = indexOf(seed, matched[i]);
	                seed[idx] = !(matches[idx] = matched[i]);
	              }
	            }) : function(elem) {
	              return fn(elem, 0, args);
	            };
	          }
	          return fn;
	        }
	      },
	      pseudos: {
	        "not": markFunction(function(selector) {
	          var input = [],
	              results = [],
	              matcher = compile(selector.replace(rtrim, "$1"));
	          return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
	            var elem,
	                unmatched = matcher(seed, null, xml, []),
	                i = seed.length;
	            while (i--) {
	              if ((elem = unmatched[i])) {
	                seed[i] = !(matches[i] = elem);
	              }
	            }
	          }) : function(elem, context, xml) {
	            input[0] = elem;
	            matcher(input, null, xml, results);
	            input[0] = null;
	            return !results.pop();
	          };
	        }),
	        "has": markFunction(function(selector) {
	          return function(elem) {
	            return Sizzle(selector, elem).length > 0;
	          };
	        }),
	        "contains": markFunction(function(text) {
	          text = text.replace(runescape, funescape);
	          return function(elem) {
	            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
	          };
	        }),
	        "lang": markFunction(function(lang) {
	          if (!ridentifier.test(lang || "")) {
	            Sizzle.error("unsupported lang: " + lang);
	          }
	          lang = lang.replace(runescape, funescape).toLowerCase();
	          return function(elem) {
	            var elemLang;
	            do {
	              if ((elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {
	                elemLang = elemLang.toLowerCase();
	                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
	              }
	            } while ((elem = elem.parentNode) && elem.nodeType === 1);
	            return false;
	          };
	        }),
	        "target": function(elem) {
	          var hash = window.location && window.location.hash;
	          return hash && hash.slice(1) === elem.id;
	        },
	        "root": function(elem) {
	          return elem === docElem;
	        },
	        "focus": function(elem) {
	          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
	        },
	        "enabled": function(elem) {
	          return elem.disabled === false;
	        },
	        "disabled": function(elem) {
	          return elem.disabled === true;
	        },
	        "checked": function(elem) {
	          var nodeName = elem.nodeName.toLowerCase();
	          return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
	        },
	        "selected": function(elem) {
	          if (elem.parentNode) {
	            elem.parentNode.selectedIndex;
	          }
	          return elem.selected === true;
	        },
	        "empty": function(elem) {
	          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
	            if (elem.nodeType < 6) {
	              return false;
	            }
	          }
	          return true;
	        },
	        "parent": function(elem) {
	          return !Expr.pseudos["empty"](elem);
	        },
	        "header": function(elem) {
	          return rheader.test(elem.nodeName);
	        },
	        "input": function(elem) {
	          return rinputs.test(elem.nodeName);
	        },
	        "button": function(elem) {
	          var name = elem.nodeName.toLowerCase();
	          return name === "input" && elem.type === "button" || name === "button";
	        },
	        "text": function(elem) {
	          var attr;
	          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
	        },
	        "first": createPositionalPseudo(function() {
	          return [0];
	        }),
	        "last": createPositionalPseudo(function(matchIndexes, length) {
	          return [length - 1];
	        }),
	        "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
	          return [argument < 0 ? argument + length : argument];
	        }),
	        "even": createPositionalPseudo(function(matchIndexes, length) {
	          var i = 0;
	          for (; i < length; i += 2) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        }),
	        "odd": createPositionalPseudo(function(matchIndexes, length) {
	          var i = 1;
	          for (; i < length; i += 2) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        }),
	        "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
	          var i = argument < 0 ? argument + length : argument;
	          for (; --i >= 0; ) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        }),
	        "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
	          var i = argument < 0 ? argument + length : argument;
	          for (; ++i < length; ) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        })
	      }
	    };
	    Expr.pseudos["nth"] = Expr.pseudos["eq"];
	    for (i in {
	      radio: true,
	      checkbox: true,
	      file: true,
	      password: true,
	      image: true
	    }) {
	      Expr.pseudos[i] = createInputPseudo(i);
	    }
	    for (i in {
	      submit: true,
	      reset: true
	    }) {
	      Expr.pseudos[i] = createButtonPseudo(i);
	    }
	    function setFilters() {}
	    setFilters.prototype = Expr.filters = Expr.pseudos;
	    Expr.setFilters = new setFilters();
	    tokenize = Sizzle.tokenize = function(selector, parseOnly) {
	      var matched,
	          match,
	          tokens,
	          type,
	          soFar,
	          groups,
	          preFilters,
	          cached = tokenCache[selector + " "];
	      if (cached) {
	        return parseOnly ? 0 : cached.slice(0);
	      }
	      soFar = selector;
	      groups = [];
	      preFilters = Expr.preFilter;
	      while (soFar) {
	        if (!matched || (match = rcomma.exec(soFar))) {
	          if (match) {
	            soFar = soFar.slice(match[0].length) || soFar;
	          }
	          groups.push((tokens = []));
	        }
	        matched = false;
	        if ((match = rcombinators.exec(soFar))) {
	          matched = match.shift();
	          tokens.push({
	            value: matched,
	            type: match[0].replace(rtrim, " ")
	          });
	          soFar = soFar.slice(matched.length);
	        }
	        for (type in Expr.filter) {
	          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
	            matched = match.shift();
	            tokens.push({
	              value: matched,
	              type: type,
	              matches: match
	            });
	            soFar = soFar.slice(matched.length);
	          }
	        }
	        if (!matched) {
	          break;
	        }
	      }
	      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
	    };
	    function toSelector(tokens) {
	      var i = 0,
	          len = tokens.length,
	          selector = "";
	      for (; i < len; i++) {
	        selector += tokens[i].value;
	      }
	      return selector;
	    }
	    function addCombinator(matcher, combinator, base) {
	      var dir = combinator.dir,
	          checkNonElements = base && dir === "parentNode",
	          doneName = done++;
	      return combinator.first ? function(elem, context, xml) {
	        while ((elem = elem[dir])) {
	          if (elem.nodeType === 1 || checkNonElements) {
	            return matcher(elem, context, xml);
	          }
	        }
	      } : function(elem, context, xml) {
	        var oldCache,
	            outerCache,
	            newCache = [dirruns, doneName];
	        if (xml) {
	          while ((elem = elem[dir])) {
	            if (elem.nodeType === 1 || checkNonElements) {
	              if (matcher(elem, context, xml)) {
	                return true;
	              }
	            }
	          }
	        } else {
	          while ((elem = elem[dir])) {
	            if (elem.nodeType === 1 || checkNonElements) {
	              outerCache = elem[expando] || (elem[expando] = {});
	              if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
	                return (newCache[2] = oldCache[2]);
	              } else {
	                outerCache[dir] = newCache;
	                if ((newCache[2] = matcher(elem, context, xml))) {
	                  return true;
	                }
	              }
	            }
	          }
	        }
	      };
	    }
	    function elementMatcher(matchers) {
	      return matchers.length > 1 ? function(elem, context, xml) {
	        var i = matchers.length;
	        while (i--) {
	          if (!matchers[i](elem, context, xml)) {
	            return false;
	          }
	        }
	        return true;
	      } : matchers[0];
	    }
	    function multipleContexts(selector, contexts, results) {
	      var i = 0,
	          len = contexts.length;
	      for (; i < len; i++) {
	        Sizzle(selector, contexts[i], results);
	      }
	      return results;
	    }
	    function condense(unmatched, map, filter, context, xml) {
	      var elem,
	          newUnmatched = [],
	          i = 0,
	          len = unmatched.length,
	          mapped = map != null;
	      for (; i < len; i++) {
	        if ((elem = unmatched[i])) {
	          if (!filter || filter(elem, context, xml)) {
	            newUnmatched.push(elem);
	            if (mapped) {
	              map.push(i);
	            }
	          }
	        }
	      }
	      return newUnmatched;
	    }
	    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
	      if (postFilter && !postFilter[expando]) {
	        postFilter = setMatcher(postFilter);
	      }
	      if (postFinder && !postFinder[expando]) {
	        postFinder = setMatcher(postFinder, postSelector);
	      }
	      return markFunction(function(seed, results, context, xml) {
	        var temp,
	            i,
	            elem,
	            preMap = [],
	            postMap = [],
	            preexisting = results.length,
	            elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
	            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
	            matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
	        if (matcher) {
	          matcher(matcherIn, matcherOut, context, xml);
	        }
	        if (postFilter) {
	          temp = condense(matcherOut, postMap);
	          postFilter(temp, [], context, xml);
	          i = temp.length;
	          while (i--) {
	            if ((elem = temp[i])) {
	              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
	            }
	          }
	        }
	        if (seed) {
	          if (postFinder || preFilter) {
	            if (postFinder) {
	              temp = [];
	              i = matcherOut.length;
	              while (i--) {
	                if ((elem = matcherOut[i])) {
	                  temp.push((matcherIn[i] = elem));
	                }
	              }
	              postFinder(null, (matcherOut = []), temp, xml);
	            }
	            i = matcherOut.length;
	            while (i--) {
	              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
	                seed[temp] = !(results[temp] = elem);
	              }
	            }
	          }
	        } else {
	          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
	          if (postFinder) {
	            postFinder(null, results, matcherOut, xml);
	          } else {
	            push.apply(results, matcherOut);
	          }
	        }
	      });
	    }
	    function matcherFromTokens(tokens) {
	      var checkContext,
	          matcher,
	          j,
	          len = tokens.length,
	          leadingRelative = Expr.relative[tokens[0].type],
	          implicitRelative = leadingRelative || Expr.relative[" "],
	          i = leadingRelative ? 1 : 0,
	          matchContext = addCombinator(function(elem) {
	            return elem === checkContext;
	          }, implicitRelative, true),
	          matchAnyContext = addCombinator(function(elem) {
	            return indexOf(checkContext, elem) > -1;
	          }, implicitRelative, true),
	          matchers = [function(elem, context, xml) {
	            var ret = (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
	            checkContext = null;
	            return ret;
	          }];
	      for (; i < len; i++) {
	        if ((matcher = Expr.relative[tokens[i].type])) {
	          matchers = [addCombinator(elementMatcher(matchers), matcher)];
	        } else {
	          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
	          if (matcher[expando]) {
	            j = ++i;
	            for (; j < len; j++) {
	              if (Expr.relative[tokens[j].type]) {
	                break;
	              }
	            }
	            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({value: tokens[i - 2].type === " " ? "*" : ""})).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(tokens));
	          }
	          matchers.push(matcher);
	        }
	      }
	      return elementMatcher(matchers);
	    }
	    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
	      var bySet = setMatchers.length > 0,
	          byElement = elementMatchers.length > 0,
	          superMatcher = function(seed, context, xml, results, outermost) {
	            var elem,
	                j,
	                matcher,
	                matchedCount = 0,
	                i = "0",
	                unmatched = seed && [],
	                setMatched = [],
	                contextBackup = outermostContext,
	                elems = seed || byElement && Expr.find["TAG"]("*", outermost),
	                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
	                len = elems.length;
	            if (outermost) {
	              outermostContext = context !== document && context;
	            }
	            for (; i !== len && (elem = elems[i]) != null; i++) {
	              if (byElement && elem) {
	                j = 0;
	                while ((matcher = elementMatchers[j++])) {
	                  if (matcher(elem, context, xml)) {
	                    results.push(elem);
	                    break;
	                  }
	                }
	                if (outermost) {
	                  dirruns = dirrunsUnique;
	                }
	              }
	              if (bySet) {
	                if ((elem = !matcher && elem)) {
	                  matchedCount--;
	                }
	                if (seed) {
	                  unmatched.push(elem);
	                }
	              }
	            }
	            matchedCount += i;
	            if (bySet && i !== matchedCount) {
	              j = 0;
	              while ((matcher = setMatchers[j++])) {
	                matcher(unmatched, setMatched, context, xml);
	              }
	              if (seed) {
	                if (matchedCount > 0) {
	                  while (i--) {
	                    if (!(unmatched[i] || setMatched[i])) {
	                      setMatched[i] = pop.call(results);
	                    }
	                  }
	                }
	                setMatched = condense(setMatched);
	              }
	              push.apply(results, setMatched);
	              if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) {
	                Sizzle.uniqueSort(results);
	              }
	            }
	            if (outermost) {
	              dirruns = dirrunsUnique;
	              outermostContext = contextBackup;
	            }
	            return unmatched;
	          };
	      return bySet ? markFunction(superMatcher) : superMatcher;
	    }
	    compile = Sizzle.compile = function(selector, match) {
	      var i,
	          setMatchers = [],
	          elementMatchers = [],
	          cached = compilerCache[selector + " "];
	      if (!cached) {
	        if (!match) {
	          match = tokenize(selector);
	        }
	        i = match.length;
	        while (i--) {
	          cached = matcherFromTokens(match[i]);
	          if (cached[expando]) {
	            setMatchers.push(cached);
	          } else {
	            elementMatchers.push(cached);
	          }
	        }
	        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
	        cached.selector = selector;
	      }
	      return cached;
	    };
	    select = Sizzle.select = function(selector, context, results, seed) {
	      var i,
	          tokens,
	          token,
	          type,
	          find,
	          compiled = typeof selector === "function" && selector,
	          match = !seed && tokenize((selector = compiled.selector || selector));
	      results = results || [];
	      if (match.length === 1) {
	        tokens = match[0] = match[0].slice(0);
	        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
	          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
	          if (!context) {
	            return results;
	          } else if (compiled) {
	            context = context.parentNode;
	          }
	          selector = selector.slice(tokens.shift().value.length);
	        }
	        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
	        while (i--) {
	          token = tokens[i];
	          if (Expr.relative[(type = token.type)]) {
	            break;
	          }
	          if ((find = Expr.find[type])) {
	            if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
	              tokens.splice(i, 1);
	              selector = seed.length && toSelector(tokens);
	              if (!selector) {
	                push.apply(results, seed);
	                return results;
	              }
	              break;
	            }
	          }
	        }
	      }
	      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
	      return results;
	    };
	    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
	    support.detectDuplicates = !!hasDuplicate;
	    setDocument();
	    support.sortDetached = assert(function(div1) {
	      return div1.compareDocumentPosition(document.createElement("div")) & 1;
	    });
	    if (!assert(function(div) {
	      div.innerHTML = "<a href='#'></a>";
	      return div.firstChild.getAttribute("href") === "#";
	    })) {
	      addHandle("type|href|height|width", function(elem, name, isXML) {
	        if (!isXML) {
	          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
	        }
	      });
	    }
	    if (!support.attributes || !assert(function(div) {
	      div.innerHTML = "<input/>";
	      div.firstChild.setAttribute("value", "");
	      return div.firstChild.getAttribute("value") === "";
	    })) {
	      addHandle("value", function(elem, name, isXML) {
	        if (!isXML && elem.nodeName.toLowerCase() === "input") {
	          return elem.defaultValue;
	        }
	      });
	    }
	    if (!assert(function(div) {
	      return div.getAttribute("disabled") == null;
	    })) {
	      addHandle(booleans, function(elem, name, isXML) {
	        var val;
	        if (!isXML) {
	          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
	        }
	      });
	    }
	    return Sizzle;
	  })(window);
	  jQuery.find = Sizzle;
	  jQuery.expr = Sizzle.selectors;
	  jQuery.expr[":"] = jQuery.expr.pseudos;
	  jQuery.unique = Sizzle.uniqueSort;
	  jQuery.text = Sizzle.getText;
	  jQuery.isXMLDoc = Sizzle.isXML;
	  jQuery.contains = Sizzle.contains;
	  var rneedsContext = jQuery.expr.match.needsContext;
	  var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);
	  var risSimple = /^.[^:#\[\.,]*$/;
	  function winnow(elements, qualifier, not) {
	    if (jQuery.isFunction(qualifier)) {
	      return jQuery.grep(elements, function(elem, i) {
	        return !!qualifier.call(elem, i, elem) !== not;
	      });
	    }
	    if (qualifier.nodeType) {
	      return jQuery.grep(elements, function(elem) {
	        return (elem === qualifier) !== not;
	      });
	    }
	    if (typeof qualifier === "string") {
	      if (risSimple.test(qualifier)) {
	        return jQuery.filter(qualifier, elements, not);
	      }
	      qualifier = jQuery.filter(qualifier, elements);
	    }
	    return jQuery.grep(elements, function(elem) {
	      return (indexOf.call(qualifier, elem) >= 0) !== not;
	    });
	  }
	  jQuery.filter = function(expr, elems, not) {
	    var elem = elems[0];
	    if (not) {
	      expr = ":not(" + expr + ")";
	    }
	    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
	      return elem.nodeType === 1;
	    }));
	  };
	  jQuery.fn.extend({
	    find: function(selector) {
	      var i,
	          len = this.length,
	          ret = [],
	          self = this;
	      if (typeof selector !== "string") {
	        return this.pushStack(jQuery(selector).filter(function() {
	          for (i = 0; i < len; i++) {
	            if (jQuery.contains(self[i], this)) {
	              return true;
	            }
	          }
	        }));
	      }
	      for (i = 0; i < len; i++) {
	        jQuery.find(selector, self[i], ret);
	      }
	      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
	      ret.selector = this.selector ? this.selector + " " + selector : selector;
	      return ret;
	    },
	    filter: function(selector) {
	      return this.pushStack(winnow(this, selector || [], false));
	    },
	    not: function(selector) {
	      return this.pushStack(winnow(this, selector || [], true));
	    },
	    is: function(selector) {
	      return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
	    }
	  });
	  var rootjQuery,
	      rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	      init = jQuery.fn.init = function(selector, context) {
	        var match,
	            elem;
	        if (!selector) {
	          return this;
	        }
	        if (typeof selector === "string") {
	          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
	            match = [null, selector, null];
	          } else {
	            match = rquickExpr.exec(selector);
	          }
	          if (match && (match[1] || !context)) {
	            if (match[1]) {
	              context = context instanceof jQuery ? context[0] : context;
	              jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
	              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
	                for (match in context) {
	                  if (jQuery.isFunction(this[match])) {
	                    this[match](context[match]);
	                  } else {
	                    this.attr(match, context[match]);
	                  }
	                }
	              }
	              return this;
	            } else {
	              elem = document.getElementById(match[2]);
	              if (elem && elem.parentNode) {
	                this.length = 1;
	                this[0] = elem;
	              }
	              this.context = document;
	              this.selector = selector;
	              return this;
	            }
	          } else if (!context || context.jquery) {
	            return (context || rootjQuery).find(selector);
	          } else {
	            return this.constructor(context).find(selector);
	          }
	        } else if (selector.nodeType) {
	          this.context = this[0] = selector;
	          this.length = 1;
	          return this;
	        } else if (jQuery.isFunction(selector)) {
	          return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
	        }
	        if (selector.selector !== undefined) {
	          this.selector = selector.selector;
	          this.context = selector.context;
	        }
	        return jQuery.makeArray(selector, this);
	      };
	  init.prototype = jQuery.fn;
	  rootjQuery = jQuery(document);
	  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	      guaranteedUnique = {
	        children: true,
	        contents: true,
	        next: true,
	        prev: true
	      };
	  jQuery.extend({
	    dir: function(elem, dir, until) {
	      var matched = [],
	          truncate = until !== undefined;
	      while ((elem = elem[dir]) && elem.nodeType !== 9) {
	        if (elem.nodeType === 1) {
	          if (truncate && jQuery(elem).is(until)) {
	            break;
	          }
	          matched.push(elem);
	        }
	      }
	      return matched;
	    },
	    sibling: function(n, elem) {
	      var matched = [];
	      for (; n; n = n.nextSibling) {
	        if (n.nodeType === 1 && n !== elem) {
	          matched.push(n);
	        }
	      }
	      return matched;
	    }
	  });
	  jQuery.fn.extend({
	    has: function(target) {
	      var targets = jQuery(target, this),
	          l = targets.length;
	      return this.filter(function() {
	        var i = 0;
	        for (; i < l; i++) {
	          if (jQuery.contains(this, targets[i])) {
	            return true;
	          }
	        }
	      });
	    },
	    closest: function(selectors, context) {
	      var cur,
	          i = 0,
	          l = this.length,
	          matched = [],
	          pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
	      for (; i < l; i++) {
	        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
	          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
	            matched.push(cur);
	            break;
	          }
	        }
	      }
	      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
	    },
	    index: function(elem) {
	      if (!elem) {
	        return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
	      }
	      if (typeof elem === "string") {
	        return indexOf.call(jQuery(elem), this[0]);
	      }
	      return indexOf.call(this, elem.jquery ? elem[0] : elem);
	    },
	    add: function(selector, context) {
	      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
	    },
	    addBack: function(selector) {
	      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
	    }
	  });
	  function sibling(cur, dir) {
	    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
	    return cur;
	  }
	  jQuery.each({
	    parent: function(elem) {
	      var parent = elem.parentNode;
	      return parent && parent.nodeType !== 11 ? parent : null;
	    },
	    parents: function(elem) {
	      return jQuery.dir(elem, "parentNode");
	    },
	    parentsUntil: function(elem, i, until) {
	      return jQuery.dir(elem, "parentNode", until);
	    },
	    next: function(elem) {
	      return sibling(elem, "nextSibling");
	    },
	    prev: function(elem) {
	      return sibling(elem, "previousSibling");
	    },
	    nextAll: function(elem) {
	      return jQuery.dir(elem, "nextSibling");
	    },
	    prevAll: function(elem) {
	      return jQuery.dir(elem, "previousSibling");
	    },
	    nextUntil: function(elem, i, until) {
	      return jQuery.dir(elem, "nextSibling", until);
	    },
	    prevUntil: function(elem, i, until) {
	      return jQuery.dir(elem, "previousSibling", until);
	    },
	    siblings: function(elem) {
	      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
	    },
	    children: function(elem) {
	      return jQuery.sibling(elem.firstChild);
	    },
	    contents: function(elem) {
	      return elem.contentDocument || jQuery.merge([], elem.childNodes);
	    }
	  }, function(name, fn) {
	    jQuery.fn[name] = function(until, selector) {
	      var matched = jQuery.map(this, fn, until);
	      if (name.slice(-5) !== "Until") {
	        selector = until;
	      }
	      if (selector && typeof selector === "string") {
	        matched = jQuery.filter(selector, matched);
	      }
	      if (this.length > 1) {
	        if (!guaranteedUnique[name]) {
	          jQuery.unique(matched);
	        }
	        if (rparentsprev.test(name)) {
	          matched.reverse();
	        }
	      }
	      return this.pushStack(matched);
	    };
	  });
	  var rnotwhite = (/\S+/g);
	  var optionsCache = {};
	  function createOptions(options) {
	    var object = optionsCache[options] = {};
	    jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
	      object[flag] = true;
	    });
	    return object;
	  }
	  jQuery.Callbacks = function(options) {
	    options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({}, options);
	    var memory,
	        fired,
	        firing,
	        firingStart,
	        firingLength,
	        firingIndex,
	        list = [],
	        stack = !options.once && [],
	        fire = function(data) {
	          memory = options.memory && data;
	          fired = true;
	          firingIndex = firingStart || 0;
	          firingStart = 0;
	          firingLength = list.length;
	          firing = true;
	          for (; list && firingIndex < firingLength; firingIndex++) {
	            if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
	              memory = false;
	              break;
	            }
	          }
	          firing = false;
	          if (list) {
	            if (stack) {
	              if (stack.length) {
	                fire(stack.shift());
	              }
	            } else if (memory) {
	              list = [];
	            } else {
	              self.disable();
	            }
	          }
	        },
	        self = {
	          add: function() {
	            if (list) {
	              var start = list.length;
	              (function add(args) {
	                jQuery.each(args, function(_, arg) {
	                  var type = jQuery.type(arg);
	                  if (type === "function") {
	                    if (!options.unique || !self.has(arg)) {
	                      list.push(arg);
	                    }
	                  } else if (arg && arg.length && type !== "string") {
	                    add(arg);
	                  }
	                });
	              })(arguments);
	              if (firing) {
	                firingLength = list.length;
	              } else if (memory) {
	                firingStart = start;
	                fire(memory);
	              }
	            }
	            return this;
	          },
	          remove: function() {
	            if (list) {
	              jQuery.each(arguments, function(_, arg) {
	                var index;
	                while ((index = jQuery.inArray(arg, list, index)) > -1) {
	                  list.splice(index, 1);
	                  if (firing) {
	                    if (index <= firingLength) {
	                      firingLength--;
	                    }
	                    if (index <= firingIndex) {
	                      firingIndex--;
	                    }
	                  }
	                }
	              });
	            }
	            return this;
	          },
	          has: function(fn) {
	            return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
	          },
	          empty: function() {
	            list = [];
	            firingLength = 0;
	            return this;
	          },
	          disable: function() {
	            list = stack = memory = undefined;
	            return this;
	          },
	          disabled: function() {
	            return !list;
	          },
	          lock: function() {
	            stack = undefined;
	            if (!memory) {
	              self.disable();
	            }
	            return this;
	          },
	          locked: function() {
	            return !stack;
	          },
	          fireWith: function(context, args) {
	            if (list && (!fired || stack)) {
	              args = args || [];
	              args = [context, args.slice ? args.slice() : args];
	              if (firing) {
	                stack.push(args);
	              } else {
	                fire(args);
	              }
	            }
	            return this;
	          },
	          fire: function() {
	            self.fireWith(this, arguments);
	            return this;
	          },
	          fired: function() {
	            return !!fired;
	          }
	        };
	    return self;
	  };
	  jQuery.extend({
	    Deferred: function(func) {
	      var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
	          state = "pending",
	          promise = {
	            state: function() {
	              return state;
	            },
	            always: function() {
	              deferred.done(arguments).fail(arguments);
	              return this;
	            },
	            then: function() {
	              var fns = arguments;
	              return jQuery.Deferred(function(newDefer) {
	                jQuery.each(tuples, function(i, tuple) {
	                  var fn = jQuery.isFunction(fns[i]) && fns[i];
	                  deferred[tuple[1]](function() {
	                    var returned = fn && fn.apply(this, arguments);
	                    if (returned && jQuery.isFunction(returned.promise)) {
	                      returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
	                    } else {
	                      newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
	                    }
	                  });
	                });
	                fns = null;
	              }).promise();
	            },
	            promise: function(obj) {
	              return obj != null ? jQuery.extend(obj, promise) : promise;
	            }
	          },
	          deferred = {};
	      promise.pipe = promise.then;
	      jQuery.each(tuples, function(i, tuple) {
	        var list = tuple[2],
	            stateString = tuple[3];
	        promise[tuple[1]] = list.add;
	        if (stateString) {
	          list.add(function() {
	            state = stateString;
	          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
	        }
	        deferred[tuple[0]] = function() {
	          deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
	          return this;
	        };
	        deferred[tuple[0] + "With"] = list.fireWith;
	      });
	      promise.promise(deferred);
	      if (func) {
	        func.call(deferred, deferred);
	      }
	      return deferred;
	    },
	    when: function(subordinate) {
	      var i = 0,
	          resolveValues = slice.call(arguments),
	          length = resolveValues.length,
	          remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,
	          deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	          updateFunc = function(i, contexts, values) {
	            return function(value) {
	              contexts[i] = this;
	              values[i] = arguments.length > 1 ? slice.call(arguments) : value;
	              if (values === progressValues) {
	                deferred.notifyWith(contexts, values);
	              } else if (!(--remaining)) {
	                deferred.resolveWith(contexts, values);
	              }
	            };
	          },
	          progressValues,
	          progressContexts,
	          resolveContexts;
	      if (length > 1) {
	        progressValues = new Array(length);
	        progressContexts = new Array(length);
	        resolveContexts = new Array(length);
	        for (; i < length; i++) {
	          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
	            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
	          } else {
	            --remaining;
	          }
	        }
	      }
	      if (!remaining) {
	        deferred.resolveWith(resolveContexts, resolveValues);
	      }
	      return deferred.promise();
	    }
	  });
	  var readyList;
	  jQuery.fn.ready = function(fn) {
	    jQuery.ready.promise().done(fn);
	    return this;
	  };
	  jQuery.extend({
	    isReady: false,
	    readyWait: 1,
	    holdReady: function(hold) {
	      if (hold) {
	        jQuery.readyWait++;
	      } else {
	        jQuery.ready(true);
	      }
	    },
	    ready: function(wait) {
	      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
	        return;
	      }
	      jQuery.isReady = true;
	      if (wait !== true && --jQuery.readyWait > 0) {
	        return;
	      }
	      readyList.resolveWith(document, [jQuery]);
	      if (jQuery.fn.triggerHandler) {
	        jQuery(document).triggerHandler("ready");
	        jQuery(document).off("ready");
	      }
	    }
	  });
	  function completed() {
	    document.removeEventListener("DOMContentLoaded", completed, false);
	    window.removeEventListener("load", completed, false);
	    jQuery.ready();
	  }
	  jQuery.ready.promise = function(obj) {
	    if (!readyList) {
	      readyList = jQuery.Deferred();
	      if (document.readyState === "complete") {
	        setTimeout(jQuery.ready);
	      } else {
	        document.addEventListener("DOMContentLoaded", completed, false);
	        window.addEventListener("load", completed, false);
	      }
	    }
	    return readyList.promise(obj);
	  };
	  jQuery.ready.promise();
	  var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
	    var i = 0,
	        len = elems.length,
	        bulk = key == null;
	    if (jQuery.type(key) === "object") {
	      chainable = true;
	      for (i in key) {
	        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
	      }
	    } else if (value !== undefined) {
	      chainable = true;
	      if (!jQuery.isFunction(value)) {
	        raw = true;
	      }
	      if (bulk) {
	        if (raw) {
	          fn.call(elems, value);
	          fn = null;
	        } else {
	          bulk = fn;
	          fn = function(elem, key, value) {
	            return bulk.call(jQuery(elem), value);
	          };
	        }
	      }
	      if (fn) {
	        for (; i < len; i++) {
	          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
	        }
	      }
	    }
	    return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
	  };
	  jQuery.acceptData = function(owner) {
	    return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
	  };
	  function Data() {
	    Object.defineProperty(this.cache = {}, 0, {get: function() {
	        return {};
	      }});
	    this.expando = jQuery.expando + Data.uid++;
	  }
	  Data.uid = 1;
	  Data.accepts = jQuery.acceptData;
	  Data.prototype = {
	    key: function(owner) {
	      if (!Data.accepts(owner)) {
	        return 0;
	      }
	      var descriptor = {},
	          unlock = owner[this.expando];
	      if (!unlock) {
	        unlock = Data.uid++;
	        try {
	          descriptor[this.expando] = {value: unlock};
	          Object.defineProperties(owner, descriptor);
	        } catch (e) {
	          descriptor[this.expando] = unlock;
	          jQuery.extend(owner, descriptor);
	        }
	      }
	      if (!this.cache[unlock]) {
	        this.cache[unlock] = {};
	      }
	      return unlock;
	    },
	    set: function(owner, data, value) {
	      var prop,
	          unlock = this.key(owner),
	          cache = this.cache[unlock];
	      if (typeof data === "string") {
	        cache[data] = value;
	      } else {
	        if (jQuery.isEmptyObject(cache)) {
	          jQuery.extend(this.cache[unlock], data);
	        } else {
	          for (prop in data) {
	            cache[prop] = data[prop];
	          }
	        }
	      }
	      return cache;
	    },
	    get: function(owner, key) {
	      var cache = this.cache[this.key(owner)];
	      return key === undefined ? cache : cache[key];
	    },
	    access: function(owner, key, value) {
	      var stored;
	      if (key === undefined || ((key && typeof key === "string") && value === undefined)) {
	        stored = this.get(owner, key);
	        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
	      }
	      this.set(owner, key, value);
	      return value !== undefined ? value : key;
	    },
	    remove: function(owner, key) {
	      var i,
	          name,
	          camel,
	          unlock = this.key(owner),
	          cache = this.cache[unlock];
	      if (key === undefined) {
	        this.cache[unlock] = {};
	      } else {
	        if (jQuery.isArray(key)) {
	          name = key.concat(key.map(jQuery.camelCase));
	        } else {
	          camel = jQuery.camelCase(key);
	          if (key in cache) {
	            name = [key, camel];
	          } else {
	            name = camel;
	            name = name in cache ? [name] : (name.match(rnotwhite) || []);
	          }
	        }
	        i = name.length;
	        while (i--) {
	          delete cache[name[i]];
	        }
	      }
	    },
	    hasData: function(owner) {
	      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
	    },
	    discard: function(owner) {
	      if (owner[this.expando]) {
	        delete this.cache[owner[this.expando]];
	      }
	    }
	  };
	  var data_priv = new Data();
	  var data_user = new Data();
	  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	      rmultiDash = /([A-Z])/g;
	  function dataAttr(elem, key, data) {
	    var name;
	    if (data === undefined && elem.nodeType === 1) {
	      name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
	      data = elem.getAttribute(name);
	      if (typeof data === "string") {
	        try {
	          data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
	        } catch (e) {}
	        data_user.set(elem, key, data);
	      } else {
	        data = undefined;
	      }
	    }
	    return data;
	  }
	  jQuery.extend({
	    hasData: function(elem) {
	      return data_user.hasData(elem) || data_priv.hasData(elem);
	    },
	    data: function(elem, name, data) {
	      return data_user.access(elem, name, data);
	    },
	    removeData: function(elem, name) {
	      data_user.remove(elem, name);
	    },
	    _data: function(elem, name, data) {
	      return data_priv.access(elem, name, data);
	    },
	    _removeData: function(elem, name) {
	      data_priv.remove(elem, name);
	    }
	  });
	  jQuery.fn.extend({
	    data: function(key, value) {
	      var i,
	          name,
	          data,
	          elem = this[0],
	          attrs = elem && elem.attributes;
	      if (key === undefined) {
	        if (this.length) {
	          data = data_user.get(elem);
	          if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
	            i = attrs.length;
	            while (i--) {
	              if (attrs[i]) {
	                name = attrs[i].name;
	                if (name.indexOf("data-") === 0) {
	                  name = jQuery.camelCase(name.slice(5));
	                  dataAttr(elem, name, data[name]);
	                }
	              }
	            }
	            data_priv.set(elem, "hasDataAttrs", true);
	          }
	        }
	        return data;
	      }
	      if (typeof key === "object") {
	        return this.each(function() {
	          data_user.set(this, key);
	        });
	      }
	      return access(this, function(value) {
	        var data,
	            camelKey = jQuery.camelCase(key);
	        if (elem && value === undefined) {
	          data = data_user.get(elem, key);
	          if (data !== undefined) {
	            return data;
	          }
	          data = data_user.get(elem, camelKey);
	          if (data !== undefined) {
	            return data;
	          }
	          data = dataAttr(elem, camelKey, undefined);
	          if (data !== undefined) {
	            return data;
	          }
	          return;
	        }
	        this.each(function() {
	          var data = data_user.get(this, camelKey);
	          data_user.set(this, camelKey, value);
	          if (key.indexOf("-") !== -1 && data !== undefined) {
	            data_user.set(this, key, value);
	          }
	        });
	      }, null, value, arguments.length > 1, null, true);
	    },
	    removeData: function(key) {
	      return this.each(function() {
	        data_user.remove(this, key);
	      });
	    }
	  });
	  jQuery.extend({
	    queue: function(elem, type, data) {
	      var queue;
	      if (elem) {
	        type = (type || "fx") + "queue";
	        queue = data_priv.get(elem, type);
	        if (data) {
	          if (!queue || jQuery.isArray(data)) {
	            queue = data_priv.access(elem, type, jQuery.makeArray(data));
	          } else {
	            queue.push(data);
	          }
	        }
	        return queue || [];
	      }
	    },
	    dequeue: function(elem, type) {
	      type = type || "fx";
	      var queue = jQuery.queue(elem, type),
	          startLength = queue.length,
	          fn = queue.shift(),
	          hooks = jQuery._queueHooks(elem, type),
	          next = function() {
	            jQuery.dequeue(elem, type);
	          };
	      if (fn === "inprogress") {
	        fn = queue.shift();
	        startLength--;
	      }
	      if (fn) {
	        if (type === "fx") {
	          queue.unshift("inprogress");
	        }
	        delete hooks.stop;
	        fn.call(elem, next, hooks);
	      }
	      if (!startLength && hooks) {
	        hooks.empty.fire();
	      }
	    },
	    _queueHooks: function(elem, type) {
	      var key = type + "queueHooks";
	      return data_priv.get(elem, key) || data_priv.access(elem, key, {empty: jQuery.Callbacks("once memory").add(function() {
	          data_priv.remove(elem, [type + "queue", key]);
	        })});
	    }
	  });
	  jQuery.fn.extend({
	    queue: function(type, data) {
	      var setter = 2;
	      if (typeof type !== "string") {
	        data = type;
	        type = "fx";
	        setter--;
	      }
	      if (arguments.length < setter) {
	        return jQuery.queue(this[0], type);
	      }
	      return data === undefined ? this : this.each(function() {
	        var queue = jQuery.queue(this, type, data);
	        jQuery._queueHooks(this, type);
	        if (type === "fx" && queue[0] !== "inprogress") {
	          jQuery.dequeue(this, type);
	        }
	      });
	    },
	    dequeue: function(type) {
	      return this.each(function() {
	        jQuery.dequeue(this, type);
	      });
	    },
	    clearQueue: function(type) {
	      return this.queue(type || "fx", []);
	    },
	    promise: function(type, obj) {
	      var tmp,
	          count = 1,
	          defer = jQuery.Deferred(),
	          elements = this,
	          i = this.length,
	          resolve = function() {
	            if (!(--count)) {
	              defer.resolveWith(elements, [elements]);
	            }
	          };
	      if (typeof type !== "string") {
	        obj = type;
	        type = undefined;
	      }
	      type = type || "fx";
	      while (i--) {
	        tmp = data_priv.get(elements[i], type + "queueHooks");
	        if (tmp && tmp.empty) {
	          count++;
	          tmp.empty.add(resolve);
	        }
	      }
	      resolve();
	      return defer.promise(obj);
	    }
	  });
	  var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;
	  var cssExpand = ["Top", "Right", "Bottom", "Left"];
	  var isHidden = function(elem, el) {
	    elem = el || elem;
	    return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	  };
	  var rcheckableType = (/^(?:checkbox|radio)$/i);
	  (function() {
	    var fragment = document.createDocumentFragment(),
	        div = fragment.appendChild(document.createElement("div")),
	        input = document.createElement("input");
	    input.setAttribute("type", "radio");
	    input.setAttribute("checked", "checked");
	    input.setAttribute("name", "t");
	    div.appendChild(input);
	    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
	    div.innerHTML = "<textarea>x</textarea>";
	    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	  })();
	  var strundefined = typeof undefined;
	  support.focusinBubbles = "onfocusin" in window;
	  var rkeyEvent = /^key/,
	      rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	      rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	      rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
	  function returnTrue() {
	    return true;
	  }
	  function returnFalse() {
	    return false;
	  }
	  function safeActiveElement() {
	    try {
	      return document.activeElement;
	    } catch (err) {}
	  }
	  jQuery.event = {
	    global: {},
	    add: function(elem, types, handler, data, selector) {
	      var handleObjIn,
	          eventHandle,
	          tmp,
	          events,
	          t,
	          handleObj,
	          special,
	          handlers,
	          type,
	          namespaces,
	          origType,
	          elemData = data_priv.get(elem);
	      if (!elemData) {
	        return;
	      }
	      if (handler.handler) {
	        handleObjIn = handler;
	        handler = handleObjIn.handler;
	        selector = handleObjIn.selector;
	      }
	      if (!handler.guid) {
	        handler.guid = jQuery.guid++;
	      }
	      if (!(events = elemData.events)) {
	        events = elemData.events = {};
	      }
	      if (!(eventHandle = elemData.handle)) {
	        eventHandle = elemData.handle = function(e) {
	          return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
	        };
	      }
	      types = (types || "").match(rnotwhite) || [""];
	      t = types.length;
	      while (t--) {
	        tmp = rtypenamespace.exec(types[t]) || [];
	        type = origType = tmp[1];
	        namespaces = (tmp[2] || "").split(".").sort();
	        if (!type) {
	          continue;
	        }
	        special = jQuery.event.special[type] || {};
	        type = (selector ? special.delegateType : special.bindType) || type;
	        special = jQuery.event.special[type] || {};
	        handleObj = jQuery.extend({
	          type: type,
	          origType: origType,
	          data: data,
	          handler: handler,
	          guid: handler.guid,
	          selector: selector,
	          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
	          namespace: namespaces.join(".")
	        }, handleObjIn);
	        if (!(handlers = events[type])) {
	          handlers = events[type] = [];
	          handlers.delegateCount = 0;
	          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
	            if (elem.addEventListener) {
	              elem.addEventListener(type, eventHandle, false);
	            }
	          }
	        }
	        if (special.add) {
	          special.add.call(elem, handleObj);
	          if (!handleObj.handler.guid) {
	            handleObj.handler.guid = handler.guid;
	          }
	        }
	        if (selector) {
	          handlers.splice(handlers.delegateCount++, 0, handleObj);
	        } else {
	          handlers.push(handleObj);
	        }
	        jQuery.event.global[type] = true;
	      }
	    },
	    remove: function(elem, types, handler, selector, mappedTypes) {
	      var j,
	          origCount,
	          tmp,
	          events,
	          t,
	          handleObj,
	          special,
	          handlers,
	          type,
	          namespaces,
	          origType,
	          elemData = data_priv.hasData(elem) && data_priv.get(elem);
	      if (!elemData || !(events = elemData.events)) {
	        return;
	      }
	      types = (types || "").match(rnotwhite) || [""];
	      t = types.length;
	      while (t--) {
	        tmp = rtypenamespace.exec(types[t]) || [];
	        type = origType = tmp[1];
	        namespaces = (tmp[2] || "").split(".").sort();
	        if (!type) {
	          for (type in events) {
	            jQuery.event.remove(elem, type + types[t], handler, selector, true);
	          }
	          continue;
	        }
	        special = jQuery.event.special[type] || {};
	        type = (selector ? special.delegateType : special.bindType) || type;
	        handlers = events[type] || [];
	        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
	        origCount = j = handlers.length;
	        while (j--) {
	          handleObj = handlers[j];
	          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
	            handlers.splice(j, 1);
	            if (handleObj.selector) {
	              handlers.delegateCount--;
	            }
	            if (special.remove) {
	              special.remove.call(elem, handleObj);
	            }
	          }
	        }
	        if (origCount && !handlers.length) {
	          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
	            jQuery.removeEvent(elem, type, elemData.handle);
	          }
	          delete events[type];
	        }
	      }
	      if (jQuery.isEmptyObject(events)) {
	        delete elemData.handle;
	        data_priv.remove(elem, "events");
	      }
	    },
	    trigger: function(event, data, elem, onlyHandlers) {
	      var i,
	          cur,
	          tmp,
	          bubbleType,
	          ontype,
	          handle,
	          special,
	          eventPath = [elem || document],
	          type = hasOwn.call(event, "type") ? event.type : event,
	          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
	      cur = tmp = elem = elem || document;
	      if (elem.nodeType === 3 || elem.nodeType === 8) {
	        return;
	      }
	      if (rfocusMorph.test(type + jQuery.event.triggered)) {
	        return;
	      }
	      if (type.indexOf(".") >= 0) {
	        namespaces = type.split(".");
	        type = namespaces.shift();
	        namespaces.sort();
	      }
	      ontype = type.indexOf(":") < 0 && "on" + type;
	      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
	      event.isTrigger = onlyHandlers ? 2 : 3;
	      event.namespace = namespaces.join(".");
	      event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
	      event.result = undefined;
	      if (!event.target) {
	        event.target = elem;
	      }
	      data = data == null ? [event] : jQuery.makeArray(data, [event]);
	      special = jQuery.event.special[type] || {};
	      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
	        return;
	      }
	      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
	        bubbleType = special.delegateType || type;
	        if (!rfocusMorph.test(bubbleType + type)) {
	          cur = cur.parentNode;
	        }
	        for (; cur; cur = cur.parentNode) {
	          eventPath.push(cur);
	          tmp = cur;
	        }
	        if (tmp === (elem.ownerDocument || document)) {
	          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
	        }
	      }
	      i = 0;
	      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
	        event.type = i > 1 ? bubbleType : special.bindType || type;
	        handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
	        if (handle) {
	          handle.apply(cur, data);
	        }
	        handle = ontype && cur[ontype];
	        if (handle && handle.apply && jQuery.acceptData(cur)) {
	          event.result = handle.apply(cur, data);
	          if (event.result === false) {
	            event.preventDefault();
	          }
	        }
	      }
	      event.type = type;
	      if (!onlyHandlers && !event.isDefaultPrevented()) {
	        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
	          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
	            tmp = elem[ontype];
	            if (tmp) {
	              elem[ontype] = null;
	            }
	            jQuery.event.triggered = type;
	            elem[type]();
	            jQuery.event.triggered = undefined;
	            if (tmp) {
	              elem[ontype] = tmp;
	            }
	          }
	        }
	      }
	      return event.result;
	    },
	    dispatch: function(event) {
	      event = jQuery.event.fix(event);
	      var i,
	          j,
	          ret,
	          matched,
	          handleObj,
	          handlerQueue = [],
	          args = slice.call(arguments),
	          handlers = (data_priv.get(this, "events") || {})[event.type] || [],
	          special = jQuery.event.special[event.type] || {};
	      args[0] = event;
	      event.delegateTarget = this;
	      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
	        return;
	      }
	      handlerQueue = jQuery.event.handlers.call(this, event, handlers);
	      i = 0;
	      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
	        event.currentTarget = matched.elem;
	        j = 0;
	        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
	          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
	            event.handleObj = handleObj;
	            event.data = handleObj.data;
	            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
	            if (ret !== undefined) {
	              if ((event.result = ret) === false) {
	                event.preventDefault();
	                event.stopPropagation();
	              }
	            }
	          }
	        }
	      }
	      if (special.postDispatch) {
	        special.postDispatch.call(this, event);
	      }
	      return event.result;
	    },
	    handlers: function(event, handlers) {
	      var i,
	          matches,
	          sel,
	          handleObj,
	          handlerQueue = [],
	          delegateCount = handlers.delegateCount,
	          cur = event.target;
	      if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
	        for (; cur !== this; cur = cur.parentNode || this) {
	          if (cur.disabled !== true || event.type !== "click") {
	            matches = [];
	            for (i = 0; i < delegateCount; i++) {
	              handleObj = handlers[i];
	              sel = handleObj.selector + " ";
	              if (matches[sel] === undefined) {
	                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
	              }
	              if (matches[sel]) {
	                matches.push(handleObj);
	              }
	            }
	            if (matches.length) {
	              handlerQueue.push({
	                elem: cur,
	                handlers: matches
	              });
	            }
	          }
	        }
	      }
	      if (delegateCount < handlers.length) {
	        handlerQueue.push({
	          elem: this,
	          handlers: handlers.slice(delegateCount)
	        });
	      }
	      return handlerQueue;
	    },
	    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
	    fixHooks: {},
	    keyHooks: {
	      props: "char charCode key keyCode".split(" "),
	      filter: function(event, original) {
	        if (event.which == null) {
	          event.which = original.charCode != null ? original.charCode : original.keyCode;
	        }
	        return event;
	      }
	    },
	    mouseHooks: {
	      props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
	      filter: function(event, original) {
	        var eventDoc,
	            doc,
	            body,
	            button = original.button;
	        if (event.pageX == null && original.clientX != null) {
	          eventDoc = event.target.ownerDocument || document;
	          doc = eventDoc.documentElement;
	          body = eventDoc.body;
	          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	        }
	        if (!event.which && button !== undefined) {
	          event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
	        }
	        return event;
	      }
	    },
	    fix: function(event) {
	      if (event[jQuery.expando]) {
	        return event;
	      }
	      var i,
	          prop,
	          copy,
	          type = event.type,
	          originalEvent = event,
	          fixHook = this.fixHooks[type];
	      if (!fixHook) {
	        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
	      }
	      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
	      event = new jQuery.Event(originalEvent);
	      i = copy.length;
	      while (i--) {
	        prop = copy[i];
	        event[prop] = originalEvent[prop];
	      }
	      if (!event.target) {
	        event.target = document;
	      }
	      if (event.target.nodeType === 3) {
	        event.target = event.target.parentNode;
	      }
	      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
	    },
	    special: {
	      load: {noBubble: true},
	      focus: {
	        trigger: function() {
	          if (this !== safeActiveElement() && this.focus) {
	            this.focus();
	            return false;
	          }
	        },
	        delegateType: "focusin"
	      },
	      blur: {
	        trigger: function() {
	          if (this === safeActiveElement() && this.blur) {
	            this.blur();
	            return false;
	          }
	        },
	        delegateType: "focusout"
	      },
	      click: {
	        trigger: function() {
	          if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
	            this.click();
	            return false;
	          }
	        },
	        _default: function(event) {
	          return jQuery.nodeName(event.target, "a");
	        }
	      },
	      beforeunload: {postDispatch: function(event) {
	          if (event.result !== undefined && event.originalEvent) {
	            event.originalEvent.returnValue = event.result;
	          }
	        }}
	    },
	    simulate: function(type, elem, event, bubble) {
	      var e = jQuery.extend(new jQuery.Event(), event, {
	        type: type,
	        isSimulated: true,
	        originalEvent: {}
	      });
	      if (bubble) {
	        jQuery.event.trigger(e, null, elem);
	      } else {
	        jQuery.event.dispatch.call(elem, e);
	      }
	      if (e.isDefaultPrevented()) {
	        event.preventDefault();
	      }
	    }
	  };
	  jQuery.removeEvent = function(elem, type, handle) {
	    if (elem.removeEventListener) {
	      elem.removeEventListener(type, handle, false);
	    }
	  };
	  jQuery.Event = function(src, props) {
	    if (!(this instanceof jQuery.Event)) {
	      return new jQuery.Event(src, props);
	    }
	    if (src && src.type) {
	      this.originalEvent = src;
	      this.type = src.type;
	      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
	    } else {
	      this.type = src;
	    }
	    if (props) {
	      jQuery.extend(this, props);
	    }
	    this.timeStamp = src && src.timeStamp || jQuery.now();
	    this[jQuery.expando] = true;
	  };
	  jQuery.Event.prototype = {
	    isDefaultPrevented: returnFalse,
	    isPropagationStopped: returnFalse,
	    isImmediatePropagationStopped: returnFalse,
	    preventDefault: function() {
	      var e = this.originalEvent;
	      this.isDefaultPrevented = returnTrue;
	      if (e && e.preventDefault) {
	        e.preventDefault();
	      }
	    },
	    stopPropagation: function() {
	      var e = this.originalEvent;
	      this.isPropagationStopped = returnTrue;
	      if (e && e.stopPropagation) {
	        e.stopPropagation();
	      }
	    },
	    stopImmediatePropagation: function() {
	      var e = this.originalEvent;
	      this.isImmediatePropagationStopped = returnTrue;
	      if (e && e.stopImmediatePropagation) {
	        e.stopImmediatePropagation();
	      }
	      this.stopPropagation();
	    }
	  };
	  jQuery.each({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout",
	    pointerenter: "pointerover",
	    pointerleave: "pointerout"
	  }, function(orig, fix) {
	    jQuery.event.special[orig] = {
	      delegateType: fix,
	      bindType: fix,
	      handle: function(event) {
	        var ret,
	            target = this,
	            related = event.relatedTarget,
	            handleObj = event.handleObj;
	        if (!related || (related !== target && !jQuery.contains(target, related))) {
	          event.type = handleObj.origType;
	          ret = handleObj.handler.apply(this, arguments);
	          event.type = fix;
	        }
	        return ret;
	      }
	    };
	  });
	  if (!support.focusinBubbles) {
	    jQuery.each({
	      focus: "focusin",
	      blur: "focusout"
	    }, function(orig, fix) {
	      var handler = function(event) {
	        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
	      };
	      jQuery.event.special[fix] = {
	        setup: function() {
	          var doc = this.ownerDocument || this,
	              attaches = data_priv.access(doc, fix);
	          if (!attaches) {
	            doc.addEventListener(orig, handler, true);
	          }
	          data_priv.access(doc, fix, (attaches || 0) + 1);
	        },
	        teardown: function() {
	          var doc = this.ownerDocument || this,
	              attaches = data_priv.access(doc, fix) - 1;
	          if (!attaches) {
	            doc.removeEventListener(orig, handler, true);
	            data_priv.remove(doc, fix);
	          } else {
	            data_priv.access(doc, fix, attaches);
	          }
	        }
	      };
	    });
	  }
	  jQuery.fn.extend({
	    on: function(types, selector, data, fn, one) {
	      var origFn,
	          type;
	      if (typeof types === "object") {
	        if (typeof selector !== "string") {
	          data = data || selector;
	          selector = undefined;
	        }
	        for (type in types) {
	          this.on(type, selector, data, types[type], one);
	        }
	        return this;
	      }
	      if (data == null && fn == null) {
	        fn = selector;
	        data = selector = undefined;
	      } else if (fn == null) {
	        if (typeof selector === "string") {
	          fn = data;
	          data = undefined;
	        } else {
	          fn = data;
	          data = selector;
	          selector = undefined;
	        }
	      }
	      if (fn === false) {
	        fn = returnFalse;
	      } else if (!fn) {
	        return this;
	      }
	      if (one === 1) {
	        origFn = fn;
	        fn = function(event) {
	          jQuery().off(event);
	          return origFn.apply(this, arguments);
	        };
	        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
	      }
	      return this.each(function() {
	        jQuery.event.add(this, types, fn, data, selector);
	      });
	    },
	    one: function(types, selector, data, fn) {
	      return this.on(types, selector, data, fn, 1);
	    },
	    off: function(types, selector, fn) {
	      var handleObj,
	          type;
	      if (types && types.preventDefault && types.handleObj) {
	        handleObj = types.handleObj;
	        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
	        return this;
	      }
	      if (typeof types === "object") {
	        for (type in types) {
	          this.off(type, selector, types[type]);
	        }
	        return this;
	      }
	      if (selector === false || typeof selector === "function") {
	        fn = selector;
	        selector = undefined;
	      }
	      if (fn === false) {
	        fn = returnFalse;
	      }
	      return this.each(function() {
	        jQuery.event.remove(this, types, fn, selector);
	      });
	    },
	    trigger: function(type, data) {
	      return this.each(function() {
	        jQuery.event.trigger(type, data, this);
	      });
	    },
	    triggerHandler: function(type, data) {
	      var elem = this[0];
	      if (elem) {
	        return jQuery.event.trigger(type, data, elem, true);
	      }
	    }
	  });
	  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	      rtagName = /<([\w:]+)/,
	      rhtml = /<|&#?\w+;/,
	      rnoInnerhtml = /<(?:script|style|link)/i,
	      rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	      rscriptType = /^$|\/(?:java|ecma)script/i,
	      rscriptTypeMasked = /^true\/(.*)/,
	      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	      wrapMap = {
	        option: [1, "<select multiple='multiple'>", "</select>"],
	        thead: [1, "<table>", "</table>"],
	        col: [2, "<table><colgroup>", "</colgroup></table>"],
	        tr: [2, "<table><tbody>", "</tbody></table>"],
	        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
	        _default: [0, "", ""]
	      };
	  wrapMap.optgroup = wrapMap.option;
	  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	  wrapMap.th = wrapMap.td;
	  function manipulationTarget(elem, content) {
	    return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
	  }
	  function disableScript(elem) {
	    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	    return elem;
	  }
	  function restoreScript(elem) {
	    var match = rscriptTypeMasked.exec(elem.type);
	    if (match) {
	      elem.type = match[1];
	    } else {
	      elem.removeAttribute("type");
	    }
	    return elem;
	  }
	  function setGlobalEval(elems, refElements) {
	    var i = 0,
	        l = elems.length;
	    for (; i < l; i++) {
	      data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
	    }
	  }
	  function cloneCopyEvent(src, dest) {
	    var i,
	        l,
	        type,
	        pdataOld,
	        pdataCur,
	        udataOld,
	        udataCur,
	        events;
	    if (dest.nodeType !== 1) {
	      return;
	    }
	    if (data_priv.hasData(src)) {
	      pdataOld = data_priv.access(src);
	      pdataCur = data_priv.set(dest, pdataOld);
	      events = pdataOld.events;
	      if (events) {
	        delete pdataCur.handle;
	        pdataCur.events = {};
	        for (type in events) {
	          for (i = 0, l = events[type].length; i < l; i++) {
	            jQuery.event.add(dest, type, events[type][i]);
	          }
	        }
	      }
	    }
	    if (data_user.hasData(src)) {
	      udataOld = data_user.access(src);
	      udataCur = jQuery.extend({}, udataOld);
	      data_user.set(dest, udataCur);
	    }
	  }
	  function getAll(context, tag) {
	    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
	    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
	  }
	  function fixInput(src, dest) {
	    var nodeName = dest.nodeName.toLowerCase();
	    if (nodeName === "input" && rcheckableType.test(src.type)) {
	      dest.checked = src.checked;
	    } else if (nodeName === "input" || nodeName === "textarea") {
	      dest.defaultValue = src.defaultValue;
	    }
	  }
	  jQuery.extend({
	    clone: function(elem, dataAndEvents, deepDataAndEvents) {
	      var i,
	          l,
	          srcElements,
	          destElements,
	          clone = elem.cloneNode(true),
	          inPage = jQuery.contains(elem.ownerDocument, elem);
	      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
	        destElements = getAll(clone);
	        srcElements = getAll(elem);
	        for (i = 0, l = srcElements.length; i < l; i++) {
	          fixInput(srcElements[i], destElements[i]);
	        }
	      }
	      if (dataAndEvents) {
	        if (deepDataAndEvents) {
	          srcElements = srcElements || getAll(elem);
	          destElements = destElements || getAll(clone);
	          for (i = 0, l = srcElements.length; i < l; i++) {
	            cloneCopyEvent(srcElements[i], destElements[i]);
	          }
	        } else {
	          cloneCopyEvent(elem, clone);
	        }
	      }
	      destElements = getAll(clone, "script");
	      if (destElements.length > 0) {
	        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
	      }
	      return clone;
	    },
	    buildFragment: function(elems, context, scripts, selection) {
	      var elem,
	          tmp,
	          tag,
	          wrap,
	          contains,
	          j,
	          fragment = context.createDocumentFragment(),
	          nodes = [],
	          i = 0,
	          l = elems.length;
	      for (; i < l; i++) {
	        elem = elems[i];
	        if (elem || elem === 0) {
	          if (jQuery.type(elem) === "object") {
	            jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
	          } else if (!rhtml.test(elem)) {
	            nodes.push(context.createTextNode(elem));
	          } else {
	            tmp = tmp || fragment.appendChild(context.createElement("div"));
	            tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
	            wrap = wrapMap[tag] || wrapMap._default;
	            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
	            j = wrap[0];
	            while (j--) {
	              tmp = tmp.lastChild;
	            }
	            jQuery.merge(nodes, tmp.childNodes);
	            tmp = fragment.firstChild;
	            tmp.textContent = "";
	          }
	        }
	      }
	      fragment.textContent = "";
	      i = 0;
	      while ((elem = nodes[i++])) {
	        if (selection && jQuery.inArray(elem, selection) !== -1) {
	          continue;
	        }
	        contains = jQuery.contains(elem.ownerDocument, elem);
	        tmp = getAll(fragment.appendChild(elem), "script");
	        if (contains) {
	          setGlobalEval(tmp);
	        }
	        if (scripts) {
	          j = 0;
	          while ((elem = tmp[j++])) {
	            if (rscriptType.test(elem.type || "")) {
	              scripts.push(elem);
	            }
	          }
	        }
	      }
	      return fragment;
	    },
	    cleanData: function(elems) {
	      var data,
	          elem,
	          type,
	          key,
	          special = jQuery.event.special,
	          i = 0;
	      for (; (elem = elems[i]) !== undefined; i++) {
	        if (jQuery.acceptData(elem)) {
	          key = elem[data_priv.expando];
	          if (key && (data = data_priv.cache[key])) {
	            if (data.events) {
	              for (type in data.events) {
	                if (special[type]) {
	                  jQuery.event.remove(elem, type);
	                } else {
	                  jQuery.removeEvent(elem, type, data.handle);
	                }
	              }
	            }
	            if (data_priv.cache[key]) {
	              delete data_priv.cache[key];
	            }
	          }
	        }
	        delete data_user.cache[elem[data_user.expando]];
	      }
	    }
	  });
	  jQuery.fn.extend({
	    text: function(value) {
	      return access(this, function(value) {
	        return value === undefined ? jQuery.text(this) : this.empty().each(function() {
	          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	            this.textContent = value;
	          }
	        });
	      }, null, value, arguments.length);
	    },
	    append: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	          var target = manipulationTarget(this, elem);
	          target.appendChild(elem);
	        }
	      });
	    },
	    prepend: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	          var target = manipulationTarget(this, elem);
	          target.insertBefore(elem, target.firstChild);
	        }
	      });
	    },
	    before: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.parentNode) {
	          this.parentNode.insertBefore(elem, this);
	        }
	      });
	    },
	    after: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.parentNode) {
	          this.parentNode.insertBefore(elem, this.nextSibling);
	        }
	      });
	    },
	    remove: function(selector, keepData) {
	      var elem,
	          elems = selector ? jQuery.filter(selector, this) : this,
	          i = 0;
	      for (; (elem = elems[i]) != null; i++) {
	        if (!keepData && elem.nodeType === 1) {
	          jQuery.cleanData(getAll(elem));
	        }
	        if (elem.parentNode) {
	          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
	            setGlobalEval(getAll(elem, "script"));
	          }
	          elem.parentNode.removeChild(elem);
	        }
	      }
	      return this;
	    },
	    empty: function() {
	      var elem,
	          i = 0;
	      for (; (elem = this[i]) != null; i++) {
	        if (elem.nodeType === 1) {
	          jQuery.cleanData(getAll(elem, false));
	          elem.textContent = "";
	        }
	      }
	      return this;
	    },
	    clone: function(dataAndEvents, deepDataAndEvents) {
	      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
	      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	      return this.map(function() {
	        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
	      });
	    },
	    html: function(value) {
	      return access(this, function(value) {
	        var elem = this[0] || {},
	            i = 0,
	            l = this.length;
	        if (value === undefined && elem.nodeType === 1) {
	          return elem.innerHTML;
	        }
	        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
	          value = value.replace(rxhtmlTag, "<$1></$2>");
	          try {
	            for (; i < l; i++) {
	              elem = this[i] || {};
	              if (elem.nodeType === 1) {
	                jQuery.cleanData(getAll(elem, false));
	                elem.innerHTML = value;
	              }
	            }
	            elem = 0;
	          } catch (e) {}
	        }
	        if (elem) {
	          this.empty().append(value);
	        }
	      }, null, value, arguments.length);
	    },
	    replaceWith: function() {
	      var arg = arguments[0];
	      this.domManip(arguments, function(elem) {
	        arg = this.parentNode;
	        jQuery.cleanData(getAll(this));
	        if (arg) {
	          arg.replaceChild(elem, this);
	        }
	      });
	      return arg && (arg.length || arg.nodeType) ? this : this.remove();
	    },
	    detach: function(selector) {
	      return this.remove(selector, true);
	    },
	    domManip: function(args, callback) {
	      args = concat.apply([], args);
	      var fragment,
	          first,
	          scripts,
	          hasScripts,
	          node,
	          doc,
	          i = 0,
	          l = this.length,
	          set = this,
	          iNoClone = l - 1,
	          value = args[0],
	          isFunction = jQuery.isFunction(value);
	      if (isFunction || (l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value))) {
	        return this.each(function(index) {
	          var self = set.eq(index);
	          if (isFunction) {
	            args[0] = value.call(this, index, self.html());
	          }
	          self.domManip(args, callback);
	        });
	      }
	      if (l) {
	        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
	        first = fragment.firstChild;
	        if (fragment.childNodes.length === 1) {
	          fragment = first;
	        }
	        if (first) {
	          scripts = jQuery.map(getAll(fragment, "script"), disableScript);
	          hasScripts = scripts.length;
	          for (; i < l; i++) {
	            node = fragment;
	            if (i !== iNoClone) {
	              node = jQuery.clone(node, true, true);
	              if (hasScripts) {
	                jQuery.merge(scripts, getAll(node, "script"));
	              }
	            }
	            callback.call(this[i], node, i);
	          }
	          if (hasScripts) {
	            doc = scripts[scripts.length - 1].ownerDocument;
	            jQuery.map(scripts, restoreScript);
	            for (i = 0; i < hasScripts; i++) {
	              node = scripts[i];
	              if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
	                if (node.src) {
	                  if (jQuery._evalUrl) {
	                    jQuery._evalUrl(node.src);
	                  }
	                } else {
	                  jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
	                }
	              }
	            }
	          }
	        }
	      }
	      return this;
	    }
	  });
	  jQuery.each({
	    appendTo: "append",
	    prependTo: "prepend",
	    insertBefore: "before",
	    insertAfter: "after",
	    replaceAll: "replaceWith"
	  }, function(name, original) {
	    jQuery.fn[name] = function(selector) {
	      var elems,
	          ret = [],
	          insert = jQuery(selector),
	          last = insert.length - 1,
	          i = 0;
	      for (; i <= last; i++) {
	        elems = i === last ? this : this.clone(true);
	        jQuery(insert[i])[original](elems);
	        push.apply(ret, elems.get());
	      }
	      return this.pushStack(ret);
	    };
	  });
	  var iframe,
	      elemdisplay = {};
	  function actualDisplay(name, doc) {
	    var style,
	        elem = jQuery(doc.createElement(name)).appendTo(doc.body),
	        display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
	    elem.detach();
	    return display;
	  }
	  function defaultDisplay(nodeName) {
	    var doc = document,
	        display = elemdisplay[nodeName];
	    if (!display) {
	      display = actualDisplay(nodeName, doc);
	      if (display === "none" || !display) {
	        iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
	        doc = iframe[0].contentDocument;
	        doc.write();
	        doc.close();
	        display = actualDisplay(nodeName, doc);
	        iframe.detach();
	      }
	      elemdisplay[nodeName] = display;
	    }
	    return display;
	  }
	  var rmargin = (/^margin/);
	  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
	  var getStyles = function(elem) {
	    if (elem.ownerDocument.defaultView.opener) {
	      return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
	    }
	    return window.getComputedStyle(elem, null);
	  };
	  function curCSS(elem, name, computed) {
	    var width,
	        minWidth,
	        maxWidth,
	        ret,
	        style = elem.style;
	    computed = computed || getStyles(elem);
	    if (computed) {
	      ret = computed.getPropertyValue(name) || computed[name];
	    }
	    if (computed) {
	      if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
	        ret = jQuery.style(elem, name);
	      }
	      if (rnumnonpx.test(ret) && rmargin.test(name)) {
	        width = style.width;
	        minWidth = style.minWidth;
	        maxWidth = style.maxWidth;
	        style.minWidth = style.maxWidth = style.width = ret;
	        ret = computed.width;
	        style.width = width;
	        style.minWidth = minWidth;
	        style.maxWidth = maxWidth;
	      }
	    }
	    return ret !== undefined ? ret + "" : ret;
	  }
	  function addGetHookIf(conditionFn, hookFn) {
	    return {get: function() {
	        if (conditionFn()) {
	          delete this.get;
	          return;
	        }
	        return (this.get = hookFn).apply(this, arguments);
	      }};
	  }
	  (function() {
	    var pixelPositionVal,
	        boxSizingReliableVal,
	        docElem = document.documentElement,
	        container = document.createElement("div"),
	        div = document.createElement("div");
	    if (!div.style) {
	      return;
	    }
	    div.style.backgroundClip = "content-box";
	    div.cloneNode(true).style.backgroundClip = "";
	    support.clearCloneStyle = div.style.backgroundClip === "content-box";
	    container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
	    container.appendChild(div);
	    function computePixelPositionAndBoxSizingReliable() {
	      div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
	      div.innerHTML = "";
	      docElem.appendChild(container);
	      var divStyle = window.getComputedStyle(div, null);
	      pixelPositionVal = divStyle.top !== "1%";
	      boxSizingReliableVal = divStyle.width === "4px";
	      docElem.removeChild(container);
	    }
	    if (window.getComputedStyle) {
	      jQuery.extend(support, {
	        pixelPosition: function() {
	          computePixelPositionAndBoxSizingReliable();
	          return pixelPositionVal;
	        },
	        boxSizingReliable: function() {
	          if (boxSizingReliableVal == null) {
	            computePixelPositionAndBoxSizingReliable();
	          }
	          return boxSizingReliableVal;
	        },
	        reliableMarginRight: function() {
	          var ret,
	              marginDiv = div.appendChild(document.createElement("div"));
	          marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
	          marginDiv.style.marginRight = marginDiv.style.width = "0";
	          div.style.width = "1px";
	          docElem.appendChild(container);
	          ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
	          docElem.removeChild(container);
	          div.removeChild(marginDiv);
	          return ret;
	        }
	      });
	    }
	  })();
	  jQuery.swap = function(elem, options, callback, args) {
	    var ret,
	        name,
	        old = {};
	    for (name in options) {
	      old[name] = elem.style[name];
	      elem.style[name] = options[name];
	    }
	    ret = callback.apply(elem, args || []);
	    for (name in options) {
	      elem.style[name] = old[name];
	    }
	    return ret;
	  };
	  var rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	      rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
	      rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
	      cssShow = {
	        position: "absolute",
	        visibility: "hidden",
	        display: "block"
	      },
	      cssNormalTransform = {
	        letterSpacing: "0",
	        fontWeight: "400"
	      },
	      cssPrefixes = ["Webkit", "O", "Moz", "ms"];
	  function vendorPropName(style, name) {
	    if (name in style) {
	      return name;
	    }
	    var capName = name[0].toUpperCase() + name.slice(1),
	        origName = name,
	        i = cssPrefixes.length;
	    while (i--) {
	      name = cssPrefixes[i] + capName;
	      if (name in style) {
	        return name;
	      }
	    }
	    return origName;
	  }
	  function setPositiveNumber(elem, value, subtract) {
	    var matches = rnumsplit.exec(value);
	    return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
	  }
	  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
	    var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
	        val = 0;
	    for (; i < 4; i += 2) {
	      if (extra === "margin") {
	        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
	      }
	      if (isBorderBox) {
	        if (extra === "content") {
	          val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
	        }
	        if (extra !== "margin") {
	          val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
	        }
	      } else {
	        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
	        if (extra !== "padding") {
	          val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
	        }
	      }
	    }
	    return val;
	  }
	  function getWidthOrHeight(elem, name, extra) {
	    var valueIsBorderBox = true,
	        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
	        styles = getStyles(elem),
	        isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
	    if (val <= 0 || val == null) {
	      val = curCSS(elem, name, styles);
	      if (val < 0 || val == null) {
	        val = elem.style[name];
	      }
	      if (rnumnonpx.test(val)) {
	        return val;
	      }
	      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
	      val = parseFloat(val) || 0;
	    }
	    return (val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles)) + "px";
	  }
	  function showHide(elements, show) {
	    var display,
	        elem,
	        hidden,
	        values = [],
	        index = 0,
	        length = elements.length;
	    for (; index < length; index++) {
	      elem = elements[index];
	      if (!elem.style) {
	        continue;
	      }
	      values[index] = data_priv.get(elem, "olddisplay");
	      display = elem.style.display;
	      if (show) {
	        if (!values[index] && display === "none") {
	          elem.style.display = "";
	        }
	        if (elem.style.display === "" && isHidden(elem)) {
	          values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
	        }
	      } else {
	        hidden = isHidden(elem);
	        if (display !== "none" || !hidden) {
	          data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
	        }
	      }
	    }
	    for (index = 0; index < length; index++) {
	      elem = elements[index];
	      if (!elem.style) {
	        continue;
	      }
	      if (!show || elem.style.display === "none" || elem.style.display === "") {
	        elem.style.display = show ? values[index] || "" : "none";
	      }
	    }
	    return elements;
	  }
	  jQuery.extend({
	    cssHooks: {opacity: {get: function(elem, computed) {
	          if (computed) {
	            var ret = curCSS(elem, "opacity");
	            return ret === "" ? "1" : ret;
	          }
	        }}},
	    cssNumber: {
	      "columnCount": true,
	      "fillOpacity": true,
	      "flexGrow": true,
	      "flexShrink": true,
	      "fontWeight": true,
	      "lineHeight": true,
	      "opacity": true,
	      "order": true,
	      "orphans": true,
	      "widows": true,
	      "zIndex": true,
	      "zoom": true
	    },
	    cssProps: {"float": "cssFloat"},
	    style: function(elem, name, value, extra) {
	      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
	        return;
	      }
	      var ret,
	          type,
	          hooks,
	          origName = jQuery.camelCase(name),
	          style = elem.style;
	      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
	      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
	      if (value !== undefined) {
	        type = typeof value;
	        if (type === "string" && (ret = rrelNum.exec(value))) {
	          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
	          type = "number";
	        }
	        if (value == null || value !== value) {
	          return;
	        }
	        if (type === "number" && !jQuery.cssNumber[origName]) {
	          value += "px";
	        }
	        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
	          style[name] = "inherit";
	        }
	        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
	          style[name] = value;
	        }
	      } else {
	        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
	          return ret;
	        }
	        return style[name];
	      }
	    },
	    css: function(elem, name, extra, styles) {
	      var val,
	          num,
	          hooks,
	          origName = jQuery.camelCase(name);
	      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
	      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
	      if (hooks && "get" in hooks) {
	        val = hooks.get(elem, true, extra);
	      }
	      if (val === undefined) {
	        val = curCSS(elem, name, styles);
	      }
	      if (val === "normal" && name in cssNormalTransform) {
	        val = cssNormalTransform[name];
	      }
	      if (extra === "" || extra) {
	        num = parseFloat(val);
	        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
	      }
	      return val;
	    }
	  });
	  jQuery.each(["height", "width"], function(i, name) {
	    jQuery.cssHooks[name] = {
	      get: function(elem, computed, extra) {
	        if (computed) {
	          return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
	            return getWidthOrHeight(elem, name, extra);
	          }) : getWidthOrHeight(elem, name, extra);
	        }
	      },
	      set: function(elem, value, extra) {
	        var styles = extra && getStyles(elem);
	        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
	      }
	    };
	  });
	  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
	    if (computed) {
	      return jQuery.swap(elem, {"display": "inline-block"}, curCSS, [elem, "marginRight"]);
	    }
	  });
	  jQuery.each({
	    margin: "",
	    padding: "",
	    border: "Width"
	  }, function(prefix, suffix) {
	    jQuery.cssHooks[prefix + suffix] = {expand: function(value) {
	        var i = 0,
	            expanded = {},
	            parts = typeof value === "string" ? value.split(" ") : [value];
	        for (; i < 4; i++) {
	          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
	        }
	        return expanded;
	      }};
	    if (!rmargin.test(prefix)) {
	      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
	    }
	  });
	  jQuery.fn.extend({
	    css: function(name, value) {
	      return access(this, function(elem, name, value) {
	        var styles,
	            len,
	            map = {},
	            i = 0;
	        if (jQuery.isArray(name)) {
	          styles = getStyles(elem);
	          len = name.length;
	          for (; i < len; i++) {
	            map[name[i]] = jQuery.css(elem, name[i], false, styles);
	          }
	          return map;
	        }
	        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
	      }, name, value, arguments.length > 1);
	    },
	    show: function() {
	      return showHide(this, true);
	    },
	    hide: function() {
	      return showHide(this);
	    },
	    toggle: function(state) {
	      if (typeof state === "boolean") {
	        return state ? this.show() : this.hide();
	      }
	      return this.each(function() {
	        if (isHidden(this)) {
	          jQuery(this).show();
	        } else {
	          jQuery(this).hide();
	        }
	      });
	    }
	  });
	  function Tween(elem, options, prop, end, easing) {
	    return new Tween.prototype.init(elem, options, prop, end, easing);
	  }
	  jQuery.Tween = Tween;
	  Tween.prototype = {
	    constructor: Tween,
	    init: function(elem, options, prop, end, easing, unit) {
	      this.elem = elem;
	      this.prop = prop;
	      this.easing = easing || "swing";
	      this.options = options;
	      this.start = this.now = this.cur();
	      this.end = end;
	      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
	    },
	    cur: function() {
	      var hooks = Tween.propHooks[this.prop];
	      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
	    },
	    run: function(percent) {
	      var eased,
	          hooks = Tween.propHooks[this.prop];
	      if (this.options.duration) {
	        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
	      } else {
	        this.pos = eased = percent;
	      }
	      this.now = (this.end - this.start) * eased + this.start;
	      if (this.options.step) {
	        this.options.step.call(this.elem, this.now, this);
	      }
	      if (hooks && hooks.set) {
	        hooks.set(this);
	      } else {
	        Tween.propHooks._default.set(this);
	      }
	      return this;
	    }
	  };
	  Tween.prototype.init.prototype = Tween.prototype;
	  Tween.propHooks = {_default: {
	      get: function(tween) {
	        var result;
	        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
	          return tween.elem[tween.prop];
	        }
	        result = jQuery.css(tween.elem, tween.prop, "");
	        return !result || result === "auto" ? 0 : result;
	      },
	      set: function(tween) {
	        if (jQuery.fx.step[tween.prop]) {
	          jQuery.fx.step[tween.prop](tween);
	        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
	          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
	        } else {
	          tween.elem[tween.prop] = tween.now;
	        }
	      }
	    }};
	  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {set: function(tween) {
	      if (tween.elem.nodeType && tween.elem.parentNode) {
	        tween.elem[tween.prop] = tween.now;
	      }
	    }};
	  jQuery.easing = {
	    linear: function(p) {
	      return p;
	    },
	    swing: function(p) {
	      return 0.5 - Math.cos(p * Math.PI) / 2;
	    }
	  };
	  jQuery.fx = Tween.prototype.init;
	  jQuery.fx.step = {};
	  var fxNow,
	      timerId,
	      rfxtypes = /^(?:toggle|show|hide)$/,
	      rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
	      rrun = /queueHooks$/,
	      animationPrefilters = [defaultPrefilter],
	      tweeners = {"*": [function(prop, value) {
	          var tween = this.createTween(prop, value),
	              target = tween.cur(),
	              parts = rfxnum.exec(value),
	              unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
	              start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
	              scale = 1,
	              maxIterations = 20;
	          if (start && start[3] !== unit) {
	            unit = unit || start[3];
	            parts = parts || [];
	            start = +target || 1;
	            do {
	              scale = scale || ".5";
	              start = start / scale;
	              jQuery.style(tween.elem, prop, start + unit);
	            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
	          }
	          if (parts) {
	            start = tween.start = +start || +target || 0;
	            tween.unit = unit;
	            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
	          }
	          return tween;
	        }]};
	  function createFxNow() {
	    setTimeout(function() {
	      fxNow = undefined;
	    });
	    return (fxNow = jQuery.now());
	  }
	  function genFx(type, includeWidth) {
	    var which,
	        i = 0,
	        attrs = {height: type};
	    includeWidth = includeWidth ? 1 : 0;
	    for (; i < 4; i += 2 - includeWidth) {
	      which = cssExpand[i];
	      attrs["margin" + which] = attrs["padding" + which] = type;
	    }
	    if (includeWidth) {
	      attrs.opacity = attrs.width = type;
	    }
	    return attrs;
	  }
	  function createTween(value, prop, animation) {
	    var tween,
	        collection = (tweeners[prop] || []).concat(tweeners["*"]),
	        index = 0,
	        length = collection.length;
	    for (; index < length; index++) {
	      if ((tween = collection[index].call(animation, prop, value))) {
	        return tween;
	      }
	    }
	  }
	  function defaultPrefilter(elem, props, opts) {
	    var prop,
	        value,
	        toggle,
	        tween,
	        hooks,
	        oldfire,
	        display,
	        checkDisplay,
	        anim = this,
	        orig = {},
	        style = elem.style,
	        hidden = elem.nodeType && isHidden(elem),
	        dataShow = data_priv.get(elem, "fxshow");
	    if (!opts.queue) {
	      hooks = jQuery._queueHooks(elem, "fx");
	      if (hooks.unqueued == null) {
	        hooks.unqueued = 0;
	        oldfire = hooks.empty.fire;
	        hooks.empty.fire = function() {
	          if (!hooks.unqueued) {
	            oldfire();
	          }
	        };
	      }
	      hooks.unqueued++;
	      anim.always(function() {
	        anim.always(function() {
	          hooks.unqueued--;
	          if (!jQuery.queue(elem, "fx").length) {
	            hooks.empty.fire();
	          }
	        });
	      });
	    }
	    if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
	      opts.overflow = [style.overflow, style.overflowX, style.overflowY];
	      display = jQuery.css(elem, "display");
	      checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
	      if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
	        style.display = "inline-block";
	      }
	    }
	    if (opts.overflow) {
	      style.overflow = "hidden";
	      anim.always(function() {
	        style.overflow = opts.overflow[0];
	        style.overflowX = opts.overflow[1];
	        style.overflowY = opts.overflow[2];
	      });
	    }
	    for (prop in props) {
	      value = props[prop];
	      if (rfxtypes.exec(value)) {
	        delete props[prop];
	        toggle = toggle || value === "toggle";
	        if (value === (hidden ? "hide" : "show")) {
	          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
	            hidden = true;
	          } else {
	            continue;
	          }
	        }
	        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
	      } else {
	        display = undefined;
	      }
	    }
	    if (!jQuery.isEmptyObject(orig)) {
	      if (dataShow) {
	        if ("hidden" in dataShow) {
	          hidden = dataShow.hidden;
	        }
	      } else {
	        dataShow = data_priv.access(elem, "fxshow", {});
	      }
	      if (toggle) {
	        dataShow.hidden = !hidden;
	      }
	      if (hidden) {
	        jQuery(elem).show();
	      } else {
	        anim.done(function() {
	          jQuery(elem).hide();
	        });
	      }
	      anim.done(function() {
	        var prop;
	        data_priv.remove(elem, "fxshow");
	        for (prop in orig) {
	          jQuery.style(elem, prop, orig[prop]);
	        }
	      });
	      for (prop in orig) {
	        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
	        if (!(prop in dataShow)) {
	          dataShow[prop] = tween.start;
	          if (hidden) {
	            tween.end = tween.start;
	            tween.start = prop === "width" || prop === "height" ? 1 : 0;
	          }
	        }
	      }
	    } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
	      style.display = display;
	    }
	  }
	  function propFilter(props, specialEasing) {
	    var index,
	        name,
	        easing,
	        value,
	        hooks;
	    for (index in props) {
	      name = jQuery.camelCase(index);
	      easing = specialEasing[name];
	      value = props[index];
	      if (jQuery.isArray(value)) {
	        easing = value[1];
	        value = props[index] = value[0];
	      }
	      if (index !== name) {
	        props[name] = value;
	        delete props[index];
	      }
	      hooks = jQuery.cssHooks[name];
	      if (hooks && "expand" in hooks) {
	        value = hooks.expand(value);
	        delete props[name];
	        for (index in value) {
	          if (!(index in props)) {
	            props[index] = value[index];
	            specialEasing[index] = easing;
	          }
	        }
	      } else {
	        specialEasing[name] = easing;
	      }
	    }
	  }
	  function Animation(elem, properties, options) {
	    var result,
	        stopped,
	        index = 0,
	        length = animationPrefilters.length,
	        deferred = jQuery.Deferred().always(function() {
	          delete tick.elem;
	        }),
	        tick = function() {
	          if (stopped) {
	            return false;
	          }
	          var currentTime = fxNow || createFxNow(),
	              remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
	              temp = remaining / animation.duration || 0,
	              percent = 1 - temp,
	              index = 0,
	              length = animation.tweens.length;
	          for (; index < length; index++) {
	            animation.tweens[index].run(percent);
	          }
	          deferred.notifyWith(elem, [animation, percent, remaining]);
	          if (percent < 1 && length) {
	            return remaining;
	          } else {
	            deferred.resolveWith(elem, [animation]);
	            return false;
	          }
	        },
	        animation = deferred.promise({
	          elem: elem,
	          props: jQuery.extend({}, properties),
	          opts: jQuery.extend(true, {specialEasing: {}}, options),
	          originalProperties: properties,
	          originalOptions: options,
	          startTime: fxNow || createFxNow(),
	          duration: options.duration,
	          tweens: [],
	          createTween: function(prop, end) {
	            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
	            animation.tweens.push(tween);
	            return tween;
	          },
	          stop: function(gotoEnd) {
	            var index = 0,
	                length = gotoEnd ? animation.tweens.length : 0;
	            if (stopped) {
	              return this;
	            }
	            stopped = true;
	            for (; index < length; index++) {
	              animation.tweens[index].run(1);
	            }
	            if (gotoEnd) {
	              deferred.resolveWith(elem, [animation, gotoEnd]);
	            } else {
	              deferred.rejectWith(elem, [animation, gotoEnd]);
	            }
	            return this;
	          }
	        }),
	        props = animation.props;
	    propFilter(props, animation.opts.specialEasing);
	    for (; index < length; index++) {
	      result = animationPrefilters[index].call(animation, elem, props, animation.opts);
	      if (result) {
	        return result;
	      }
	    }
	    jQuery.map(props, createTween, animation);
	    if (jQuery.isFunction(animation.opts.start)) {
	      animation.opts.start.call(elem, animation);
	    }
	    jQuery.fx.timer(jQuery.extend(tick, {
	      elem: elem,
	      anim: animation,
	      queue: animation.opts.queue
	    }));
	    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
	  }
	  jQuery.Animation = jQuery.extend(Animation, {
	    tweener: function(props, callback) {
	      if (jQuery.isFunction(props)) {
	        callback = props;
	        props = ["*"];
	      } else {
	        props = props.split(" ");
	      }
	      var prop,
	          index = 0,
	          length = props.length;
	      for (; index < length; index++) {
	        prop = props[index];
	        tweeners[prop] = tweeners[prop] || [];
	        tweeners[prop].unshift(callback);
	      }
	    },
	    prefilter: function(callback, prepend) {
	      if (prepend) {
	        animationPrefilters.unshift(callback);
	      } else {
	        animationPrefilters.push(callback);
	      }
	    }
	  });
	  jQuery.speed = function(speed, easing, fn) {
	    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
	      complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
	      duration: speed,
	      easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
	    };
	    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
	    if (opt.queue == null || opt.queue === true) {
	      opt.queue = "fx";
	    }
	    opt.old = opt.complete;
	    opt.complete = function() {
	      if (jQuery.isFunction(opt.old)) {
	        opt.old.call(this);
	      }
	      if (opt.queue) {
	        jQuery.dequeue(this, opt.queue);
	      }
	    };
	    return opt;
	  };
	  jQuery.fn.extend({
	    fadeTo: function(speed, to, easing, callback) {
	      return this.filter(isHidden).css("opacity", 0).show().end().animate({opacity: to}, speed, easing, callback);
	    },
	    animate: function(prop, speed, easing, callback) {
	      var empty = jQuery.isEmptyObject(prop),
	          optall = jQuery.speed(speed, easing, callback),
	          doAnimation = function() {
	            var anim = Animation(this, jQuery.extend({}, prop), optall);
	            if (empty || data_priv.get(this, "finish")) {
	              anim.stop(true);
	            }
	          };
	      doAnimation.finish = doAnimation;
	      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
	    },
	    stop: function(type, clearQueue, gotoEnd) {
	      var stopQueue = function(hooks) {
	        var stop = hooks.stop;
	        delete hooks.stop;
	        stop(gotoEnd);
	      };
	      if (typeof type !== "string") {
	        gotoEnd = clearQueue;
	        clearQueue = type;
	        type = undefined;
	      }
	      if (clearQueue && type !== false) {
	        this.queue(type || "fx", []);
	      }
	      return this.each(function() {
	        var dequeue = true,
	            index = type != null && type + "queueHooks",
	            timers = jQuery.timers,
	            data = data_priv.get(this);
	        if (index) {
	          if (data[index] && data[index].stop) {
	            stopQueue(data[index]);
	          }
	        } else {
	          for (index in data) {
	            if (data[index] && data[index].stop && rrun.test(index)) {
	              stopQueue(data[index]);
	            }
	          }
	        }
	        for (index = timers.length; index--; ) {
	          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
	            timers[index].anim.stop(gotoEnd);
	            dequeue = false;
	            timers.splice(index, 1);
	          }
	        }
	        if (dequeue || !gotoEnd) {
	          jQuery.dequeue(this, type);
	        }
	      });
	    },
	    finish: function(type) {
	      if (type !== false) {
	        type = type || "fx";
	      }
	      return this.each(function() {
	        var index,
	            data = data_priv.get(this),
	            queue = data[type + "queue"],
	            hooks = data[type + "queueHooks"],
	            timers = jQuery.timers,
	            length = queue ? queue.length : 0;
	        data.finish = true;
	        jQuery.queue(this, type, []);
	        if (hooks && hooks.stop) {
	          hooks.stop.call(this, true);
	        }
	        for (index = timers.length; index--; ) {
	          if (timers[index].elem === this && timers[index].queue === type) {
	            timers[index].anim.stop(true);
	            timers.splice(index, 1);
	          }
	        }
	        for (index = 0; index < length; index++) {
	          if (queue[index] && queue[index].finish) {
	            queue[index].finish.call(this);
	          }
	        }
	        delete data.finish;
	      });
	    }
	  });
	  jQuery.each(["toggle", "show", "hide"], function(i, name) {
	    var cssFn = jQuery.fn[name];
	    jQuery.fn[name] = function(speed, easing, callback) {
	      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
	    };
	  });
	  jQuery.each({
	    slideDown: genFx("show"),
	    slideUp: genFx("hide"),
	    slideToggle: genFx("toggle"),
	    fadeIn: {opacity: "show"},
	    fadeOut: {opacity: "hide"},
	    fadeToggle: {opacity: "toggle"}
	  }, function(name, props) {
	    jQuery.fn[name] = function(speed, easing, callback) {
	      return this.animate(props, speed, easing, callback);
	    };
	  });
	  jQuery.timers = [];
	  jQuery.fx.tick = function() {
	    var timer,
	        i = 0,
	        timers = jQuery.timers;
	    fxNow = jQuery.now();
	    for (; i < timers.length; i++) {
	      timer = timers[i];
	      if (!timer() && timers[i] === timer) {
	        timers.splice(i--, 1);
	      }
	    }
	    if (!timers.length) {
	      jQuery.fx.stop();
	    }
	    fxNow = undefined;
	  };
	  jQuery.fx.timer = function(timer) {
	    jQuery.timers.push(timer);
	    if (timer()) {
	      jQuery.fx.start();
	    } else {
	      jQuery.timers.pop();
	    }
	  };
	  jQuery.fx.interval = 13;
	  jQuery.fx.start = function() {
	    if (!timerId) {
	      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
	    }
	  };
	  jQuery.fx.stop = function() {
	    clearInterval(timerId);
	    timerId = null;
	  };
	  jQuery.fx.speeds = {
	    slow: 600,
	    fast: 200,
	    _default: 400
	  };
	  jQuery.fn.delay = function(time, type) {
	    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
	    type = type || "fx";
	    return this.queue(type, function(next, hooks) {
	      var timeout = setTimeout(next, time);
	      hooks.stop = function() {
	        clearTimeout(timeout);
	      };
	    });
	  };
	  (function() {
	    var input = document.createElement("input"),
	        select = document.createElement("select"),
	        opt = select.appendChild(document.createElement("option"));
	    input.type = "checkbox";
	    support.checkOn = input.value !== "";
	    support.optSelected = opt.selected;
	    select.disabled = true;
	    support.optDisabled = !opt.disabled;
	    input = document.createElement("input");
	    input.value = "t";
	    input.type = "radio";
	    support.radioValue = input.value === "t";
	  })();
	  var nodeHook,
	      boolHook,
	      attrHandle = jQuery.expr.attrHandle;
	  jQuery.fn.extend({
	    attr: function(name, value) {
	      return access(this, jQuery.attr, name, value, arguments.length > 1);
	    },
	    removeAttr: function(name) {
	      return this.each(function() {
	        jQuery.removeAttr(this, name);
	      });
	    }
	  });
	  jQuery.extend({
	    attr: function(elem, name, value) {
	      var hooks,
	          ret,
	          nType = elem.nodeType;
	      if (!elem || nType === 3 || nType === 8 || nType === 2) {
	        return;
	      }
	      if (typeof elem.getAttribute === strundefined) {
	        return jQuery.prop(elem, name, value);
	      }
	      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
	        name = name.toLowerCase();
	        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
	      }
	      if (value !== undefined) {
	        if (value === null) {
	          jQuery.removeAttr(elem, name);
	        } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
	          return ret;
	        } else {
	          elem.setAttribute(name, value + "");
	          return value;
	        }
	      } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
	        return ret;
	      } else {
	        ret = jQuery.find.attr(elem, name);
	        return ret == null ? undefined : ret;
	      }
	    },
	    removeAttr: function(elem, value) {
	      var name,
	          propName,
	          i = 0,
	          attrNames = value && value.match(rnotwhite);
	      if (attrNames && elem.nodeType === 1) {
	        while ((name = attrNames[i++])) {
	          propName = jQuery.propFix[name] || name;
	          if (jQuery.expr.match.bool.test(name)) {
	            elem[propName] = false;
	          }
	          elem.removeAttribute(name);
	        }
	      }
	    },
	    attrHooks: {type: {set: function(elem, value) {
	          if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
	            var val = elem.value;
	            elem.setAttribute("type", value);
	            if (val) {
	              elem.value = val;
	            }
	            return value;
	          }
	        }}}
	  });
	  boolHook = {set: function(elem, value, name) {
	      if (value === false) {
	        jQuery.removeAttr(elem, name);
	      } else {
	        elem.setAttribute(name, name);
	      }
	      return name;
	    }};
	  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
	    var getter = attrHandle[name] || jQuery.find.attr;
	    attrHandle[name] = function(elem, name, isXML) {
	      var ret,
	          handle;
	      if (!isXML) {
	        handle = attrHandle[name];
	        attrHandle[name] = ret;
	        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
	        attrHandle[name] = handle;
	      }
	      return ret;
	    };
	  });
	  var rfocusable = /^(?:input|select|textarea|button)$/i;
	  jQuery.fn.extend({
	    prop: function(name, value) {
	      return access(this, jQuery.prop, name, value, arguments.length > 1);
	    },
	    removeProp: function(name) {
	      return this.each(function() {
	        delete this[jQuery.propFix[name] || name];
	      });
	    }
	  });
	  jQuery.extend({
	    propFix: {
	      "for": "htmlFor",
	      "class": "className"
	    },
	    prop: function(elem, name, value) {
	      var ret,
	          hooks,
	          notxml,
	          nType = elem.nodeType;
	      if (!elem || nType === 3 || nType === 8 || nType === 2) {
	        return;
	      }
	      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
	      if (notxml) {
	        name = jQuery.propFix[name] || name;
	        hooks = jQuery.propHooks[name];
	      }
	      if (value !== undefined) {
	        return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : (elem[name] = value);
	      } else {
	        return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
	      }
	    },
	    propHooks: {tabIndex: {get: function(elem) {
	          return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
	        }}}
	  });
	  if (!support.optSelected) {
	    jQuery.propHooks.selected = {get: function(elem) {
	        var parent = elem.parentNode;
	        if (parent && parent.parentNode) {
	          parent.parentNode.selectedIndex;
	        }
	        return null;
	      }};
	  }
	  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
	    jQuery.propFix[this.toLowerCase()] = this;
	  });
	  var rclass = /[\t\r\n\f]/g;
	  jQuery.fn.extend({
	    addClass: function(value) {
	      var classes,
	          elem,
	          cur,
	          clazz,
	          j,
	          finalValue,
	          proceed = typeof value === "string" && value,
	          i = 0,
	          len = this.length;
	      if (jQuery.isFunction(value)) {
	        return this.each(function(j) {
	          jQuery(this).addClass(value.call(this, j, this.className));
	        });
	      }
	      if (proceed) {
	        classes = (value || "").match(rnotwhite) || [];
	        for (; i < len; i++) {
	          elem = this[i];
	          cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
	          if (cur) {
	            j = 0;
	            while ((clazz = classes[j++])) {
	              if (cur.indexOf(" " + clazz + " ") < 0) {
	                cur += clazz + " ";
	              }
	            }
	            finalValue = jQuery.trim(cur);
	            if (elem.className !== finalValue) {
	              elem.className = finalValue;
	            }
	          }
	        }
	      }
	      return this;
	    },
	    removeClass: function(value) {
	      var classes,
	          elem,
	          cur,
	          clazz,
	          j,
	          finalValue,
	          proceed = arguments.length === 0 || typeof value === "string" && value,
	          i = 0,
	          len = this.length;
	      if (jQuery.isFunction(value)) {
	        return this.each(function(j) {
	          jQuery(this).removeClass(value.call(this, j, this.className));
	        });
	      }
	      if (proceed) {
	        classes = (value || "").match(rnotwhite) || [];
	        for (; i < len; i++) {
	          elem = this[i];
	          cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
	          if (cur) {
	            j = 0;
	            while ((clazz = classes[j++])) {
	              while (cur.indexOf(" " + clazz + " ") >= 0) {
	                cur = cur.replace(" " + clazz + " ", " ");
	              }
	            }
	            finalValue = value ? jQuery.trim(cur) : "";
	            if (elem.className !== finalValue) {
	              elem.className = finalValue;
	            }
	          }
	        }
	      }
	      return this;
	    },
	    toggleClass: function(value, stateVal) {
	      var type = typeof value;
	      if (typeof stateVal === "boolean" && type === "string") {
	        return stateVal ? this.addClass(value) : this.removeClass(value);
	      }
	      if (jQuery.isFunction(value)) {
	        return this.each(function(i) {
	          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
	        });
	      }
	      return this.each(function() {
	        if (type === "string") {
	          var className,
	              i = 0,
	              self = jQuery(this),
	              classNames = value.match(rnotwhite) || [];
	          while ((className = classNames[i++])) {
	            if (self.hasClass(className)) {
	              self.removeClass(className);
	            } else {
	              self.addClass(className);
	            }
	          }
	        } else if (type === strundefined || type === "boolean") {
	          if (this.className) {
	            data_priv.set(this, "__className__", this.className);
	          }
	          this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
	        }
	      });
	    },
	    hasClass: function(selector) {
	      var className = " " + selector + " ",
	          i = 0,
	          l = this.length;
	      for (; i < l; i++) {
	        if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
	          return true;
	        }
	      }
	      return false;
	    }
	  });
	  var rreturn = /\r/g;
	  jQuery.fn.extend({val: function(value) {
	      var hooks,
	          ret,
	          isFunction,
	          elem = this[0];
	      if (!arguments.length) {
	        if (elem) {
	          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
	          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
	            return ret;
	          }
	          ret = elem.value;
	          return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
	        }
	        return;
	      }
	      isFunction = jQuery.isFunction(value);
	      return this.each(function(i) {
	        var val;
	        if (this.nodeType !== 1) {
	          return;
	        }
	        if (isFunction) {
	          val = value.call(this, i, jQuery(this).val());
	        } else {
	          val = value;
	        }
	        if (val == null) {
	          val = "";
	        } else if (typeof val === "number") {
	          val += "";
	        } else if (jQuery.isArray(val)) {
	          val = jQuery.map(val, function(value) {
	            return value == null ? "" : value + "";
	          });
	        }
	        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
	        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
	          this.value = val;
	        }
	      });
	    }});
	  jQuery.extend({valHooks: {
	      option: {get: function(elem) {
	          var val = jQuery.find.attr(elem, "value");
	          return val != null ? val : jQuery.trim(jQuery.text(elem));
	        }},
	      select: {
	        get: function(elem) {
	          var value,
	              option,
	              options = elem.options,
	              index = elem.selectedIndex,
	              one = elem.type === "select-one" || index < 0,
	              values = one ? null : [],
	              max = one ? index + 1 : options.length,
	              i = index < 0 ? max : one ? index : 0;
	          for (; i < max; i++) {
	            option = options[i];
	            if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
	              value = jQuery(option).val();
	              if (one) {
	                return value;
	              }
	              values.push(value);
	            }
	          }
	          return values;
	        },
	        set: function(elem, value) {
	          var optionSet,
	              option,
	              options = elem.options,
	              values = jQuery.makeArray(value),
	              i = options.length;
	          while (i--) {
	            option = options[i];
	            if ((option.selected = jQuery.inArray(option.value, values) >= 0)) {
	              optionSet = true;
	            }
	          }
	          if (!optionSet) {
	            elem.selectedIndex = -1;
	          }
	          return values;
	        }
	      }
	    }});
	  jQuery.each(["radio", "checkbox"], function() {
	    jQuery.valHooks[this] = {set: function(elem, value) {
	        if (jQuery.isArray(value)) {
	          return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
	        }
	      }};
	    if (!support.checkOn) {
	      jQuery.valHooks[this].get = function(elem) {
	        return elem.getAttribute("value") === null ? "on" : elem.value;
	      };
	    }
	  });
	  jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
	    jQuery.fn[name] = function(data, fn) {
	      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
	    };
	  });
	  jQuery.fn.extend({
	    hover: function(fnOver, fnOut) {
	      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
	    },
	    bind: function(types, data, fn) {
	      return this.on(types, null, data, fn);
	    },
	    unbind: function(types, fn) {
	      return this.off(types, null, fn);
	    },
	    delegate: function(selector, types, data, fn) {
	      return this.on(types, selector, data, fn);
	    },
	    undelegate: function(selector, types, fn) {
	      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
	    }
	  });
	  var nonce = jQuery.now();
	  var rquery = (/\?/);
	  jQuery.parseJSON = function(data) {
	    return JSON.parse(data + "");
	  };
	  jQuery.parseXML = function(data) {
	    var xml,
	        tmp;
	    if (!data || typeof data !== "string") {
	      return null;
	    }
	    try {
	      tmp = new DOMParser();
	      xml = tmp.parseFromString(data, "text/xml");
	    } catch (e) {
	      xml = undefined;
	    }
	    if (!xml || xml.getElementsByTagName("parsererror").length) {
	      jQuery.error("Invalid XML: " + data);
	    }
	    return xml;
	  };
	  var rhash = /#.*$/,
	      rts = /([?&])_=[^&]*/,
	      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	      rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	      rnoContent = /^(?:GET|HEAD)$/,
	      rprotocol = /^\/\//,
	      rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
	      prefilters = {},
	      transports = {},
	      allTypes = "*/".concat("*"),
	      ajaxLocation = window.location.href,
	      ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
	  function addToPrefiltersOrTransports(structure) {
	    return function(dataTypeExpression, func) {
	      if (typeof dataTypeExpression !== "string") {
	        func = dataTypeExpression;
	        dataTypeExpression = "*";
	      }
	      var dataType,
	          i = 0,
	          dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
	      if (jQuery.isFunction(func)) {
	        while ((dataType = dataTypes[i++])) {
	          if (dataType[0] === "+") {
	            dataType = dataType.slice(1) || "*";
	            (structure[dataType] = structure[dataType] || []).unshift(func);
	          } else {
	            (structure[dataType] = structure[dataType] || []).push(func);
	          }
	        }
	      }
	    };
	  }
	  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
	    var inspected = {},
	        seekingTransport = (structure === transports);
	    function inspect(dataType) {
	      var selected;
	      inspected[dataType] = true;
	      jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
	        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
	        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
	          options.dataTypes.unshift(dataTypeOrTransport);
	          inspect(dataTypeOrTransport);
	          return false;
	        } else if (seekingTransport) {
	          return !(selected = dataTypeOrTransport);
	        }
	      });
	      return selected;
	    }
	    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	  }
	  function ajaxExtend(target, src) {
	    var key,
	        deep,
	        flatOptions = jQuery.ajaxSettings.flatOptions || {};
	    for (key in src) {
	      if (src[key] !== undefined) {
	        (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
	      }
	    }
	    if (deep) {
	      jQuery.extend(true, target, deep);
	    }
	    return target;
	  }
	  function ajaxHandleResponses(s, jqXHR, responses) {
	    var ct,
	        type,
	        finalDataType,
	        firstDataType,
	        contents = s.contents,
	        dataTypes = s.dataTypes;
	    while (dataTypes[0] === "*") {
	      dataTypes.shift();
	      if (ct === undefined) {
	        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
	      }
	    }
	    if (ct) {
	      for (type in contents) {
	        if (contents[type] && contents[type].test(ct)) {
	          dataTypes.unshift(type);
	          break;
	        }
	      }
	    }
	    if (dataTypes[0] in responses) {
	      finalDataType = dataTypes[0];
	    } else {
	      for (type in responses) {
	        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
	          finalDataType = type;
	          break;
	        }
	        if (!firstDataType) {
	          firstDataType = type;
	        }
	      }
	      finalDataType = finalDataType || firstDataType;
	    }
	    if (finalDataType) {
	      if (finalDataType !== dataTypes[0]) {
	        dataTypes.unshift(finalDataType);
	      }
	      return responses[finalDataType];
	    }
	  }
	  function ajaxConvert(s, response, jqXHR, isSuccess) {
	    var conv2,
	        current,
	        conv,
	        tmp,
	        prev,
	        converters = {},
	        dataTypes = s.dataTypes.slice();
	    if (dataTypes[1]) {
	      for (conv in s.converters) {
	        converters[conv.toLowerCase()] = s.converters[conv];
	      }
	    }
	    current = dataTypes.shift();
	    while (current) {
	      if (s.responseFields[current]) {
	        jqXHR[s.responseFields[current]] = response;
	      }
	      if (!prev && isSuccess && s.dataFilter) {
	        response = s.dataFilter(response, s.dataType);
	      }
	      prev = current;
	      current = dataTypes.shift();
	      if (current) {
	        if (current === "*") {
	          current = prev;
	        } else if (prev !== "*" && prev !== current) {
	          conv = converters[prev + " " + current] || converters["* " + current];
	          if (!conv) {
	            for (conv2 in converters) {
	              tmp = conv2.split(" ");
	              if (tmp[1] === current) {
	                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
	                if (conv) {
	                  if (conv === true) {
	                    conv = converters[conv2];
	                  } else if (converters[conv2] !== true) {
	                    current = tmp[0];
	                    dataTypes.unshift(tmp[1]);
	                  }
	                  break;
	                }
	              }
	            }
	          }
	          if (conv !== true) {
	            if (conv && s["throws"]) {
	              response = conv(response);
	            } else {
	              try {
	                response = conv(response);
	              } catch (e) {
	                return {
	                  state: "parsererror",
	                  error: conv ? e : "No conversion from " + prev + " to " + current
	                };
	              }
	            }
	          }
	        }
	      }
	    }
	    return {
	      state: "success",
	      data: response
	    };
	  }
	  jQuery.extend({
	    active: 0,
	    lastModified: {},
	    etag: {},
	    ajaxSettings: {
	      url: ajaxLocation,
	      type: "GET",
	      isLocal: rlocalProtocol.test(ajaxLocParts[1]),
	      global: true,
	      processData: true,
	      async: true,
	      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	      accepts: {
	        "*": allTypes,
	        text: "text/plain",
	        html: "text/html",
	        xml: "application/xml, text/xml",
	        json: "application/json, text/javascript"
	      },
	      contents: {
	        xml: /xml/,
	        html: /html/,
	        json: /json/
	      },
	      responseFields: {
	        xml: "responseXML",
	        text: "responseText",
	        json: "responseJSON"
	      },
	      converters: {
	        "* text": String,
	        "text html": true,
	        "text json": jQuery.parseJSON,
	        "text xml": jQuery.parseXML
	      },
	      flatOptions: {
	        url: true,
	        context: true
	      }
	    },
	    ajaxSetup: function(target, settings) {
	      return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
	    },
	    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
	    ajaxTransport: addToPrefiltersOrTransports(transports),
	    ajax: function(url, options) {
	      if (typeof url === "object") {
	        options = url;
	        url = undefined;
	      }
	      options = options || {};
	      var transport,
	          cacheURL,
	          responseHeadersString,
	          responseHeaders,
	          timeoutTimer,
	          parts,
	          fireGlobals,
	          i,
	          s = jQuery.ajaxSetup({}, options),
	          callbackContext = s.context || s,
	          globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
	          deferred = jQuery.Deferred(),
	          completeDeferred = jQuery.Callbacks("once memory"),
	          statusCode = s.statusCode || {},
	          requestHeaders = {},
	          requestHeadersNames = {},
	          state = 0,
	          strAbort = "canceled",
	          jqXHR = {
	            readyState: 0,
	            getResponseHeader: function(key) {
	              var match;
	              if (state === 2) {
	                if (!responseHeaders) {
	                  responseHeaders = {};
	                  while ((match = rheaders.exec(responseHeadersString))) {
	                    responseHeaders[match[1].toLowerCase()] = match[2];
	                  }
	                }
	                match = responseHeaders[key.toLowerCase()];
	              }
	              return match == null ? null : match;
	            },
	            getAllResponseHeaders: function() {
	              return state === 2 ? responseHeadersString : null;
	            },
	            setRequestHeader: function(name, value) {
	              var lname = name.toLowerCase();
	              if (!state) {
	                name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
	                requestHeaders[name] = value;
	              }
	              return this;
	            },
	            overrideMimeType: function(type) {
	              if (!state) {
	                s.mimeType = type;
	              }
	              return this;
	            },
	            statusCode: function(map) {
	              var code;
	              if (map) {
	                if (state < 2) {
	                  for (code in map) {
	                    statusCode[code] = [statusCode[code], map[code]];
	                  }
	                } else {
	                  jqXHR.always(map[jqXHR.status]);
	                }
	              }
	              return this;
	            },
	            abort: function(statusText) {
	              var finalText = statusText || strAbort;
	              if (transport) {
	                transport.abort(finalText);
	              }
	              done(0, finalText);
	              return this;
	            }
	          };
	      deferred.promise(jqXHR).complete = completeDeferred.add;
	      jqXHR.success = jqXHR.done;
	      jqXHR.error = jqXHR.fail;
	      s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
	      s.type = options.method || options.type || s.method || s.type;
	      s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
	      if (s.crossDomain == null) {
	        parts = rurl.exec(s.url.toLowerCase());
	        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
	      }
	      if (s.data && s.processData && typeof s.data !== "string") {
	        s.data = jQuery.param(s.data, s.traditional);
	      }
	      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
	      if (state === 2) {
	        return jqXHR;
	      }
	      fireGlobals = jQuery.event && s.global;
	      if (fireGlobals && jQuery.active++ === 0) {
	        jQuery.event.trigger("ajaxStart");
	      }
	      s.type = s.type.toUpperCase();
	      s.hasContent = !rnoContent.test(s.type);
	      cacheURL = s.url;
	      if (!s.hasContent) {
	        if (s.data) {
	          cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);
	          delete s.data;
	        }
	        if (s.cache === false) {
	          s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
	        }
	      }
	      if (s.ifModified) {
	        if (jQuery.lastModified[cacheURL]) {
	          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
	        }
	        if (jQuery.etag[cacheURL]) {
	          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
	        }
	      }
	      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
	        jqXHR.setRequestHeader("Content-Type", s.contentType);
	      }
	      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
	      for (i in s.headers) {
	        jqXHR.setRequestHeader(i, s.headers[i]);
	      }
	      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
	        return jqXHR.abort();
	      }
	      strAbort = "abort";
	      for (i in {
	        success: 1,
	        error: 1,
	        complete: 1
	      }) {
	        jqXHR[i](s[i]);
	      }
	      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
	      if (!transport) {
	        done(-1, "No Transport");
	      } else {
	        jqXHR.readyState = 1;
	        if (fireGlobals) {
	          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
	        }
	        if (s.async && s.timeout > 0) {
	          timeoutTimer = setTimeout(function() {
	            jqXHR.abort("timeout");
	          }, s.timeout);
	        }
	        try {
	          state = 1;
	          transport.send(requestHeaders, done);
	        } catch (e) {
	          if (state < 2) {
	            done(-1, e);
	          } else {
	            throw e;
	          }
	        }
	      }
	      function done(status, nativeStatusText, responses, headers) {
	        var isSuccess,
	            success,
	            error,
	            response,
	            modified,
	            statusText = nativeStatusText;
	        if (state === 2) {
	          return;
	        }
	        state = 2;
	        if (timeoutTimer) {
	          clearTimeout(timeoutTimer);
	        }
	        transport = undefined;
	        responseHeadersString = headers || "";
	        jqXHR.readyState = status > 0 ? 4 : 0;
	        isSuccess = status >= 200 && status < 300 || status === 304;
	        if (responses) {
	          response = ajaxHandleResponses(s, jqXHR, responses);
	        }
	        response = ajaxConvert(s, response, jqXHR, isSuccess);
	        if (isSuccess) {
	          if (s.ifModified) {
	            modified = jqXHR.getResponseHeader("Last-Modified");
	            if (modified) {
	              jQuery.lastModified[cacheURL] = modified;
	            }
	            modified = jqXHR.getResponseHeader("etag");
	            if (modified) {
	              jQuery.etag[cacheURL] = modified;
	            }
	          }
	          if (status === 204 || s.type === "HEAD") {
	            statusText = "nocontent";
	          } else if (status === 304) {
	            statusText = "notmodified";
	          } else {
	            statusText = response.state;
	            success = response.data;
	            error = response.error;
	            isSuccess = !error;
	          }
	        } else {
	          error = statusText;
	          if (status || !statusText) {
	            statusText = "error";
	            if (status < 0) {
	              status = 0;
	            }
	          }
	        }
	        jqXHR.status = status;
	        jqXHR.statusText = (nativeStatusText || statusText) + "";
	        if (isSuccess) {
	          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
	        } else {
	          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
	        }
	        jqXHR.statusCode(statusCode);
	        statusCode = undefined;
	        if (fireGlobals) {
	          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
	        }
	        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
	        if (fireGlobals) {
	          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
	          if (!(--jQuery.active)) {
	            jQuery.event.trigger("ajaxStop");
	          }
	        }
	      }
	      return jqXHR;
	    },
	    getJSON: function(url, data, callback) {
	      return jQuery.get(url, data, callback, "json");
	    },
	    getScript: function(url, callback) {
	      return jQuery.get(url, undefined, callback, "script");
	    }
	  });
	  jQuery.each(["get", "post"], function(i, method) {
	    jQuery[method] = function(url, data, callback, type) {
	      if (jQuery.isFunction(data)) {
	        type = type || callback;
	        callback = data;
	        data = undefined;
	      }
	      return jQuery.ajax({
	        url: url,
	        type: method,
	        dataType: type,
	        data: data,
	        success: callback
	      });
	    };
	  });
	  jQuery._evalUrl = function(url) {
	    return jQuery.ajax({
	      url: url,
	      type: "GET",
	      dataType: "script",
	      async: false,
	      global: false,
	      "throws": true
	    });
	  };
	  jQuery.fn.extend({
	    wrapAll: function(html) {
	      var wrap;
	      if (jQuery.isFunction(html)) {
	        return this.each(function(i) {
	          jQuery(this).wrapAll(html.call(this, i));
	        });
	      }
	      if (this[0]) {
	        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
	        if (this[0].parentNode) {
	          wrap.insertBefore(this[0]);
	        }
	        wrap.map(function() {
	          var elem = this;
	          while (elem.firstElementChild) {
	            elem = elem.firstElementChild;
	          }
	          return elem;
	        }).append(this);
	      }
	      return this;
	    },
	    wrapInner: function(html) {
	      if (jQuery.isFunction(html)) {
	        return this.each(function(i) {
	          jQuery(this).wrapInner(html.call(this, i));
	        });
	      }
	      return this.each(function() {
	        var self = jQuery(this),
	            contents = self.contents();
	        if (contents.length) {
	          contents.wrapAll(html);
	        } else {
	          self.append(html);
	        }
	      });
	    },
	    wrap: function(html) {
	      var isFunction = jQuery.isFunction(html);
	      return this.each(function(i) {
	        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
	      });
	    },
	    unwrap: function() {
	      return this.parent().each(function() {
	        if (!jQuery.nodeName(this, "body")) {
	          jQuery(this).replaceWith(this.childNodes);
	        }
	      }).end();
	    }
	  });
	  jQuery.expr.filters.hidden = function(elem) {
	    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	  };
	  jQuery.expr.filters.visible = function(elem) {
	    return !jQuery.expr.filters.hidden(elem);
	  };
	  var r20 = /%20/g,
	      rbracket = /\[\]$/,
	      rCRLF = /\r?\n/g,
	      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	      rsubmittable = /^(?:input|select|textarea|keygen)/i;
	  function buildParams(prefix, obj, traditional, add) {
	    var name;
	    if (jQuery.isArray(obj)) {
	      jQuery.each(obj, function(i, v) {
	        if (traditional || rbracket.test(prefix)) {
	          add(prefix, v);
	        } else {
	          buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
	        }
	      });
	    } else if (!traditional && jQuery.type(obj) === "object") {
	      for (name in obj) {
	        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
	      }
	    } else {
	      add(prefix, obj);
	    }
	  }
	  jQuery.param = function(a, traditional) {
	    var prefix,
	        s = [],
	        add = function(key, value) {
	          value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
	          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
	        };
	    if (traditional === undefined) {
	      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	    }
	    if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
	      jQuery.each(a, function() {
	        add(this.name, this.value);
	      });
	    } else {
	      for (prefix in a) {
	        buildParams(prefix, a[prefix], traditional, add);
	      }
	    }
	    return s.join("&").replace(r20, "+");
	  };
	  jQuery.fn.extend({
	    serialize: function() {
	      return jQuery.param(this.serializeArray());
	    },
	    serializeArray: function() {
	      return this.map(function() {
	        var elements = jQuery.prop(this, "elements");
	        return elements ? jQuery.makeArray(elements) : this;
	      }).filter(function() {
	        var type = this.type;
	        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
	      }).map(function(i, elem) {
	        var val = jQuery(this).val();
	        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
	          return {
	            name: elem.name,
	            value: val.replace(rCRLF, "\r\n")
	          };
	        }) : {
	          name: elem.name,
	          value: val.replace(rCRLF, "\r\n")
	        };
	      }).get();
	    }
	  });
	  jQuery.ajaxSettings.xhr = function() {
	    try {
	      return new XMLHttpRequest();
	    } catch (e) {}
	  };
	  var xhrId = 0,
	      xhrCallbacks = {},
	      xhrSuccessStatus = {
	        0: 200,
	        1223: 204
	      },
	      xhrSupported = jQuery.ajaxSettings.xhr();
	  if (window.attachEvent) {
	    window.attachEvent("onunload", function() {
	      for (var key in xhrCallbacks) {
	        xhrCallbacks[key]();
	      }
	    });
	  }
	  support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
	  support.ajax = xhrSupported = !!xhrSupported;
	  jQuery.ajaxTransport(function(options) {
	    var callback;
	    if (support.cors || xhrSupported && !options.crossDomain) {
	      return {
	        send: function(headers, complete) {
	          var i,
	              xhr = options.xhr(),
	              id = ++xhrId;
	          xhr.open(options.type, options.url, options.async, options.username, options.password);
	          if (options.xhrFields) {
	            for (i in options.xhrFields) {
	              xhr[i] = options.xhrFields[i];
	            }
	          }
	          if (options.mimeType && xhr.overrideMimeType) {
	            xhr.overrideMimeType(options.mimeType);
	          }
	          if (!options.crossDomain && !headers["X-Requested-With"]) {
	            headers["X-Requested-With"] = "XMLHttpRequest";
	          }
	          for (i in headers) {
	            xhr.setRequestHeader(i, headers[i]);
	          }
	          callback = function(type) {
	            return function() {
	              if (callback) {
	                delete xhrCallbacks[id];
	                callback = xhr.onload = xhr.onerror = null;
	                if (type === "abort") {
	                  xhr.abort();
	                } else if (type === "error") {
	                  complete(xhr.status, xhr.statusText);
	                } else {
	                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {text: xhr.responseText} : undefined, xhr.getAllResponseHeaders());
	                }
	              }
	            };
	          };
	          xhr.onload = callback();
	          xhr.onerror = callback("error");
	          callback = xhrCallbacks[id] = callback("abort");
	          try {
	            xhr.send(options.hasContent && options.data || null);
	          } catch (e) {
	            if (callback) {
	              throw e;
	            }
	          }
	        },
	        abort: function() {
	          if (callback) {
	            callback();
	          }
	        }
	      };
	    }
	  });
	  jQuery.ajaxSetup({
	    accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},
	    contents: {script: /(?:java|ecma)script/},
	    converters: {"text script": function(text) {
	        jQuery.globalEval(text);
	        return text;
	      }}
	  });
	  jQuery.ajaxPrefilter("script", function(s) {
	    if (s.cache === undefined) {
	      s.cache = false;
	    }
	    if (s.crossDomain) {
	      s.type = "GET";
	    }
	  });
	  jQuery.ajaxTransport("script", function(s) {
	    if (s.crossDomain) {
	      var script,
	          callback;
	      return {
	        send: function(_, complete) {
	          script = jQuery("<script>").prop({
	            async: true,
	            charset: s.scriptCharset,
	            src: s.url
	          }).on("load error", callback = function(evt) {
	            script.remove();
	            callback = null;
	            if (evt) {
	              complete(evt.type === "error" ? 404 : 200, evt.type);
	            }
	          });
	          document.head.appendChild(script[0]);
	        },
	        abort: function() {
	          if (callback) {
	            callback();
	          }
	        }
	      };
	    }
	  });
	  var oldCallbacks = [],
	      rjsonp = /(=)\?(?=&|$)|\?\?/;
	  jQuery.ajaxSetup({
	    jsonp: "callback",
	    jsonpCallback: function() {
	      var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
	      this[callback] = true;
	      return callback;
	    }
	  });
	  jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
	    var callbackName,
	        overwritten,
	        responseContainer,
	        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
	    if (jsonProp || s.dataTypes[0] === "jsonp") {
	      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
	      if (jsonProp) {
	        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
	      } else if (s.jsonp !== false) {
	        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
	      }
	      s.converters["script json"] = function() {
	        if (!responseContainer) {
	          jQuery.error(callbackName + " was not called");
	        }
	        return responseContainer[0];
	      };
	      s.dataTypes[0] = "json";
	      overwritten = window[callbackName];
	      window[callbackName] = function() {
	        responseContainer = arguments;
	      };
	      jqXHR.always(function() {
	        window[callbackName] = overwritten;
	        if (s[callbackName]) {
	          s.jsonpCallback = originalSettings.jsonpCallback;
	          oldCallbacks.push(callbackName);
	        }
	        if (responseContainer && jQuery.isFunction(overwritten)) {
	          overwritten(responseContainer[0]);
	        }
	        responseContainer = overwritten = undefined;
	      });
	      return "script";
	    }
	  });
	  jQuery.parseHTML = function(data, context, keepScripts) {
	    if (!data || typeof data !== "string") {
	      return null;
	    }
	    if (typeof context === "boolean") {
	      keepScripts = context;
	      context = false;
	    }
	    context = context || document;
	    var parsed = rsingleTag.exec(data),
	        scripts = !keepScripts && [];
	    if (parsed) {
	      return [context.createElement(parsed[1])];
	    }
	    parsed = jQuery.buildFragment([data], context, scripts);
	    if (scripts && scripts.length) {
	      jQuery(scripts).remove();
	    }
	    return jQuery.merge([], parsed.childNodes);
	  };
	  var _load = jQuery.fn.load;
	  jQuery.fn.load = function(url, params, callback) {
	    if (typeof url !== "string" && _load) {
	      return _load.apply(this, arguments);
	    }
	    var selector,
	        type,
	        response,
	        self = this,
	        off = url.indexOf(" ");
	    if (off >= 0) {
	      selector = jQuery.trim(url.slice(off));
	      url = url.slice(0, off);
	    }
	    if (jQuery.isFunction(params)) {
	      callback = params;
	      params = undefined;
	    } else if (params && typeof params === "object") {
	      type = "POST";
	    }
	    if (self.length > 0) {
	      jQuery.ajax({
	        url: url,
	        type: type,
	        dataType: "html",
	        data: params
	      }).done(function(responseText) {
	        response = arguments;
	        self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
	      }).complete(callback && function(jqXHR, status) {
	        self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
	      });
	    }
	    return this;
	  };
	  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
	    jQuery.fn[type] = function(fn) {
	      return this.on(type, fn);
	    };
	  });
	  jQuery.expr.filters.animated = function(elem) {
	    return jQuery.grep(jQuery.timers, function(fn) {
	      return elem === fn.elem;
	    }).length;
	  };
	  var docElem = window.document.documentElement;
	  function getWindow(elem) {
	    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
	  }
	  jQuery.offset = {setOffset: function(elem, options, i) {
	      var curPosition,
	          curLeft,
	          curCSSTop,
	          curTop,
	          curOffset,
	          curCSSLeft,
	          calculatePosition,
	          position = jQuery.css(elem, "position"),
	          curElem = jQuery(elem),
	          props = {};
	      if (position === "static") {
	        elem.style.position = "relative";
	      }
	      curOffset = curElem.offset();
	      curCSSTop = jQuery.css(elem, "top");
	      curCSSLeft = jQuery.css(elem, "left");
	      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
	      if (calculatePosition) {
	        curPosition = curElem.position();
	        curTop = curPosition.top;
	        curLeft = curPosition.left;
	      } else {
	        curTop = parseFloat(curCSSTop) || 0;
	        curLeft = parseFloat(curCSSLeft) || 0;
	      }
	      if (jQuery.isFunction(options)) {
	        options = options.call(elem, i, curOffset);
	      }
	      if (options.top != null) {
	        props.top = (options.top - curOffset.top) + curTop;
	      }
	      if (options.left != null) {
	        props.left = (options.left - curOffset.left) + curLeft;
	      }
	      if ("using" in options) {
	        options.using.call(elem, props);
	      } else {
	        curElem.css(props);
	      }
	    }};
	  jQuery.fn.extend({
	    offset: function(options) {
	      if (arguments.length) {
	        return options === undefined ? this : this.each(function(i) {
	          jQuery.offset.setOffset(this, options, i);
	        });
	      }
	      var docElem,
	          win,
	          elem = this[0],
	          box = {
	            top: 0,
	            left: 0
	          },
	          doc = elem && elem.ownerDocument;
	      if (!doc) {
	        return;
	      }
	      docElem = doc.documentElement;
	      if (!jQuery.contains(docElem, elem)) {
	        return box;
	      }
	      if (typeof elem.getBoundingClientRect !== strundefined) {
	        box = elem.getBoundingClientRect();
	      }
	      win = getWindow(doc);
	      return {
	        top: box.top + win.pageYOffset - docElem.clientTop,
	        left: box.left + win.pageXOffset - docElem.clientLeft
	      };
	    },
	    position: function() {
	      if (!this[0]) {
	        return;
	      }
	      var offsetParent,
	          offset,
	          elem = this[0],
	          parentOffset = {
	            top: 0,
	            left: 0
	          };
	      if (jQuery.css(elem, "position") === "fixed") {
	        offset = elem.getBoundingClientRect();
	      } else {
	        offsetParent = this.offsetParent();
	        offset = this.offset();
	        if (!jQuery.nodeName(offsetParent[0], "html")) {
	          parentOffset = offsetParent.offset();
	        }
	        parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
	        parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
	      }
	      return {
	        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
	        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
	      };
	    },
	    offsetParent: function() {
	      return this.map(function() {
	        var offsetParent = this.offsetParent || docElem;
	        while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
	          offsetParent = offsetParent.offsetParent;
	        }
	        return offsetParent || docElem;
	      });
	    }
	  });
	  jQuery.each({
	    scrollLeft: "pageXOffset",
	    scrollTop: "pageYOffset"
	  }, function(method, prop) {
	    var top = "pageYOffset" === prop;
	    jQuery.fn[method] = function(val) {
	      return access(this, function(elem, method, val) {
	        var win = getWindow(elem);
	        if (val === undefined) {
	          return win ? win[prop] : elem[method];
	        }
	        if (win) {
	          win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
	        } else {
	          elem[method] = val;
	        }
	      }, method, val, arguments.length, null);
	    };
	  });
	  jQuery.each(["top", "left"], function(i, prop) {
	    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
	      if (computed) {
	        computed = curCSS(elem, prop);
	        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
	      }
	    });
	  });
	  jQuery.each({
	    Height: "height",
	    Width: "width"
	  }, function(name, type) {
	    jQuery.each({
	      padding: "inner" + name,
	      content: type,
	      "": "outer" + name
	    }, function(defaultExtra, funcName) {
	      jQuery.fn[funcName] = function(margin, value) {
	        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
	            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
	        return access(this, function(elem, type, value) {
	          var doc;
	          if (jQuery.isWindow(elem)) {
	            return elem.document.documentElement["client" + name];
	          }
	          if (elem.nodeType === 9) {
	            doc = elem.documentElement;
	            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
	          }
	          return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
	        }, type, chainable ? margin : undefined, chainable, null);
	      };
	    });
	  });
	  jQuery.fn.size = function() {
	    return this.length;
	  };
	  jQuery.fn.andSelf = jQuery.fn.addBack;
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return jQuery;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  var _jQuery = window.jQuery,
	      _$ = window.$;
	  jQuery.noConflict = function(deep) {
	    if (window.$ === jQuery) {
	      window.$ = _$;
	    }
	    if (deep && window.jQuery === jQuery) {
	      window.jQuery = _jQuery;
	    }
	    return jQuery;
	  };
	  if (typeof noGlobal === strundefined) {
	    window.jQuery = window.$ = jQuery;
	  }
	  return jQuery;
	}));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {!function(e) {
	  if (true)
	    module.exports = e();
	  else if ("function" == typeof define && define.amd)
	    define([], e);
	  else {
	    var f;
	    "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.Promise = e();
	  }
	}(function() {
	  var define,
	      module,
	      exports;
	  return (function e(t, n, r) {
	    function s(o, u) {
	      if (!n[o]) {
	        if (!t[o]) {
	          var a = typeof _dereq_ == "function" && _dereq_;
	          if (!u && a)
	            return a(o, !0);
	          if (i)
	            return i(o, !0);
	          var f = new Error("Cannot find module '" + o + "'");
	          throw f.code = "MODULE_NOT_FOUND", f;
	        }
	        var l = n[o] = {exports: {}};
	        t[o][0].call(l.exports, function(e) {
	          var n = t[o][1][e];
	          return s(n ? n : e);
	        }, l, l.exports, e, t, n, r);
	      }
	      return n[o].exports;
	    }
	    var i = typeof _dereq_ == "function" && _dereq_;
	    for (var o = 0; o < r.length; o++)
	      s(r[o]);
	    return s;
	  })({
	    1: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        var SomePromiseArray = Promise._SomePromiseArray;
	        function any(promises) {
	          var ret = new SomePromiseArray(promises);
	          var promise = ret.promise();
	          ret.setHowMany(1);
	          ret.setUnwrap();
	          ret.init();
	          return promise;
	        }
	        Promise.any = function(promises) {
	          return any(promises);
	        };
	        Promise.prototype.any = function() {
	          return any(this);
	        };
	      };
	    }, {}],
	    2: [function(_dereq_, module, exports) {
	      "use strict";
	      var firstLineError;
	      try {
	        throw new Error();
	      } catch (e) {
	        firstLineError = e;
	      }
	      var schedule = _dereq_("./schedule.js");
	      var Queue = _dereq_("./queue.js");
	      var _process = typeof process !== "undefined" ? process : undefined;
	      function Async() {
	        this._isTickUsed = false;
	        this._lateQueue = new Queue(16);
	        this._normalQueue = new Queue(16);
	        var self = this;
	        this.drainQueues = function() {
	          self._drainQueues();
	        };
	        this._schedule = schedule.isStatic ? schedule(this.drainQueues) : schedule;
	      }
	      Async.prototype.haveItemsQueued = function() {
	        return this._normalQueue.length() > 0;
	      };
	      Async.prototype._withDomain = function(fn) {
	        if (_process !== undefined && _process.domain != null && !fn.domain) {
	          fn = _process.domain.bind(fn);
	        }
	        return fn;
	      };
	      Async.prototype.throwLater = function(fn, arg) {
	        if (arguments.length === 1) {
	          arg = fn;
	          fn = function() {
	            throw arg;
	          };
	        }
	        fn = this._withDomain(fn);
	        if (typeof setTimeout !== "undefined") {
	          setTimeout(function() {
	            fn(arg);
	          }, 0);
	        } else
	          try {
	            this._schedule(function() {
	              fn(arg);
	            });
	          } catch (e) {
	            throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
	          }
	      };
	      Async.prototype.invokeLater = function(fn, receiver, arg) {
	        fn = this._withDomain(fn);
	        this._lateQueue.push(fn, receiver, arg);
	        this._queueTick();
	      };
	      Async.prototype.invokeFirst = function(fn, receiver, arg) {
	        fn = this._withDomain(fn);
	        this._normalQueue.unshift(fn, receiver, arg);
	        this._queueTick();
	      };
	      Async.prototype.invoke = function(fn, receiver, arg) {
	        fn = this._withDomain(fn);
	        this._normalQueue.push(fn, receiver, arg);
	        this._queueTick();
	      };
	      Async.prototype.settlePromises = function(promise) {
	        this._normalQueue._pushOne(promise);
	        this._queueTick();
	      };
	      Async.prototype._drainQueue = function(queue) {
	        while (queue.length() > 0) {
	          var fn = queue.shift();
	          if (typeof fn !== "function") {
	            fn._settlePromises();
	            continue;
	          }
	          var receiver = queue.shift();
	          var arg = queue.shift();
	          fn.call(receiver, arg);
	        }
	      };
	      Async.prototype._drainQueues = function() {
	        this._drainQueue(this._normalQueue);
	        this._reset();
	        this._drainQueue(this._lateQueue);
	      };
	      Async.prototype._queueTick = function() {
	        if (!this._isTickUsed) {
	          this._isTickUsed = true;
	          this._schedule(this.drainQueues);
	        }
	      };
	      Async.prototype._reset = function() {
	        this._isTickUsed = false;
	      };
	      module.exports = new Async();
	      module.exports.firstLineError = firstLineError;
	    }, {
	      "./queue.js": 28,
	      "./schedule.js": 31
	    }],
	    3: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL, tryConvertToPromise) {
	        var rejectThis = function(_, e) {
	          this._reject(e);
	        };
	        var targetRejected = function(e, context) {
	          context.promiseRejectionQueued = true;
	          context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
	        };
	        var bindingResolved = function(thisArg, context) {
	          this._setBoundTo(thisArg);
	          if (this._isPending()) {
	            this._resolveCallback(context.target);
	          }
	        };
	        var bindingRejected = function(e, context) {
	          if (!context.promiseRejectionQueued)
	            this._reject(e);
	        };
	        Promise.prototype.bind = function(thisArg) {
	          var maybePromise = tryConvertToPromise(thisArg);
	          var ret = new Promise(INTERNAL);
	          ret._propagateFrom(this, 1);
	          var target = this._target();
	          if (maybePromise instanceof Promise) {
	            var context = {
	              promiseRejectionQueued: false,
	              promise: ret,
	              target: target,
	              bindingPromise: maybePromise
	            };
	            target._then(INTERNAL, targetRejected, ret._progress, ret, context);
	            maybePromise._then(bindingResolved, bindingRejected, ret._progress, ret, context);
	          } else {
	            ret._setBoundTo(thisArg);
	            ret._resolveCallback(target);
	          }
	          return ret;
	        };
	        Promise.prototype._setBoundTo = function(obj) {
	          if (obj !== undefined) {
	            this._bitField = this._bitField | 131072;
	            this._boundTo = obj;
	          } else {
	            this._bitField = this._bitField & (~131072);
	          }
	        };
	        Promise.prototype._isBound = function() {
	          return (this._bitField & 131072) === 131072;
	        };
	        Promise.bind = function(thisArg, value) {
	          var maybePromise = tryConvertToPromise(thisArg);
	          var ret = new Promise(INTERNAL);
	          if (maybePromise instanceof Promise) {
	            maybePromise._then(function(thisArg) {
	              ret._setBoundTo(thisArg);
	              ret._resolveCallback(value);
	            }, ret._reject, ret._progress, ret, null);
	          } else {
	            ret._setBoundTo(thisArg);
	            ret._resolveCallback(value);
	          }
	          return ret;
	        };
	      };
	    }, {}],
	    4: [function(_dereq_, module, exports) {
	      "use strict";
	      var old;
	      if (typeof Promise !== "undefined")
	        old = Promise;
	      function noConflict() {
	        try {
	          if (Promise === bluebird)
	            Promise = old;
	        } catch (e) {}
	        return bluebird;
	      }
	      var bluebird = _dereq_("./promise.js")();
	      bluebird.noConflict = noConflict;
	      module.exports = bluebird;
	    }, {"./promise.js": 23}],
	    5: [function(_dereq_, module, exports) {
	      "use strict";
	      var cr = Object.create;
	      if (cr) {
	        var callerCache = cr(null);
	        var getterCache = cr(null);
	        callerCache[" size"] = getterCache[" size"] = 0;
	      }
	      module.exports = function(Promise) {
	        var util = _dereq_("./util.js");
	        var canEvaluate = util.canEvaluate;
	        var isIdentifier = util.isIdentifier;
	        var getMethodCaller;
	        var getGetter;
	        if (false) {
	          var makeMethodCaller = function(methodName) {
	            return new Function("ensureMethod", "                                    \n\
	        return function(obj) {                                               \n\
	            'use strict'                                                     \n\
	            var len = this.length;                                           \n\
	            ensureMethod(obj, 'methodName');                                 \n\
	            switch(len) {                                                    \n\
	                case 1: return obj.methodName(this[0]);                      \n\
	                case 2: return obj.methodName(this[0], this[1]);             \n\
	                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
	                case 0: return obj.methodName();                             \n\
	                default:                                                     \n\
	                    return obj.methodName.apply(obj, this);                  \n\
	            }                                                                \n\
	        };                                                                   \n\
	        ".replace(/methodName/g, methodName))(ensureMethod);
	          };
	          var makeGetter = function(propertyName) {
	            return new Function("obj", "                                             \n\
	        'use strict';                                                        \n\
	        return obj.propertyName;                                             \n\
	        ".replace("propertyName", propertyName));
	          };
	          var getCompiled = function(name, compiler, cache) {
	            var ret = cache[name];
	            if (typeof ret !== "function") {
	              if (!isIdentifier(name)) {
	                return null;
	              }
	              ret = compiler(name);
	              cache[name] = ret;
	              cache[" size"]++;
	              if (cache[" size"] > 512) {
	                var keys = Object.keys(cache);
	                for (var i = 0; i < 256; ++i)
	                  delete cache[keys[i]];
	                cache[" size"] = keys.length - 256;
	              }
	            }
	            return ret;
	          };
	          getMethodCaller = function(name) {
	            return getCompiled(name, makeMethodCaller, callerCache);
	          };
	          getGetter = function(name) {
	            return getCompiled(name, makeGetter, getterCache);
	          };
	        }
	        function ensureMethod(obj, methodName) {
	          var fn;
	          if (obj != null)
	            fn = obj[methodName];
	          if (typeof fn !== "function") {
	            var message = "Object " + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
	            throw new Promise.TypeError(message);
	          }
	          return fn;
	        }
	        function caller(obj) {
	          var methodName = this.pop();
	          var fn = ensureMethod(obj, methodName);
	          return fn.apply(obj, this);
	        }
	        Promise.prototype.call = function(methodName) {
	          var $_len = arguments.length;
	          var args = new Array($_len - 1);
	          for (var $_i = 1; $_i < $_len; ++$_i) {
	            args[$_i - 1] = arguments[$_i];
	          }
	          if (false) {
	            if (canEvaluate) {
	              var maybeCaller = getMethodCaller(methodName);
	              if (maybeCaller !== null) {
	                return this._then(maybeCaller, undefined, undefined, args, undefined);
	              }
	            }
	          }
	          args.push(methodName);
	          return this._then(caller, undefined, undefined, args, undefined);
	        };
	        function namedGetter(obj) {
	          return obj[this];
	        }
	        function indexedGetter(obj) {
	          var index = +this;
	          if (index < 0)
	            index = Math.max(0, index + obj.length);
	          return obj[index];
	        }
	        Promise.prototype.get = function(propertyName) {
	          var isIndex = (typeof propertyName === "number");
	          var getter;
	          if (!isIndex) {
	            if (canEvaluate) {
	              var maybeGetter = getGetter(propertyName);
	              getter = maybeGetter !== null ? maybeGetter : namedGetter;
	            } else {
	              getter = namedGetter;
	            }
	          } else {
	            getter = indexedGetter;
	          }
	          return this._then(getter, undefined, undefined, propertyName, undefined);
	        };
	      };
	    }, {"./util.js": 38}],
	    6: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        var errors = _dereq_("./errors.js");
	        var async = _dereq_("./async.js");
	        var CancellationError = errors.CancellationError;
	        Promise.prototype._cancel = function(reason) {
	          if (!this.isCancellable())
	            return this;
	          var parent;
	          var promiseToReject = this;
	          while ((parent = promiseToReject._cancellationParent) !== undefined && parent.isCancellable()) {
	            promiseToReject = parent;
	          }
	          this._unsetCancellable();
	          promiseToReject._target()._rejectCallback(reason, false, true);
	        };
	        Promise.prototype.cancel = function(reason) {
	          if (!this.isCancellable())
	            return this;
	          if (reason === undefined)
	            reason = new CancellationError();
	          async.invokeLater(this._cancel, this, reason);
	          return this;
	        };
	        Promise.prototype.cancellable = function() {
	          if (this._cancellable())
	            return this;
	          this._setCancellable();
	          this._cancellationParent = undefined;
	          return this;
	        };
	        Promise.prototype.uncancellable = function() {
	          var ret = this.then();
	          ret._unsetCancellable();
	          return ret;
	        };
	        Promise.prototype.fork = function(didFulfill, didReject, didProgress) {
	          var ret = this._then(didFulfill, didReject, didProgress, undefined, undefined);
	          ret._setCancellable();
	          ret._cancellationParent = undefined;
	          return ret;
	        };
	      };
	    }, {
	      "./async.js": 2,
	      "./errors.js": 13
	    }],
	    7: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function() {
	        var async = _dereq_("./async.js");
	        var util = _dereq_("./util.js");
	        var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
	        var stackFramePattern = null;
	        var formatStack = null;
	        var indentStackFrames = false;
	        var warn;
	        function CapturedTrace(parent) {
	          this._parent = parent;
	          var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
	          captureStackTrace(this, CapturedTrace);
	          if (length > 32)
	            this.uncycle();
	        }
	        util.inherits(CapturedTrace, Error);
	        CapturedTrace.prototype.uncycle = function() {
	          var length = this._length;
	          if (length < 2)
	            return;
	          var nodes = [];
	          var stackToIndex = {};
	          for (var i = 0,
	              node = this; node !== undefined; ++i) {
	            nodes.push(node);
	            node = node._parent;
	          }
	          length = this._length = i;
	          for (var i = length - 1; i >= 0; --i) {
	            var stack = nodes[i].stack;
	            if (stackToIndex[stack] === undefined) {
	              stackToIndex[stack] = i;
	            }
	          }
	          for (var i = 0; i < length; ++i) {
	            var currentStack = nodes[i].stack;
	            var index = stackToIndex[currentStack];
	            if (index !== undefined && index !== i) {
	              if (index > 0) {
	                nodes[index - 1]._parent = undefined;
	                nodes[index - 1]._length = 1;
	              }
	              nodes[i]._parent = undefined;
	              nodes[i]._length = 1;
	              var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
	              if (index < length - 1) {
	                cycleEdgeNode._parent = nodes[index + 1];
	                cycleEdgeNode._parent.uncycle();
	                cycleEdgeNode._length = cycleEdgeNode._parent._length + 1;
	              } else {
	                cycleEdgeNode._parent = undefined;
	                cycleEdgeNode._length = 1;
	              }
	              var currentChildLength = cycleEdgeNode._length + 1;
	              for (var j = i - 2; j >= 0; --j) {
	                nodes[j]._length = currentChildLength;
	                currentChildLength++;
	              }
	              return;
	            }
	          }
	        };
	        CapturedTrace.prototype.parent = function() {
	          return this._parent;
	        };
	        CapturedTrace.prototype.hasParent = function() {
	          return this._parent !== undefined;
	        };
	        CapturedTrace.prototype.attachExtraTrace = function(error) {
	          if (error.__stackCleaned__)
	            return;
	          this.uncycle();
	          var parsed = CapturedTrace.parseStackAndMessage(error);
	          var message = parsed.message;
	          var stacks = [parsed.stack];
	          var trace = this;
	          while (trace !== undefined) {
	            stacks.push(cleanStack(trace.stack.split("\n")));
	            trace = trace._parent;
	          }
	          removeCommonRoots(stacks);
	          removeDuplicateOrEmptyJumps(stacks);
	          error.stack = reconstructStack(message, stacks);
	          util.notEnumerableProp(error, "__stackCleaned__", true);
	        };
	        function reconstructStack(message, stacks) {
	          for (var i = 0; i < stacks.length - 1; ++i) {
	            stacks[i].push("From previous event:");
	            stacks[i] = stacks[i].join("\n");
	          }
	          if (i < stacks.length) {
	            stacks[i] = stacks[i].join("\n");
	          }
	          return message + "\n" + stacks.join("\n");
	        }
	        function removeDuplicateOrEmptyJumps(stacks) {
	          for (var i = 0; i < stacks.length; ++i) {
	            if (stacks[i].length === 0 || ((i + 1 < stacks.length) && stacks[i][0] === stacks[i + 1][0])) {
	              stacks.splice(i, 1);
	              i--;
	            }
	          }
	        }
	        function removeCommonRoots(stacks) {
	          var current = stacks[0];
	          for (var i = 1; i < stacks.length; ++i) {
	            var prev = stacks[i];
	            var currentLastIndex = current.length - 1;
	            var currentLastLine = current[currentLastIndex];
	            var commonRootMeetPoint = -1;
	            for (var j = prev.length - 1; j >= 0; --j) {
	              if (prev[j] === currentLastLine) {
	                commonRootMeetPoint = j;
	                break;
	              }
	            }
	            for (var j = commonRootMeetPoint; j >= 0; --j) {
	              var line = prev[j];
	              if (current[currentLastIndex] === line) {
	                current.pop();
	                currentLastIndex--;
	              } else {
	                break;
	              }
	            }
	            current = prev;
	          }
	        }
	        function cleanStack(stack) {
	          var ret = [];
	          for (var i = 0; i < stack.length; ++i) {
	            var line = stack[i];
	            var isTraceLine = stackFramePattern.test(line) || "    (No stack trace)" === line;
	            var isInternalFrame = isTraceLine && shouldIgnore(line);
	            if (isTraceLine && !isInternalFrame) {
	              if (indentStackFrames && line.charAt(0) !== " ") {
	                line = "    " + line;
	              }
	              ret.push(line);
	            }
	          }
	          return ret;
	        }
	        function stackFramesAsArray(error) {
	          var stack = error.stack.replace(/\s+$/g, "").split("\n");
	          for (var i = 0; i < stack.length; ++i) {
	            var line = stack[i];
	            if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
	              break;
	            }
	          }
	          if (i > 0) {
	            stack = stack.slice(i);
	          }
	          return stack;
	        }
	        CapturedTrace.parseStackAndMessage = function(error) {
	          var stack = error.stack;
	          var message = error.toString();
	          stack = typeof stack === "string" && stack.length > 0 ? stackFramesAsArray(error) : ["    (No stack trace)"];
	          return {
	            message: message,
	            stack: cleanStack(stack)
	          };
	        };
	        CapturedTrace.formatAndLogError = function(error, title) {
	          if (typeof console !== "undefined") {
	            var message;
	            if (typeof error === "object" || typeof error === "function") {
	              var stack = error.stack;
	              message = title + formatStack(stack, error);
	            } else {
	              message = title + String(error);
	            }
	            if (typeof warn === "function") {
	              warn(message);
	            } else if (typeof console.log === "function" || typeof console.log === "object") {
	              console.log(message);
	            }
	          }
	        };
	        CapturedTrace.unhandledRejection = function(reason) {
	          CapturedTrace.formatAndLogError(reason, "^--- With additional stack trace: ");
	        };
	        CapturedTrace.isSupported = function() {
	          return typeof captureStackTrace === "function";
	        };
	        CapturedTrace.fireRejectionEvent = function(name, localHandler, reason, promise) {
	          var localEventFired = false;
	          try {
	            if (typeof localHandler === "function") {
	              localEventFired = true;
	              if (name === "rejectionHandled") {
	                localHandler(promise);
	              } else {
	                localHandler(reason, promise);
	              }
	            }
	          } catch (e) {
	            async.throwLater(e);
	          }
	          var globalEventFired = false;
	          try {
	            globalEventFired = fireGlobalEvent(name, reason, promise);
	          } catch (e) {
	            globalEventFired = true;
	            async.throwLater(e);
	          }
	          var domEventFired = false;
	          if (fireDomEvent) {
	            try {
	              domEventFired = fireDomEvent(name.toLowerCase(), {
	                reason: reason,
	                promise: promise
	              });
	            } catch (e) {
	              domEventFired = true;
	              async.throwLater(e);
	            }
	          }
	          if (!globalEventFired && !localEventFired && !domEventFired && name === "unhandledRejection") {
	            CapturedTrace.formatAndLogError(reason, "Unhandled rejection ");
	          }
	        };
	        function formatNonError(obj) {
	          var str;
	          if (typeof obj === "function") {
	            str = "[function " + (obj.name || "anonymous") + "]";
	          } else {
	            str = obj.toString();
	            var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	            if (ruselessToString.test(str)) {
	              try {
	                var newStr = JSON.stringify(obj);
	                str = newStr;
	              } catch (e) {}
	            }
	            if (str.length === 0) {
	              str = "(empty array)";
	            }
	          }
	          return ("(<" + snip(str) + ">, no stack trace)");
	        }
	        function snip(str) {
	          var maxChars = 41;
	          if (str.length < maxChars) {
	            return str;
	          }
	          return str.substr(0, maxChars - 3) + "...";
	        }
	        var shouldIgnore = function() {
	          return false;
	        };
	        var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
	        function parseLineInfo(line) {
	          var matches = line.match(parseLineInfoRegex);
	          if (matches) {
	            return {
	              fileName: matches[1],
	              line: parseInt(matches[2], 10)
	            };
	          }
	        }
	        CapturedTrace.setBounds = function(firstLineError, lastLineError) {
	          if (!CapturedTrace.isSupported())
	            return;
	          var firstStackLines = firstLineError.stack.split("\n");
	          var lastStackLines = lastLineError.stack.split("\n");
	          var firstIndex = -1;
	          var lastIndex = -1;
	          var firstFileName;
	          var lastFileName;
	          for (var i = 0; i < firstStackLines.length; ++i) {
	            var result = parseLineInfo(firstStackLines[i]);
	            if (result) {
	              firstFileName = result.fileName;
	              firstIndex = result.line;
	              break;
	            }
	          }
	          for (var i = 0; i < lastStackLines.length; ++i) {
	            var result = parseLineInfo(lastStackLines[i]);
	            if (result) {
	              lastFileName = result.fileName;
	              lastIndex = result.line;
	              break;
	            }
	          }
	          if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
	            return;
	          }
	          shouldIgnore = function(line) {
	            if (bluebirdFramePattern.test(line))
	              return true;
	            var info = parseLineInfo(line);
	            if (info) {
	              if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
	                return true;
	              }
	            }
	            return false;
	          };
	        };
	        var captureStackTrace = (function stackDetection() {
	          var v8stackFramePattern = /^\s*at\s*/;
	          var v8stackFormatter = function(stack, error) {
	            if (typeof stack === "string")
	              return stack;
	            if (error.name !== undefined && error.message !== undefined) {
	              return error.toString();
	            }
	            return formatNonError(error);
	          };
	          if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
	            Error.stackTraceLimit = Error.stackTraceLimit + 6;
	            stackFramePattern = v8stackFramePattern;
	            formatStack = v8stackFormatter;
	            var captureStackTrace = Error.captureStackTrace;
	            shouldIgnore = function(line) {
	              return bluebirdFramePattern.test(line);
	            };
	            return function(receiver, ignoreUntil) {
	              Error.stackTraceLimit = Error.stackTraceLimit + 6;
	              captureStackTrace(receiver, ignoreUntil);
	              Error.stackTraceLimit = Error.stackTraceLimit - 6;
	            };
	          }
	          var err = new Error();
	          if (typeof err.stack === "string" && err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
	            stackFramePattern = /@/;
	            formatStack = v8stackFormatter;
	            indentStackFrames = true;
	            return function captureStackTrace(o) {
	              o.stack = new Error().stack;
	            };
	          }
	          var hasStackAfterThrow;
	          try {
	            throw new Error();
	          } catch (e) {
	            hasStackAfterThrow = ("stack" in e);
	          }
	          if (!("stack" in err) && hasStackAfterThrow) {
	            stackFramePattern = v8stackFramePattern;
	            formatStack = v8stackFormatter;
	            return function captureStackTrace(o) {
	              Error.stackTraceLimit = Error.stackTraceLimit + 6;
	              try {
	                throw new Error();
	              } catch (e) {
	                o.stack = e.stack;
	              }
	              Error.stackTraceLimit = Error.stackTraceLimit - 6;
	            };
	          }
	          formatStack = function(stack, error) {
	            if (typeof stack === "string")
	              return stack;
	            if ((typeof error === "object" || typeof error === "function") && error.name !== undefined && error.message !== undefined) {
	              return error.toString();
	            }
	            return formatNonError(error);
	          };
	          return null;
	        })([]);
	        var fireDomEvent;
	        var fireGlobalEvent = (function() {
	          if (util.isNode) {
	            return function(name, reason, promise) {
	              if (name === "rejectionHandled") {
	                return process.emit(name, promise);
	              } else {
	                return process.emit(name, reason, promise);
	              }
	            };
	          } else {
	            var customEventWorks = false;
	            var anyEventWorks = true;
	            try {
	              var ev = new self.CustomEvent("test");
	              customEventWorks = ev instanceof CustomEvent;
	            } catch (e) {}
	            if (!customEventWorks) {
	              try {
	                var event = document.createEvent("CustomEvent");
	                event.initCustomEvent("testingtheevent", false, true, {});
	                self.dispatchEvent(event);
	              } catch (e) {
	                anyEventWorks = false;
	              }
	            }
	            if (anyEventWorks) {
	              fireDomEvent = function(type, detail) {
	                var event;
	                if (customEventWorks) {
	                  event = new self.CustomEvent(type, {
	                    detail: detail,
	                    bubbles: false,
	                    cancelable: true
	                  });
	                } else if (self.dispatchEvent) {
	                  event = document.createEvent("CustomEvent");
	                  event.initCustomEvent(type, false, true, detail);
	                }
	                return event ? !self.dispatchEvent(event) : false;
	              };
	            }
	            var toWindowMethodNameMap = {};
	            toWindowMethodNameMap["unhandledRejection"] = ("on" + "unhandledRejection").toLowerCase();
	            toWindowMethodNameMap["rejectionHandled"] = ("on" + "rejectionHandled").toLowerCase();
	            return function(name, reason, promise) {
	              var methodName = toWindowMethodNameMap[name];
	              var method = self[methodName];
	              if (!method)
	                return false;
	              if (name === "rejectionHandled") {
	                method.call(self, promise);
	              } else {
	                method.call(self, reason, promise);
	              }
	              return true;
	            };
	          }
	        })();
	        if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
	          warn = function(message) {
	            console.warn(message);
	          };
	          if (util.isNode && process.stderr.isTTY) {
	            warn = function(message) {
	              process.stderr.write("\u001b[31m" + message + "\u001b[39m\n");
	            };
	          } else if (!util.isNode && typeof(new Error().stack) === "string") {
	            warn = function(message) {
	              console.warn("%c" + message, "color: red");
	            };
	          }
	        }
	        return CapturedTrace;
	      };
	    }, {
	      "./async.js": 2,
	      "./util.js": 38
	    }],
	    8: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(NEXT_FILTER) {
	        var util = _dereq_("./util.js");
	        var errors = _dereq_("./errors.js");
	        var tryCatch = util.tryCatch;
	        var errorObj = util.errorObj;
	        var keys = _dereq_("./es5.js").keys;
	        var TypeError = errors.TypeError;
	        function CatchFilter(instances, callback, promise) {
	          this._instances = instances;
	          this._callback = callback;
	          this._promise = promise;
	        }
	        function safePredicate(predicate, e) {
	          var safeObject = {};
	          var retfilter = tryCatch(predicate).call(safeObject, e);
	          if (retfilter === errorObj)
	            return retfilter;
	          var safeKeys = keys(safeObject);
	          if (safeKeys.length) {
	            errorObj.e = new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a");
	            return errorObj;
	          }
	          return retfilter;
	        }
	        CatchFilter.prototype.doFilter = function(e) {
	          var cb = this._callback;
	          var promise = this._promise;
	          var boundTo = promise._boundTo;
	          for (var i = 0,
	              len = this._instances.length; i < len; ++i) {
	            var item = this._instances[i];
	            var itemIsErrorType = item === Error || (item != null && item.prototype instanceof Error);
	            if (itemIsErrorType && e instanceof item) {
	              var ret = tryCatch(cb).call(boundTo, e);
	              if (ret === errorObj) {
	                NEXT_FILTER.e = ret.e;
	                return NEXT_FILTER;
	              }
	              return ret;
	            } else if (typeof item === "function" && !itemIsErrorType) {
	              var shouldHandle = safePredicate(item, e);
	              if (shouldHandle === errorObj) {
	                e = errorObj.e;
	                break;
	              } else if (shouldHandle) {
	                var ret = tryCatch(cb).call(boundTo, e);
	                if (ret === errorObj) {
	                  NEXT_FILTER.e = ret.e;
	                  return NEXT_FILTER;
	                }
	                return ret;
	              }
	            }
	          }
	          NEXT_FILTER.e = e;
	          return NEXT_FILTER;
	        };
	        return CatchFilter;
	      };
	    }, {
	      "./errors.js": 13,
	      "./es5.js": 14,
	      "./util.js": 38
	    }],
	    9: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, CapturedTrace, isDebugging) {
	        var contextStack = [];
	        function Context() {
	          this._trace = new CapturedTrace(peekContext());
	        }
	        Context.prototype._pushContext = function() {
	          if (!isDebugging())
	            return;
	          if (this._trace !== undefined) {
	            contextStack.push(this._trace);
	          }
	        };
	        Context.prototype._popContext = function() {
	          if (!isDebugging())
	            return;
	          if (this._trace !== undefined) {
	            contextStack.pop();
	          }
	        };
	        function createContext() {
	          if (isDebugging())
	            return new Context();
	        }
	        function peekContext() {
	          var lastIndex = contextStack.length - 1;
	          if (lastIndex >= 0) {
	            return contextStack[lastIndex];
	          }
	          return undefined;
	        }
	        Promise.prototype._peekContext = peekContext;
	        Promise.prototype._pushContext = Context.prototype._pushContext;
	        Promise.prototype._popContext = Context.prototype._popContext;
	        return createContext;
	      };
	    }, {}],
	    10: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, CapturedTrace) {
	        var async = _dereq_("./async.js");
	        var Warning = _dereq_("./errors.js").Warning;
	        var util = _dereq_("./util.js");
	        var canAttachTrace = util.canAttachTrace;
	        var unhandledRejectionHandled;
	        var possiblyUnhandledRejection;
	        var debugging = false || (util.isNode && (!!process.env["BLUEBIRD_DEBUG"] || process.env["NODE_ENV"] === "development"));
	        Promise.prototype._ensurePossibleRejectionHandled = function() {
	          this._setRejectionIsUnhandled();
	          async.invokeLater(this._notifyUnhandledRejection, this, undefined);
	        };
	        Promise.prototype._notifyUnhandledRejectionIsHandled = function() {
	          CapturedTrace.fireRejectionEvent("rejectionHandled", unhandledRejectionHandled, undefined, this);
	        };
	        Promise.prototype._notifyUnhandledRejection = function() {
	          if (this._isRejectionUnhandled()) {
	            var reason = this._getCarriedStackTrace() || this._settledValue;
	            this._setUnhandledRejectionIsNotified();
	            CapturedTrace.fireRejectionEvent("unhandledRejection", possiblyUnhandledRejection, reason, this);
	          }
	        };
	        Promise.prototype._setUnhandledRejectionIsNotified = function() {
	          this._bitField = this._bitField | 524288;
	        };
	        Promise.prototype._unsetUnhandledRejectionIsNotified = function() {
	          this._bitField = this._bitField & (~524288);
	        };
	        Promise.prototype._isUnhandledRejectionNotified = function() {
	          return (this._bitField & 524288) > 0;
	        };
	        Promise.prototype._setRejectionIsUnhandled = function() {
	          this._bitField = this._bitField | 2097152;
	        };
	        Promise.prototype._unsetRejectionIsUnhandled = function() {
	          this._bitField = this._bitField & (~2097152);
	          if (this._isUnhandledRejectionNotified()) {
	            this._unsetUnhandledRejectionIsNotified();
	            this._notifyUnhandledRejectionIsHandled();
	          }
	        };
	        Promise.prototype._isRejectionUnhandled = function() {
	          return (this._bitField & 2097152) > 0;
	        };
	        Promise.prototype._setCarriedStackTrace = function(capturedTrace) {
	          this._bitField = this._bitField | 1048576;
	          this._fulfillmentHandler0 = capturedTrace;
	        };
	        Promise.prototype._isCarryingStackTrace = function() {
	          return (this._bitField & 1048576) > 0;
	        };
	        Promise.prototype._getCarriedStackTrace = function() {
	          return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : undefined;
	        };
	        Promise.prototype._captureStackTrace = function() {
	          if (debugging) {
	            this._trace = new CapturedTrace(this._peekContext());
	          }
	          return this;
	        };
	        Promise.prototype._attachExtraTrace = function(error, ignoreSelf) {
	          if (debugging && canAttachTrace(error)) {
	            var trace = this._trace;
	            if (trace !== undefined) {
	              if (ignoreSelf)
	                trace = trace._parent;
	            }
	            if (trace !== undefined) {
	              trace.attachExtraTrace(error);
	            } else if (!error.__stackCleaned__) {
	              var parsed = CapturedTrace.parseStackAndMessage(error);
	              error.stack = parsed.message + "\n" + parsed.stack.join("\n");
	              util.notEnumerableProp(error, "__stackCleaned__", true);
	            }
	          }
	        };
	        Promise.prototype._warn = function(message) {
	          var warning = new Warning(message);
	          var ctx = this._peekContext();
	          if (ctx) {
	            ctx.attachExtraTrace(warning);
	          } else {
	            var parsed = CapturedTrace.parseStackAndMessage(warning);
	            warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
	          }
	          CapturedTrace.formatAndLogError(warning, "");
	        };
	        Promise.onPossiblyUnhandledRejection = function(fn) {
	          possiblyUnhandledRejection = typeof fn === "function" ? fn : undefined;
	        };
	        Promise.onUnhandledRejectionHandled = function(fn) {
	          unhandledRejectionHandled = typeof fn === "function" ? fn : undefined;
	        };
	        Promise.longStackTraces = function() {
	          if (async.haveItemsQueued() && debugging === false) {
	            throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/DT1qyG\u000a");
	          }
	          debugging = CapturedTrace.isSupported();
	        };
	        Promise.hasLongStackTraces = function() {
	          return debugging && CapturedTrace.isSupported();
	        };
	        if (!CapturedTrace.isSupported()) {
	          Promise.longStackTraces = function() {};
	          debugging = false;
	        }
	        return function() {
	          return debugging;
	        };
	      };
	    }, {
	      "./async.js": 2,
	      "./errors.js": 13,
	      "./util.js": 38
	    }],
	    11: [function(_dereq_, module, exports) {
	      "use strict";
	      var util = _dereq_("./util.js");
	      var isPrimitive = util.isPrimitive;
	      var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
	      module.exports = function(Promise) {
	        var returner = function() {
	          return this;
	        };
	        var thrower = function() {
	          throw this;
	        };
	        var wrapper = function(value, action) {
	          if (action === 1) {
	            return function() {
	              throw value;
	            };
	          } else if (action === 2) {
	            return function() {
	              return value;
	            };
	          }
	        };
	        Promise.prototype["return"] = Promise.prototype.thenReturn = function(value) {
	          if (wrapsPrimitiveReceiver && isPrimitive(value)) {
	            return this._then(wrapper(value, 2), undefined, undefined, undefined, undefined);
	          }
	          return this._then(returner, undefined, undefined, value, undefined);
	        };
	        Promise.prototype["throw"] = Promise.prototype.thenThrow = function(reason) {
	          if (wrapsPrimitiveReceiver && isPrimitive(reason)) {
	            return this._then(wrapper(reason, 1), undefined, undefined, undefined, undefined);
	          }
	          return this._then(thrower, undefined, undefined, reason, undefined);
	        };
	      };
	    }, {"./util.js": 38}],
	    12: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var PromiseReduce = Promise.reduce;
	        Promise.prototype.each = function(fn) {
	          return PromiseReduce(this, fn, null, INTERNAL);
	        };
	        Promise.each = function(promises, fn) {
	          return PromiseReduce(promises, fn, null, INTERNAL);
	        };
	      };
	    }, {}],
	    13: [function(_dereq_, module, exports) {
	      "use strict";
	      var es5 = _dereq_("./es5.js");
	      var Objectfreeze = es5.freeze;
	      var util = _dereq_("./util.js");
	      var inherits = util.inherits;
	      var notEnumerableProp = util.notEnumerableProp;
	      function subError(nameProperty, defaultMessage) {
	        function SubError(message) {
	          if (!(this instanceof SubError))
	            return new SubError(message);
	          notEnumerableProp(this, "message", typeof message === "string" ? message : defaultMessage);
	          notEnumerableProp(this, "name", nameProperty);
	          if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	          } else {
	            Error.call(this);
	          }
	        }
	        inherits(SubError, Error);
	        return SubError;
	      }
	      var _TypeError,
	          _RangeError;
	      var Warning = subError("Warning", "warning");
	      var CancellationError = subError("CancellationError", "cancellation error");
	      var TimeoutError = subError("TimeoutError", "timeout error");
	      var AggregateError = subError("AggregateError", "aggregate error");
	      try {
	        _TypeError = TypeError;
	        _RangeError = RangeError;
	      } catch (e) {
	        _TypeError = subError("TypeError", "type error");
	        _RangeError = subError("RangeError", "range error");
	      }
	      var methods = ("join pop push shift unshift slice filter forEach some " + "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");
	      for (var i = 0; i < methods.length; ++i) {
	        if (typeof Array.prototype[methods[i]] === "function") {
	          AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	        }
	      }
	      es5.defineProperty(AggregateError.prototype, "length", {
	        value: 0,
	        configurable: false,
	        writable: true,
	        enumerable: true
	      });
	      AggregateError.prototype["isOperational"] = true;
	      var level = 0;
	      AggregateError.prototype.toString = function() {
	        var indent = Array(level * 4 + 1).join(" ");
	        var ret = "\n" + indent + "AggregateError of:" + "\n";
	        level++;
	        indent = Array(level * 4 + 1).join(" ");
	        for (var i = 0; i < this.length; ++i) {
	          var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	          var lines = str.split("\n");
	          for (var j = 0; j < lines.length; ++j) {
	            lines[j] = indent + lines[j];
	          }
	          str = lines.join("\n");
	          ret += str + "\n";
	        }
	        level--;
	        return ret;
	      };
	      function OperationalError(message) {
	        if (!(this instanceof OperationalError))
	          return new OperationalError(message);
	        notEnumerableProp(this, "name", "OperationalError");
	        notEnumerableProp(this, "message", message);
	        this.cause = message;
	        this["isOperational"] = true;
	        if (message instanceof Error) {
	          notEnumerableProp(this, "message", message.message);
	          notEnumerableProp(this, "stack", message.stack);
	        } else if (Error.captureStackTrace) {
	          Error.captureStackTrace(this, this.constructor);
	        }
	      }
	      inherits(OperationalError, Error);
	      var errorTypes = Error["__BluebirdErrorTypes__"];
	      if (!errorTypes) {
	        errorTypes = Objectfreeze({
	          CancellationError: CancellationError,
	          TimeoutError: TimeoutError,
	          OperationalError: OperationalError,
	          RejectionError: OperationalError,
	          AggregateError: AggregateError
	        });
	        notEnumerableProp(Error, "__BluebirdErrorTypes__", errorTypes);
	      }
	      module.exports = {
	        Error: Error,
	        TypeError: _TypeError,
	        RangeError: _RangeError,
	        CancellationError: errorTypes.CancellationError,
	        OperationalError: errorTypes.OperationalError,
	        TimeoutError: errorTypes.TimeoutError,
	        AggregateError: errorTypes.AggregateError,
	        Warning: Warning
	      };
	    }, {
	      "./es5.js": 14,
	      "./util.js": 38
	    }],
	    14: [function(_dereq_, module, exports) {
	      var isES5 = (function() {
	        "use strict";
	        return this === undefined;
	      })();
	      if (isES5) {
	        module.exports = {
	          freeze: Object.freeze,
	          defineProperty: Object.defineProperty,
	          getDescriptor: Object.getOwnPropertyDescriptor,
	          keys: Object.keys,
	          names: Object.getOwnPropertyNames,
	          getPrototypeOf: Object.getPrototypeOf,
	          isArray: Array.isArray,
	          isES5: isES5,
	          propertyIsWritable: function(obj, prop) {
	            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	            return !!(!descriptor || descriptor.writable || descriptor.set);
	          }
	        };
	      } else {
	        var has = {}.hasOwnProperty;
	        var str = {}.toString;
	        var proto = {}.constructor.prototype;
	        var ObjectKeys = function(o) {
	          var ret = [];
	          for (var key in o) {
	            if (has.call(o, key)) {
	              ret.push(key);
	            }
	          }
	          return ret;
	        };
	        var ObjectGetDescriptor = function(o, key) {
	          return {value: o[key]};
	        };
	        var ObjectDefineProperty = function(o, key, desc) {
	          o[key] = desc.value;
	          return o;
	        };
	        var ObjectFreeze = function(obj) {
	          return obj;
	        };
	        var ObjectGetPrototypeOf = function(obj) {
	          try {
	            return Object(obj).constructor.prototype;
	          } catch (e) {
	            return proto;
	          }
	        };
	        var ArrayIsArray = function(obj) {
	          try {
	            return str.call(obj) === "[object Array]";
	          } catch (e) {
	            return false;
	          }
	        };
	        module.exports = {
	          isArray: ArrayIsArray,
	          keys: ObjectKeys,
	          names: ObjectKeys,
	          defineProperty: ObjectDefineProperty,
	          getDescriptor: ObjectGetDescriptor,
	          freeze: ObjectFreeze,
	          getPrototypeOf: ObjectGetPrototypeOf,
	          isES5: isES5,
	          propertyIsWritable: function() {
	            return true;
	          }
	        };
	      }
	    }, {}],
	    15: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var PromiseMap = Promise.map;
	        Promise.prototype.filter = function(fn, options) {
	          return PromiseMap(this, fn, options, INTERNAL);
	        };
	        Promise.filter = function(promises, fn, options) {
	          return PromiseMap(promises, fn, options, INTERNAL);
	        };
	      };
	    }, {}],
	    16: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, NEXT_FILTER, tryConvertToPromise) {
	        var util = _dereq_("./util.js");
	        var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
	        var isPrimitive = util.isPrimitive;
	        var thrower = util.thrower;
	        function returnThis() {
	          return this;
	        }
	        function throwThis() {
	          throw this;
	        }
	        function return$(r) {
	          return function() {
	            return r;
	          };
	        }
	        function throw$(r) {
	          return function() {
	            throw r;
	          };
	        }
	        function promisedFinally(ret, reasonOrValue, isFulfilled) {
	          var then;
	          if (wrapsPrimitiveReceiver && isPrimitive(reasonOrValue)) {
	            then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
	          } else {
	            then = isFulfilled ? returnThis : throwThis;
	          }
	          return ret._then(then, thrower, undefined, reasonOrValue, undefined);
	        }
	        function finallyHandler(reasonOrValue) {
	          var promise = this.promise;
	          var handler = this.handler;
	          var ret = promise._isBound() ? handler.call(promise._boundTo) : handler();
	          if (ret !== undefined) {
	            var maybePromise = tryConvertToPromise(ret, promise);
	            if (maybePromise instanceof Promise) {
	              maybePromise = maybePromise._target();
	              return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled());
	            }
	          }
	          if (promise.isRejected()) {
	            NEXT_FILTER.e = reasonOrValue;
	            return NEXT_FILTER;
	          } else {
	            return reasonOrValue;
	          }
	        }
	        function tapHandler(value) {
	          var promise = this.promise;
	          var handler = this.handler;
	          var ret = promise._isBound() ? handler.call(promise._boundTo, value) : handler(value);
	          if (ret !== undefined) {
	            var maybePromise = tryConvertToPromise(ret, promise);
	            if (maybePromise instanceof Promise) {
	              maybePromise = maybePromise._target();
	              return promisedFinally(maybePromise, value, true);
	            }
	          }
	          return value;
	        }
	        Promise.prototype._passThroughHandler = function(handler, isFinally) {
	          if (typeof handler !== "function")
	            return this.then();
	          var promiseAndHandler = {
	            promise: this,
	            handler: handler
	          };
	          return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : undefined, undefined, promiseAndHandler, undefined);
	        };
	        Promise.prototype.lastly = Promise.prototype["finally"] = function(handler) {
	          return this._passThroughHandler(handler, true);
	        };
	        Promise.prototype.tap = function(handler) {
	          return this._passThroughHandler(handler, false);
	        };
	      };
	    }, {"./util.js": 38}],
	    17: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, apiRejection, INTERNAL, tryConvertToPromise) {
	        var errors = _dereq_("./errors.js");
	        var TypeError = errors.TypeError;
	        var util = _dereq_("./util.js");
	        var errorObj = util.errorObj;
	        var tryCatch = util.tryCatch;
	        var yieldHandlers = [];
	        function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
	          for (var i = 0; i < yieldHandlers.length; ++i) {
	            traceParent._pushContext();
	            var result = tryCatch(yieldHandlers[i])(value);
	            traceParent._popContext();
	            if (result === errorObj) {
	              traceParent._pushContext();
	              var ret = Promise.reject(errorObj.e);
	              traceParent._popContext();
	              return ret;
	            }
	            var maybePromise = tryConvertToPromise(result, traceParent);
	            if (maybePromise instanceof Promise)
	              return maybePromise;
	          }
	          return null;
	        }
	        function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
	          var promise = this._promise = new Promise(INTERNAL);
	          promise._captureStackTrace();
	          this._stack = stack;
	          this._generatorFunction = generatorFunction;
	          this._receiver = receiver;
	          this._generator = undefined;
	          this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
	        }
	        PromiseSpawn.prototype.promise = function() {
	          return this._promise;
	        };
	        PromiseSpawn.prototype._run = function() {
	          this._generator = this._generatorFunction.call(this._receiver);
	          this._receiver = this._generatorFunction = undefined;
	          this._next(undefined);
	        };
	        PromiseSpawn.prototype._continue = function(result) {
	          if (result === errorObj) {
	            return this._promise._rejectCallback(result.e, false, true);
	          }
	          var value = result.value;
	          if (result.done === true) {
	            this._promise._resolveCallback(value);
	          } else {
	            var maybePromise = tryConvertToPromise(value, this._promise);
	            if (!(maybePromise instanceof Promise)) {
	              maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
	              if (maybePromise === null) {
	                this._throw(new TypeError("A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/4Y4pDk\u000a\u000a".replace("%s", value) + "From coroutine:\u000a" + this._stack.split("\n").slice(1, -7).join("\n")));
	                return;
	              }
	            }
	            maybePromise._then(this._next, this._throw, undefined, this, null);
	          }
	        };
	        PromiseSpawn.prototype._throw = function(reason) {
	          this._promise._attachExtraTrace(reason);
	          this._promise._pushContext();
	          var result = tryCatch(this._generator["throw"]).call(this._generator, reason);
	          this._promise._popContext();
	          this._continue(result);
	        };
	        PromiseSpawn.prototype._next = function(value) {
	          this._promise._pushContext();
	          var result = tryCatch(this._generator.next).call(this._generator, value);
	          this._promise._popContext();
	          this._continue(result);
	        };
	        Promise.coroutine = function(generatorFunction, options) {
	          if (typeof generatorFunction !== "function") {
	            throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
	          }
	          var yieldHandler = Object(options).yieldHandler;
	          var PromiseSpawn$ = PromiseSpawn;
	          var stack = new Error().stack;
	          return function() {
	            var generator = generatorFunction.apply(this, arguments);
	            var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
	            spawn._generator = generator;
	            spawn._next(undefined);
	            return spawn.promise();
	          };
	        };
	        Promise.coroutine.addYieldHandler = function(fn) {
	          if (typeof fn !== "function")
	            throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          yieldHandlers.push(fn);
	        };
	        Promise.spawn = function(generatorFunction) {
	          if (typeof generatorFunction !== "function") {
	            return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/6Vqhm0\u000a");
	          }
	          var spawn = new PromiseSpawn(generatorFunction, this);
	          var ret = spawn.promise();
	          spawn._run(Promise.spawn);
	          return ret;
	        };
	      };
	    }, {
	      "./errors.js": 13,
	      "./util.js": 38
	    }],
	    18: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var canEvaluate = util.canEvaluate;
	        var tryCatch = util.tryCatch;
	        var errorObj = util.errorObj;
	        var reject;
	        if (false) {
	          if (canEvaluate) {
	            var thenCallback = function(i) {
	              return new Function("value", "holder", "                             \n\
	            'use strict';                                                    \n\
	            holder.pIndex = value;                                           \n\
	            holder.checkFulfillment(this);                                   \n\
	            ".replace(/Index/g, i));
	            };
	            var caller = function(count) {
	              var values = [];
	              for (var i = 1; i <= count; ++i)
	                values.push("holder.p" + i);
	              return new Function("holder", "                                      \n\
	            'use strict';                                                    \n\
	            var callback = holder.fn;                                        \n\
	            return callback(values);                                         \n\
	            ".replace(/values/g, values.join(", ")));
	            };
	            var thenCallbacks = [];
	            var callers = [undefined];
	            for (var i = 1; i <= 5; ++i) {
	              thenCallbacks.push(thenCallback(i));
	              callers.push(caller(i));
	            }
	            var Holder = function(total, fn) {
	              this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
	              this.fn = fn;
	              this.total = total;
	              this.now = 0;
	            };
	            Holder.prototype.callers = callers;
	            Holder.prototype.checkFulfillment = function(promise) {
	              var now = this.now;
	              now++;
	              var total = this.total;
	              if (now >= total) {
	                var handler = this.callers[total];
	                promise._pushContext();
	                var ret = tryCatch(handler)(this);
	                promise._popContext();
	                if (ret === errorObj) {
	                  promise._rejectCallback(ret.e, false, true);
	                } else {
	                  promise._resolveCallback(ret);
	                }
	              } else {
	                this.now = now;
	              }
	            };
	            var reject = function(reason) {
	              this._reject(reason);
	            };
	          }
	        }
	        Promise.join = function() {
	          var last = arguments.length - 1;
	          var fn;
	          if (last > 0 && typeof arguments[last] === "function") {
	            fn = arguments[last];
	            if (false) {
	              if (last < 6 && canEvaluate) {
	                var ret = new Promise(INTERNAL);
	                ret._captureStackTrace();
	                var holder = new Holder(last, fn);
	                var callbacks = thenCallbacks;
	                for (var i = 0; i < last; ++i) {
	                  var maybePromise = tryConvertToPromise(arguments[i], ret);
	                  if (maybePromise instanceof Promise) {
	                    maybePromise = maybePromise._target();
	                    if (maybePromise._isPending()) {
	                      maybePromise._then(callbacks[i], reject, undefined, ret, holder);
	                    } else if (maybePromise._isFulfilled()) {
	                      callbacks[i].call(ret, maybePromise._value(), holder);
	                    } else {
	                      ret._reject(maybePromise._reason());
	                    }
	                  } else {
	                    callbacks[i].call(ret, maybePromise, holder);
	                  }
	                }
	                return ret;
	              }
	            }
	          }
	          var $_len = arguments.length;
	          var args = new Array($_len);
	          for (var $_i = 0; $_i < $_len; ++$_i) {
	            args[$_i] = arguments[$_i];
	          }
	          if (fn)
	            args.pop();
	          var ret = new PromiseArray(args).promise();
	          return fn !== undefined ? ret.spread(fn) : ret;
	        };
	      };
	    }, {"./util.js": 38}],
	    19: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var tryCatch = util.tryCatch;
	        var errorObj = util.errorObj;
	        var PENDING = {};
	        var EMPTY_ARRAY = [];
	        function MappingPromiseArray(promises, fn, limit, _filter) {
	          this.constructor$(promises);
	          this._promise._captureStackTrace();
	          this._callback = fn;
	          this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
	          this._limit = limit;
	          this._inFlight = 0;
	          this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
	          this._init$(undefined, -2);
	        }
	        util.inherits(MappingPromiseArray, PromiseArray);
	        MappingPromiseArray.prototype._init = function() {};
	        MappingPromiseArray.prototype._promiseFulfilled = function(value, index) {
	          var values = this._values;
	          var length = this.length();
	          var preservedValues = this._preservedValues;
	          var limit = this._limit;
	          if (values[index] === PENDING) {
	            values[index] = value;
	            if (limit >= 1) {
	              this._inFlight--;
	              this._drainQueue();
	              if (this._isResolved())
	                return;
	            }
	          } else {
	            if (limit >= 1 && this._inFlight >= limit) {
	              values[index] = value;
	              this._queue.push(index);
	              return;
	            }
	            if (preservedValues !== null)
	              preservedValues[index] = value;
	            var callback = this._callback;
	            var receiver = this._promise._boundTo;
	            this._promise._pushContext();
	            var ret = tryCatch(callback).call(receiver, value, index, length);
	            this._promise._popContext();
	            if (ret === errorObj)
	              return this._reject(ret.e);
	            var maybePromise = tryConvertToPromise(ret, this._promise);
	            if (maybePromise instanceof Promise) {
	              maybePromise = maybePromise._target();
	              if (maybePromise._isPending()) {
	                if (limit >= 1)
	                  this._inFlight++;
	                values[index] = PENDING;
	                return maybePromise._proxyPromiseArray(this, index);
	              } else if (maybePromise._isFulfilled()) {
	                ret = maybePromise._value();
	              } else {
	                return this._reject(maybePromise._reason());
	              }
	            }
	            values[index] = ret;
	          }
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= length) {
	            if (preservedValues !== null) {
	              this._filter(values, preservedValues);
	            } else {
	              this._resolve(values);
	            }
	          }
	        };
	        MappingPromiseArray.prototype._drainQueue = function() {
	          var queue = this._queue;
	          var limit = this._limit;
	          var values = this._values;
	          while (queue.length > 0 && this._inFlight < limit) {
	            if (this._isResolved())
	              return;
	            var index = queue.pop();
	            this._promiseFulfilled(values[index], index);
	          }
	        };
	        MappingPromiseArray.prototype._filter = function(booleans, values) {
	          var len = values.length;
	          var ret = new Array(len);
	          var j = 0;
	          for (var i = 0; i < len; ++i) {
	            if (booleans[i])
	              ret[j++] = values[i];
	          }
	          ret.length = j;
	          this._resolve(ret);
	        };
	        MappingPromiseArray.prototype.preservedValues = function() {
	          return this._preservedValues;
	        };
	        function map(promises, fn, options, _filter) {
	          var limit = typeof options === "object" && options !== null ? options.concurrency : 0;
	          limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
	          return new MappingPromiseArray(promises, fn, limit, _filter);
	        }
	        Promise.prototype.map = function(fn, options) {
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          return map(this, fn, options, null).promise();
	        };
	        Promise.map = function(promises, fn, options, _filter) {
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          return map(promises, fn, options, _filter).promise();
	        };
	      };
	    }, {"./util.js": 38}],
	    20: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	        var util = _dereq_("./util.js");
	        var tryCatch = util.tryCatch;
	        Promise.method = function(fn) {
	          if (typeof fn !== "function") {
	            throw new Promise.TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          }
	          return function() {
	            var ret = new Promise(INTERNAL);
	            ret._captureStackTrace();
	            ret._pushContext();
	            var value = tryCatch(fn).apply(this, arguments);
	            ret._popContext();
	            ret._resolveFromSyncValue(value);
	            return ret;
	          };
	        };
	        Promise.attempt = Promise["try"] = function(fn, args, ctx) {
	          if (typeof fn !== "function") {
	            return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          }
	          var ret = new Promise(INTERNAL);
	          ret._captureStackTrace();
	          ret._pushContext();
	          var value = util.isArray(args) ? tryCatch(fn).apply(ctx, args) : tryCatch(fn).call(ctx, args);
	          ret._popContext();
	          ret._resolveFromSyncValue(value);
	          return ret;
	        };
	        Promise.prototype._resolveFromSyncValue = function(value) {
	          if (value === util.errorObj) {
	            this._rejectCallback(value.e, false, true);
	          } else {
	            this._resolveCallback(value, true);
	          }
	        };
	      };
	    }, {"./util.js": 38}],
	    21: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        var util = _dereq_("./util.js");
	        var async = _dereq_("./async.js");
	        var tryCatch = util.tryCatch;
	        var errorObj = util.errorObj;
	        function spreadAdapter(val, nodeback) {
	          var promise = this;
	          if (!util.isArray(val))
	            return successAdapter.call(promise, val, nodeback);
	          var ret = tryCatch(nodeback).apply(promise._boundTo, [null].concat(val));
	          if (ret === errorObj) {
	            async.throwLater(ret.e);
	          }
	        }
	        function successAdapter(val, nodeback) {
	          var promise = this;
	          var receiver = promise._boundTo;
	          var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
	          if (ret === errorObj) {
	            async.throwLater(ret.e);
	          }
	        }
	        function errorAdapter(reason, nodeback) {
	          var promise = this;
	          if (!reason) {
	            var target = promise._target();
	            var newReason = target._getCarriedStackTrace();
	            newReason.cause = reason;
	            reason = newReason;
	          }
	          var ret = tryCatch(nodeback).call(promise._boundTo, reason);
	          if (ret === errorObj) {
	            async.throwLater(ret.e);
	          }
	        }
	        Promise.prototype.nodeify = function(nodeback, options) {
	          if (typeof nodeback == "function") {
	            var adapter = successAdapter;
	            if (options !== undefined && Object(options).spread) {
	              adapter = spreadAdapter;
	            }
	            this._then(adapter, errorAdapter, undefined, this, nodeback);
	          }
	          return this;
	        };
	      };
	    }, {
	      "./async.js": 2,
	      "./util.js": 38
	    }],
	    22: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray) {
	        var util = _dereq_("./util.js");
	        var async = _dereq_("./async.js");
	        var tryCatch = util.tryCatch;
	        var errorObj = util.errorObj;
	        Promise.prototype.progressed = function(handler) {
	          return this._then(undefined, undefined, handler, undefined, undefined);
	        };
	        Promise.prototype._progress = function(progressValue) {
	          if (this._isFollowingOrFulfilledOrRejected())
	            return;
	          this._target()._progressUnchecked(progressValue);
	        };
	        Promise.prototype._progressHandlerAt = function(index) {
	          return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2];
	        };
	        Promise.prototype._doProgressWith = function(progression) {
	          var progressValue = progression.value;
	          var handler = progression.handler;
	          var promise = progression.promise;
	          var receiver = progression.receiver;
	          var ret = tryCatch(handler).call(receiver, progressValue);
	          if (ret === errorObj) {
	            if (ret.e != null && ret.e.name !== "StopProgressPropagation") {
	              var trace = util.canAttachTrace(ret.e) ? ret.e : new Error(util.toString(ret.e));
	              promise._attachExtraTrace(trace);
	              promise._progress(ret.e);
	            }
	          } else if (ret instanceof Promise) {
	            ret._then(promise._progress, null, null, promise, undefined);
	          } else {
	            promise._progress(ret);
	          }
	        };
	        Promise.prototype._progressUnchecked = function(progressValue) {
	          var len = this._length();
	          var progress = this._progress;
	          for (var i = 0; i < len; i++) {
	            var handler = this._progressHandlerAt(i);
	            var promise = this._promiseAt(i);
	            if (!(promise instanceof Promise)) {
	              var receiver = this._receiverAt(i);
	              if (typeof handler === "function") {
	                handler.call(receiver, progressValue, promise);
	              } else if (receiver instanceof PromiseArray && !receiver._isResolved()) {
	                receiver._promiseProgressed(progressValue, promise);
	              }
	              continue;
	            }
	            if (typeof handler === "function") {
	              async.invoke(this._doProgressWith, this, {
	                handler: handler,
	                promise: promise,
	                receiver: this._receiverAt(i),
	                value: progressValue
	              });
	            } else {
	              async.invoke(progress, promise, progressValue);
	            }
	          }
	        };
	      };
	    }, {
	      "./async.js": 2,
	      "./util.js": 38
	    }],
	    23: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function() {
	        var makeSelfResolutionError = function() {
	          return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/LhFpo0\u000a");
	        };
	        var reflect = function() {
	          return new Promise.PromiseInspection(this._target());
	        };
	        var apiRejection = function(msg) {
	          return Promise.reject(new TypeError(msg));
	        };
	        var util = _dereq_("./util.js");
	        var async = _dereq_("./async.js");
	        var errors = _dereq_("./errors.js");
	        var TypeError = Promise.TypeError = errors.TypeError;
	        Promise.RangeError = errors.RangeError;
	        Promise.CancellationError = errors.CancellationError;
	        Promise.TimeoutError = errors.TimeoutError;
	        Promise.OperationalError = errors.OperationalError;
	        Promise.RejectionError = errors.OperationalError;
	        Promise.AggregateError = errors.AggregateError;
	        var INTERNAL = function() {};
	        var APPLY = {};
	        var NEXT_FILTER = {e: null};
	        var tryConvertToPromise = _dereq_("./thenables.js")(Promise, INTERNAL);
	        var PromiseArray = _dereq_("./promise_array.js")(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	        var CapturedTrace = _dereq_("./captured_trace.js")();
	        var isDebugging = _dereq_("./debuggability.js")(Promise, CapturedTrace);
	        var createContext = _dereq_("./context.js")(Promise, CapturedTrace, isDebugging);
	        var CatchFilter = _dereq_("./catch_filter.js")(NEXT_FILTER);
	        var PromiseResolver = _dereq_("./promise_resolver.js");
	        var nodebackForPromise = PromiseResolver._nodebackForPromise;
	        var errorObj = util.errorObj;
	        var tryCatch = util.tryCatch;
	        function Promise(resolver) {
	          if (typeof resolver !== "function") {
	            throw new TypeError("the promise constructor requires a resolver function\u000a\u000a    See http://goo.gl/EC22Yn\u000a");
	          }
	          if (this.constructor !== Promise) {
	            throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/KsIlge\u000a");
	          }
	          this._bitField = 0;
	          this._fulfillmentHandler0 = undefined;
	          this._rejectionHandler0 = undefined;
	          this._progressHandler0 = undefined;
	          this._promise0 = undefined;
	          this._receiver0 = undefined;
	          this._settledValue = undefined;
	          if (resolver !== INTERNAL)
	            this._resolveFromResolver(resolver);
	        }
	        Promise.prototype.toString = function() {
	          return "[object Promise]";
	        };
	        Promise.prototype.caught = Promise.prototype["catch"] = function(fn) {
	          var len = arguments.length;
	          if (len > 1) {
	            var catchInstances = new Array(len - 1),
	                j = 0,
	                i;
	            for (i = 0; i < len - 1; ++i) {
	              var item = arguments[i];
	              if (typeof item === "function") {
	                catchInstances[j++] = item;
	              } else {
	                return Promise.reject(new TypeError("Catch filter must inherit from Error or be a simple predicate function\u000a\u000a    See http://goo.gl/o84o68\u000a"));
	              }
	            }
	            catchInstances.length = j;
	            fn = arguments[i];
	            var catchFilter = new CatchFilter(catchInstances, fn, this);
	            return this._then(undefined, catchFilter.doFilter, undefined, catchFilter, undefined);
	          }
	          return this._then(undefined, fn, undefined, undefined, undefined);
	        };
	        Promise.prototype.reflect = function() {
	          return this._then(reflect, reflect, undefined, this, undefined);
	        };
	        Promise.prototype.then = function(didFulfill, didReject, didProgress) {
	          if (isDebugging() && arguments.length > 0 && typeof didFulfill !== "function" && typeof didReject !== "function") {
	            var msg = ".then() only accepts functions but was passed: " + util.classString(didFulfill);
	            if (arguments.length > 1) {
	              msg += ", " + util.classString(didReject);
	            }
	            this._warn(msg);
	          }
	          return this._then(didFulfill, didReject, didProgress, undefined, undefined);
	        };
	        Promise.prototype.done = function(didFulfill, didReject, didProgress) {
	          var promise = this._then(didFulfill, didReject, didProgress, undefined, undefined);
	          promise._setIsFinal();
	        };
	        Promise.prototype.spread = function(didFulfill, didReject) {
	          return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined);
	        };
	        Promise.prototype.isCancellable = function() {
	          return !this.isResolved() && this._cancellable();
	        };
	        Promise.prototype.toJSON = function() {
	          var ret = {
	            isFulfilled: false,
	            isRejected: false,
	            fulfillmentValue: undefined,
	            rejectionReason: undefined
	          };
	          if (this.isFulfilled()) {
	            ret.fulfillmentValue = this.value();
	            ret.isFulfilled = true;
	          } else if (this.isRejected()) {
	            ret.rejectionReason = this.reason();
	            ret.isRejected = true;
	          }
	          return ret;
	        };
	        Promise.prototype.all = function() {
	          return new PromiseArray(this).promise();
	        };
	        Promise.prototype.error = function(fn) {
	          return this.caught(util.originatesFromRejection, fn);
	        };
	        Promise.is = function(val) {
	          return val instanceof Promise;
	        };
	        Promise.fromNode = function(fn) {
	          var ret = new Promise(INTERNAL);
	          var result = tryCatch(fn)(nodebackForPromise(ret));
	          if (result === errorObj) {
	            ret._rejectCallback(result.e, true, true);
	          }
	          return ret;
	        };
	        Promise.all = function(promises) {
	          return new PromiseArray(promises).promise();
	        };
	        Promise.defer = Promise.pending = function() {
	          var promise = new Promise(INTERNAL);
	          return new PromiseResolver(promise);
	        };
	        Promise.cast = function(obj) {
	          var ret = tryConvertToPromise(obj);
	          if (!(ret instanceof Promise)) {
	            var val = ret;
	            ret = new Promise(INTERNAL);
	            ret._fulfillUnchecked(val);
	          }
	          return ret;
	        };
	        Promise.resolve = Promise.fulfilled = Promise.cast;
	        Promise.reject = Promise.rejected = function(reason) {
	          var ret = new Promise(INTERNAL);
	          ret._captureStackTrace();
	          ret._rejectCallback(reason, true);
	          return ret;
	        };
	        Promise.setScheduler = function(fn) {
	          if (typeof fn !== "function")
	            throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          var prev = async._schedule;
	          async._schedule = fn;
	          return prev;
	        };
	        Promise.prototype._then = function(didFulfill, didReject, didProgress, receiver, internalData) {
	          var haveInternalData = internalData !== undefined;
	          var ret = haveInternalData ? internalData : new Promise(INTERNAL);
	          if (!haveInternalData) {
	            ret._propagateFrom(this, 4 | 1);
	            ret._captureStackTrace();
	          }
	          var target = this._target();
	          if (target !== this) {
	            if (receiver === undefined)
	              receiver = this._boundTo;
	            if (!haveInternalData)
	              ret._setIsMigrated();
	          }
	          var callbackIndex = target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver);
	          if (target._isResolved() && !target._isSettlePromisesQueued()) {
	            async.invoke(target._settlePromiseAtPostResolution, target, callbackIndex);
	          }
	          return ret;
	        };
	        Promise.prototype._settlePromiseAtPostResolution = function(index) {
	          if (this._isRejectionUnhandled())
	            this._unsetRejectionIsUnhandled();
	          this._settlePromiseAt(index);
	        };
	        Promise.prototype._length = function() {
	          return this._bitField & 131071;
	        };
	        Promise.prototype._isFollowingOrFulfilledOrRejected = function() {
	          return (this._bitField & 939524096) > 0;
	        };
	        Promise.prototype._isFollowing = function() {
	          return (this._bitField & 536870912) === 536870912;
	        };
	        Promise.prototype._setLength = function(len) {
	          this._bitField = (this._bitField & -131072) | (len & 131071);
	        };
	        Promise.prototype._setFulfilled = function() {
	          this._bitField = this._bitField | 268435456;
	        };
	        Promise.prototype._setRejected = function() {
	          this._bitField = this._bitField | 134217728;
	        };
	        Promise.prototype._setFollowing = function() {
	          this._bitField = this._bitField | 536870912;
	        };
	        Promise.prototype._setIsFinal = function() {
	          this._bitField = this._bitField | 33554432;
	        };
	        Promise.prototype._isFinal = function() {
	          return (this._bitField & 33554432) > 0;
	        };
	        Promise.prototype._cancellable = function() {
	          return (this._bitField & 67108864) > 0;
	        };
	        Promise.prototype._setCancellable = function() {
	          this._bitField = this._bitField | 67108864;
	        };
	        Promise.prototype._unsetCancellable = function() {
	          this._bitField = this._bitField & (~67108864);
	        };
	        Promise.prototype._setIsMigrated = function() {
	          this._bitField = this._bitField | 4194304;
	        };
	        Promise.prototype._unsetIsMigrated = function() {
	          this._bitField = this._bitField & (~4194304);
	        };
	        Promise.prototype._isMigrated = function() {
	          return (this._bitField & 4194304) > 0;
	        };
	        Promise.prototype._receiverAt = function(index) {
	          var ret = index === 0 ? this._receiver0 : this[index * 5 - 5 + 4];
	          if (ret === undefined && this._isBound()) {
	            return this._boundTo;
	          }
	          return ret;
	        };
	        Promise.prototype._promiseAt = function(index) {
	          return index === 0 ? this._promise0 : this[index * 5 - 5 + 3];
	        };
	        Promise.prototype._fulfillmentHandlerAt = function(index) {
	          return index === 0 ? this._fulfillmentHandler0 : this[index * 5 - 5 + 0];
	        };
	        Promise.prototype._rejectionHandlerAt = function(index) {
	          return index === 0 ? this._rejectionHandler0 : this[index * 5 - 5 + 1];
	        };
	        Promise.prototype._migrateCallbacks = function(follower, index) {
	          var fulfill = follower._fulfillmentHandlerAt(index);
	          var reject = follower._rejectionHandlerAt(index);
	          var progress = follower._progressHandlerAt(index);
	          var promise = follower._promiseAt(index);
	          var receiver = follower._receiverAt(index);
	          if (promise instanceof Promise)
	            promise._setIsMigrated();
	          this._addCallbacks(fulfill, reject, progress, promise, receiver);
	        };
	        Promise.prototype._addCallbacks = function(fulfill, reject, progress, promise, receiver) {
	          var index = this._length();
	          if (index >= 131071 - 5) {
	            index = 0;
	            this._setLength(0);
	          }
	          if (index === 0) {
	            this._promise0 = promise;
	            if (receiver !== undefined)
	              this._receiver0 = receiver;
	            if (typeof fulfill === "function" && !this._isCarryingStackTrace())
	              this._fulfillmentHandler0 = fulfill;
	            if (typeof reject === "function")
	              this._rejectionHandler0 = reject;
	            if (typeof progress === "function")
	              this._progressHandler0 = progress;
	          } else {
	            var base = index * 5 - 5;
	            this[base + 3] = promise;
	            this[base + 4] = receiver;
	            if (typeof fulfill === "function")
	              this[base + 0] = fulfill;
	            if (typeof reject === "function")
	              this[base + 1] = reject;
	            if (typeof progress === "function")
	              this[base + 2] = progress;
	          }
	          this._setLength(index + 1);
	          return index;
	        };
	        Promise.prototype._setProxyHandlers = function(receiver, promiseSlotValue) {
	          var index = this._length();
	          if (index >= 131071 - 5) {
	            index = 0;
	            this._setLength(0);
	          }
	          if (index === 0) {
	            this._promise0 = promiseSlotValue;
	            this._receiver0 = receiver;
	          } else {
	            var base = index * 5 - 5;
	            this[base + 3] = promiseSlotValue;
	            this[base + 4] = receiver;
	          }
	          this._setLength(index + 1);
	        };
	        Promise.prototype._proxyPromiseArray = function(promiseArray, index) {
	          this._setProxyHandlers(promiseArray, index);
	        };
	        Promise.prototype._resolveCallback = function(value, shouldBind) {
	          if (this._isFollowingOrFulfilledOrRejected())
	            return;
	          if (value === this)
	            return this._rejectCallback(makeSelfResolutionError(), false, true);
	          var maybePromise = tryConvertToPromise(value, this);
	          if (!(maybePromise instanceof Promise))
	            return this._fulfill(value);
	          var propagationFlags = 1 | (shouldBind ? 4 : 0);
	          this._propagateFrom(maybePromise, propagationFlags);
	          var promise = maybePromise._target();
	          if (promise._isPending()) {
	            var len = this._length();
	            for (var i = 0; i < len; ++i) {
	              promise._migrateCallbacks(this, i);
	            }
	            this._setFollowing();
	            this._setLength(0);
	            this._setFollowee(promise);
	          } else if (promise._isFulfilled()) {
	            this._fulfillUnchecked(promise._value());
	          } else {
	            this._rejectUnchecked(promise._reason(), promise._getCarriedStackTrace());
	          }
	        };
	        Promise.prototype._rejectCallback = function(reason, synchronous, shouldNotMarkOriginatingFromRejection) {
	          if (!shouldNotMarkOriginatingFromRejection) {
	            util.markAsOriginatingFromRejection(reason);
	          }
	          var trace = util.ensureErrorObject(reason);
	          var hasStack = trace === reason;
	          this._attachExtraTrace(trace, synchronous ? hasStack : false);
	          this._reject(reason, hasStack ? undefined : trace);
	        };
	        Promise.prototype._resolveFromResolver = function(resolver) {
	          var promise = this;
	          this._captureStackTrace();
	          this._pushContext();
	          var synchronous = true;
	          var r = tryCatch(resolver)(function(value) {
	            if (promise === null)
	              return;
	            promise._resolveCallback(value);
	            promise = null;
	          }, function(reason) {
	            if (promise === null)
	              return;
	            promise._rejectCallback(reason, synchronous);
	            promise = null;
	          });
	          synchronous = false;
	          this._popContext();
	          if (r !== undefined && r === errorObj && promise !== null) {
	            promise._rejectCallback(r.e, true, true);
	            promise = null;
	          }
	        };
	        Promise.prototype._settlePromiseFromHandler = function(handler, receiver, value, promise) {
	          if (promise._isRejected())
	            return;
	          promise._pushContext();
	          var x;
	          if (receiver === APPLY && !this._isRejected()) {
	            x = tryCatch(handler).apply(this._boundTo, value);
	          } else {
	            x = tryCatch(handler).call(receiver, value);
	          }
	          promise._popContext();
	          if (x === errorObj || x === promise || x === NEXT_FILTER) {
	            var err = x === promise ? makeSelfResolutionError() : x.e;
	            promise._rejectCallback(err, false, true);
	          } else {
	            promise._resolveCallback(x);
	          }
	        };
	        Promise.prototype._target = function() {
	          var ret = this;
	          while (ret._isFollowing())
	            ret = ret._followee();
	          return ret;
	        };
	        Promise.prototype._followee = function() {
	          return this._rejectionHandler0;
	        };
	        Promise.prototype._setFollowee = function(promise) {
	          this._rejectionHandler0 = promise;
	        };
	        Promise.prototype._cleanValues = function() {
	          if (this._cancellable()) {
	            this._cancellationParent = undefined;
	          }
	        };
	        Promise.prototype._propagateFrom = function(parent, flags) {
	          if ((flags & 1) > 0 && parent._cancellable()) {
	            this._setCancellable();
	            this._cancellationParent = parent;
	          }
	          if ((flags & 4) > 0 && parent._isBound()) {
	            this._setBoundTo(parent._boundTo);
	          }
	        };
	        Promise.prototype._fulfill = function(value) {
	          if (this._isFollowingOrFulfilledOrRejected())
	            return;
	          this._fulfillUnchecked(value);
	        };
	        Promise.prototype._reject = function(reason, carriedStackTrace) {
	          if (this._isFollowingOrFulfilledOrRejected())
	            return;
	          this._rejectUnchecked(reason, carriedStackTrace);
	        };
	        Promise.prototype._settlePromiseAt = function(index) {
	          var promise = this._promiseAt(index);
	          var isPromise = promise instanceof Promise;
	          if (isPromise && promise._isMigrated()) {
	            promise._unsetIsMigrated();
	            return async.invoke(this._settlePromiseAt, this, index);
	          }
	          var handler = this._isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);
	          var carriedStackTrace = this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
	          var value = this._settledValue;
	          var receiver = this._receiverAt(index);
	          this._clearCallbackDataAtIndex(index);
	          if (typeof handler === "function") {
	            if (!isPromise) {
	              handler.call(receiver, value, promise);
	            } else {
	              this._settlePromiseFromHandler(handler, receiver, value, promise);
	            }
	          } else if (receiver instanceof PromiseArray) {
	            if (!receiver._isResolved()) {
	              if (this._isFulfilled()) {
	                receiver._promiseFulfilled(value, promise);
	              } else {
	                receiver._promiseRejected(value, promise);
	              }
	            }
	          } else if (isPromise) {
	            if (this._isFulfilled()) {
	              promise._fulfill(value);
	            } else {
	              promise._reject(value, carriedStackTrace);
	            }
	          }
	          if (index >= 4 && (index & 31) === 4)
	            async.invokeLater(this._setLength, this, 0);
	        };
	        Promise.prototype._clearCallbackDataAtIndex = function(index) {
	          if (index === 0) {
	            if (!this._isCarryingStackTrace()) {
	              this._fulfillmentHandler0 = undefined;
	            }
	            this._rejectionHandler0 = this._progressHandler0 = this._receiver0 = this._promise0 = undefined;
	          } else {
	            var base = index * 5 - 5;
	            this[base + 3] = this[base + 4] = this[base + 0] = this[base + 1] = this[base + 2] = undefined;
	          }
	        };
	        Promise.prototype._isSettlePromisesQueued = function() {
	          return (this._bitField & -1073741824) === -1073741824;
	        };
	        Promise.prototype._setSettlePromisesQueued = function() {
	          this._bitField = this._bitField | -1073741824;
	        };
	        Promise.prototype._unsetSettlePromisesQueued = function() {
	          this._bitField = this._bitField & (~-1073741824);
	        };
	        Promise.prototype._queueSettlePromises = function() {
	          async.settlePromises(this);
	          this._setSettlePromisesQueued();
	        };
	        Promise.prototype._fulfillUnchecked = function(value) {
	          if (value === this) {
	            var err = makeSelfResolutionError();
	            this._attachExtraTrace(err);
	            return this._rejectUnchecked(err, undefined);
	          }
	          this._setFulfilled();
	          this._settledValue = value;
	          this._cleanValues();
	          if (this._length() > 0) {
	            this._queueSettlePromises();
	          }
	        };
	        Promise.prototype._rejectUncheckedCheckError = function(reason) {
	          var trace = util.ensureErrorObject(reason);
	          this._rejectUnchecked(reason, trace === reason ? undefined : trace);
	        };
	        Promise.prototype._rejectUnchecked = function(reason, trace) {
	          if (reason === this) {
	            var err = makeSelfResolutionError();
	            this._attachExtraTrace(err);
	            return this._rejectUnchecked(err);
	          }
	          this._setRejected();
	          this._settledValue = reason;
	          this._cleanValues();
	          if (this._isFinal()) {
	            async.throwLater(function(e) {
	              if ("stack" in e) {
	                async.invokeFirst(CapturedTrace.unhandledRejection, undefined, e);
	              }
	              throw e;
	            }, trace === undefined ? reason : trace);
	            return;
	          }
	          if (trace !== undefined && trace !== reason) {
	            this._setCarriedStackTrace(trace);
	          }
	          if (this._length() > 0) {
	            this._queueSettlePromises();
	          } else {
	            this._ensurePossibleRejectionHandled();
	          }
	        };
	        Promise.prototype._settlePromises = function() {
	          this._unsetSettlePromisesQueued();
	          var len = this._length();
	          for (var i = 0; i < len; i++) {
	            this._settlePromiseAt(i);
	          }
	        };
	        Promise._makeSelfResolutionError = makeSelfResolutionError;
	        _dereq_("./method.js")(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	        _dereq_("./bind.js")(Promise, INTERNAL, tryConvertToPromise);
	        _dereq_("./finally.js")(Promise, NEXT_FILTER, tryConvertToPromise);
	        _dereq_("./direct_resolve.js")(Promise);
	        _dereq_("./synchronous_inspection.js")(Promise);
	        _dereq_("./join.js")(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
	        Promise.Promise = Promise;
	        _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
	        _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
	        _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
	        _dereq_('./nodeify.js')(Promise);
	        _dereq_('./cancel.js')(Promise);
	        _dereq_('./promisify.js')(Promise, INTERNAL);
	        _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
	        _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
	        _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
	        _dereq_('./settle.js')(Promise, PromiseArray);
	        _dereq_('./call_get.js')(Promise);
	        _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
	        _dereq_('./progress.js')(Promise, PromiseArray);
	        _dereq_('./any.js')(Promise);
	        _dereq_('./each.js')(Promise, INTERNAL);
	        _dereq_('./timers.js')(Promise, INTERNAL);
	        _dereq_('./filter.js')(Promise, INTERNAL);
	        util.toFastProperties(Promise);
	        util.toFastProperties(Promise.prototype);
	        function fillTypes(value) {
	          var p = new Promise(INTERNAL);
	          p._fulfillmentHandler0 = value;
	          p._rejectionHandler0 = value;
	          p._progressHandler0 = value;
	          p._promise0 = value;
	          p._receiver0 = value;
	          p._settledValue = value;
	        }
	        fillTypes({a: 1});
	        fillTypes({b: 2});
	        fillTypes({c: 3});
	        fillTypes(1);
	        fillTypes(function() {});
	        fillTypes(undefined);
	        fillTypes(false);
	        fillTypes(new Promise(INTERNAL));
	        CapturedTrace.setBounds(async.firstLineError, util.lastLineError);
	        return Promise;
	      };
	    }, {
	      "./any.js": 1,
	      "./async.js": 2,
	      "./bind.js": 3,
	      "./call_get.js": 5,
	      "./cancel.js": 6,
	      "./captured_trace.js": 7,
	      "./catch_filter.js": 8,
	      "./context.js": 9,
	      "./debuggability.js": 10,
	      "./direct_resolve.js": 11,
	      "./each.js": 12,
	      "./errors.js": 13,
	      "./filter.js": 15,
	      "./finally.js": 16,
	      "./generators.js": 17,
	      "./join.js": 18,
	      "./map.js": 19,
	      "./method.js": 20,
	      "./nodeify.js": 21,
	      "./progress.js": 22,
	      "./promise_array.js": 24,
	      "./promise_resolver.js": 25,
	      "./promisify.js": 26,
	      "./props.js": 27,
	      "./race.js": 29,
	      "./reduce.js": 30,
	      "./settle.js": 32,
	      "./some.js": 33,
	      "./synchronous_inspection.js": 34,
	      "./thenables.js": 35,
	      "./timers.js": 36,
	      "./using.js": 37,
	      "./util.js": 38
	    }],
	    24: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	        var util = _dereq_("./util.js");
	        var isArray = util.isArray;
	        function toResolutionValue(val) {
	          switch (val) {
	            case -2:
	              return [];
	            case -3:
	              return {};
	          }
	        }
	        function PromiseArray(values) {
	          var promise = this._promise = new Promise(INTERNAL);
	          var parent;
	          if (values instanceof Promise) {
	            parent = values;
	            promise._propagateFrom(parent, 1 | 4);
	          }
	          this._values = values;
	          this._length = 0;
	          this._totalResolved = 0;
	          this._init(undefined, -2);
	        }
	        PromiseArray.prototype.length = function() {
	          return this._length;
	        };
	        PromiseArray.prototype.promise = function() {
	          return this._promise;
	        };
	        PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
	          var values = tryConvertToPromise(this._values, this._promise);
	          if (values instanceof Promise) {
	            values = values._target();
	            this._values = values;
	            if (values._isFulfilled()) {
	              values = values._value();
	              if (!isArray(values)) {
	                var err = new Promise.TypeError("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
	                this.__hardReject__(err);
	                return;
	              }
	            } else if (values._isPending()) {
	              values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
	              return;
	            } else {
	              this._reject(values._reason());
	              return;
	            }
	          } else if (!isArray(values)) {
	            this._promise._reject(apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a")._reason());
	            return;
	          }
	          if (values.length === 0) {
	            if (resolveValueIfEmpty === -5) {
	              this._resolveEmptyArray();
	            } else {
	              this._resolve(toResolutionValue(resolveValueIfEmpty));
	            }
	            return;
	          }
	          var len = this.getActualLength(values.length);
	          this._length = len;
	          this._values = this.shouldCopyValues() ? new Array(len) : this._values;
	          var promise = this._promise;
	          for (var i = 0; i < len; ++i) {
	            var isResolved = this._isResolved();
	            var maybePromise = tryConvertToPromise(values[i], promise);
	            if (maybePromise instanceof Promise) {
	              maybePromise = maybePromise._target();
	              if (isResolved) {
	                maybePromise._unsetRejectionIsUnhandled();
	              } else if (maybePromise._isPending()) {
	                maybePromise._proxyPromiseArray(this, i);
	              } else if (maybePromise._isFulfilled()) {
	                this._promiseFulfilled(maybePromise._value(), i);
	              } else {
	                this._promiseRejected(maybePromise._reason(), i);
	              }
	            } else if (!isResolved) {
	              this._promiseFulfilled(maybePromise, i);
	            }
	          }
	        };
	        PromiseArray.prototype._isResolved = function() {
	          return this._values === null;
	        };
	        PromiseArray.prototype._resolve = function(value) {
	          this._values = null;
	          this._promise._fulfill(value);
	        };
	        PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function(reason) {
	          this._values = null;
	          this._promise._rejectCallback(reason, false, true);
	        };
	        PromiseArray.prototype._promiseProgressed = function(progressValue, index) {
	          this._promise._progress({
	            index: index,
	            value: progressValue
	          });
	        };
	        PromiseArray.prototype._promiseFulfilled = function(value, index) {
	          this._values[index] = value;
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= this._length) {
	            this._resolve(this._values);
	          }
	        };
	        PromiseArray.prototype._promiseRejected = function(reason, index) {
	          this._totalResolved++;
	          this._reject(reason);
	        };
	        PromiseArray.prototype.shouldCopyValues = function() {
	          return true;
	        };
	        PromiseArray.prototype.getActualLength = function(len) {
	          return len;
	        };
	        return PromiseArray;
	      };
	    }, {"./util.js": 38}],
	    25: [function(_dereq_, module, exports) {
	      "use strict";
	      var util = _dereq_("./util.js");
	      var maybeWrapAsError = util.maybeWrapAsError;
	      var errors = _dereq_("./errors.js");
	      var TimeoutError = errors.TimeoutError;
	      var OperationalError = errors.OperationalError;
	      var haveGetters = util.haveGetters;
	      var es5 = _dereq_("./es5.js");
	      function isUntypedError(obj) {
	        return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;
	      }
	      var rErrorKey = /^(?:name|message|stack|cause)$/;
	      function wrapAsOperationalError(obj) {
	        var ret;
	        if (isUntypedError(obj)) {
	          ret = new OperationalError(obj);
	          ret.name = obj.name;
	          ret.message = obj.message;
	          ret.stack = obj.stack;
	          var keys = es5.keys(obj);
	          for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!rErrorKey.test(key)) {
	              ret[key] = obj[key];
	            }
	          }
	          return ret;
	        }
	        util.markAsOriginatingFromRejection(obj);
	        return obj;
	      }
	      function nodebackForPromise(promise) {
	        return function(err, value) {
	          if (promise === null)
	            return;
	          if (err) {
	            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	            promise._attachExtraTrace(wrapped);
	            promise._reject(wrapped);
	          } else if (arguments.length > 2) {
	            var $_len = arguments.length;
	            var args = new Array($_len - 1);
	            for (var $_i = 1; $_i < $_len; ++$_i) {
	              args[$_i - 1] = arguments[$_i];
	            }
	            promise._fulfill(args);
	          } else {
	            promise._fulfill(value);
	          }
	          promise = null;
	        };
	      }
	      var PromiseResolver;
	      if (!haveGetters) {
	        PromiseResolver = function(promise) {
	          this.promise = promise;
	          this.asCallback = nodebackForPromise(promise);
	          this.callback = this.asCallback;
	        };
	      } else {
	        PromiseResolver = function(promise) {
	          this.promise = promise;
	        };
	      }
	      if (haveGetters) {
	        var prop = {get: function() {
	            return nodebackForPromise(this.promise);
	          }};
	        es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
	        es5.defineProperty(PromiseResolver.prototype, "callback", prop);
	      }
	      PromiseResolver._nodebackForPromise = nodebackForPromise;
	      PromiseResolver.prototype.toString = function() {
	        return "[object PromiseResolver]";
	      };
	      PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function(value) {
	        if (!(this instanceof PromiseResolver)) {
	          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
	        }
	        this.promise._resolveCallback(value);
	      };
	      PromiseResolver.prototype.reject = function(reason) {
	        if (!(this instanceof PromiseResolver)) {
	          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
	        }
	        this.promise._rejectCallback(reason);
	      };
	      PromiseResolver.prototype.progress = function(value) {
	        if (!(this instanceof PromiseResolver)) {
	          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\u000a\u000a    See http://goo.gl/sdkXL9\u000a");
	        }
	        this.promise._progress(value);
	      };
	      PromiseResolver.prototype.cancel = function(err) {
	        this.promise.cancel(err);
	      };
	      PromiseResolver.prototype.timeout = function() {
	        this.reject(new TimeoutError("timeout"));
	      };
	      PromiseResolver.prototype.isResolved = function() {
	        return this.promise.isResolved();
	      };
	      PromiseResolver.prototype.toJSON = function() {
	        return this.promise.toJSON();
	      };
	      module.exports = PromiseResolver;
	    }, {
	      "./errors.js": 13,
	      "./es5.js": 14,
	      "./util.js": 38
	    }],
	    26: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var THIS = {};
	        var util = _dereq_("./util.js");
	        var nodebackForPromise = _dereq_("./promise_resolver.js")._nodebackForPromise;
	        var withAppended = util.withAppended;
	        var maybeWrapAsError = util.maybeWrapAsError;
	        var canEvaluate = util.canEvaluate;
	        var TypeError = _dereq_("./errors").TypeError;
	        var defaultSuffix = "Async";
	        var defaultPromisified = {__isPromisified__: true};
	        var noCopyPropsPattern = /^(?:length|name|arguments|caller|prototype|__isPromisified__)$/;
	        var defaultFilter = function(name, func) {
	          return util.isIdentifier(name) && name.charAt(0) !== "_" && !util.isClass(func);
	        };
	        function propsFilter(key) {
	          return !noCopyPropsPattern.test(key);
	        }
	        function isPromisified(fn) {
	          try {
	            return fn.__isPromisified__ === true;
	          } catch (e) {
	            return false;
	          }
	        }
	        function hasPromisified(obj, key, suffix) {
	          var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
	          return val ? isPromisified(val) : false;
	        }
	        function checkValid(ret, suffix, suffixRegexp) {
	          for (var i = 0; i < ret.length; i += 2) {
	            var key = ret[i];
	            if (suffixRegexp.test(key)) {
	              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	              for (var j = 0; j < ret.length; j += 2) {
	                if (ret[j] === keyWithoutAsyncSuffix) {
	                  throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/iWrZbw\u000a".replace("%s", suffix));
	                }
	              }
	            }
	          }
	        }
	        function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
	          var keys = util.inheritedDataKeys(obj);
	          var ret = [];
	          for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            var value = obj[key];
	            var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
	            if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
	              ret.push(key, value);
	            }
	          }
	          checkValid(ret, suffix, suffixRegexp);
	          return ret;
	        }
	        var escapeIdentRegex = function(str) {
	          return str.replace(/([$])/, "\\$");
	        };
	        var makeNodePromisifiedEval;
	        if (false) {
	          var switchCaseArgumentOrder = function(likelyArgumentCount) {
	            var ret = [likelyArgumentCount];
	            var min = Math.max(0, likelyArgumentCount - 1 - 3);
	            for (var i = likelyArgumentCount - 1; i >= min; --i) {
	              ret.push(i);
	            }
	            for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
	              ret.push(i);
	            }
	            return ret;
	          };
	          var argumentSequence = function(argumentCount) {
	            return util.filledRange(argumentCount, "_arg", "");
	          };
	          var parameterDeclaration = function(parameterCount) {
	            return util.filledRange(Math.max(parameterCount, 3), "_arg", "");
	          };
	          var parameterCount = function(fn) {
	            if (typeof fn.length === "number") {
	              return Math.max(Math.min(fn.length, 1023 + 1), 0);
	            }
	            return 0;
	          };
	          makeNodePromisifiedEval = function(callback, receiver, originalName, fn) {
	            var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	            var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	            var shouldProxyThis = typeof callback === "string" || receiver === THIS;
	            function generateCallForArgumentCount(count) {
	              var args = argumentSequence(count).join(", ");
	              var comma = count > 0 ? ", " : "";
	              var ret;
	              if (shouldProxyThis) {
	                ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
	              } else {
	                ret = receiver === undefined ? "ret = callback({{args}}, nodeback); break;\n" : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
	              }
	              return ret.replace("{{args}}", args).replace(", ", comma);
	            }
	            function generateArgumentSwitchCase() {
	              var ret = "";
	              for (var i = 0; i < argumentOrder.length; ++i) {
	                ret += "case " + argumentOrder[i] + ":" + generateCallForArgumentCount(argumentOrder[i]);
	              }
	              ret += "                                                             \n\
	        default:                                                             \n\
	            var args = new Array(len + 1);                                   \n\
	            var i = 0;                                                       \n\
	            for (var i = 0; i < len; ++i) {                                  \n\
	               args[i] = arguments[i];                                       \n\
	            }                                                                \n\
	            args[i] = nodeback;                                              \n\
	            [CodeForCall]                                                    \n\
	            break;                                                           \n\
	        ".replace("[CodeForCall]", (shouldProxyThis ? "ret = callback.apply(this, args);\n" : "ret = callback.apply(receiver, args);\n"));
	              return ret;
	            }
	            var getFunctionCode = typeof callback === "string" ? ("this != null ? this['" + callback + "'] : fn") : "fn";
	            return new Function("Promise", "fn", "receiver", "withAppended", "maybeWrapAsError", "nodebackForPromise", "tryCatch", "errorObj", "INTERNAL", "'use strict';                            \n\
	        var ret = function (Parameters) {                                    \n\
	            'use strict';                                                    \n\
	            var len = arguments.length;                                      \n\
	            var promise = new Promise(INTERNAL);                             \n\
	            promise._captureStackTrace();                                    \n\
	            var nodeback = nodebackForPromise(promise);                      \n\
	            var ret;                                                         \n\
	            var callback = tryCatch([GetFunctionCode]);                      \n\
	            switch(len) {                                                    \n\
	                [CodeForSwitchCase]                                          \n\
	            }                                                                \n\
	            if (ret === errorObj) {                                          \n\
	                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
	            }                                                                \n\
	            return promise;                                                  \n\
	        };                                                                   \n\
	        ret.__isPromisified__ = true;                                        \n\
	        return ret;                                                          \n\
	        ".replace("Parameters", parameterDeclaration(newParameterCount)).replace("[CodeForSwitchCase]", generateArgumentSwitchCase()).replace("[GetFunctionCode]", getFunctionCode))(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, INTERNAL);
	          };
	        }
	        function makeNodePromisifiedClosure(callback, receiver, _, fn) {
	          var defaultThis = (function() {
	            return this;
	          })();
	          var method = callback;
	          if (typeof method === "string") {
	            callback = fn;
	          }
	          function promisified() {
	            var _receiver = receiver;
	            if (receiver === THIS)
	              _receiver = this;
	            var promise = new Promise(INTERNAL);
	            promise._captureStackTrace();
	            var cb = typeof method === "string" && this !== defaultThis ? this[method] : callback;
	            var fn = nodebackForPromise(promise);
	            try {
	              cb.apply(_receiver, withAppended(arguments, fn));
	            } catch (e) {
	              promise._rejectCallback(maybeWrapAsError(e), true, true);
	            }
	            return promise;
	          }
	          promisified.__isPromisified__ = true;
	          return promisified;
	        }
	        var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
	        function promisifyAll(obj, suffix, filter, promisifier) {
	          var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	          var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
	          for (var i = 0,
	              len = methods.length; i < len; i += 2) {
	            var key = methods[i];
	            var fn = methods[i + 1];
	            var promisifiedKey = key + suffix;
	            obj[promisifiedKey] = promisifier === makeNodePromisified ? makeNodePromisified(key, THIS, key, fn, suffix) : promisifier(fn, function() {
	              return makeNodePromisified(key, THIS, key, fn, suffix);
	            });
	          }
	          util.toFastProperties(obj);
	          return obj;
	        }
	        function promisify(callback, receiver) {
	          return makeNodePromisified(callback, receiver, undefined, callback);
	        }
	        Promise.promisify = function(fn, receiver) {
	          if (typeof fn !== "function") {
	            throw new TypeError("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          }
	          if (isPromisified(fn)) {
	            return fn;
	          }
	          var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
	          util.copyDescriptors(fn, ret, propsFilter);
	          return ret;
	        };
	        Promise.promisifyAll = function(target, options) {
	          if (typeof target !== "function" && typeof target !== "object") {
	            throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/9ITlV0\u000a");
	          }
	          options = Object(options);
	          var suffix = options.suffix;
	          if (typeof suffix !== "string")
	            suffix = defaultSuffix;
	          var filter = options.filter;
	          if (typeof filter !== "function")
	            filter = defaultFilter;
	          var promisifier = options.promisifier;
	          if (typeof promisifier !== "function")
	            promisifier = makeNodePromisified;
	          if (!util.isIdentifier(suffix)) {
	            throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/8FZo5V\u000a");
	          }
	          var keys = util.inheritedDataKeys(target);
	          for (var i = 0; i < keys.length; ++i) {
	            var value = target[keys[i]];
	            if (keys[i] !== "constructor" && util.isClass(value)) {
	              promisifyAll(value.prototype, suffix, filter, promisifier);
	              promisifyAll(value, suffix, filter, promisifier);
	            }
	          }
	          return promisifyAll(target, suffix, filter, promisifier);
	        };
	      };
	    }, {
	      "./errors": 13,
	      "./promise_resolver.js": 25,
	      "./util.js": 38
	    }],
	    27: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, tryConvertToPromise, apiRejection) {
	        var util = _dereq_("./util.js");
	        var isObject = util.isObject;
	        var es5 = _dereq_("./es5.js");
	        function PropertiesPromiseArray(obj) {
	          var keys = es5.keys(obj);
	          var len = keys.length;
	          var values = new Array(len * 2);
	          for (var i = 0; i < len; ++i) {
	            var key = keys[i];
	            values[i] = obj[key];
	            values[i + len] = key;
	          }
	          this.constructor$(values);
	        }
	        util.inherits(PropertiesPromiseArray, PromiseArray);
	        PropertiesPromiseArray.prototype._init = function() {
	          this._init$(undefined, -3);
	        };
	        PropertiesPromiseArray.prototype._promiseFulfilled = function(value, index) {
	          this._values[index] = value;
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= this._length) {
	            var val = {};
	            var keyOffset = this.length();
	            for (var i = 0,
	                len = this.length(); i < len; ++i) {
	              val[this._values[i + keyOffset]] = this._values[i];
	            }
	            this._resolve(val);
	          }
	        };
	        PropertiesPromiseArray.prototype._promiseProgressed = function(value, index) {
	          this._promise._progress({
	            key: this._values[index + this.length()],
	            value: value
	          });
	        };
	        PropertiesPromiseArray.prototype.shouldCopyValues = function() {
	          return false;
	        };
	        PropertiesPromiseArray.prototype.getActualLength = function(len) {
	          return len >> 1;
	        };
	        function props(promises) {
	          var ret;
	          var castValue = tryConvertToPromise(promises);
	          if (!isObject(castValue)) {
	            return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
	          } else if (castValue instanceof Promise) {
	            ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined);
	          } else {
	            ret = new PropertiesPromiseArray(castValue).promise();
	          }
	          if (castValue instanceof Promise) {
	            ret._propagateFrom(castValue, 4);
	          }
	          return ret;
	        }
	        Promise.prototype.props = function() {
	          return props(this);
	        };
	        Promise.props = function(promises) {
	          return props(promises);
	        };
	      };
	    }, {
	      "./es5.js": 14,
	      "./util.js": 38
	    }],
	    28: [function(_dereq_, module, exports) {
	      "use strict";
	      function arrayMove(src, srcIndex, dst, dstIndex, len) {
	        for (var j = 0; j < len; ++j) {
	          dst[j + dstIndex] = src[j + srcIndex];
	          src[j + srcIndex] = void 0;
	        }
	      }
	      function Queue(capacity) {
	        this._capacity = capacity;
	        this._length = 0;
	        this._front = 0;
	      }
	      Queue.prototype._willBeOverCapacity = function(size) {
	        return this._capacity < size;
	      };
	      Queue.prototype._pushOne = function(arg) {
	        var length = this.length();
	        this._checkCapacity(length + 1);
	        var i = (this._front + length) & (this._capacity - 1);
	        this[i] = arg;
	        this._length = length + 1;
	      };
	      Queue.prototype._unshiftOne = function(value) {
	        var capacity = this._capacity;
	        this._checkCapacity(this.length() + 1);
	        var front = this._front;
	        var i = ((((front - 1) & (capacity - 1)) ^ capacity) - capacity);
	        this[i] = value;
	        this._front = i;
	        this._length = this.length() + 1;
	      };
	      Queue.prototype.unshift = function(fn, receiver, arg) {
	        this._unshiftOne(arg);
	        this._unshiftOne(receiver);
	        this._unshiftOne(fn);
	      };
	      Queue.prototype.push = function(fn, receiver, arg) {
	        var length = this.length() + 3;
	        if (this._willBeOverCapacity(length)) {
	          this._pushOne(fn);
	          this._pushOne(receiver);
	          this._pushOne(arg);
	          return;
	        }
	        var j = this._front + length - 3;
	        this._checkCapacity(length);
	        var wrapMask = this._capacity - 1;
	        this[(j + 0) & wrapMask] = fn;
	        this[(j + 1) & wrapMask] = receiver;
	        this[(j + 2) & wrapMask] = arg;
	        this._length = length;
	      };
	      Queue.prototype.shift = function() {
	        var front = this._front,
	            ret = this[front];
	        this[front] = undefined;
	        this._front = (front + 1) & (this._capacity - 1);
	        this._length--;
	        return ret;
	      };
	      Queue.prototype.length = function() {
	        return this._length;
	      };
	      Queue.prototype._checkCapacity = function(size) {
	        if (this._capacity < size) {
	          this._resizeTo(this._capacity << 1);
	        }
	      };
	      Queue.prototype._resizeTo = function(capacity) {
	        var oldCapacity = this._capacity;
	        this._capacity = capacity;
	        var front = this._front;
	        var length = this._length;
	        var moveItemsCount = (front + length) & (oldCapacity - 1);
	        arrayMove(this, 0, this, oldCapacity, moveItemsCount);
	      };
	      module.exports = Queue;
	    }, {}],
	    29: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL, tryConvertToPromise, apiRejection) {
	        var isArray = _dereq_("./util.js").isArray;
	        var raceLater = function(promise) {
	          return promise.then(function(array) {
	            return race(array, promise);
	          });
	        };
	        function race(promises, parent) {
	          var maybePromise = tryConvertToPromise(promises);
	          if (maybePromise instanceof Promise) {
	            return raceLater(maybePromise);
	          } else if (!isArray(promises)) {
	            return apiRejection("expecting an array, a promise or a thenable\u000a\u000a    See http://goo.gl/s8MMhc\u000a");
	          }
	          var ret = new Promise(INTERNAL);
	          if (parent !== undefined) {
	            ret._propagateFrom(parent, 4 | 1);
	          }
	          var fulfill = ret._fulfill;
	          var reject = ret._reject;
	          for (var i = 0,
	              len = promises.length; i < len; ++i) {
	            var val = promises[i];
	            if (val === undefined && !(i in promises)) {
	              continue;
	            }
	            Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
	          }
	          return ret;
	        }
	        Promise.race = function(promises) {
	          return race(promises, undefined);
	        };
	        Promise.prototype.race = function() {
	          return race(this, undefined);
	        };
	      };
	    }, {"./util.js": 38}],
	    30: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var tryCatch = util.tryCatch;
	        var errorObj = util.errorObj;
	        function ReductionPromiseArray(promises, fn, accum, _each) {
	          this.constructor$(promises);
	          this._promise._captureStackTrace();
	          this._preservedValues = _each === INTERNAL ? [] : null;
	          this._zerothIsAccum = (accum === undefined);
	          this._gotAccum = false;
	          this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
	          this._valuesPhase = undefined;
	          var maybePromise = tryConvertToPromise(accum, this._promise);
	          var rejected = false;
	          var isPromise = maybePromise instanceof Promise;
	          if (isPromise) {
	            maybePromise = maybePromise._target();
	            if (maybePromise._isPending()) {
	              maybePromise._proxyPromiseArray(this, -1);
	            } else if (maybePromise._isFulfilled()) {
	              accum = maybePromise._value();
	              this._gotAccum = true;
	            } else {
	              this._reject(maybePromise._reason());
	              rejected = true;
	            }
	          }
	          if (!(isPromise || this._zerothIsAccum))
	            this._gotAccum = true;
	          this._callback = fn;
	          this._accum = accum;
	          if (!rejected)
	            this._init$(undefined, -5);
	        }
	        util.inherits(ReductionPromiseArray, PromiseArray);
	        ReductionPromiseArray.prototype._init = function() {};
	        ReductionPromiseArray.prototype._resolveEmptyArray = function() {
	          if (this._gotAccum || this._zerothIsAccum) {
	            this._resolve(this._preservedValues !== null ? [] : this._accum);
	          }
	        };
	        ReductionPromiseArray.prototype._promiseFulfilled = function(value, index) {
	          var values = this._values;
	          values[index] = value;
	          var length = this.length();
	          var preservedValues = this._preservedValues;
	          var isEach = preservedValues !== null;
	          var gotAccum = this._gotAccum;
	          var valuesPhase = this._valuesPhase;
	          var valuesPhaseIndex;
	          if (!valuesPhase) {
	            valuesPhase = this._valuesPhase = new Array(length);
	            for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
	              valuesPhase[valuesPhaseIndex] = 0;
	            }
	          }
	          valuesPhaseIndex = valuesPhase[index];
	          if (index === 0 && this._zerothIsAccum) {
	            this._accum = value;
	            this._gotAccum = gotAccum = true;
	            valuesPhase[index] = ((valuesPhaseIndex === 0) ? 1 : 2);
	          } else if (index === -1) {
	            this._accum = value;
	            this._gotAccum = gotAccum = true;
	          } else {
	            if (valuesPhaseIndex === 0) {
	              valuesPhase[index] = 1;
	            } else {
	              valuesPhase[index] = 2;
	              this._accum = value;
	            }
	          }
	          if (!gotAccum)
	            return;
	          var callback = this._callback;
	          var receiver = this._promise._boundTo;
	          var ret;
	          for (var i = this._reducingIndex; i < length; ++i) {
	            valuesPhaseIndex = valuesPhase[i];
	            if (valuesPhaseIndex === 2) {
	              this._reducingIndex = i + 1;
	              continue;
	            }
	            if (valuesPhaseIndex !== 1)
	              return;
	            value = values[i];
	            this._promise._pushContext();
	            if (isEach) {
	              preservedValues.push(value);
	              ret = tryCatch(callback).call(receiver, value, i, length);
	            } else {
	              ret = tryCatch(callback).call(receiver, this._accum, value, i, length);
	            }
	            this._promise._popContext();
	            if (ret === errorObj)
	              return this._reject(ret.e);
	            var maybePromise = tryConvertToPromise(ret, this._promise);
	            if (maybePromise instanceof Promise) {
	              maybePromise = maybePromise._target();
	              if (maybePromise._isPending()) {
	                valuesPhase[i] = 4;
	                return maybePromise._proxyPromiseArray(this, i);
	              } else if (maybePromise._isFulfilled()) {
	                ret = maybePromise._value();
	              } else {
	                return this._reject(maybePromise._reason());
	              }
	            }
	            this._reducingIndex = i + 1;
	            this._accum = ret;
	          }
	          this._resolve(isEach ? preservedValues : this._accum);
	        };
	        function reduce(promises, fn, initialValue, _each) {
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	          return array.promise();
	        }
	        Promise.prototype.reduce = function(fn, initialValue) {
	          return reduce(this, fn, initialValue, null);
	        };
	        Promise.reduce = function(promises, fn, initialValue, _each) {
	          return reduce(promises, fn, initialValue, _each);
	        };
	      };
	    }, {"./util.js": 38}],
	    31: [function(_dereq_, module, exports) {
	      "use strict";
	      var schedule;
	      if (_dereq_("./util.js").isNode) {
	        var version = process.versions.node.split(".").map(Number);
	        schedule = (version[0] === 0 && version[1] > 10) || (version[0] > 0) ? global.setImmediate : process.nextTick;
	      } else if (typeof MutationObserver !== "undefined") {
	        schedule = function(fn) {
	          var div = document.createElement("div");
	          var observer = new MutationObserver(fn);
	          observer.observe(div, {attributes: true});
	          return function() {
	            div.classList.toggle("foo");
	          };
	        };
	        schedule.isStatic = true;
	      } else if (typeof setTimeout !== "undefined") {
	        schedule = function(fn) {
	          setTimeout(fn, 0);
	        };
	      } else {
	        schedule = function() {
	          throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
	        };
	      }
	      module.exports = schedule;
	    }, {"./util.js": 38}],
	    32: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray) {
	        var PromiseInspection = Promise.PromiseInspection;
	        var util = _dereq_("./util.js");
	        function SettledPromiseArray(values) {
	          this.constructor$(values);
	        }
	        util.inherits(SettledPromiseArray, PromiseArray);
	        SettledPromiseArray.prototype._promiseResolved = function(index, inspection) {
	          this._values[index] = inspection;
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= this._length) {
	            this._resolve(this._values);
	          }
	        };
	        SettledPromiseArray.prototype._promiseFulfilled = function(value, index) {
	          var ret = new PromiseInspection();
	          ret._bitField = 268435456;
	          ret._settledValue = value;
	          this._promiseResolved(index, ret);
	        };
	        SettledPromiseArray.prototype._promiseRejected = function(reason, index) {
	          var ret = new PromiseInspection();
	          ret._bitField = 134217728;
	          ret._settledValue = reason;
	          this._promiseResolved(index, ret);
	        };
	        Promise.settle = function(promises) {
	          return new SettledPromiseArray(promises).promise();
	        };
	        Promise.prototype.settle = function() {
	          return new SettledPromiseArray(this).promise();
	        };
	      };
	    }, {"./util.js": 38}],
	    33: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, apiRejection) {
	        var util = _dereq_("./util.js");
	        var RangeError = _dereq_("./errors.js").RangeError;
	        var AggregateError = _dereq_("./errors.js").AggregateError;
	        var isArray = util.isArray;
	        function SomePromiseArray(values) {
	          this.constructor$(values);
	          this._howMany = 0;
	          this._unwrap = false;
	          this._initialized = false;
	        }
	        util.inherits(SomePromiseArray, PromiseArray);
	        SomePromiseArray.prototype._init = function() {
	          if (!this._initialized) {
	            return;
	          }
	          if (this._howMany === 0) {
	            this._resolve([]);
	            return;
	          }
	          this._init$(undefined, -5);
	          var isArrayResolved = isArray(this._values);
	          if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
	            this._reject(this._getRangeError(this.length()));
	          }
	        };
	        SomePromiseArray.prototype.init = function() {
	          this._initialized = true;
	          this._init();
	        };
	        SomePromiseArray.prototype.setUnwrap = function() {
	          this._unwrap = true;
	        };
	        SomePromiseArray.prototype.howMany = function() {
	          return this._howMany;
	        };
	        SomePromiseArray.prototype.setHowMany = function(count) {
	          this._howMany = count;
	        };
	        SomePromiseArray.prototype._promiseFulfilled = function(value) {
	          this._addFulfilled(value);
	          if (this._fulfilled() === this.howMany()) {
	            this._values.length = this.howMany();
	            if (this.howMany() === 1 && this._unwrap) {
	              this._resolve(this._values[0]);
	            } else {
	              this._resolve(this._values);
	            }
	          }
	        };
	        SomePromiseArray.prototype._promiseRejected = function(reason) {
	          this._addRejected(reason);
	          if (this.howMany() > this._canPossiblyFulfill()) {
	            var e = new AggregateError();
	            for (var i = this.length(); i < this._values.length; ++i) {
	              e.push(this._values[i]);
	            }
	            this._reject(e);
	          }
	        };
	        SomePromiseArray.prototype._fulfilled = function() {
	          return this._totalResolved;
	        };
	        SomePromiseArray.prototype._rejected = function() {
	          return this._values.length - this.length();
	        };
	        SomePromiseArray.prototype._addRejected = function(reason) {
	          this._values.push(reason);
	        };
	        SomePromiseArray.prototype._addFulfilled = function(value) {
	          this._values[this._totalResolved++] = value;
	        };
	        SomePromiseArray.prototype._canPossiblyFulfill = function() {
	          return this.length() - this._rejected();
	        };
	        SomePromiseArray.prototype._getRangeError = function(count) {
	          var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
	          return new RangeError(message);
	        };
	        SomePromiseArray.prototype._resolveEmptyArray = function() {
	          this._reject(this._getRangeError(0));
	        };
	        function some(promises, howMany) {
	          if ((howMany | 0) !== howMany || howMany < 0) {
	            return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/1wAmHx\u000a");
	          }
	          var ret = new SomePromiseArray(promises);
	          var promise = ret.promise();
	          ret.setHowMany(howMany);
	          ret.init();
	          return promise;
	        }
	        Promise.some = function(promises, howMany) {
	          return some(promises, howMany);
	        };
	        Promise.prototype.some = function(howMany) {
	          return some(this, howMany);
	        };
	        Promise._SomePromiseArray = SomePromiseArray;
	      };
	    }, {
	      "./errors.js": 13,
	      "./util.js": 38
	    }],
	    34: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        function PromiseInspection(promise) {
	          if (promise !== undefined) {
	            promise = promise._target();
	            this._bitField = promise._bitField;
	            this._settledValue = promise._settledValue;
	          } else {
	            this._bitField = 0;
	            this._settledValue = undefined;
	          }
	        }
	        PromiseInspection.prototype.value = function() {
	          if (!this.isFulfilled()) {
	            throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
	          }
	          return this._settledValue;
	        };
	        PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function() {
	          if (!this.isRejected()) {
	            throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
	          }
	          return this._settledValue;
	        };
	        PromiseInspection.prototype.isFulfilled = Promise.prototype._isFulfilled = function() {
	          return (this._bitField & 268435456) > 0;
	        };
	        PromiseInspection.prototype.isRejected = Promise.prototype._isRejected = function() {
	          return (this._bitField & 134217728) > 0;
	        };
	        PromiseInspection.prototype.isPending = Promise.prototype._isPending = function() {
	          return (this._bitField & 402653184) === 0;
	        };
	        PromiseInspection.prototype.isResolved = Promise.prototype._isResolved = function() {
	          return (this._bitField & 402653184) > 0;
	        };
	        Promise.prototype.isPending = function() {
	          return this._target()._isPending();
	        };
	        Promise.prototype.isRejected = function() {
	          return this._target()._isRejected();
	        };
	        Promise.prototype.isFulfilled = function() {
	          return this._target()._isFulfilled();
	        };
	        Promise.prototype.isResolved = function() {
	          return this._target()._isResolved();
	        };
	        Promise.prototype._value = function() {
	          return this._settledValue;
	        };
	        Promise.prototype._reason = function() {
	          this._unsetRejectionIsUnhandled();
	          return this._settledValue;
	        };
	        Promise.prototype.value = function() {
	          var target = this._target();
	          if (!target.isFulfilled()) {
	            throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/hc1DLj\u000a");
	          }
	          return target._settledValue;
	        };
	        Promise.prototype.reason = function() {
	          var target = this._target();
	          if (!target.isRejected()) {
	            throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/hPuiwB\u000a");
	          }
	          target._unsetRejectionIsUnhandled();
	          return target._settledValue;
	        };
	        Promise.PromiseInspection = PromiseInspection;
	      };
	    }, {}],
	    35: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var errorObj = util.errorObj;
	        var isObject = util.isObject;
	        function tryConvertToPromise(obj, context) {
	          if (isObject(obj)) {
	            if (obj instanceof Promise) {
	              return obj;
	            } else if (isAnyBluebirdPromise(obj)) {
	              var ret = new Promise(INTERNAL);
	              obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
	              return ret;
	            }
	            var then = util.tryCatch(getThen)(obj);
	            if (then === errorObj) {
	              if (context)
	                context._pushContext();
	              var ret = Promise.reject(then.e);
	              if (context)
	                context._popContext();
	              return ret;
	            } else if (typeof then === "function") {
	              return doThenable(obj, then, context);
	            }
	          }
	          return obj;
	        }
	        function getThen(obj) {
	          return obj.then;
	        }
	        var hasProp = {}.hasOwnProperty;
	        function isAnyBluebirdPromise(obj) {
	          return hasProp.call(obj, "_promise0");
	        }
	        function doThenable(x, then, context) {
	          var promise = new Promise(INTERNAL);
	          var ret = promise;
	          if (context)
	            context._pushContext();
	          promise._captureStackTrace();
	          if (context)
	            context._popContext();
	          var synchronous = true;
	          var result = util.tryCatch(then).call(x, resolveFromThenable, rejectFromThenable, progressFromThenable);
	          synchronous = false;
	          if (promise && result === errorObj) {
	            promise._rejectCallback(result.e, true, true);
	            promise = null;
	          }
	          function resolveFromThenable(value) {
	            if (!promise)
	              return;
	            if (x === value) {
	              promise._rejectCallback(Promise._makeSelfResolutionError(), false, true);
	            } else {
	              promise._resolveCallback(value);
	            }
	            promise = null;
	          }
	          function rejectFromThenable(reason) {
	            if (!promise)
	              return;
	            promise._rejectCallback(reason, synchronous, true);
	            promise = null;
	          }
	          function progressFromThenable(value) {
	            if (!promise)
	              return;
	            if (typeof promise._progress === "function") {
	              promise._progress(value);
	            }
	          }
	          return ret;
	        }
	        return tryConvertToPromise;
	      };
	    }, {"./util.js": 38}],
	    36: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var TimeoutError = Promise.TimeoutError;
	        var afterTimeout = function(promise, message) {
	          if (!promise.isPending())
	            return;
	          if (typeof message !== "string") {
	            message = "operation timed out";
	          }
	          var err = new TimeoutError(message);
	          util.markAsOriginatingFromRejection(err);
	          promise._attachExtraTrace(err);
	          promise._cancel(err);
	        };
	        var afterValue = function(value) {
	          return delay(+this).thenReturn(value);
	        };
	        var delay = Promise.delay = function(value, ms) {
	          if (ms === undefined) {
	            ms = value;
	            value = undefined;
	            var ret = new Promise(INTERNAL);
	            setTimeout(function() {
	              ret._fulfill();
	            }, ms);
	            return ret;
	          }
	          ms = +ms;
	          return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
	        };
	        Promise.prototype.delay = function(ms) {
	          return delay(this, ms);
	        };
	        function successClear(value) {
	          var handle = this;
	          if (handle instanceof Number)
	            handle = +handle;
	          clearTimeout(handle);
	          return value;
	        }
	        function failureClear(reason) {
	          var handle = this;
	          if (handle instanceof Number)
	            handle = +handle;
	          clearTimeout(handle);
	          throw reason;
	        }
	        Promise.prototype.timeout = function(ms, message) {
	          ms = +ms;
	          var ret = this.then().cancellable();
	          ret._cancellationParent = this;
	          var handle = setTimeout(function timeoutTimeout() {
	            afterTimeout(ret, message);
	          }, ms);
	          return ret._then(successClear, failureClear, undefined, handle, undefined);
	        };
	      };
	    }, {"./util.js": 38}],
	    37: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, apiRejection, tryConvertToPromise, createContext) {
	        var TypeError = _dereq_("./errors.js").TypeError;
	        var inherits = _dereq_("./util.js").inherits;
	        var PromiseInspection = Promise.PromiseInspection;
	        function inspectionMapper(inspections) {
	          var len = inspections.length;
	          for (var i = 0; i < len; ++i) {
	            var inspection = inspections[i];
	            if (inspection.isRejected()) {
	              return Promise.reject(inspection.error());
	            }
	            inspections[i] = inspection._settledValue;
	          }
	          return inspections;
	        }
	        function thrower(e) {
	          setTimeout(function() {
	            throw e;
	          }, 0);
	        }
	        function castPreservingDisposable(thenable) {
	          var maybePromise = tryConvertToPromise(thenable);
	          if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) {
	            maybePromise._setDisposable(thenable._getDisposer());
	          }
	          return maybePromise;
	        }
	        function dispose(resources, inspection) {
	          var i = 0;
	          var len = resources.length;
	          var ret = Promise.defer();
	          function iterator() {
	            if (i >= len)
	              return ret.resolve();
	            var maybePromise = castPreservingDisposable(resources[i++]);
	            if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
	              try {
	                maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise);
	              } catch (e) {
	                return thrower(e);
	              }
	              if (maybePromise instanceof Promise) {
	                return maybePromise._then(iterator, thrower, null, null, null);
	              }
	            }
	            iterator();
	          }
	          iterator();
	          return ret.promise;
	        }
	        function disposerSuccess(value) {
	          var inspection = new PromiseInspection();
	          inspection._settledValue = value;
	          inspection._bitField = 268435456;
	          return dispose(this, inspection).thenReturn(value);
	        }
	        function disposerFail(reason) {
	          var inspection = new PromiseInspection();
	          inspection._settledValue = reason;
	          inspection._bitField = 134217728;
	          return dispose(this, inspection).thenThrow(reason);
	        }
	        function Disposer(data, promise, context) {
	          this._data = data;
	          this._promise = promise;
	          this._context = context;
	        }
	        Disposer.prototype.data = function() {
	          return this._data;
	        };
	        Disposer.prototype.promise = function() {
	          return this._promise;
	        };
	        Disposer.prototype.resource = function() {
	          if (this.promise().isFulfilled()) {
	            return this.promise().value();
	          }
	          return null;
	        };
	        Disposer.prototype.tryDispose = function(inspection) {
	          var resource = this.resource();
	          var context = this._context;
	          if (context !== undefined)
	            context._pushContext();
	          var ret = resource !== null ? this.doDispose(resource, inspection) : null;
	          if (context !== undefined)
	            context._popContext();
	          this._promise._unsetDisposable();
	          this._data = null;
	          return ret;
	        };
	        Disposer.isDisposer = function(d) {
	          return (d != null && typeof d.resource === "function" && typeof d.tryDispose === "function");
	        };
	        function FunctionDisposer(fn, promise, context) {
	          this.constructor$(fn, promise, context);
	        }
	        inherits(FunctionDisposer, Disposer);
	        FunctionDisposer.prototype.doDispose = function(resource, inspection) {
	          var fn = this.data();
	          return fn.call(resource, resource, inspection);
	        };
	        function maybeUnwrapDisposer(value) {
	          if (Disposer.isDisposer(value)) {
	            this.resources[this.index]._setDisposable(value);
	            return value.promise();
	          }
	          return value;
	        }
	        Promise.using = function() {
	          var len = arguments.length;
	          if (len < 2)
	            return apiRejection("you must pass at least 2 arguments to Promise.using");
	          var fn = arguments[len - 1];
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");
	          len--;
	          var resources = new Array(len);
	          for (var i = 0; i < len; ++i) {
	            var resource = arguments[i];
	            if (Disposer.isDisposer(resource)) {
	              var disposer = resource;
	              resource = resource.promise();
	              resource._setDisposable(disposer);
	            } else {
	              var maybePromise = tryConvertToPromise(resource);
	              if (maybePromise instanceof Promise) {
	                resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
	                  resources: resources,
	                  index: i
	                }, undefined);
	              }
	            }
	            resources[i] = resource;
	          }
	          var promise = Promise.settle(resources).then(inspectionMapper).then(function(vals) {
	            promise._pushContext();
	            var ret;
	            try {
	              ret = fn.apply(undefined, vals);
	            } finally {
	              promise._popContext();
	            }
	            return ret;
	          })._then(disposerSuccess, disposerFail, undefined, resources, undefined);
	          resources.promise = promise;
	          return promise;
	        };
	        Promise.prototype._setDisposable = function(disposer) {
	          this._bitField = this._bitField | 262144;
	          this._disposer = disposer;
	        };
	        Promise.prototype._isDisposable = function() {
	          return (this._bitField & 262144) > 0;
	        };
	        Promise.prototype._getDisposer = function() {
	          return this._disposer;
	        };
	        Promise.prototype._unsetDisposable = function() {
	          this._bitField = this._bitField & (~262144);
	          this._disposer = undefined;
	        };
	        Promise.prototype.disposer = function(fn) {
	          if (typeof fn === "function") {
	            return new FunctionDisposer(fn, this, createContext());
	          }
	          throw new TypeError();
	        };
	      };
	    }, {
	      "./errors.js": 13,
	      "./util.js": 38
	    }],
	    38: [function(_dereq_, module, exports) {
	      "use strict";
	      var es5 = _dereq_("./es5.js");
	      var canEvaluate = typeof navigator == "undefined";
	      var haveGetters = (function() {
	        try {
	          var o = {};
	          es5.defineProperty(o, "f", {get: function() {
	              return 3;
	            }});
	          return o.f === 3;
	        } catch (e) {
	          return false;
	        }
	      })();
	      var errorObj = {e: {}};
	      var tryCatchTarget;
	      function tryCatcher() {
	        try {
	          return tryCatchTarget.apply(this, arguments);
	        } catch (e) {
	          errorObj.e = e;
	          return errorObj;
	        }
	      }
	      function tryCatch(fn) {
	        tryCatchTarget = fn;
	        return tryCatcher;
	      }
	      var inherits = function(Child, Parent) {
	        var hasProp = {}.hasOwnProperty;
	        function T() {
	          this.constructor = Child;
	          this.constructor$ = Parent;
	          for (var propertyName in Parent.prototype) {
	            if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") {
	              this[propertyName + "$"] = Parent.prototype[propertyName];
	            }
	          }
	        }
	        T.prototype = Parent.prototype;
	        Child.prototype = new T();
	        return Child.prototype;
	      };
	      function isPrimitive(val) {
	        return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
	      }
	      function isObject(value) {
	        return !isPrimitive(value);
	      }
	      function maybeWrapAsError(maybeError) {
	        if (!isPrimitive(maybeError))
	          return maybeError;
	        return new Error(safeToString(maybeError));
	      }
	      function withAppended(target, appendee) {
	        var len = target.length;
	        var ret = new Array(len + 1);
	        var i;
	        for (i = 0; i < len; ++i) {
	          ret[i] = target[i];
	        }
	        ret[i] = appendee;
	        return ret;
	      }
	      function getDataPropertyOrDefault(obj, key, defaultValue) {
	        if (es5.isES5) {
	          var desc = Object.getOwnPropertyDescriptor(obj, key);
	          if (desc != null) {
	            return desc.get == null && desc.set == null ? desc.value : defaultValue;
	          }
	        } else {
	          return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
	        }
	      }
	      function notEnumerableProp(obj, name, value) {
	        if (isPrimitive(obj))
	          return obj;
	        var descriptor = {
	          value: value,
	          configurable: true,
	          enumerable: false,
	          writable: true
	        };
	        es5.defineProperty(obj, name, descriptor);
	        return obj;
	      }
	      var wrapsPrimitiveReceiver = (function() {
	        return this !== "string";
	      }).call("string");
	      function thrower(r) {
	        throw r;
	      }
	      var inheritedDataKeys = (function() {
	        if (es5.isES5) {
	          var oProto = Object.prototype;
	          var getKeys = Object.getOwnPropertyNames;
	          return function(obj) {
	            var ret = [];
	            var visitedKeys = Object.create(null);
	            while (obj != null && obj !== oProto) {
	              var keys;
	              try {
	                keys = getKeys(obj);
	              } catch (e) {
	                return ret;
	              }
	              for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (visitedKeys[key])
	                  continue;
	                visitedKeys[key] = true;
	                var desc = Object.getOwnPropertyDescriptor(obj, key);
	                if (desc != null && desc.get == null && desc.set == null) {
	                  ret.push(key);
	                }
	              }
	              obj = es5.getPrototypeOf(obj);
	            }
	            return ret;
	          };
	        } else {
	          return function(obj) {
	            var ret = [];
	            for (var key in obj) {
	              ret.push(key);
	            }
	            return ret;
	          };
	        }
	      })();
	      function isClass(fn) {
	        try {
	          if (typeof fn === "function") {
	            var keys = es5.names(fn.prototype);
	            if (es5.isES5)
	              return keys.length > 1;
	            return keys.length > 0 && !(keys.length === 1 && keys[0] === "constructor");
	          }
	          return false;
	        } catch (e) {
	          return false;
	        }
	      }
	      function toFastProperties(obj) {
	        function f() {}
	        f.prototype = obj;
	        return f;
	        eval(obj);
	      }
	      var rident = /^[a-z$_][a-z$_0-9]*$/i;
	      function isIdentifier(str) {
	        return rident.test(str);
	      }
	      function filledRange(count, prefix, suffix) {
	        var ret = new Array(count);
	        for (var i = 0; i < count; ++i) {
	          ret[i] = prefix + i + suffix;
	        }
	        return ret;
	      }
	      function safeToString(obj) {
	        try {
	          return obj + "";
	        } catch (e) {
	          return "[no string representation]";
	        }
	      }
	      function markAsOriginatingFromRejection(e) {
	        try {
	          notEnumerableProp(e, "isOperational", true);
	        } catch (ignore) {}
	      }
	      function originatesFromRejection(e) {
	        if (e == null)
	          return false;
	        return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) || e["isOperational"] === true);
	      }
	      function canAttachTrace(obj) {
	        return obj instanceof Error && es5.propertyIsWritable(obj, "stack");
	      }
	      var ensureErrorObject = (function() {
	        if (!("stack" in new Error())) {
	          return function(value) {
	            if (canAttachTrace(value))
	              return value;
	            try {
	              throw new Error(safeToString(value));
	            } catch (err) {
	              return err;
	            }
	          };
	        } else {
	          return function(value) {
	            if (canAttachTrace(value))
	              return value;
	            return new Error(safeToString(value));
	          };
	        }
	      })();
	      function classString(obj) {
	        return {}.toString.call(obj);
	      }
	      function copyDescriptors(from, to, filter) {
	        var keys = es5.names(from);
	        for (var i = 0; i < keys.length; ++i) {
	          var key = keys[i];
	          if (filter(key)) {
	            es5.defineProperty(to, key, es5.getDescriptor(from, key));
	          }
	        }
	      }
	      var ret = {
	        isClass: isClass,
	        isIdentifier: isIdentifier,
	        inheritedDataKeys: inheritedDataKeys,
	        getDataPropertyOrDefault: getDataPropertyOrDefault,
	        thrower: thrower,
	        isArray: es5.isArray,
	        haveGetters: haveGetters,
	        notEnumerableProp: notEnumerableProp,
	        isPrimitive: isPrimitive,
	        isObject: isObject,
	        canEvaluate: canEvaluate,
	        errorObj: errorObj,
	        tryCatch: tryCatch,
	        inherits: inherits,
	        withAppended: withAppended,
	        maybeWrapAsError: maybeWrapAsError,
	        wrapsPrimitiveReceiver: wrapsPrimitiveReceiver,
	        toFastProperties: toFastProperties,
	        filledRange: filledRange,
	        toString: safeToString,
	        canAttachTrace: canAttachTrace,
	        ensureErrorObject: ensureErrorObject,
	        originatesFromRejection: originatesFromRejection,
	        markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	        classString: classString,
	        copyDescriptors: copyDescriptors,
	        isNode: typeof process !== "undefined" && classString(process).toLowerCase() === "[object process]"
	      };
	      try {
	        throw new Error();
	      } catch (e) {
	        ret.lastLineError = e;
	      }
	      module.exports = ret;
	    }, {"./es5.js": 14}]
	  }, {}, [4])(4);
	});
	;
	if (typeof window !== 'undefined' && window !== null) {
	  window.P = window.Promise;
	} else if (typeof self !== 'undefined' && self !== null) {
	  self.P = self.Promise;
	}

	//# sourceMappingURL=<compileOutput>
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41), (function() { return this; }())))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(18);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/example2/example2.scss", function() {
			var newContent = require("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/example2/example2.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(37)();
	exports.push([module.id, "html,body{position:absolute;width:100%;height:100%;margin:0;padding:0;}body{position:absolute;overflow:hidden;}#circuitboard{position:absolute;top:20px;left:20px;right:20px;bottom:20px;z-index:1;}#three-d-canvas{position:absolute;top:0;left:0;right:0;bottom:0;margin:0;padding:0;z-index:0;}.tile{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;text-align:center;overflow:hidden;border:solid 1px;}.tile>header{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-weight:bold;border-width:1px;}.tile.open>header{height:26px;border-style:none none solid none;line-height:26px;font-size:20.8px;white-space:nowrap;overflow:hidden;}.tile:not(.open)>header{border-style:none;}.tile:not(.active){border-style:dotted !important;}.tile>section{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;}.tile:not(.open)>section{display:none;}", ""]);

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(16), __webpack_require__(21), __webpack_require__(38), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, U, ArtefactP) {
	  'use strict';
	  function newWidgetType(typeName) {
	    var optionDefaults = arguments[1] !== (void 0) ? arguments[1] : {};
	    var WidgetP = ArtefactP.then((function(Artefact) {
	      return Artefact.newSubclass(typeName, function($__1) {
	        var cssClass = $__1.cssClass;
	        var $__0 = this;
	        if (U.isDefined(cssClass)) {
	          this.element.addClass(cssClass);
	        }
	        this.element.asKefirStream('remove').onValue((function() {
	          $__0.destroy();
	        }));
	      }, {
	        get model() {
	          return this.options.model;
	        },
	        get element() {
	          return this.options.element;
	        }
	      }, U.extend({beforeConstruction: P.resolve()}, optionDefaults));
	    }));
	    var lowercaseName = typeName[0].toLowerCase() + typeName.slice(1);
	    $.fn[lowercaseName] = function(options) {
	      var $__0 = this;
	      if (options === 'instance') {
	        return this.data(("-amy-" + lowercaseName));
	      }
	      this.data(("-amy-" + lowercaseName), WidgetP.then((function(Widget) {
	        return new Widget(U.extend(options, {element: $__0})).constructed;
	      })));
	      return this;
	    };
	    return WidgetP;
	  }
	  return newWidgetType;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(16), __webpack_require__(21), __webpack_require__(39), __webpack_require__(22), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, U, SignalHandler, defer, dm) {
	  'use strict';
	  if (!window._amyPlugin) {
	    window._amyPlugin = function(pluginOrSelection) {
	      if ($.isPlainObject(pluginOrSelection)) {
	        return new dm.Delta(pluginOrSelection.name, pluginOrSelection);
	      } else {
	        U.assert(!_selectedDeferred.done, "ApiNATOMY plugins can only be selected once, after which they are fixed.");
	        _selectedDeferred.done = true;
	        dm.select.apply(dm, pluginOrSelection);
	        _selectedDeferred.resolve(this);
	        return window._amyPlugin.selected;
	      }
	    };
	    var _selectedDeferred = defer();
	    window._amyPlugin.selected = _selectedDeferred.promise;
	    window._amyPlugin.graph = (function() {
	      return dm.graph();
	    });
	    window._amyPlugin.dm = dm;
	  }
	  return window._amyPlugin;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function(P) {
	  'use strict';
	  var U = {
	    newClass: function(constructor) {
	      var prototype = arguments[1] !== (void 0) ? arguments[1] : {};
	      constructor.prototype = prototype;
	      constructor.prototype.constructor = constructor;
	      return constructor;
	    },
	    newSubclass: function(superClass, constructorMaker) {
	      var prototype = arguments[2] !== (void 0) ? arguments[2] : {};
	      var constructor = constructorMaker(superClass.prototype.constructor);
	      constructor.prototype = Object.create(superClass.prototype);
	      U.extend(constructor.prototype, prototype);
	      constructor.prototype.constructor = constructor;
	      return constructor;
	    },
	    extend: function(obj1) {
	      for (var rest = [],
	          $__1 = 1; $__1 < arguments.length; $__1++)
	        rest[$__1 - 1] = arguments[$__1];
	      rest.forEach((function(obj) {
	        for (var key in obj) {
	          if (obj.hasOwnProperty(key)) {
	            Object.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj, key));
	          }
	        }
	      }));
	      return obj1;
	    },
	    field: function(name) {
	      return (function(obj) {
	        return obj[name];
	      });
	    },
	    call: function(fn) {
	      for (var args = [],
	          $__2 = 1; $__2 < arguments.length; $__2++)
	        args[$__2 - 1] = arguments[$__2];
	      return fn.apply(undefined, args);
	    },
	    id: function(v) {
	      return v;
	    },
	    getDef: function(obj, name, value) {
	      if (U.isUndefined(obj[name])) {
	        if (typeof value === 'function') {
	          value = value();
	        }
	        obj[name] = value;
	      }
	      return obj[name];
	    },
	    object: function(obj, name) {
	      return U.getDef(obj, name, {});
	    },
	    array: function(obj, name) {
	      return U.getDef(obj, name, []);
	    },
	    pull: function(arr, val) {
	      var i = arr.indexOf(val);
	      if (i !== -1) {
	        arr.splice(i);
	      }
	    },
	    makeEmpty: function(arr) {
	      while (arr.length > 0) {
	        arr.pop();
	      }
	    },
	    bindA: function(fn, ctx, args) {
	      return fn.bind.apply(fn, [ctx].concat(args));
	    },
	    bind: function(obj, m) {
	      for (var args = [],
	          $__3 = 2; $__3 < arguments.length; $__3++)
	        args[$__3 - 2] = arguments[$__3];
	      return U.bindA(obj[m], obj, args);
	    },
	    applyConstructor: function(ConstructorFn, args) {
	      var NewConstructorFn = ConstructorFn.bind.apply(ConstructorFn, [null].concat(args));
	      return new NewConstructorFn();
	    },
	    assert: function(condition, message) {
	      if (!condition) {
	        throw new Error(message || "Assertion failed");
	      }
	    },
	    isUndefined: function(val) {
	      return typeof val === 'undefined';
	    },
	    isDefined: function(val) {
	      return typeof val !== 'undefined';
	    },
	    isPlainObject: function(val) {
	      return typeof val === 'object' && val.constructor === Object;
	    },
	    isFunction: function(val) {
	      return typeof val === 'function';
	    },
	    objValues: function(obj) {
	      return Object.keys(obj).map((function(key) {
	        return obj[key];
	      }));
	    },
	    makePositioned: function(element) {
	      if (element.css('position') === 'static') {
	        element.css('position', 'relative');
	      }
	    },
	    defOr: function() {
	      for (var values = [],
	          $__4 = 0; $__4 < arguments.length; $__4++)
	        values[$__4] = arguments[$__4];
	      for (var i = 0; i < values.length; i += 1) {
	        if (U.isDefined(values[i])) {
	          return values[i];
	        }
	      }
	    },
	    debounce: function(func, wait, context) {
	      var timeout;
	      return function() {
	        for (var args = [],
	            $__5 = 0; $__5 < arguments.length; $__5++)
	          args[$__5] = arguments[$__5];
	        var $__0 = this;
	        var laterFn = (function() {
	          timeout = null;
	          func.apply(context || $__0, args);
	        });
	        clearTimeout(timeout);
	        timeout = setTimeout(laterFn, wait);
	      };
	    },
	    oncePerStack: function(func, context) {
	      var notRunYet = true;
	      var result = function() {
	        for (var args = [],
	            $__5 = 0; $__5 < arguments.length; $__5++)
	          args[$__5] = arguments[$__5];
	        if (notRunYet) {
	          notRunYet = false;
	          setTimeout((function() {
	            notRunYet = true;
	          }), 0);
	          func.apply(context || this, args);
	        }
	      };
	      result.allowAdditionalCall = (function() {
	        notRunYet = true;
	      });
	      return result;
	    },
	    cached: function($__6) {
	      var $__7 = $__6,
	          retrieve = $__7.retrieve,
	          isEqual = $__7.isEqual;
	      isEqual = isEqual || ((function(a, b) {
	        return (a === b);
	      }));
	      var cache;
	      function retrieveValue() {
	        var newValue = retrieve();
	        var oldValue = cache;
	        if (!isEqual(newValue, oldValue)) {
	          cache = newValue;
	          onChange.forEach((function(fn) {
	            return fn(newValue, oldValue);
	          }));
	        }
	      }
	      var oncePerStackSetValue = U.oncePerStack(retrieveValue);
	      var resultFn = (function() {
	        oncePerStackSetValue();
	        return cache;
	      });
	      var onChange = [];
	      resultFn.onChange = (function(cb) {
	        onChange.push(cb);
	        return resultFn;
	      });
	      resultFn.allowAdditionalCall = (function() {
	        oncePerStackSetValue.allowAdditionalCall();
	      });
	      oncePerStackSetValue();
	      return resultFn;
	    },
	    promisify: function(obj, method) {
	      return function() {
	        for (var args = [],
	            $__5 = 0; $__5 < arguments.length; $__5++)
	          args[$__5] = arguments[$__5];
	        return new P((function(resolve, reject) {
	          try {
	            obj[method].apply(obj, args.concat(resolve));
	          } catch (error) {
	            reject(error);
	          }
	        }));
	      };
	    },
	    findIndex: function(array, pred) {
	      for (var i = 0; i < array.length; ++i) {
	        if (pred(array[i], i, array)) {
	          return i;
	        }
	      }
	      return -1;
	    },
	    memoize: function(fn) {
	      var keys = [];
	      var cache = [];
	      return function() {
	        for (var args = [],
	            $__5 = 0; $__5 < arguments.length; $__5++)
	          args[$__5] = arguments[$__5];
	        var index = U.findIndex(keys, (function(key) {
	          return key.every((function(v, i) {
	            return v === args[i];
	          }));
	        }));
	        if (index >= 0) {
	          return cache[index];
	        }
	        var result = fn.apply(this, args);
	        keys.push(args);
	        cache.push(result);
	        return result;
	      };
	    }
	  };
	  var EPS = 0.000001;
	  var sortOfEqual = (function(a, b) {
	    return (b - EPS < a && a < b + EPS);
	  });
	  U.Position = U.newClass(function(top, left) {
	    this.top = top;
	    this.left = left;
	  });
	  U.Position.subtract = (function(a, b) {
	    return new U.Position(a.top - b.top, a.left - b.left);
	  });
	  U.Position.equals = (function(a, b) {
	    return U.isDefined(a) && U.isDefined(b) && sortOfEqual(a.top, b.top) && sortOfEqual(a.left, b.left);
	  });
	  U.Size = U.newClass(function(height, width) {
	    this.height = height;
	    this.width = width;
	  });
	  U.Size.equals = (function(a, b) {
	    return U.isDefined(a) && U.isDefined(b) && sortOfEqual(a.height, b.height) && sortOfEqual(a.width, b.width);
	  });
	  return U;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function(P) {
	  'use strict';
	  return function defer() {
	    var resolve,
	        reject;
	    var promise = new P(function() {
	      resolve = arguments[0];
	      reject = arguments[1];
	    });
	    return {
	      resolve: resolve,
	      reject: reject,
	      promise: promise
	    };
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, Kefir) {
	  'use strict';
	  function setDisplay(element, newGrow) {
	    var oldGrow = element.data('amyFlexGrowTarget');
	    element.data('amyFlexGrowTarget', newGrow);
	    if (oldGrow > 0 && newGrow === 0) {
	      element.data('amyFlexGrowPrevDisplay', element.css('display'));
	      element.css('flexGrow', 1e-5);
	      setTimeout((function() {
	        element.asKefirStream('transitionend webkitTransitionEnd').merge(Kefir.later(300)).take(1).filter((function() {
	          return element.data('amyFlexGrowTarget') === 0;
	        })).onValue((function() {
	          element.css('display', 'none');
	        }));
	      }));
	    } else if (oldGrow === 0 && newGrow > 0) {
	      element.css('display', element.data('amyFlexGrowPrevDisplay'));
	      element.data('amyFlexGrowCssScheduled', true);
	      setTimeout((function() {
	        element.removeData('amyFlexGrowCssScheduled');
	        element.css('flexGrow', element.data('amyFlexGrowTarget'));
	      }));
	    } else if (!element.data('amyFlexGrowCssScheduled')) {
	      element.css('flexGrow', newGrow);
	    }
	  }
	  $.fn.amyNestedFlexGrow = function(grow) {
	    setDisplay(this, grow);
	    var growSum = 0;
	    this.parent().children().each(function() {
	      growSum += parseFloat($(this).data('amyFlexGrowTarget'));
	    });
	    setDisplay(this.parent(), growSum);
	    return this;
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(25);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/p-core.scss", function() {
			var newContent = require("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/p-core.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(37)();
	exports.push([module.id, ".circuitboard{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:stretch;-webkit-align-items:stretch;-ms-flex-align:stretch;align-items:stretch;padding:0;}.circuitboard .tilemap{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}.circuitboard .tilemap>.tilerow{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;margin:0;padding:0;height:0;}.circuitboard .tilemap>.tilerow>.tile{width:0;margin:0;padding:0;}.circuitboard .tilemap>.tilerow>.tile:last-child{margin-right:0 !important;}.circuitboard .tilemap>.tilerow:last-child{margin-bottom:0 !important;}", ""]);

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(21), __webpack_require__(42), __webpack_require__(43)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, U, Kefir, TWEEN) {
	  __webpack_require__(44).init(Kefir, $);
	  Kefir.fromOnNull = U.memoize(function fromOnNull(obj, eventName) {
	    return Kefir.fromBinder((function(emitter) {
	      obj.on(eventName, emitter.emit);
	      return (function() {
	        obj.on(eventName, null);
	      });
	    }));
	  });
	  var requestAnimationFrameFn = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || ((function(f) {
	    window.setTimeout(f, 1000 / 60);
	  }));
	  Kefir.animationFrames = function animationFrames() {
	    return Kefir.fromBinder((function(emitter) {
	      var subscribed = true;
	      (function iterationFn() {
	        requestAnimationFrameFn((function() {
	          emitter.emit();
	          if (subscribed) {
	            iterationFn();
	          }
	        }));
	      })();
	      return (function() {
	        subscribed = false;
	      });
	    }));
	  };
	  Kefir.tween = function tween(objStart, objEnd, $__1) {
	    var $__2 = $__1,
	        duration = $__2.duration,
	        delay = $__2.delay,
	        easing = $__2.easing;
	    var tw = new TWEEN.Tween(objStart).to(objEnd, duration);
	    var bus = Kefir.bus();
	    var addStream = ((function() {
	      var chainedStreams = 0;
	      return (function(stream) {
	        chainedStreams += 1;
	        bus.plug(stream);
	        stream.onEnd((function() {
	          chainedStreams -= 1;
	          if (chainedStreams === 0) {
	            bus.end();
	          }
	        }));
	      });
	    }))();
	    addStream(Kefir.fromBinder((function(emitter) {
	      if (easing) {
	        tw.easing(easing);
	      }
	      if (delay) {
	        tw.delay(delay);
	      }
	      tw.onUpdate(function() {
	        emitter.emit(this);
	      });
	      tw.onComplete(emitter.end);
	    })));
	    bus.tween = tw;
	    bus.start = (function() {
	      tw.start();
	      return bus;
	    });
	    bus.chain = (function(other) {
	      addStream(other);
	      tw.chain(other.tween);
	      return bus;
	    });
	    return bus;
	  };
	  Kefir.keyPress = function keyPress(keyCode) {
	    return $(window).asKefirStream('keypress').filter((function(e) {
	      return e.keyCode === keyCode;
	    }));
	  };
	  Kefir.once = function once(value) {
	    return Kefir.fromBinder((function(emitter) {
	      emitter.emit(value);
	      emitter.end();
	    }));
	  };
	  Kefir.fromArray = function fromArray(array) {
	    return Kefir.fromBinder((function(emitter) {
	      array.forEach(emitter.emit);
	      emitter.end();
	    }));
	  };
	  Kefir.limiter = function limiter(pacing) {
	    var handler = arguments[1] !== (void 0) ? arguments[1] : U.call;
	    var wantedBus = Kefir.bus();
	    var open = Kefir.bus();
	    var close = Kefir.bus();
	    pacing.filterBy(wantedBus.toProperty(false)).onValue((function() {
	      handler((function() {
	        open.emit();
	        wantedBus.emit(false);
	        close.emit();
	      }));
	    }));
	    return function(stream) {
	      var buffer = (arguments[1] !== (void 0) ? arguments[1] : {}).buffer;
	      wantedBus.plug(stream.mapTo(true));
	      return Kefir.constant(true).take(1).concat(close).flatMapLatest((function() {
	        var accumulator = (function(arr, val) {
	          return (buffer ? arr.concat([val]) : [val]);
	        });
	        return stream.takeUntilBy(open).reduce(accumulator, []).flatMap(Kefir.fromArray);
	      }));
	    };
	  };
	  Kefir.Observable.prototype.limitedBy = function limitedBy(wrapper, options) {
	    return wrapper(this, options);
	  };
	  Kefir.Stream.prototype.holdUntil = function holdUntil(pacing) {
	    var $__0 = this;
	    return Kefir.fromBinder((function(emitter) {
	      var buffer = [];
	      var unsubscribeToThis = $__0.onValue((function(value) {
	        buffer.push(value);
	      }));
	      var unsubscribeToPacing = pacing.onValue((function() {
	        if (buffer.length > 0) {
	          var oldBuffer = buffer;
	          buffer = [];
	          oldBuffer.forEach(emitter.emit);
	        }
	      }));
	      return (function() {
	        unsubscribeToThis();
	        unsubscribeToPacing();
	        buffer = null;
	      });
	    }));
	  };
	  Kefir.Observable.prototype.value = function(value, comparator) {
	    comparator = comparator || ((function(e) {
	      return e === value;
	    }));
	    return this.skipDuplicates().filter(comparator);
	  };
	  Kefir.Observable.prototype.run = function() {
	    var $__0 = this;
	    var doNothing = (function() {});
	    this.onValue(doNothing);
	    return (function() {
	      $__0.offValue(doNothing);
	    });
	  };
	  Kefir.Stream.prototype.skipPropagation = function(label) {
	    return this.filter((function(event) {
	      return !U.array(event.originalEvent, '_onlyOnceFor')[label];
	    })).map((function(event) {
	      U.array(event.originalEvent, '_onlyOnceFor')[label] = true;
	    }));
	  };
	  Kefir.Stream.prototype.which = function(buttonId) {
	    var pred = (typeof buttonId === 'function') ? (buttonId) : ((function(b) {
	      return b === buttonId;
	    }));
	    return this.filter((function(e) {
	      return pred(e.which);
	    }));
	  };
	  $.fn.mouseDrag = function mouseDrag() {
	    var threshold = (arguments[0] !== (void 0) ? arguments[0] : {}).threshold;
	    return $(this).asKefirStream('mousedown').flatMap((function(mouseDownEvent) {
	      var stream = $(document).asKefirStream('mousemove');
	      if (threshold) {
	        var crossed = false;
	        stream = stream.filter((function(mouseMoveEvent) {
	          if (crossed) {
	            return true;
	          }
	          var dx = mouseDownEvent.pageX - mouseMoveEvent.pageX;
	          var dy = mouseDownEvent.pageY - mouseMoveEvent.pageY;
	          if (dx * dx + dy * dy > threshold * threshold) {
	            return crossed = true;
	          }
	          return false;
	        }));
	      }
	      return stream.takeUntilBy($(document).asKefirStream('mouseup')).map((function(mouseMoveEvent) {
	        return ({
	          mouseDownEvent: mouseDownEvent,
	          mouseMoveEvent: mouseMoveEvent
	        });
	      }));
	    }));
	  };
	  $.fn.mouseClick = function mouseClick() {
	    var threshold = (arguments[0] !== (void 0) ? arguments[0] : {}).threshold;
	    return $(this).asKefirStream('mousedown').flatMap((function(mouseDownEvent) {
	      var untilStream = $(document).asKefirStream('mousemove');
	      if (threshold) {
	        var crossed = false;
	        untilStream = untilStream.filter((function(mouseMoveEvent) {
	          if (crossed) {
	            return true;
	          }
	          var dx = mouseDownEvent.pageX - mouseMoveEvent.pageX;
	          var dy = mouseDownEvent.pageY - mouseMoveEvent.pageY;
	          if (dx * dx + dy * dy > threshold * threshold) {
	            return crossed = true;
	          }
	          return false;
	        }));
	      }
	      return $(document).asKefirStream('mouseup').take(1).takeUntilBy(untilStream);
	    }));
	  };
	  $.fn.mouseWheel = function mouseWheel() {
	    return $(this).asKefirStream('mousewheel DOMMouseScroll');
	  };
	  return Kefir;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, U) {
	  'use strict';
	  function deepTransform(val, fn) {
	    if ($.isPlainObject(val) || $.isArray(val)) {
	      $.each(val, (function(key, subVal) {
	        var returned = fn(subVal);
	        if (U.isUndefined(returned)) {
	          deepTransform(subVal, fn);
	        } else {
	          val[key] = returned;
	        }
	      }));
	    }
	  }
	  var REF_PATTERN = /`([\[\.].+?)`/g;
	  return function defaults(spec, context) {
	    deepTransform(spec, (function(val) {
	      if (typeof val === 'string') {
	        var refs = (val.match(REF_PATTERN) || []).map((function(ref) {
	          var strippedRef = ref.substring(1, ref.length - 1);
	          return new Function('refs', ("return refs" + strippedRef));
	        }));
	        var expr = val.replace(REF_PATTERN, "(refs$1)");
	        var templateFn = (function(formalParams) {
	          var newFormalParams = formalParams.concat([("return " + expr)]);
	          return U.applyConstructor(Function, newFormalParams);
	        });
	        templateFn.refs = refs;
	        return templateFn;
	      }
	    }));
	    function withDefaultsAux(defSpec, obj, refs, params) {
	      var change = false;
	      Object.keys(defSpec).forEach((function(key) {
	        if (key in obj) {
	          if ($.isPlainObject(defSpec[key]) && $.isPlainObject(obj[key])) {
	            change = withDefaultsAux(defSpec[key], obj[key], refs, params) || change;
	          }
	        } else if ($.isPlainObject(defSpec[key])) {
	          obj[key] = {};
	          change = withDefaultsAux(defSpec[key], obj[key], refs, params) || change;
	        } else if ($.isFunction(defSpec[key])) {
	          if (defSpec[key].refs.every((function(ref) {
	            return !U.isUndefined(ref(refs));
	          }))) {
	            var allparams = $.extend({refs: refs}, context, params);
	            var formalParams = Object.keys(allparams);
	            var actualParams = formalParams.map((function(fpar) {
	              return allparams[fpar];
	            }));
	            var finalFn = defSpec[key](formalParams);
	            obj[key] = finalFn.apply(null, actualParams);
	          }
	        }
	      }));
	      return change;
	    }
	    return function withDefaults(obj, params) {
	      var result = (U.isUndefined(obj) ? {} : $.extend(true, {}, obj));
	      var change = true;
	      while (change) {
	        change = withDefaultsAux(spec, result, result, params || {});
	      }
	      return result;
	    };
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function($) {
	  'use strict';
	  $.fn.extend({amyPutCssRules: function(rules) {
	      var $__0 = this;
	      $.each(rules, (function(selector, css) {
	        var context;
	        if (selector.trim() === '&') {
	          context = $__0;
	        } else if (selector.trim().charAt(0) === '&') {
	          context = $__0.find(selector.trim().substr(1).trim());
	        } else {
	          context = $__0.find(selector);
	        }
	        context.css(css);
	      }));
	    }});
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(30);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/p-tile-skin.scss", function() {
			var newContent = require("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/p-tile-skin.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(37)();
	exports.push([module.id, ".skinned-tile{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.skinned-tile>header{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-weight:bold;border-width:1px;overflow:hidden;}.skinned-tile.open>header{height:26px;border-style:none none solid none;line-height:26px;font-size:19.5px !important;white-space:nowrap;}.skinned-tile:not(.open)>header{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;padding:0 5px;}.skinned-tile>section{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;}.skinned-tile.open>section{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;opacity:1;}.skinned-tile:not(.open)>section{opacity:0;}", ""]);

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	!(module.exports = {
	  button: {
	    LEFT: 1,
	    MIDDLE: 2,
	    RIGHT: 3
	  },
	  key: {
	    BACKSPACE: 8,
	    TAB: 9,
	    ENTER: 13,
	    SHIFT: 16,
	    CTRL: 17,
	    ALT: 18,
	    PAUSE: 19,
	    CAPS_LOCK: 20,
	    ESCAPE: 27,
	    SPACE: 32,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    END: 35,
	    HOME: 36,
	    LEFT_ARROW: 37,
	    UP_ARROW: 38,
	    RIGHT_ARROW: 39,
	    DOWN_ARROW: 40,
	    INSERT: 45,
	    DELETE: 46,
	    0: 48,
	    1: 49,
	    2: 50,
	    3: 51,
	    4: 52,
	    5: 53,
	    6: 54,
	    7: 55,
	    8: 56,
	    9: 57,
	    A: 65,
	    B: 66,
	    C: 67,
	    D: 68,
	    E: 69,
	    F: 70,
	    G: 71,
	    H: 72,
	    I: 73,
	    J: 74,
	    K: 75,
	    L: 76,
	    M: 77,
	    N: 78,
	    O: 79,
	    P: 80,
	    Q: 81,
	    R: 82,
	    S: 83,
	    T: 84,
	    U: 85,
	    V: 86,
	    W: 87,
	    X: 88,
	    Y: 89,
	    Z: 90,
	    LEFT_META: 91,
	    RIGHT_META: 92,
	    SELECT: 93,
	    NUMPAD_0: 96,
	    NUMPAD_1: 97,
	    NUMPAD_2: 98,
	    NUMPAD_3: 99,
	    NUMPAD_4: 100,
	    NUMPAD_5: 101,
	    NUMPAD_6: 102,
	    NUMPAD_7: 103,
	    NUMPAD_8: 104,
	    NUMPAD_9: 105,
	    MULTIPLY: 106,
	    ADD: 107,
	    SUBTRACT: 109,
	    DECIMAL: 110,
	    DIVIDE: 111,
	    F1: 112,
	    F2: 113,
	    F3: 114,
	    F4: 115,
	    F5: 116,
	    F6: 117,
	    F7: 118,
	    F8: 119,
	    F9: 120,
	    F10: 121,
	    F11: 122,
	    F12: 123,
	    NUM_LOCK: 144,
	    SCROLL_LOCK: 145,
	    SEMICOLON: 186,
	    EQUALS: 187,
	    COMMA: 188,
	    DASH: 189,
	    PERIOD: 190,
	    FORWARD_SLASH: 191,
	    GRAVE_ACCENT: 192,
	    OPEN_BRACKET: 219,
	    BACK_SLASH: 220,
	    CLOSE_BRACKET: 221,
	    SINGLE_QUOTE: 222
	  }
	});
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(33);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/p-tile-skin-grow-when-open.scss", function() {
			var newContent = require("!!/home/mhelvens/Projects/apinatomy-core/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-core/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-core/src/p-tile-skin-grow-when-open.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(37)();
	exports.push([module.id, ".tilemap .tile>section{opacity:0;visibility:hidden;}", ""]);

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isIE9 = memoize(function() {
			return /msie 9\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isIE9();
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function () {
				styleElement.parentNode.removeChild(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	function replaceText(source, id, replacement) {
		var boundaries = ["/** >>" + id + " **/", "/** " + id + "<< **/"];
		var start = source.lastIndexOf(boundaries[0]);
		var wrappedReplacement = replacement
			? (boundaries[0] + replacement + boundaries[1])
			: "";
		if (source.lastIndexOf(boundaries[0]) >= 0) {
			var end = source.lastIndexOf(boundaries[1]) + boundaries[1].length;
			return source.slice(0, start) + wrappedReplacement + source.slice(end);
		} else {
			return source + wrappedReplacement;
		}
	}
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(styleElement.styleSheet.cssText, index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap && typeof btoa === "function") {
			try {
				css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(JSON.stringify(sourceMap)) + " */";
				css = "@import url(\"data:text/css;base64," + btoa(css) + "\")";
			} catch(e) {}
		}
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(e) {
	  function t(e) {
	    var t = e.length,
	        r = $.type(e);
	    return "function" === r || $.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : "array" === r || 0 === t || "number" == typeof t && t > 0 && t - 1 in e;
	  }
	  if (!e.jQuery) {
	    var $ = function(e, t) {
	      return new $.fn.init(e, t);
	    };
	    $.isWindow = function(e) {
	      return null != e && e == e.window;
	    }, $.type = function(e) {
	      return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? a[o.call(e)] || "object" : typeof e;
	    }, $.isArray = Array.isArray || function(e) {
	      return "array" === $.type(e);
	    }, $.isPlainObject = function(e) {
	      var t;
	      if (!e || "object" !== $.type(e) || e.nodeType || $.isWindow(e))
	        return !1;
	      try {
	        if (e.constructor && !n.call(e, "constructor") && !n.call(e.constructor.prototype, "isPrototypeOf"))
	          return !1;
	      } catch (r) {
	        return !1;
	      }
	      for (t in e)
	        ;
	      return void 0 === t || n.call(e, t);
	    }, $.each = function(e, r, a) {
	      var n,
	          o = 0,
	          i = e.length,
	          s = t(e);
	      if (a) {
	        if (s)
	          for (; i > o && (n = r.apply(e[o], a), n !== !1); o++)
	            ;
	        else
	          for (o in e)
	            if (n = r.apply(e[o], a), n === !1)
	              break;
	      } else if (s)
	        for (; i > o && (n = r.call(e[o], o, e[o]), n !== !1); o++)
	          ;
	      else
	        for (o in e)
	          if (n = r.call(e[o], o, e[o]), n === !1)
	            break;
	      return e;
	    }, $.data = function(e, t, a) {
	      if (void 0 === a) {
	        var n = e[$.expando],
	            o = n && r[n];
	        if (void 0 === t)
	          return o;
	        if (o && t in o)
	          return o[t];
	      } else if (void 0 !== t) {
	        var n = e[$.expando] || (e[$.expando] = ++$.uuid);
	        return r[n] = r[n] || {}, r[n][t] = a, a;
	      }
	    }, $.removeData = function(e, t) {
	      var a = e[$.expando],
	          n = a && r[a];
	      n && $.each(t, function(e, t) {
	        delete n[t];
	      });
	    }, $.extend = function() {
	      var e,
	          t,
	          r,
	          a,
	          n,
	          o,
	          i = arguments[0] || {},
	          s = 1,
	          l = arguments.length,
	          u = !1;
	      for ("boolean" == typeof i && (u = i, i = arguments[s] || {}, s++), "object" != typeof i && "function" !== $.type(i) && (i = {}), s === l && (i = this, s--); l > s; s++)
	        if (null != (n = arguments[s]))
	          for (a in n)
	            e = i[a], r = n[a], i !== r && (u && r && ($.isPlainObject(r) || (t = $.isArray(r))) ? (t ? (t = !1, o = e && $.isArray(e) ? e : []) : o = e && $.isPlainObject(e) ? e : {}, i[a] = $.extend(u, o, r)) : void 0 !== r && (i[a] = r));
	      return i;
	    }, $.queue = function(e, r, a) {
	      function n(e, r) {
	        var a = r || [];
	        return null != e && (t(Object(e)) ? !function(e, t) {
	          for (var r = +t.length,
	              a = 0,
	              n = e.length; r > a; )
	            e[n++] = t[a++];
	          if (r !== r)
	            for (; void 0 !== t[a]; )
	              e[n++] = t[a++];
	          return e.length = n, e;
	        }(a, "string" == typeof e ? [e] : e) : [].push.call(a, e)), a;
	      }
	      if (e) {
	        r = (r || "fx") + "queue";
	        var o = $.data(e, r);
	        return a ? (!o || $.isArray(a) ? o = $.data(e, r, n(a)) : o.push(a), o) : o || [];
	      }
	    }, $.dequeue = function(e, t) {
	      $.each(e.nodeType ? [e] : e, function(e, r) {
	        t = t || "fx";
	        var a = $.queue(r, t),
	            n = a.shift();
	        "inprogress" === n && (n = a.shift()), n && ("fx" === t && a.unshift("inprogress"), n.call(r, function() {
	          $.dequeue(r, t);
	        }));
	      });
	    }, $.fn = $.prototype = {
	      init: function(e) {
	        if (e.nodeType)
	          return this[0] = e, this;
	        throw new Error("Not a DOM node.");
	      },
	      offset: function() {
	        var t = this[0].getBoundingClientRect ? this[0].getBoundingClientRect() : {
	          top: 0,
	          left: 0
	        };
	        return {
	          top: t.top + (e.pageYOffset || document.scrollTop || 0) - (document.clientTop || 0),
	          left: t.left + (e.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || 0)
	        };
	      },
	      position: function() {
	        function e() {
	          for (var e = this.offsetParent || document; e && "html" === !e.nodeType.toLowerCase && "static" === e.style.position; )
	            e = e.offsetParent;
	          return e || document;
	        }
	        var t = this[0],
	            e = e.apply(t),
	            r = this.offset(),
	            a = /^(?:body|html)$/i.test(e.nodeName) ? {
	              top: 0,
	              left: 0
	            } : $(e).offset();
	        return r.top -= parseFloat(t.style.marginTop) || 0, r.left -= parseFloat(t.style.marginLeft) || 0, e.style && (a.top += parseFloat(e.style.borderTopWidth) || 0, a.left += parseFloat(e.style.borderLeftWidth) || 0), {
	          top: r.top - a.top,
	          left: r.left - a.left
	        };
	      }
	    };
	    var r = {};
	    $.expando = "velocity" + (new Date).getTime(), $.uuid = 0;
	    for (var a = {},
	        n = a.hasOwnProperty,
	        o = a.toString,
	        i = "Boolean Number String Function Array Date RegExp Object Error".split(" "),
	        s = 0; s < i.length; s++)
	      a["[object " + i[s] + "]"] = i[s].toLowerCase();
	    $.fn.init.prototype = $.fn, e.Velocity = {Utilities: $};
	  }
	}(window), function(e) {
	  "object" == typeof module && "object" == typeof module.exports ? module.exports = e() : true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : e();
	}(function() {
	  return function(e, t, r, a) {
	    function n(e) {
	      for (var t = -1,
	          r = e ? e.length : 0,
	          a = []; ++t < r; ) {
	        var n = e[t];
	        n && a.push(n);
	      }
	      return a;
	    }
	    function o(e) {
	      return g.isWrapped(e) ? e = [].slice.call(e) : g.isNode(e) && (e = [e]), e;
	    }
	    function i(e) {
	      var t = $.data(e, "velocity");
	      return null === t ? a : t;
	    }
	    function s(e) {
	      return function(t) {
	        return Math.round(t * e) * (1 / e);
	      };
	    }
	    function l(e, r, a, n) {
	      function o(e, t) {
	        return 1 - 3 * t + 3 * e;
	      }
	      function i(e, t) {
	        return 3 * t - 6 * e;
	      }
	      function s(e) {
	        return 3 * e;
	      }
	      function l(e, t, r) {
	        return ((o(t, r) * e + i(t, r)) * e + s(t)) * e;
	      }
	      function u(e, t, r) {
	        return 3 * o(t, r) * e * e + 2 * i(t, r) * e + s(t);
	      }
	      function c(t, r) {
	        for (var n = 0; m > n; ++n) {
	          var o = u(r, e, a);
	          if (0 === o)
	            return r;
	          var i = l(r, e, a) - t;
	          r -= i / o;
	        }
	        return r;
	      }
	      function p() {
	        for (var t = 0; b > t; ++t)
	          w[t] = l(t * x, e, a);
	      }
	      function f(t, r, n) {
	        var o,
	            i,
	            s = 0;
	        do
	          i = r + (n - r) / 2, o = l(i, e, a) - t, o > 0 ? n = i : r = i;
	 while (Math.abs(o) > h && ++s < v);
	        return i;
	      }
	      function d(t) {
	        for (var r = 0,
	            n = 1,
	            o = b - 1; n != o && w[n] <= t; ++n)
	          r += x;
	        --n;
	        var i = (t - w[n]) / (w[n + 1] - w[n]),
	            s = r + i * x,
	            l = u(s, e, a);
	        return l >= y ? c(t, s) : 0 == l ? s : f(t, r, r + x);
	      }
	      function g() {
	        V = !0, (e != r || a != n) && p();
	      }
	      var m = 4,
	          y = .001,
	          h = 1e-7,
	          v = 10,
	          b = 11,
	          x = 1 / (b - 1),
	          S = "Float32Array" in t;
	      if (4 !== arguments.length)
	        return !1;
	      for (var P = 0; 4 > P; ++P)
	        if ("number" != typeof arguments[P] || isNaN(arguments[P]) || !isFinite(arguments[P]))
	          return !1;
	      e = Math.min(e, 1), a = Math.min(a, 1), e = Math.max(e, 0), a = Math.max(a, 0);
	      var w = S ? new Float32Array(b) : new Array(b),
	          V = !1,
	          C = function(t) {
	            return V || g(), e === r && a === n ? t : 0 === t ? 0 : 1 === t ? 1 : l(d(t), r, n);
	          };
	      C.getControlPoints = function() {
	        return [{
	          x: e,
	          y: r
	        }, {
	          x: a,
	          y: n
	        }];
	      };
	      var T = "generateBezier(" + [e, r, a, n] + ")";
	      return C.toString = function() {
	        return T;
	      }, C;
	    }
	    function u(e, t) {
	      var r = e;
	      return g.isString(e) ? v.Easings[e] || (r = !1) : r = g.isArray(e) && 1 === e.length ? s.apply(null, e) : g.isArray(e) && 2 === e.length ? b.apply(null, e.concat([t])) : g.isArray(e) && 4 === e.length ? l.apply(null, e) : !1, r === !1 && (r = v.Easings[v.defaults.easing] ? v.defaults.easing : h), r;
	    }
	    function c(e) {
	      if (e) {
	        var t = (new Date).getTime(),
	            r = v.State.calls.length;
	        r > 1e4 && (v.State.calls = n(v.State.calls));
	        for (var o = 0; r > o; o++)
	          if (v.State.calls[o]) {
	            var s = v.State.calls[o],
	                l = s[0],
	                u = s[2],
	                f = s[3],
	                d = !!f,
	                m = null;
	            f || (f = v.State.calls[o][3] = t - 16);
	            for (var y = Math.min((t - f) / u.duration, 1),
	                h = 0,
	                b = l.length; b > h; h++) {
	              var S = l[h],
	                  w = S.element;
	              if (i(w)) {
	                var V = !1;
	                if (u.display !== a && null !== u.display && "none" !== u.display) {
	                  if ("flex" === u.display) {
	                    var C = ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex"];
	                    $.each(C, function(e, t) {
	                      x.setPropertyValue(w, "display", t);
	                    });
	                  }
	                  x.setPropertyValue(w, "display", u.display);
	                }
	                u.visibility !== a && "hidden" !== u.visibility && x.setPropertyValue(w, "visibility", u.visibility);
	                for (var T in S)
	                  if ("element" !== T) {
	                    var k = S[T],
	                        A,
	                        F = g.isString(k.easing) ? v.Easings[k.easing] : k.easing;
	                    if (1 === y)
	                      A = k.endValue;
	                    else {
	                      var E = k.endValue - k.startValue;
	                      if (A = k.startValue + E * F(y, u, E), !d && A === k.currentValue)
	                        continue;
	                    }
	                    if (k.currentValue = A, "tween" === T)
	                      m = A;
	                    else {
	                      if (x.Hooks.registered[T]) {
	                        var j = x.Hooks.getRoot(T),
	                            H = i(w).rootPropertyValueCache[j];
	                        H && (k.rootPropertyValue = H);
	                      }
	                      var N = x.setPropertyValue(w, T, k.currentValue + (0 === parseFloat(A) ? "" : k.unitType), k.rootPropertyValue, k.scrollData);
	                      x.Hooks.registered[T] && (i(w).rootPropertyValueCache[j] = x.Normalizations.registered[j] ? x.Normalizations.registered[j]("extract", null, N[1]) : N[1]), "transform" === N[0] && (V = !0);
	                    }
	                  }
	                u.mobileHA && i(w).transformCache.translate3d === a && (i(w).transformCache.translate3d = "(0px, 0px, 0px)", V = !0), V && x.flushTransformCache(w);
	              }
	            }
	            u.display !== a && "none" !== u.display && (v.State.calls[o][2].display = !1), u.visibility !== a && "hidden" !== u.visibility && (v.State.calls[o][2].visibility = !1), u.progress && u.progress.call(s[1], s[1], y, Math.max(0, f + u.duration - t), f, m), 1 === y && p(o);
	          }
	      }
	      v.State.isTicking && P(c);
	    }
	    function p(e, t) {
	      if (!v.State.calls[e])
	        return !1;
	      var p,
	          f,
	          $__0 = function() {
	            p = r[u].element;
	            if (t || o.loop || ("none" === o.display && x.setPropertyValue(p, "display", o.display), "hidden" === o.visibility && x.setPropertyValue(p, "visibility", o.visibility)), o.loop !== !0 && ($.queue(p)[1] === a || !/\.velocityQueueEntryFlag/i.test($.queue(p)[1])) && i(p)) {
	              i(p).isAnimating = !1, i(p).rootPropertyValueCache = {};
	              f = !1;
	              $.each(x.Lists.transforms3D, function(e, t) {
	                var r = /^scale/.test(t) ? 1 : 0,
	                    n = i(p).transformCache[t];
	                i(p).transformCache[t] !== a && new RegExp("^\\(" + r + "[^.]").test(n) && (f = !0, delete i(p).transformCache[t]);
	              }), o.mobileHA && (f = !0, delete i(p).transformCache.translate3d), f && x.flushTransformCache(p), x.Values.removeClass(p, "velocity-animating");
	            }
	            if (!t && o.complete && !o.loop && u === c - 1)
	              try {
	                o.complete.call(n, n);
	              } catch (d) {
	                setTimeout(function() {
	                  throw d;
	                }, 1);
	              }
	            s && o.loop !== !0 && s(n), i(p) && o.loop === !0 && !t && ($.each(i(p).tweensContainer, function(e, t) {
	              /^rotate/.test(e) && 360 === parseFloat(t.endValue) && (t.endValue = 0, t.startValue = 360), /^backgroundPosition/.test(e) && 100 === parseFloat(t.endValue) && "%" === t.unitType && (t.endValue = 0, t.startValue = 100);
	            }), v(p, "reverse", {
	              loop: !0,
	              delay: o.delay
	            })), o.queue !== !1 && $.dequeue(p, o.queue);
	          };
	      for (var r = v.State.calls[e][0],
	          n = v.State.calls[e][1],
	          o = v.State.calls[e][2],
	          s = v.State.calls[e][4],
	          l = !1,
	          u = 0,
	          c = r.length; c > u; u++) {
	        $__0();
	      }
	      v.State.calls[e] = !1;
	      for (var g = 0,
	          m = v.State.calls.length; m > g; g++)
	        if (v.State.calls[g] !== !1) {
	          l = !0;
	          break;
	        }
	      l === !1 && (v.State.isTicking = !1, delete v.State.calls, v.State.calls = []);
	    }
	    var f = function() {
	      if (r.documentMode)
	        return r.documentMode;
	      for (var e = 7; e > 4; e--) {
	        var t = r.createElement("div");
	        if (t.innerHTML = "<!--[if IE " + e + "]><span></span><![endif]-->", t.getElementsByTagName("span").length)
	          return t = null, e;
	      }
	      return a;
	    }(),
	        d = function() {
	          var e = 0;
	          return t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || function(t) {
	            var r = (new Date).getTime(),
	                a;
	            return a = Math.max(0, 16 - (r - e)), e = r + a, setTimeout(function() {
	              t(r + a);
	            }, a);
	          };
	        }(),
	        g = {
	          isString: function(e) {
	            return "string" == typeof e;
	          },
	          isArray: Array.isArray || function(e) {
	            return "[object Array]" === Object.prototype.toString.call(e);
	          },
	          isFunction: function(e) {
	            return "[object Function]" === Object.prototype.toString.call(e);
	          },
	          isNode: function(e) {
	            return e && e.nodeType;
	          },
	          isNodeList: function(e) {
	            return "object" == typeof e && /^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(e)) && e.length !== a && (0 === e.length || "object" == typeof e[0] && e[0].nodeType > 0);
	          },
	          isWrapped: function(e) {
	            return e && (e.jquery || t.Zepto && t.Zepto.zepto.isZ(e));
	          },
	          isSVG: function(e) {
	            return t.SVGElement && e instanceof t.SVGElement;
	          },
	          isEmptyObject: function(e) {
	            for (var t in e)
	              return !1;
	            return !0;
	          }
	        },
	        $,
	        m = !1;
	    if (e.fn && e.fn.jquery ? ($ = e, m = !0) : $ = t.Velocity.Utilities, 8 >= f && !m)
	      throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");
	    if (7 >= f)
	      return void(jQuery.fn.velocity = jQuery.fn.animate);
	    var y = 400,
	        h = "swing",
	        v = {
	          State: {
	            isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
	            isAndroid: /Android/i.test(navigator.userAgent),
	            isGingerbread: /Android 2\.3\.[3-7]/i.test(navigator.userAgent),
	            isChrome: t.chrome,
	            isFirefox: /Firefox/i.test(navigator.userAgent),
	            prefixElement: r.createElement("div"),
	            prefixMatches: {},
	            scrollAnchor: null,
	            scrollPropertyLeft: null,
	            scrollPropertyTop: null,
	            isTicking: !1,
	            calls: []
	          },
	          CSS: {},
	          Utilities: $,
	          Redirects: {},
	          Easings: {},
	          Promise: t.Promise,
	          defaults: {
	            queue: "",
	            duration: y,
	            easing: h,
	            begin: a,
	            complete: a,
	            progress: a,
	            display: a,
	            visibility: a,
	            loop: !1,
	            delay: !1,
	            mobileHA: !0,
	            _cacheValues: !0
	          },
	          init: function(e) {
	            $.data(e, "velocity", {
	              isSVG: g.isSVG(e),
	              isAnimating: !1,
	              computedStyle: null,
	              tweensContainer: null,
	              rootPropertyValueCache: {},
	              transformCache: {}
	            });
	          },
	          hook: null,
	          mock: !1,
	          version: {
	            major: 1,
	            minor: 2,
	            patch: 2
	          },
	          debug: !1
	        };
	    t.pageYOffset !== a ? (v.State.scrollAnchor = t, v.State.scrollPropertyLeft = "pageXOffset", v.State.scrollPropertyTop = "pageYOffset") : (v.State.scrollAnchor = r.documentElement || r.body.parentNode || r.body, v.State.scrollPropertyLeft = "scrollLeft", v.State.scrollPropertyTop = "scrollTop");
	    var b = function() {
	      function e(e) {
	        return -e.tension * e.x - e.friction * e.v;
	      }
	      function t(t, r, a) {
	        var n = {
	          x: t.x + a.dx * r,
	          v: t.v + a.dv * r,
	          tension: t.tension,
	          friction: t.friction
	        };
	        return {
	          dx: n.v,
	          dv: e(n)
	        };
	      }
	      function r(r, a) {
	        var n = {
	          dx: r.v,
	          dv: e(r)
	        },
	            o = t(r, .5 * a, n),
	            i = t(r, .5 * a, o),
	            s = t(r, a, i),
	            l = 1 / 6 * (n.dx + 2 * (o.dx + i.dx) + s.dx),
	            u = 1 / 6 * (n.dv + 2 * (o.dv + i.dv) + s.dv);
	        return r.x = r.x + l * a, r.v = r.v + u * a, r;
	      }
	      return function a(e, t, n) {
	        var o = {
	          x: -1,
	          v: 0,
	          tension: null,
	          friction: null
	        },
	            i = [0],
	            s = 0,
	            l = 1e-4,
	            u = .016,
	            c,
	            p,
	            f;
	        for (e = parseFloat(e) || 500, t = parseFloat(t) || 20, n = n || null, o.tension = e, o.friction = t, c = null !== n, c ? (s = a(e, t), p = s / n * u) : p = u; ; )
	          if (f = r(f || o, p), i.push(1 + f.x), s += 16, !(Math.abs(f.x) > l && Math.abs(f.v) > l))
	            break;
	        return c ? function(e) {
	          return i[e * (i.length - 1) | 0];
	        } : s;
	      };
	    }();
	    v.Easings = {
	      linear: function(e) {
	        return e;
	      },
	      swing: function(e) {
	        return .5 - Math.cos(e * Math.PI) / 2;
	      },
	      spring: function(e) {
	        return 1 - Math.cos(4.5 * e * Math.PI) * Math.exp(6 * -e);
	      }
	    }, $.each([["ease", [.25, .1, .25, 1]], ["ease-in", [.42, 0, 1, 1]], ["ease-out", [0, 0, .58, 1]], ["ease-in-out", [.42, 0, .58, 1]], ["easeInSine", [.47, 0, .745, .715]], ["easeOutSine", [.39, .575, .565, 1]], ["easeInOutSine", [.445, .05, .55, .95]], ["easeInQuad", [.55, .085, .68, .53]], ["easeOutQuad", [.25, .46, .45, .94]], ["easeInOutQuad", [.455, .03, .515, .955]], ["easeInCubic", [.55, .055, .675, .19]], ["easeOutCubic", [.215, .61, .355, 1]], ["easeInOutCubic", [.645, .045, .355, 1]], ["easeInQuart", [.895, .03, .685, .22]], ["easeOutQuart", [.165, .84, .44, 1]], ["easeInOutQuart", [.77, 0, .175, 1]], ["easeInQuint", [.755, .05, .855, .06]], ["easeOutQuint", [.23, 1, .32, 1]], ["easeInOutQuint", [.86, 0, .07, 1]], ["easeInExpo", [.95, .05, .795, .035]], ["easeOutExpo", [.19, 1, .22, 1]], ["easeInOutExpo", [1, 0, 0, 1]], ["easeInCirc", [.6, .04, .98, .335]], ["easeOutCirc", [.075, .82, .165, 1]], ["easeInOutCirc", [.785, .135, .15, .86]]], function(e, t) {
	      v.Easings[t[0]] = l.apply(null, t[1]);
	    });
	    var x = v.CSS = {
	      RegEx: {
	        isHex: /^#([A-f\d]{3}){1,2}$/i,
	        valueUnwrap: /^[A-z]+\((.*)\)$/i,
	        wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
	        valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi
	      },
	      Lists: {
	        colors: ["fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor"],
	        transformsBase: ["translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ"],
	        transforms3D: ["transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY"]
	      },
	      Hooks: {
	        templates: {
	          textShadow: ["Color X Y Blur", "black 0px 0px 0px"],
	          boxShadow: ["Color X Y Blur Spread", "black 0px 0px 0px 0px"],
	          clip: ["Top Right Bottom Left", "0px 0px 0px 0px"],
	          backgroundPosition: ["X Y", "0% 0%"],
	          transformOrigin: ["X Y Z", "50% 50% 0px"],
	          perspectiveOrigin: ["X Y", "50% 50%"]
	        },
	        registered: {},
	        register: function() {
	          for (var e = 0; e < x.Lists.colors.length; e++) {
	            var t = "color" === x.Lists.colors[e] ? "0 0 0 1" : "255 255 255 1";
	            x.Hooks.templates[x.Lists.colors[e]] = ["Red Green Blue Alpha", t];
	          }
	          var r,
	              a,
	              n;
	          if (f)
	            for (r in x.Hooks.templates) {
	              a = x.Hooks.templates[r], n = a[0].split(" ");
	              var o = a[1].match(x.RegEx.valueSplit);
	              "Color" === n[0] && (n.push(n.shift()), o.push(o.shift()), x.Hooks.templates[r] = [n.join(" "), o.join(" ")]);
	            }
	          for (r in x.Hooks.templates) {
	            a = x.Hooks.templates[r], n = a[0].split(" ");
	            for (var e in n) {
	              var i = r + n[e],
	                  s = e;
	              x.Hooks.registered[i] = [r, s];
	            }
	          }
	        },
	        getRoot: function(e) {
	          var t = x.Hooks.registered[e];
	          return t ? t[0] : e;
	        },
	        cleanRootPropertyValue: function(e, t) {
	          return x.RegEx.valueUnwrap.test(t) && (t = t.match(x.RegEx.valueUnwrap)[1]), x.Values.isCSSNullValue(t) && (t = x.Hooks.templates[e][1]), t;
	        },
	        extractValue: function(e, t) {
	          var r = x.Hooks.registered[e];
	          if (r) {
	            var a = r[0],
	                n = r[1];
	            return t = x.Hooks.cleanRootPropertyValue(a, t), t.toString().match(x.RegEx.valueSplit)[n];
	          }
	          return t;
	        },
	        injectValue: function(e, t, r) {
	          var a = x.Hooks.registered[e];
	          if (a) {
	            var n = a[0],
	                o = a[1],
	                i,
	                s;
	            return r = x.Hooks.cleanRootPropertyValue(n, r), i = r.toString().match(x.RegEx.valueSplit), i[o] = t, s = i.join(" ");
	          }
	          return r;
	        }
	      },
	      Normalizations: {
	        registered: {
	          clip: function(e, t, r) {
	            switch (e) {
	              case "name":
	                return "clip";
	              case "extract":
	                var a;
	                return x.RegEx.wrappedValueAlreadyExtracted.test(r) ? a = r : (a = r.toString().match(x.RegEx.valueUnwrap), a = a ? a[1].replace(/,(\s+)?/g, " ") : r), a;
	              case "inject":
	                return "rect(" + r + ")";
	            }
	          },
	          blur: function(e, t, r) {
	            switch (e) {
	              case "name":
	                return v.State.isFirefox ? "filter" : "-webkit-filter";
	              case "extract":
	                var a = parseFloat(r);
	                if (!a && 0 !== a) {
	                  var n = r.toString().match(/blur\(([0-9]+[A-z]+)\)/i);
	                  a = n ? n[1] : 0;
	                }
	                return a;
	              case "inject":
	                return parseFloat(r) ? "blur(" + r + ")" : "none";
	            }
	          },
	          opacity: function(e, t, r) {
	            if (8 >= f)
	              switch (e) {
	                case "name":
	                  return "filter";
	                case "extract":
	                  var a = r.toString().match(/alpha\(opacity=(.*)\)/i);
	                  return r = a ? a[1] / 100 : 1;
	                case "inject":
	                  return t.style.zoom = 1, parseFloat(r) >= 1 ? "" : "alpha(opacity=" + parseInt(100 * parseFloat(r), 10) + ")";
	              }
	            else
	              switch (e) {
	                case "name":
	                  return "opacity";
	                case "extract":
	                  return r;
	                case "inject":
	                  return r;
	              }
	          }
	        },
	        register: function() {
	          9 >= f || v.State.isGingerbread || (x.Lists.transformsBase = x.Lists.transformsBase.concat(x.Lists.transforms3D));
	          for (var e = 0; e < x.Lists.transformsBase.length; e++)
	            !function() {
	              var t = x.Lists.transformsBase[e];
	              x.Normalizations.registered[t] = function(e, r, n) {
	                switch (e) {
	                  case "name":
	                    return "transform";
	                  case "extract":
	                    return i(r) === a || i(r).transformCache[t] === a ? /^scale/i.test(t) ? 1 : 0 : i(r).transformCache[t].replace(/[()]/g, "");
	                  case "inject":
	                    var o = !1;
	                    switch (t.substr(0, t.length - 1)) {
	                      case "translate":
	                        o = !/(%|px|em|rem|vw|vh|\d)$/i.test(n);
	                        break;
	                      case "scal":
	                      case "scale":
	                        v.State.isAndroid && i(r).transformCache[t] === a && 1 > n && (n = 1), o = !/(\d)$/i.test(n);
	                        break;
	                      case "skew":
	                        o = !/(deg|\d)$/i.test(n);
	                        break;
	                      case "rotate":
	                        o = !/(deg|\d)$/i.test(n);
	                    }
	                    return o || (i(r).transformCache[t] = "(" + n + ")"), i(r).transformCache[t];
	                }
	              };
	            }();
	          for (var e = 0; e < x.Lists.colors.length; e++)
	            !function() {
	              var t = x.Lists.colors[e];
	              x.Normalizations.registered[t] = function(e, r, n) {
	                switch (e) {
	                  case "name":
	                    return t;
	                  case "extract":
	                    var o;
	                    if (x.RegEx.wrappedValueAlreadyExtracted.test(n))
	                      o = n;
	                    else {
	                      var i,
	                          s = {
	                            black: "rgb(0, 0, 0)",
	                            blue: "rgb(0, 0, 255)",
	                            gray: "rgb(128, 128, 128)",
	                            green: "rgb(0, 128, 0)",
	                            red: "rgb(255, 0, 0)",
	                            white: "rgb(255, 255, 255)"
	                          };
	                      /^[A-z]+$/i.test(n) ? i = s[n] !== a ? s[n] : s.black : x.RegEx.isHex.test(n) ? i = "rgb(" + x.Values.hexToRgb(n).join(" ") + ")" : /^rgba?\(/i.test(n) || (i = s.black), o = (i || n).toString().match(x.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ");
	                    }
	                    return 8 >= f || 3 !== o.split(" ").length || (o += " 1"), o;
	                  case "inject":
	                    return 8 >= f ? 4 === n.split(" ").length && (n = n.split(/\s+/).slice(0, 3).join(" ")) : 3 === n.split(" ").length && (n += " 1"), (8 >= f ? "rgb" : "rgba") + "(" + n.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")";
	                }
	              };
	            }();
	        }
	      },
	      Names: {
	        camelCase: function(e) {
	          return e.replace(/-(\w)/g, function(e, t) {
	            return t.toUpperCase();
	          });
	        },
	        SVGAttribute: function(e) {
	          var t = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";
	          return (f || v.State.isAndroid && !v.State.isChrome) && (t += "|transform"), new RegExp("^(" + t + ")$", "i").test(e);
	        },
	        prefixCheck: function(e) {
	          if (v.State.prefixMatches[e])
	            return [v.State.prefixMatches[e], !0];
	          for (var t = ["", "Webkit", "Moz", "ms", "O"],
	              r = 0,
	              a = t.length; a > r; r++) {
	            var n;
	            if (n = 0 === r ? e : t[r] + e.replace(/^\w/, function(e) {
	              return e.toUpperCase();
	            }), g.isString(v.State.prefixElement.style[n]))
	              return v.State.prefixMatches[e] = n, [n, !0];
	          }
	          return [e, !1];
	        }
	      },
	      Values: {
	        hexToRgb: function(e) {
	          var t = /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
	              r = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
	              a;
	          return e = e.replace(t, function(e, t, r, a) {
	            return t + t + r + r + a + a;
	          }), a = r.exec(e), a ? [parseInt(a[1], 16), parseInt(a[2], 16), parseInt(a[3], 16)] : [0, 0, 0];
	        },
	        isCSSNullValue: function(e) {
	          return 0 == e || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(e);
	        },
	        getUnitType: function(e) {
	          return /^(rotate|skew)/i.test(e) ? "deg" : /(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(e) ? "" : "px";
	        },
	        getDisplayType: function(e) {
	          var t = e && e.tagName.toString().toLowerCase();
	          return /^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(t) ? "inline" : /^(li)$/i.test(t) ? "list-item" : /^(tr)$/i.test(t) ? "table-row" : /^(table)$/i.test(t) ? "table" : /^(tbody)$/i.test(t) ? "table-row-group" : "block";
	        },
	        addClass: function(e, t) {
	          e.classList ? e.classList.add(t) : e.className += (e.className.length ? " " : "") + t;
	        },
	        removeClass: function(e, t) {
	          e.classList ? e.classList.remove(t) : e.className = e.className.toString().replace(new RegExp("(^|\\s)" + t.split(" ").join("|") + "(\\s|$)", "gi"), " ");
	        }
	      },
	      getPropertyValue: function(e, r, n, o) {
	        function s(e, r) {
	          function n() {
	            u && x.setPropertyValue(e, "display", "none");
	          }
	          var l = 0;
	          if (8 >= f)
	            l = $.css(e, r);
	          else {
	            var u = !1;
	            if (/^(width|height)$/.test(r) && 0 === x.getPropertyValue(e, "display") && (u = !0, x.setPropertyValue(e, "display", x.Values.getDisplayType(e))), !o) {
	              if ("height" === r && "border-box" !== x.getPropertyValue(e, "boxSizing").toString().toLowerCase()) {
	                var c = e.offsetHeight - (parseFloat(x.getPropertyValue(e, "borderTopWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "borderBottomWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingTop")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingBottom")) || 0);
	                return n(), c;
	              }
	              if ("width" === r && "border-box" !== x.getPropertyValue(e, "boxSizing").toString().toLowerCase()) {
	                var p = e.offsetWidth - (parseFloat(x.getPropertyValue(e, "borderLeftWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "borderRightWidth")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingLeft")) || 0) - (parseFloat(x.getPropertyValue(e, "paddingRight")) || 0);
	                return n(), p;
	              }
	            }
	            var d;
	            d = i(e) === a ? t.getComputedStyle(e, null) : i(e).computedStyle ? i(e).computedStyle : i(e).computedStyle = t.getComputedStyle(e, null), "borderColor" === r && (r = "borderTopColor"), l = 9 === f && "filter" === r ? d.getPropertyValue(r) : d[r], ("" === l || null === l) && (l = e.style[r]), n();
	          }
	          if ("auto" === l && /^(top|right|bottom|left)$/i.test(r)) {
	            var g = s(e, "position");
	            ("fixed" === g || "absolute" === g && /top|left/i.test(r)) && (l = $(e).position()[r] + "px");
	          }
	          return l;
	        }
	        var l;
	        if (x.Hooks.registered[r]) {
	          var u = r,
	              c = x.Hooks.getRoot(u);
	          n === a && (n = x.getPropertyValue(e, x.Names.prefixCheck(c)[0])), x.Normalizations.registered[c] && (n = x.Normalizations.registered[c]("extract", e, n)), l = x.Hooks.extractValue(u, n);
	        } else if (x.Normalizations.registered[r]) {
	          var p,
	              d;
	          p = x.Normalizations.registered[r]("name", e), "transform" !== p && (d = s(e, x.Names.prefixCheck(p)[0]), x.Values.isCSSNullValue(d) && x.Hooks.templates[r] && (d = x.Hooks.templates[r][1])), l = x.Normalizations.registered[r]("extract", e, d);
	        }
	        if (!/^[\d-]/.test(l))
	          if (i(e) && i(e).isSVG && x.Names.SVGAttribute(r))
	            if (/^(height|width)$/i.test(r))
	              try {
	                l = e.getBBox()[r];
	              } catch (g) {
	                l = 0;
	              }
	            else
	              l = e.getAttribute(r);
	          else
	            l = s(e, x.Names.prefixCheck(r)[0]);
	        return x.Values.isCSSNullValue(l) && (l = 0), v.debug >= 2 && console.log("Get " + r + ": " + l), l;
	      },
	      setPropertyValue: function(e, r, a, n, o) {
	        var s = r;
	        if ("scroll" === r)
	          o.container ? o.container["scroll" + o.direction] = a : "Left" === o.direction ? t.scrollTo(a, o.alternateValue) : t.scrollTo(o.alternateValue, a);
	        else if (x.Normalizations.registered[r] && "transform" === x.Normalizations.registered[r]("name", e))
	          x.Normalizations.registered[r]("inject", e, a), s = "transform", a = i(e).transformCache[r];
	        else {
	          if (x.Hooks.registered[r]) {
	            var l = r,
	                u = x.Hooks.getRoot(r);
	            n = n || x.getPropertyValue(e, u), a = x.Hooks.injectValue(l, a, n), r = u;
	          }
	          if (x.Normalizations.registered[r] && (a = x.Normalizations.registered[r]("inject", e, a), r = x.Normalizations.registered[r]("name", e)), s = x.Names.prefixCheck(r)[0], 8 >= f)
	            try {
	              e.style[s] = a;
	            } catch (c) {
	              v.debug && console.log("Browser does not support [" + a + "] for [" + s + "]");
	            }
	          else
	            i(e) && i(e).isSVG && x.Names.SVGAttribute(r) ? e.setAttribute(r, a) : e.style[s] = a;
	          v.debug >= 2 && console.log("Set " + r + " (" + s + "): " + a);
	        }
	        return [s, a];
	      },
	      flushTransformCache: function(e) {
	        function t(t) {
	          return parseFloat(x.getPropertyValue(e, t));
	        }
	        var r = "";
	        if ((f || v.State.isAndroid && !v.State.isChrome) && i(e).isSVG) {
	          var a = {
	            translate: [t("translateX"), t("translateY")],
	            skewX: [t("skewX")],
	            skewY: [t("skewY")],
	            scale: 1 !== t("scale") ? [t("scale"), t("scale")] : [t("scaleX"), t("scaleY")],
	            rotate: [t("rotateZ"), 0, 0]
	          };
	          $.each(i(e).transformCache, function(e) {
	            /^translate/i.test(e) ? e = "translate" : /^scale/i.test(e) ? e = "scale" : /^rotate/i.test(e) && (e = "rotate"), a[e] && (r += e + "(" + a[e].join(" ") + ") ", delete a[e]);
	          });
	        } else {
	          var n,
	              o;
	          $.each(i(e).transformCache, function(t) {
	            return n = i(e).transformCache[t], "transformPerspective" === t ? (o = n, !0) : (9 === f && "rotateZ" === t && (t = "rotate"), void(r += t + n + " "));
	          }), o && (r = "perspective" + o + " " + r);
	        }
	        x.setPropertyValue(e, "transform", r);
	      }
	    };
	    x.Hooks.register(), x.Normalizations.register(), v.hook = function(e, t, r) {
	      var n = a;
	      return e = o(e), $.each(e, function(e, o) {
	        if (i(o) === a && v.init(o), r === a)
	          n === a && (n = v.CSS.getPropertyValue(o, t));
	        else {
	          var s = v.CSS.setPropertyValue(o, t, r);
	          "transform" === s[0] && v.CSS.flushTransformCache(o), n = s;
	        }
	      }), n;
	    };
	    var S = function() {
	      function e() {
	        return l ? T.promise || null : f;
	      }
	      function n() {
	        function e(e) {
	          function p(e, t) {
	            var r = a,
	                i = a,
	                s = a;
	            return g.isArray(e) ? (r = e[0], !g.isArray(e[1]) && /^[\d-]/.test(e[1]) || g.isFunction(e[1]) || x.RegEx.isHex.test(e[1]) ? s = e[1] : (g.isString(e[1]) && !x.RegEx.isHex.test(e[1]) || g.isArray(e[1])) && (i = t ? e[1] : u(e[1], o.duration), e[2] !== a && (s = e[2]))) : r = e, t || (i = i || o.easing), g.isFunction(r) && (r = r.call(n, w, P)), g.isFunction(s) && (s = s.call(n, w, P)), [r || 0, i, s];
	          }
	          function f(e, t) {
	            var r,
	                a;
	            return a = (t || "0").toString().toLowerCase().replace(/[%A-z]+$/, function(e) {
	              return r = e, "";
	            }), r || (r = x.Values.getUnitType(e)), [a, r];
	          }
	          function d() {
	            var e = {
	              myParent: n.parentNode || r.body,
	              position: x.getPropertyValue(n, "position"),
	              fontSize: x.getPropertyValue(n, "fontSize")
	            },
	                a = e.position === N.lastPosition && e.myParent === N.lastParent,
	                o = e.fontSize === N.lastFontSize;
	            N.lastParent = e.myParent, N.lastPosition = e.position, N.lastFontSize = e.fontSize;
	            var s = 100,
	                l = {};
	            if (o && a)
	              l.emToPx = N.lastEmToPx, l.percentToPxWidth = N.lastPercentToPxWidth, l.percentToPxHeight = N.lastPercentToPxHeight;
	            else {
	              var u = i(n).isSVG ? r.createElementNS("http://www.w3.org/2000/svg", "rect") : r.createElement("div");
	              v.init(u), e.myParent.appendChild(u), $.each(["overflow", "overflowX", "overflowY"], function(e, t) {
	                v.CSS.setPropertyValue(u, t, "hidden");
	              }), v.CSS.setPropertyValue(u, "position", e.position), v.CSS.setPropertyValue(u, "fontSize", e.fontSize), v.CSS.setPropertyValue(u, "boxSizing", "content-box"), $.each(["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height"], function(e, t) {
	                v.CSS.setPropertyValue(u, t, s + "%");
	              }), v.CSS.setPropertyValue(u, "paddingLeft", s + "em"), l.percentToPxWidth = N.lastPercentToPxWidth = (parseFloat(x.getPropertyValue(u, "width", null, !0)) || 1) / s, l.percentToPxHeight = N.lastPercentToPxHeight = (parseFloat(x.getPropertyValue(u, "height", null, !0)) || 1) / s, l.emToPx = N.lastEmToPx = (parseFloat(x.getPropertyValue(u, "paddingLeft")) || 1) / s, e.myParent.removeChild(u);
	            }
	            return null === N.remToPx && (N.remToPx = parseFloat(x.getPropertyValue(r.body, "fontSize")) || 16), null === N.vwToPx && (N.vwToPx = parseFloat(t.innerWidth) / 100, N.vhToPx = parseFloat(t.innerHeight) / 100), l.remToPx = N.remToPx, l.vwToPx = N.vwToPx, l.vhToPx = N.vhToPx, v.debug >= 1 && console.log("Unit ratios: " + JSON.stringify(l), n), l;
	          }
	          if (o.begin && 0 === w)
	            try {
	              o.begin.call(m, m);
	            } catch (y) {
	              setTimeout(function() {
	                throw y;
	              }, 1);
	            }
	          if ("scroll" === k) {
	            var S = /^x$/i.test(o.axis) ? "Left" : "Top",
	                V = parseFloat(o.offset) || 0,
	                C,
	                A,
	                F;
	            o.container ? g.isWrapped(o.container) || g.isNode(o.container) ? (o.container = o.container[0] || o.container, C = o.container["scroll" + S], F = C + $(n).position()[S.toLowerCase()] + V) : o.container = null : (C = v.State.scrollAnchor[v.State["scrollProperty" + S]], A = v.State.scrollAnchor[v.State["scrollProperty" + ("Left" === S ? "Top" : "Left")]], F = $(n).offset()[S.toLowerCase()] + V), s = {
	              scroll: {
	                rootPropertyValue: !1,
	                startValue: C,
	                currentValue: C,
	                endValue: F,
	                unitType: "",
	                easing: o.easing,
	                scrollData: {
	                  container: o.container,
	                  direction: S,
	                  alternateValue: A
	                }
	              },
	              element: n
	            }, v.debug && console.log("tweensContainer (scroll): ", s.scroll, n);
	          } else if ("reverse" === k) {
	            if (!i(n).tweensContainer)
	              return void $.dequeue(n, o.queue);
	            "none" === i(n).opts.display && (i(n).opts.display = "auto"), "hidden" === i(n).opts.visibility && (i(n).opts.visibility = "visible"), i(n).opts.loop = !1, i(n).opts.begin = null, i(n).opts.complete = null, b.easing || delete o.easing, b.duration || delete o.duration, o = $.extend({}, i(n).opts, o);
	            var E = $.extend(!0, {}, i(n).tweensContainer);
	            for (var j in E)
	              if ("element" !== j) {
	                var H = E[j].startValue;
	                E[j].startValue = E[j].currentValue = E[j].endValue, E[j].endValue = H, g.isEmptyObject(b) || (E[j].easing = o.easing), v.debug && console.log("reverse tweensContainer (" + j + "): " + JSON.stringify(E[j]), n);
	              }
	            s = E;
	          } else if ("start" === k) {
	            var E;
	            i(n).tweensContainer && i(n).isAnimating === !0 && (E = i(n).tweensContainer), $.each(h, function(e, t) {
	              if (RegExp("^" + x.Lists.colors.join("$|^") + "$").test(e)) {
	                var r = p(t, !0),
	                    n = r[0],
	                    o = r[1],
	                    i = r[2];
	                if (x.RegEx.isHex.test(n)) {
	                  for (var s = ["Red", "Green", "Blue"],
	                      l = x.Values.hexToRgb(n),
	                      u = i ? x.Values.hexToRgb(i) : a,
	                      c = 0; c < s.length; c++) {
	                    var f = [l[c]];
	                    o && f.push(o), u !== a && f.push(u[c]), h[e + s[c]] = f;
	                  }
	                  delete h[e];
	                }
	              }
	            });
	            for (var R in h) {
	              var O = p(h[R]),
	                  z = O[0],
	                  q = O[1],
	                  M = O[2];
	              R = x.Names.camelCase(R);
	              var I = x.Hooks.getRoot(R),
	                  B = !1;
	              if (i(n).isSVG || "tween" === I || x.Names.prefixCheck(I)[1] !== !1 || x.Normalizations.registered[I] !== a) {
	                (o.display !== a && null !== o.display && "none" !== o.display || o.visibility !== a && "hidden" !== o.visibility) && /opacity|filter/.test(R) && !M && 0 !== z && (M = 0), o._cacheValues && E && E[R] ? (M === a && (M = E[R].endValue + E[R].unitType), B = i(n).rootPropertyValueCache[I]) : x.Hooks.registered[R] ? M === a ? (B = x.getPropertyValue(n, I), M = x.getPropertyValue(n, R, B)) : B = x.Hooks.templates[I][1] : M === a && (M = x.getPropertyValue(n, R));
	                var W,
	                    G,
	                    D,
	                    X = !1;
	                if (W = f(R, M), M = W[0], D = W[1], W = f(R, z), z = W[0].replace(/^([+-\/*])=/, function(e, t) {
	                  return X = t, "";
	                }), G = W[1], M = parseFloat(M) || 0, z = parseFloat(z) || 0, "%" === G && (/^(fontSize|lineHeight)$/.test(R) ? (z /= 100, G = "em") : /^scale/.test(R) ? (z /= 100, G = "") : /(Red|Green|Blue)$/i.test(R) && (z = z / 100 * 255, G = "")), /[\/*]/.test(X))
	                  G = D;
	                else if (D !== G && 0 !== M)
	                  if (0 === z)
	                    G = D;
	                  else {
	                    l = l || d();
	                    var Y = /margin|padding|left|right|width|text|word|letter/i.test(R) || /X$/.test(R) || "x" === R ? "x" : "y";
	                    switch (D) {
	                      case "%":
	                        M *= "x" === Y ? l.percentToPxWidth : l.percentToPxHeight;
	                        break;
	                      case "px":
	                        break;
	                      default:
	                        M *= l[D + "ToPx"];
	                    }
	                    switch (G) {
	                      case "%":
	                        M *= 1 / ("x" === Y ? l.percentToPxWidth : l.percentToPxHeight);
	                        break;
	                      case "px":
	                        break;
	                      default:
	                        M *= 1 / l[G + "ToPx"];
	                    }
	                  }
	                switch (X) {
	                  case "+":
	                    z = M + z;
	                    break;
	                  case "-":
	                    z = M - z;
	                    break;
	                  case "*":
	                    z = M * z;
	                    break;
	                  case "/":
	                    z = M / z;
	                }
	                s[R] = {
	                  rootPropertyValue: B,
	                  startValue: M,
	                  currentValue: M,
	                  endValue: z,
	                  unitType: G,
	                  easing: q
	                }, v.debug && console.log("tweensContainer (" + R + "): " + JSON.stringify(s[R]), n);
	              } else
	                v.debug && console.log("Skipping [" + I + "] due to a lack of browser support.");
	            }
	            s.element = n;
	          }
	          s.element && (x.Values.addClass(n, "velocity-animating"), L.push(s), "" === o.queue && (i(n).tweensContainer = s, i(n).opts = o), i(n).isAnimating = !0, w === P - 1 ? (v.State.calls.push([L, m, o, null, T.resolver]), v.State.isTicking === !1 && (v.State.isTicking = !0, c())) : w++);
	        }
	        var n = this,
	            o = $.extend({}, v.defaults, b),
	            s = {},
	            l;
	        switch (i(n) === a && v.init(n), parseFloat(o.delay) && o.queue !== !1 && $.queue(n, o.queue, function(e) {
	          v.velocityQueueEntryFlag = !0, i(n).delayTimer = {
	            setTimeout: setTimeout(e, parseFloat(o.delay)),
	            next: e
	          };
	        }), o.duration.toString().toLowerCase()) {
	          case "fast":
	            o.duration = 200;
	            break;
	          case "normal":
	            o.duration = y;
	            break;
	          case "slow":
	            o.duration = 600;
	            break;
	          default:
	            o.duration = parseFloat(o.duration) || 1;
	        }
	        v.mock !== !1 && (v.mock === !0 ? o.duration = o.delay = 1 : (o.duration *= parseFloat(v.mock) || 1, o.delay *= parseFloat(v.mock) || 1)), o.easing = u(o.easing, o.duration), o.begin && !g.isFunction(o.begin) && (o.begin = null), o.progress && !g.isFunction(o.progress) && (o.progress = null), o.complete && !g.isFunction(o.complete) && (o.complete = null), o.display !== a && null !== o.display && (o.display = o.display.toString().toLowerCase(), "auto" === o.display && (o.display = v.CSS.Values.getDisplayType(n))), o.visibility !== a && null !== o.visibility && (o.visibility = o.visibility.toString().toLowerCase()), o.mobileHA = o.mobileHA && v.State.isMobile && !v.State.isGingerbread, o.queue === !1 ? o.delay ? setTimeout(e, o.delay) : e() : $.queue(n, o.queue, function(t, r) {
	          return r === !0 ? (T.promise && T.resolver(m), !0) : (v.velocityQueueEntryFlag = !0, void e(t));
	        }), "" !== o.queue && "fx" !== o.queue || "inprogress" === $.queue(n)[0] || $.dequeue(n);
	      }
	      var s = arguments[0] && (arguments[0].p || $.isPlainObject(arguments[0].properties) && !arguments[0].properties.names || g.isString(arguments[0].properties)),
	          l,
	          f,
	          d,
	          m,
	          h,
	          b;
	      if (g.isWrapped(this) ? (l = !1, d = 0, m = this, f = this) : (l = !0, d = 1, m = s ? arguments[0].elements || arguments[0].e : arguments[0]), m = o(m)) {
	        s ? (h = arguments[0].properties || arguments[0].p, b = arguments[0].options || arguments[0].o) : (h = arguments[d], b = arguments[d + 1]);
	        var P = m.length,
	            w = 0;
	        if (!/^(stop|finish)$/i.test(h) && !$.isPlainObject(b)) {
	          var V = d + 1;
	          b = {};
	          for (var C = V; C < arguments.length; C++)
	            g.isArray(arguments[C]) || !/^(fast|normal|slow)$/i.test(arguments[C]) && !/^\d/.test(arguments[C]) ? g.isString(arguments[C]) || g.isArray(arguments[C]) ? b.easing = arguments[C] : g.isFunction(arguments[C]) && (b.complete = arguments[C]) : b.duration = arguments[C];
	        }
	        var T = {
	          promise: null,
	          resolver: null,
	          rejecter: null
	        };
	        l && v.Promise && (T.promise = new v.Promise(function(e, t) {
	          T.resolver = e, T.rejecter = t;
	        }));
	        var k;
	        switch (h) {
	          case "scroll":
	            k = "scroll";
	            break;
	          case "reverse":
	            k = "reverse";
	            break;
	          case "finish":
	          case "stop":
	            $.each(m, function(e, t) {
	              i(t) && i(t).delayTimer && (clearTimeout(i(t).delayTimer.setTimeout), i(t).delayTimer.next && i(t).delayTimer.next(), delete i(t).delayTimer);
	            });
	            var A = [];
	            return $.each(v.State.calls, function(e, t) {
	              t && $.each(t[1], function(r, n) {
	                var o = b === a ? "" : b;
	                return o === !0 || t[2].queue === o || b === a && t[2].queue === !1 ? void $.each(m, function(r, a) {
	                  a === n && ((b === !0 || g.isString(b)) && ($.each($.queue(a, g.isString(b) ? b : ""), function(e, t) {
	                    g.isFunction(t) && t(null, !0);
	                  }), $.queue(a, g.isString(b) ? b : "", [])), "stop" === h ? (i(a) && i(a).tweensContainer && o !== !1 && $.each(i(a).tweensContainer, function(e, t) {
	                    t.endValue = t.currentValue;
	                  }), A.push(e)) : "finish" === h && (t[2].duration = 1));
	                }) : !0;
	              });
	            }), "stop" === h && ($.each(A, function(e, t) {
	              p(t, !0);
	            }), T.promise && T.resolver(m)), e();
	          default:
	            if (!$.isPlainObject(h) || g.isEmptyObject(h)) {
	              if (g.isString(h) && v.Redirects[h]) {
	                var F = $.extend({}, b),
	                    E = F.duration,
	                    j = F.delay || 0;
	                return F.backwards === !0 && (m = $.extend(!0, [], m).reverse()), $.each(m, function(e, t) {
	                  parseFloat(F.stagger) ? F.delay = j + parseFloat(F.stagger) * e : g.isFunction(F.stagger) && (F.delay = j + F.stagger.call(t, e, P)), F.drag && (F.duration = parseFloat(E) || (/^(callout|transition)/.test(h) ? 1e3 : y), F.duration = Math.max(F.duration * (F.backwards ? 1 - e / P : (e + 1) / P), .75 * F.duration, 200)), v.Redirects[h].call(t, t, F || {}, e, P, m, T.promise ? T : a);
	                }), e();
	              }
	              var H = "Velocity: First argument (" + h + ") was not a property map, a known action, or a registered redirect. Aborting.";
	              return T.promise ? T.rejecter(new Error(H)) : console.log(H), e();
	            }
	            k = "start";
	        }
	        var N = {
	          lastParent: null,
	          lastPosition: null,
	          lastFontSize: null,
	          lastPercentToPxWidth: null,
	          lastPercentToPxHeight: null,
	          lastEmToPx: null,
	          remToPx: null,
	          vwToPx: null,
	          vhToPx: null
	        },
	            L = [];
	        $.each(m, function(e, t) {
	          g.isNode(t) && n.call(t);
	        });
	        var F = $.extend({}, v.defaults, b),
	            R;
	        if (F.loop = parseInt(F.loop), R = 2 * F.loop - 1, F.loop)
	          for (var O = 0; R > O; O++) {
	            var z = {
	              delay: F.delay,
	              progress: F.progress
	            };
	            O === R - 1 && (z.display = F.display, z.visibility = F.visibility, z.complete = F.complete), S(m, "reverse", z);
	          }
	        return e();
	      }
	    };
	    v = $.extend(S, v), v.animate = S;
	    var P = t.requestAnimationFrame || d;
	    return v.State.isMobile || r.hidden === a || r.addEventListener("visibilitychange", function() {
	      r.hidden ? (P = function(e) {
	        return setTimeout(function() {
	          e(!0);
	        }, 16);
	      }, c()) : P = t.requestAnimationFrame || d;
	    }), e.Velocity = v, e !== t && (e.fn.velocity = S, e.fn.velocity.defaults = v.defaults), $.each(["Down", "Up"], function(e, t) {
	      v.Redirects["slide" + t] = function(e, r, n, o, i, s) {
	        var l = $.extend({}, r),
	            u = l.begin,
	            c = l.complete,
	            p = {
	              height: "",
	              marginTop: "",
	              marginBottom: "",
	              paddingTop: "",
	              paddingBottom: ""
	            },
	            f = {};
	        l.display === a && (l.display = "Down" === t ? "inline" === v.CSS.Values.getDisplayType(e) ? "inline-block" : "block" : "none"), l.begin = function() {
	          u && u.call(i, i);
	          for (var r in p) {
	            f[r] = e.style[r];
	            var a = v.CSS.getPropertyValue(e, r);
	            p[r] = "Down" === t ? [a, 0] : [0, a];
	          }
	          f.overflow = e.style.overflow, e.style.overflow = "hidden";
	        }, l.complete = function() {
	          for (var t in f)
	            e.style[t] = f[t];
	          c && c.call(i, i), s && s.resolver(i);
	        }, v(e, p, l);
	      };
	    }), $.each(["In", "Out"], function(e, t) {
	      v.Redirects["fade" + t] = function(e, r, n, o, i, s) {
	        var l = $.extend({}, r),
	            u = {opacity: "In" === t ? 1 : 0},
	            c = l.complete;
	        l.complete = n !== o - 1 ? l.begin = null : function() {
	          c && c.call(i, i), s && s.resolver(i);
	        }, l.display === a && (l.display = "In" === t ? "auto" : "none"), v(this, u, l);
	      };
	    }), v;
	  }(window.jQuery || window.Zepto || window, window, document);
	});
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {(function() {
	  var Color,
	      K,
	      PITHIRD,
	      TWOPI,
	      X,
	      Y,
	      Z,
	      bezier,
	      brewer,
	      chroma,
	      clip_rgb,
	      colors,
	      cos,
	      css2rgb,
	      hex2rgb,
	      hsi2rgb,
	      hsl2rgb,
	      hsv2rgb,
	      lab2lch,
	      lab2rgb,
	      lab_xyz,
	      lch2lab,
	      lch2rgb,
	      limit,
	      luminance,
	      luminance_x,
	      rgb2hex,
	      rgb2hsi,
	      rgb2hsl,
	      rgb2hsv,
	      rgb2lab,
	      rgb2lch,
	      rgb_xyz,
	      root,
	      type,
	      unpack,
	      xyz_lab,
	      xyz_rgb,
	      _ref;
	  chroma = function(x, y, z, m) {
	    return new Color(x, y, z, m);
	  };
	  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
	    module.exports = chroma;
	  }
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return chroma;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    root = typeof exports !== "undefined" && exports !== null ? exports : this;
	    root.chroma = chroma;
	  }
	  chroma.color = function(x, y, z, m) {
	    return new Color(x, y, z, m);
	  };
	  chroma.hsl = function(h, s, l, a) {
	    return new Color(h, s, l, a, 'hsl');
	  };
	  chroma.hsv = function(h, s, v, a) {
	    return new Color(h, s, v, a, 'hsv');
	  };
	  chroma.rgb = function(r, g, b, a) {
	    return new Color(r, g, b, a, 'rgb');
	  };
	  chroma.hex = function(x) {
	    return new Color(x);
	  };
	  chroma.css = function(x) {
	    return new Color(x);
	  };
	  chroma.lab = function(l, a, b) {
	    return new Color(l, a, b, 'lab');
	  };
	  chroma.lch = function(l, c, h) {
	    return new Color(l, c, h, 'lch');
	  };
	  chroma.hsi = function(h, s, i) {
	    return new Color(h, s, i, 'hsi');
	  };
	  chroma.gl = function(r, g, b, a) {
	    return new Color(r * 255, g * 255, b * 255, a, 'gl');
	  };
	  chroma.interpolate = function(a, b, f, m) {
	    if ((a == null) || (b == null)) {
	      return '#000';
	    }
	    if (type(a) === 'string') {
	      a = new Color(a);
	    }
	    if (type(b) === 'string') {
	      b = new Color(b);
	    }
	    return a.interpolate(f, b, m);
	  };
	  chroma.mix = chroma.interpolate;
	  chroma.contrast = function(a, b) {
	    var l1,
	        l2;
	    if (type(a) === 'string') {
	      a = new Color(a);
	    }
	    if (type(b) === 'string') {
	      b = new Color(b);
	    }
	    l1 = a.luminance();
	    l2 = b.luminance();
	    if (l1 > l2) {
	      return (l1 + 0.05) / (l2 + 0.05);
	    } else {
	      return (l2 + 0.05) / (l1 + 0.05);
	    }
	  };
	  chroma.luminance = function(color) {
	    return chroma(color).luminance();
	  };
	  chroma._Color = Color;
	  Color = (function() {
	    function Color() {
	      var a,
	          arg,
	          args,
	          m,
	          me,
	          me_rgb,
	          x,
	          y,
	          z,
	          _i,
	          _len,
	          _ref,
	          _ref1,
	          _ref2,
	          _ref3;
	      me = this;
	      args = [];
	      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
	        arg = arguments[_i];
	        if (arg != null) {
	          args.push(arg);
	        }
	      }
	      if (args.length === 0) {
	        _ref = [255, 0, 255, 1, 'rgb'], x = _ref[0], y = _ref[1], z = _ref[2], a = _ref[3], m = _ref[4];
	      } else if (type(args[0]) === "array") {
	        if (args[0].length === 3) {
	          _ref1 = args[0], x = _ref1[0], y = _ref1[1], z = _ref1[2];
	          a = 1;
	        } else if (args[0].length === 4) {
	          _ref2 = args[0], x = _ref2[0], y = _ref2[1], z = _ref2[2], a = _ref2[3];
	        } else {
	          throw 'unknown input argument';
	        }
	        m = args[1];
	      } else if (type(args[0]) === "string") {
	        x = args[0];
	        m = 'hex';
	      } else if (type(args[0]) === "object") {
	        _ref3 = args[0]._rgb, x = _ref3[0], y = _ref3[1], z = _ref3[2], a = _ref3[3];
	        m = 'rgb';
	      } else if (args.length >= 3) {
	        x = args[0];
	        y = args[1];
	        z = args[2];
	      }
	      if (args.length === 3) {
	        m = 'rgb';
	        a = 1;
	      } else if (args.length === 4) {
	        if (type(args[3]) === "string") {
	          m = args[3];
	          a = 1;
	        } else if (type(args[3]) === "number") {
	          m = 'rgb';
	          a = args[3];
	        }
	      } else if (args.length === 5) {
	        a = args[3];
	        m = args[4];
	      }
	      if (a == null) {
	        a = 1;
	      }
	      if (m === 'rgb') {
	        me._rgb = [x, y, z, a];
	      } else if (m === 'gl') {
	        me._rgb = [x * 255, y * 255, z * 255, a];
	      } else if (m === 'hsl') {
	        me._rgb = hsl2rgb(x, y, z);
	        me._rgb[3] = a;
	      } else if (m === 'hsv') {
	        me._rgb = hsv2rgb(x, y, z);
	        me._rgb[3] = a;
	      } else if (m === 'hex') {
	        me._rgb = hex2rgb(x);
	      } else if (m === 'lab') {
	        me._rgb = lab2rgb(x, y, z);
	        me._rgb[3] = a;
	      } else if (m === 'lch') {
	        me._rgb = lch2rgb(x, y, z);
	        me._rgb[3] = a;
	      } else if (m === 'hsi') {
	        me._rgb = hsi2rgb(x, y, z);
	        me._rgb[3] = a;
	      }
	      me_rgb = clip_rgb(me._rgb);
	    }
	    Color.prototype.rgb = function() {
	      return this._rgb.slice(0, 3);
	    };
	    Color.prototype.rgba = function() {
	      return this._rgb;
	    };
	    Color.prototype.hex = function() {
	      return rgb2hex(this._rgb);
	    };
	    Color.prototype.toString = function() {
	      return this.name();
	    };
	    Color.prototype.hsl = function() {
	      return rgb2hsl(this._rgb);
	    };
	    Color.prototype.hsv = function() {
	      return rgb2hsv(this._rgb);
	    };
	    Color.prototype.lab = function() {
	      return rgb2lab(this._rgb);
	    };
	    Color.prototype.lch = function() {
	      return rgb2lch(this._rgb);
	    };
	    Color.prototype.hsi = function() {
	      return rgb2hsi(this._rgb);
	    };
	    Color.prototype.gl = function() {
	      return [this._rgb[0] / 255, this._rgb[1] / 255, this._rgb[2] / 255, this._rgb[3]];
	    };
	    Color.prototype.luminance = function() {
	      return luminance(this._rgb);
	    };
	    Color.prototype.name = function() {
	      var h,
	          k;
	      h = this.hex();
	      for (k in chroma.colors) {
	        if (h === chroma.colors[k]) {
	          return k;
	        }
	      }
	      return h;
	    };
	    Color.prototype.alpha = function(alpha) {
	      if (arguments.length) {
	        this._rgb[3] = alpha;
	        return this;
	      }
	      return this._rgb[3];
	    };
	    Color.prototype.css = function(mode) {
	      var hsl,
	          me,
	          rgb,
	          rnd;
	      if (mode == null) {
	        mode = 'rgb';
	      }
	      me = this;
	      rgb = me._rgb;
	      if (mode.length === 3 && rgb[3] < 1) {
	        mode += 'a';
	      }
	      if (mode === 'rgb') {
	        return mode + '(' + rgb.slice(0, 3).join(',') + ')';
	      } else if (mode === 'rgba') {
	        return mode + '(' + rgb.join(',') + ')';
	      } else if (mode === 'hsl' || mode === 'hsla') {
	        hsl = me.hsl();
	        rnd = function(a) {
	          return Math.round(a * 100) / 100;
	        };
	        hsl[0] = rnd(hsl[0]);
	        hsl[1] = rnd(hsl[1] * 100) + '%';
	        hsl[2] = rnd(hsl[2] * 100) + '%';
	        if (mode.length === 4) {
	          hsl[3] = rgb[3];
	        }
	        return mode + '(' + hsl.join(',') + ')';
	      }
	    };
	    Color.prototype.interpolate = function(f, col, m) {
	      var dh,
	          hue,
	          hue0,
	          hue1,
	          lbv,
	          lbv0,
	          lbv1,
	          me,
	          res,
	          sat,
	          sat0,
	          sat1,
	          xyz0,
	          xyz1;
	      me = this;
	      if (m == null) {
	        m = 'rgb';
	      }
	      if (type(col) === "string") {
	        col = new Color(col);
	      }
	      if (m === 'hsl' || m === 'hsv' || m === 'lch' || m === 'hsi') {
	        if (m === 'hsl') {
	          xyz0 = me.hsl();
	          xyz1 = col.hsl();
	        } else if (m === 'hsv') {
	          xyz0 = me.hsv();
	          xyz1 = col.hsv();
	        } else if (m === 'hsi') {
	          xyz0 = me.hsi();
	          xyz1 = col.hsi();
	        } else if (m === 'lch') {
	          xyz0 = me.lch();
	          xyz1 = col.lch();
	        }
	        if (m.substr(0, 1) === 'h') {
	          hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
	          hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
	        } else {
	          lbv0 = xyz0[0], sat0 = xyz0[1], hue0 = xyz0[2];
	          lbv1 = xyz1[0], sat1 = xyz1[1], hue1 = xyz1[2];
	        }
	        if (!isNaN(hue0) && !isNaN(hue1)) {
	          if (hue1 > hue0 && hue1 - hue0 > 180) {
	            dh = hue1 - (hue0 + 360);
	          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
	            dh = hue1 + 360 - hue0;
	          } else {
	            dh = hue1 - hue0;
	          }
	          hue = hue0 + f * dh;
	        } else if (!isNaN(hue0)) {
	          hue = hue0;
	          if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
	            sat = sat0;
	          }
	        } else if (!isNaN(hue1)) {
	          hue = hue1;
	          if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
	            sat = sat1;
	          }
	        } else {
	          hue = Number.NaN;
	        }
	        if (sat == null) {
	          sat = sat0 + f * (sat1 - sat0);
	        }
	        lbv = lbv0 + f * (lbv1 - lbv0);
	        if (m.substr(0, 1) === 'h') {
	          res = new Color(hue, sat, lbv, m);
	        } else {
	          res = new Color(lbv, sat, hue, m);
	        }
	      } else if (m === 'rgb') {
	        xyz0 = me._rgb;
	        xyz1 = col._rgb;
	        res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
	      } else if (m === 'lab') {
	        xyz0 = me.lab();
	        xyz1 = col.lab();
	        res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
	      } else {
	        throw "color mode " + m + " is not supported";
	      }
	      res.alpha(me.alpha() + f * (col.alpha() - me.alpha()));
	      return res;
	    };
	    Color.prototype.premultiply = function() {
	      var a,
	          rgb;
	      rgb = this.rgb();
	      a = this.alpha();
	      return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
	    };
	    Color.prototype.darken = function(amount) {
	      var lch,
	          me;
	      if (amount == null) {
	        amount = 20;
	      }
	      me = this;
	      lch = me.lch();
	      lch[0] -= amount;
	      return chroma.lch(lch).alpha(me.alpha());
	    };
	    Color.prototype.darker = function(amount) {
	      return this.darken(amount);
	    };
	    Color.prototype.brighten = function(amount) {
	      if (amount == null) {
	        amount = 20;
	      }
	      return this.darken(-amount);
	    };
	    Color.prototype.brighter = function(amount) {
	      return this.brighten(amount);
	    };
	    Color.prototype.saturate = function(amount) {
	      var lch,
	          me;
	      if (amount == null) {
	        amount = 20;
	      }
	      me = this;
	      lch = me.lch();
	      lch[1] += amount;
	      return chroma.lch(lch).alpha(me.alpha());
	    };
	    Color.prototype.desaturate = function(amount) {
	      if (amount == null) {
	        amount = 20;
	      }
	      return this.saturate(-amount);
	    };
	    return Color;
	  })();
	  clip_rgb = function(rgb) {
	    var i;
	    for (i in rgb) {
	      if (i < 3) {
	        if (rgb[i] < 0) {
	          rgb[i] = 0;
	        }
	        if (rgb[i] > 255) {
	          rgb[i] = 255;
	        }
	      } else if (i === 3) {
	        if (rgb[i] < 0) {
	          rgb[i] = 0;
	        }
	        if (rgb[i] > 1) {
	          rgb[i] = 1;
	        }
	      }
	    }
	    return rgb;
	  };
	  css2rgb = function(css) {
	    var hsl,
	        i,
	        m,
	        rgb,
	        _i,
	        _j,
	        _k,
	        _l;
	    css = css.toLowerCase();
	    if ((chroma.colors != null) && chroma.colors[css]) {
	      return hex2rgb(chroma.colors[css]);
	    }
	    if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
	      rgb = m.slice(1, 4);
	      for (i = _i = 0; _i <= 2; i = ++_i) {
	        rgb[i] = +rgb[i];
	      }
	      rgb[3] = 1;
	    } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
	      rgb = m.slice(1, 5);
	      for (i = _j = 0; _j <= 3; i = ++_j) {
	        rgb[i] = +rgb[i];
	      }
	    } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
	      rgb = m.slice(1, 4);
	      for (i = _k = 0; _k <= 2; i = ++_k) {
	        rgb[i] = Math.round(rgb[i] * 2.55);
	      }
	      rgb[3] = 1;
	    } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
	      rgb = m.slice(1, 5);
	      for (i = _l = 0; _l <= 2; i = ++_l) {
	        rgb[i] = Math.round(rgb[i] * 2.55);
	      }
	      rgb[3] = +rgb[3];
	    } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
	      hsl = m.slice(1, 4);
	      hsl[1] *= 0.01;
	      hsl[2] *= 0.01;
	      rgb = hsl2rgb(hsl);
	      rgb[3] = 1;
	    } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
	      hsl = m.slice(1, 4);
	      hsl[1] *= 0.01;
	      hsl[2] *= 0.01;
	      rgb = hsl2rgb(hsl);
	      rgb[3] = +m[4];
	    }
	    return rgb;
	  };
	  hex2rgb = function(hex) {
	    var a,
	        b,
	        g,
	        r,
	        rgb,
	        u;
	    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
	      if (hex.length === 4 || hex.length === 7) {
	        hex = hex.substr(1);
	      }
	      if (hex.length === 3) {
	        hex = hex.split("");
	        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	      }
	      u = parseInt(hex, 16);
	      r = u >> 16;
	      g = u >> 8 & 0xFF;
	      b = u & 0xFF;
	      return [r, g, b, 1];
	    }
	    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
	      if (hex.length === 9) {
	        hex = hex.substr(1);
	      }
	      u = parseInt(hex, 16);
	      r = u >> 24 & 0xFF;
	      g = u >> 16 & 0xFF;
	      b = u >> 8 & 0xFF;
	      a = u & 0xFF;
	      return [r, g, b, a];
	    }
	    if (rgb = css2rgb(hex)) {
	      return rgb;
	    }
	    throw "unknown color: " + hex;
	  };
	  hsi2rgb = function(h, s, i) {
	    var b,
	        g,
	        r,
	        _ref;
	    _ref = unpack(arguments), h = _ref[0], s = _ref[1], i = _ref[2];
	    h /= 360;
	    if (h < 1 / 3) {
	      b = (1 - s) / 3;
	      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
	      g = 1 - (b + r);
	    } else if (h < 2 / 3) {
	      h -= 1 / 3;
	      r = (1 - s) / 3;
	      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
	      b = 1 - (r + g);
	    } else {
	      h -= 2 / 3;
	      g = (1 - s) / 3;
	      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
	      r = 1 - (g + b);
	    }
	    r = limit(i * r * 3);
	    g = limit(i * g * 3);
	    b = limit(i * b * 3);
	    return [r * 255, g * 255, b * 255];
	  };
	  hsl2rgb = function() {
	    var b,
	        c,
	        g,
	        h,
	        i,
	        l,
	        r,
	        s,
	        t1,
	        t2,
	        t3,
	        _i,
	        _ref,
	        _ref1;
	    _ref = unpack(arguments), h = _ref[0], s = _ref[1], l = _ref[2];
	    if (s === 0) {
	      r = g = b = l * 255;
	    } else {
	      t3 = [0, 0, 0];
	      c = [0, 0, 0];
	      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      t1 = 2 * l - t2;
	      h /= 360;
	      t3[0] = h + 1 / 3;
	      t3[1] = h;
	      t3[2] = h - 1 / 3;
	      for (i = _i = 0; _i <= 2; i = ++_i) {
	        if (t3[i] < 0) {
	          t3[i] += 1;
	        }
	        if (t3[i] > 1) {
	          t3[i] -= 1;
	        }
	        if (6 * t3[i] < 1) {
	          c[i] = t1 + (t2 - t1) * 6 * t3[i];
	        } else if (2 * t3[i] < 1) {
	          c[i] = t2;
	        } else if (3 * t3[i] < 2) {
	          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
	        } else {
	          c[i] = t1;
	        }
	      }
	      _ref1 = [Math.round(c[0] * 255), Math.round(c[1] * 255), Math.round(c[2] * 255)], r = _ref1[0], g = _ref1[1], b = _ref1[2];
	    }
	    return [r, g, b];
	  };
	  hsv2rgb = function() {
	    var b,
	        f,
	        g,
	        h,
	        i,
	        p,
	        q,
	        r,
	        s,
	        t,
	        v,
	        _ref,
	        _ref1,
	        _ref2,
	        _ref3,
	        _ref4,
	        _ref5,
	        _ref6;
	    _ref = unpack(arguments), h = _ref[0], s = _ref[1], v = _ref[2];
	    v *= 255;
	    if (s === 0) {
	      r = g = b = v;
	    } else {
	      if (h === 360) {
	        h = 0;
	      }
	      if (h > 360) {
	        h -= 360;
	      }
	      if (h < 0) {
	        h += 360;
	      }
	      h /= 60;
	      i = Math.floor(h);
	      f = h - i;
	      p = v * (1 - s);
	      q = v * (1 - s * f);
	      t = v * (1 - s * (1 - f));
	      switch (i) {
	        case 0:
	          _ref1 = [v, t, p], r = _ref1[0], g = _ref1[1], b = _ref1[2];
	          break;
	        case 1:
	          _ref2 = [q, v, p], r = _ref2[0], g = _ref2[1], b = _ref2[2];
	          break;
	        case 2:
	          _ref3 = [p, v, t], r = _ref3[0], g = _ref3[1], b = _ref3[2];
	          break;
	        case 3:
	          _ref4 = [p, q, v], r = _ref4[0], g = _ref4[1], b = _ref4[2];
	          break;
	        case 4:
	          _ref5 = [t, p, v], r = _ref5[0], g = _ref5[1], b = _ref5[2];
	          break;
	        case 5:
	          _ref6 = [v, p, q], r = _ref6[0], g = _ref6[1], b = _ref6[2];
	      }
	    }
	    r = Math.round(r);
	    g = Math.round(g);
	    b = Math.round(b);
	    return [r, g, b];
	  };
	  K = 18;
	  X = 0.950470;
	  Y = 1;
	  Z = 1.088830;
	  lab2lch = function() {
	    var a,
	        b,
	        c,
	        h,
	        l,
	        _ref;
	    _ref = unpack(arguments), l = _ref[0], a = _ref[1], b = _ref[2];
	    c = Math.sqrt(a * a + b * b);
	    h = Math.atan2(b, a) / Math.PI * 180;
	    return [l, c, h];
	  };
	  lab2rgb = function(l, a, b) {
	    var g,
	        r,
	        x,
	        y,
	        z,
	        _ref,
	        _ref1;
	    if (l !== void 0 && l.length === 3) {
	      _ref = l, l = _ref[0], a = _ref[1], b = _ref[2];
	    }
	    if (l !== void 0 && l.length === 3) {
	      _ref1 = l, l = _ref1[0], a = _ref1[1], b = _ref1[2];
	    }
	    y = (l + 16) / 116;
	    x = y + a / 500;
	    z = y - b / 200;
	    x = lab_xyz(x) * X;
	    y = lab_xyz(y) * Y;
	    z = lab_xyz(z) * Z;
	    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
	    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
	    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
	    return [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255), 1];
	  };
	  lab_xyz = function(x) {
	    if (x > 0.206893034) {
	      return x * x * x;
	    } else {
	      return (x - 4 / 29) / 7.787037;
	    }
	  };
	  xyz_rgb = function(r) {
	    return Math.round(255 * (r <= 0.00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055));
	  };
	  lch2lab = function() {
	    var c,
	        h,
	        l,
	        _ref;
	    _ref = unpack(arguments), l = _ref[0], c = _ref[1], h = _ref[2];
	    h = h * Math.PI / 180;
	    return [l, Math.cos(h) * c, Math.sin(h) * c];
	  };
	  lch2rgb = function(l, c, h) {
	    var L,
	        a,
	        b,
	        g,
	        r,
	        _ref,
	        _ref1;
	    _ref = lch2lab(l, c, h), L = _ref[0], a = _ref[1], b = _ref[2];
	    _ref1 = lab2rgb(L, a, b), r = _ref1[0], g = _ref1[1], b = _ref1[2];
	    return [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255)];
	  };
	  luminance = function(r, g, b) {
	    var _ref;
	    _ref = unpack(arguments), r = _ref[0], g = _ref[1], b = _ref[2];
	    r = luminance_x(r);
	    g = luminance_x(g);
	    b = luminance_x(b);
	    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
	  };
	  luminance_x = function(x) {
	    x /= 255;
	    if (x <= 0.03928) {
	      return x / 12.92;
	    } else {
	      return Math.pow((x + 0.055) / 1.055, 2.4);
	    }
	  };
	  rgb2hex = function() {
	    var b,
	        g,
	        r,
	        str,
	        u,
	        _ref;
	    _ref = unpack(arguments), r = _ref[0], g = _ref[1], b = _ref[2];
	    u = r << 16 | g << 8 | b;
	    str = "000000" + u.toString(16);
	    return "#" + str.substr(str.length - 6);
	  };
	  rgb2hsi = function() {
	    var TWOPI,
	        b,
	        g,
	        h,
	        i,
	        min,
	        r,
	        s,
	        _ref;
	    _ref = unpack(arguments), r = _ref[0], g = _ref[1], b = _ref[2];
	    TWOPI = Math.PI * 2;
	    r /= 255;
	    g /= 255;
	    b /= 255;
	    min = Math.min(r, g, b);
	    i = (r + g + b) / 3;
	    s = 1 - min / i;
	    if (s === 0) {
	      h = 0;
	    } else {
	      h = ((r - g) + (r - b)) / 2;
	      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
	      h = Math.acos(h);
	      if (b > g) {
	        h = TWOPI - h;
	      }
	      h /= TWOPI;
	    }
	    return [h * 360, s, i];
	  };
	  rgb2hsl = function(r, g, b) {
	    var h,
	        l,
	        max,
	        min,
	        s,
	        _ref;
	    if (r !== void 0 && r.length >= 3) {
	      _ref = r, r = _ref[0], g = _ref[1], b = _ref[2];
	    }
	    r /= 255;
	    g /= 255;
	    b /= 255;
	    min = Math.min(r, g, b);
	    max = Math.max(r, g, b);
	    l = (max + min) / 2;
	    if (max === min) {
	      s = 0;
	      h = Number.NaN;
	    } else {
	      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
	    }
	    if (r === max) {
	      h = (g - b) / (max - min);
	    } else if (g === max) {
	      h = 2 + (b - r) / (max - min);
	    } else if (b === max) {
	      h = 4 + (r - g) / (max - min);
	    }
	    h *= 60;
	    if (h < 0) {
	      h += 360;
	    }
	    return [h, s, l];
	  };
	  rgb2hsv = function() {
	    var b,
	        delta,
	        g,
	        h,
	        max,
	        min,
	        r,
	        s,
	        v,
	        _ref;
	    _ref = unpack(arguments), r = _ref[0], g = _ref[1], b = _ref[2];
	    min = Math.min(r, g, b);
	    max = Math.max(r, g, b);
	    delta = max - min;
	    v = max / 255.0;
	    if (max === 0) {
	      h = Number.NaN;
	      s = 0;
	    } else {
	      s = delta / max;
	      if (r === max) {
	        h = (g - b) / delta;
	      }
	      if (g === max) {
	        h = 2 + (b - r) / delta;
	      }
	      if (b === max) {
	        h = 4 + (r - g) / delta;
	      }
	      h *= 60;
	      if (h < 0) {
	        h += 360;
	      }
	    }
	    return [h, s, v];
	  };
	  rgb2lab = function() {
	    var b,
	        g,
	        r,
	        x,
	        y,
	        z,
	        _ref;
	    _ref = unpack(arguments), r = _ref[0], g = _ref[1], b = _ref[2];
	    r = rgb_xyz(r);
	    g = rgb_xyz(g);
	    b = rgb_xyz(b);
	    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / X);
	    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / Y);
	    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / Z);
	    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
	  };
	  rgb_xyz = function(r) {
	    if ((r /= 255) <= 0.04045) {
	      return r / 12.92;
	    } else {
	      return Math.pow((r + 0.055) / 1.055, 2.4);
	    }
	  };
	  xyz_lab = function(x) {
	    if (x > 0.008856) {
	      return Math.pow(x, 1 / 3);
	    } else {
	      return 7.787037 * x + 4 / 29;
	    }
	  };
	  rgb2lch = function() {
	    var a,
	        b,
	        g,
	        l,
	        r,
	        _ref,
	        _ref1;
	    _ref = unpack(arguments), r = _ref[0], g = _ref[1], b = _ref[2];
	    _ref1 = rgb2lab(r, g, b), l = _ref1[0], a = _ref1[1], b = _ref1[2];
	    return lab2lch(l, a, b);
	  };
	  chroma.scale = function(colors, positions) {
	    var classifyValue,
	        f,
	        getClass,
	        getColor,
	        resetCache,
	        setColors,
	        setDomain,
	        tmap,
	        _colorCache,
	        _colors,
	        _correctLightness,
	        _domain,
	        _fixed,
	        _max,
	        _min,
	        _mode,
	        _nacol,
	        _numClasses,
	        _out,
	        _pos,
	        _spread;
	    _mode = 'rgb';
	    _nacol = chroma('#ccc');
	    _spread = 0;
	    _fixed = false;
	    _domain = [0, 1];
	    _colors = [];
	    _out = false;
	    _pos = [];
	    _min = 0;
	    _max = 1;
	    _correctLightness = false;
	    _numClasses = 0;
	    _colorCache = {};
	    setColors = function(colors, positions) {
	      var c,
	          col,
	          _i,
	          _j,
	          _ref,
	          _ref1,
	          _ref2;
	      if (colors == null) {
	        colors = ['#ddd', '#222'];
	      }
	      if ((colors != null) && type(colors) === 'string' && (((_ref = chroma.brewer) != null ? _ref[colors] : void 0) != null)) {
	        colors = chroma.brewer[colors];
	      }
	      if (type(colors) === 'array') {
	        colors = colors.slice(0);
	        for (c = _i = 0, _ref1 = colors.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; c = 0 <= _ref1 ? ++_i : --_i) {
	          col = colors[c];
	          if (type(col) === "string") {
	            colors[c] = chroma(col);
	          }
	        }
	        if (positions != null) {
	          _pos = positions;
	        } else {
	          _pos = [];
	          for (c = _j = 0, _ref2 = colors.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; c = 0 <= _ref2 ? ++_j : --_j) {
	            _pos.push(c / (colors.length - 1));
	          }
	        }
	      }
	      resetCache();
	      return _colors = colors;
	    };
	    setDomain = function(domain) {
	      if (domain == null) {
	        domain = [];
	      }
	      _domain = domain;
	      _min = domain[0];
	      _max = domain[domain.length - 1];
	      resetCache();
	      if (domain.length === 2) {
	        return _numClasses = 0;
	      } else {
	        return _numClasses = domain.length - 1;
	      }
	    };
	    getClass = function(value) {
	      var i,
	          n;
	      if (_domain != null) {
	        n = _domain.length - 1;
	        i = 0;
	        while (i < n && value >= _domain[i]) {
	          i++;
	        }
	        return i - 1;
	      }
	      return 0;
	    };
	    tmap = function(t) {
	      return t;
	    };
	    classifyValue = function(value) {
	      var i,
	          maxc,
	          minc,
	          n,
	          val;
	      val = value;
	      if (_domain.length > 2) {
	        n = _domain.length - 1;
	        i = getClass(value);
	        minc = _domain[0] + (_domain[1] - _domain[0]) * (0 + _spread * 0.5);
	        maxc = _domain[n - 1] + (_domain[n] - _domain[n - 1]) * (1 - _spread * 0.5);
	        val = _min + ((_domain[i] + (_domain[i + 1] - _domain[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);
	      }
	      return val;
	    };
	    getColor = function(val, bypassMap) {
	      var c,
	          col,
	          f0,
	          i,
	          k,
	          p,
	          t,
	          _i,
	          _ref;
	      if (bypassMap == null) {
	        bypassMap = false;
	      }
	      if (isNaN(val)) {
	        return _nacol;
	      }
	      if (!bypassMap) {
	        if (_domain.length > 2) {
	          c = getClass(val);
	          t = c / (_numClasses - 1);
	        } else {
	          t = f0 = (val - _min) / (_max - _min);
	          t = Math.min(1, Math.max(0, t));
	        }
	      } else {
	        t = val;
	      }
	      if (!bypassMap) {
	        t = tmap(t);
	      }
	      k = Math.floor(t * 10000);
	      if (_colorCache[k]) {
	        col = _colorCache[k];
	      } else {
	        if (type(_colors) === 'array') {
	          for (i = _i = 0, _ref = _pos.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
	            p = _pos[i];
	            if (t <= p) {
	              col = _colors[i];
	              break;
	            }
	            if (t >= p && i === _pos.length - 1) {
	              col = _colors[i];
	              break;
	            }
	            if (t > p && t < _pos[i + 1]) {
	              t = (t - p) / (_pos[i + 1] - p);
	              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
	              break;
	            }
	          }
	        } else if (type(_colors) === 'function') {
	          col = _colors(t);
	        }
	        _colorCache[k] = col;
	      }
	      return col;
	    };
	    resetCache = function() {
	      return _colorCache = {};
	    };
	    setColors(colors, positions);
	    f = function(v) {
	      var c;
	      c = getColor(v);
	      if (_out && c[_out]) {
	        return c[_out]();
	      } else {
	        return c;
	      }
	    };
	    f.domain = function(domain, classes, mode, key) {
	      var d;
	      if (mode == null) {
	        mode = 'e';
	      }
	      if (!arguments.length) {
	        return _domain;
	      }
	      if (classes != null) {
	        d = chroma.analyze(domain, key);
	        if (classes === 0) {
	          domain = [d.min, d.max];
	        } else {
	          domain = chroma.limits(d, mode, classes);
	        }
	      }
	      setDomain(domain);
	      return f;
	    };
	    f.mode = function(_m) {
	      if (!arguments.length) {
	        return _mode;
	      }
	      _mode = _m;
	      resetCache();
	      return f;
	    };
	    f.range = function(colors, _pos) {
	      setColors(colors, _pos);
	      return f;
	    };
	    f.out = function(_o) {
	      _out = _o;
	      return f;
	    };
	    f.spread = function(val) {
	      if (!arguments.length) {
	        return _spread;
	      }
	      _spread = val;
	      return f;
	    };
	    f.correctLightness = function(v) {
	      if (!arguments.length) {
	        return _correctLightness;
	      }
	      _correctLightness = v;
	      resetCache();
	      if (_correctLightness) {
	        tmap = function(t) {
	          var L0,
	              L1,
	              L_actual,
	              L_diff,
	              L_ideal,
	              max_iter,
	              pol,
	              t0,
	              t1;
	          L0 = getColor(0, true).lab()[0];
	          L1 = getColor(1, true).lab()[0];
	          pol = L0 > L1;
	          L_actual = getColor(t, true).lab()[0];
	          L_ideal = L0 + (L1 - L0) * t;
	          L_diff = L_actual - L_ideal;
	          t0 = 0;
	          t1 = 1;
	          max_iter = 20;
	          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
	            (function() {
	              if (pol) {
	                L_diff *= -1;
	              }
	              if (L_diff < 0) {
	                t0 = t;
	                t += (t1 - t) * 0.5;
	              } else {
	                t1 = t;
	                t += (t0 - t) * 0.5;
	              }
	              L_actual = getColor(t, true).lab()[0];
	              return L_diff = L_actual - L_ideal;
	            })();
	          }
	          return t;
	        };
	      } else {
	        tmap = function(t) {
	          return t;
	        };
	      }
	      return f;
	    };
	    f.colors = function(out) {
	      var i,
	          samples,
	          _i,
	          _j,
	          _len,
	          _ref;
	      if (out == null) {
	        out = 'hex';
	      }
	      colors = [];
	      samples = [];
	      if (_domain.length > 2) {
	        for (i = _i = 1, _ref = _domain.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
	          samples.push((_domain[i - 1] + _domain[i]) * 0.5);
	        }
	      } else {
	        samples = _domain;
	      }
	      for (_j = 0, _len = samples.length; _j < _len; _j++) {
	        i = samples[_j];
	        colors.push(f(i)[out]());
	      }
	      return colors;
	    };
	    return f;
	  };
	  if ((_ref = chroma.scales) == null) {
	    chroma.scales = {};
	  }
	  chroma.scales.cool = function() {
	    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
	  };
	  chroma.scales.hot = function() {
	    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
	  };
	  chroma.analyze = function(data, key, filter) {
	    var add,
	        k,
	        r,
	        val,
	        visit,
	        _i,
	        _len;
	    r = {
	      min: Number.MAX_VALUE,
	      max: Number.MAX_VALUE * -1,
	      sum: 0,
	      values: [],
	      count: 0
	    };
	    if (filter == null) {
	      filter = function() {
	        return true;
	      };
	    }
	    add = function(val) {
	      if ((val != null) && !isNaN(val)) {
	        r.values.push(val);
	        r.sum += val;
	        if (val < r.min) {
	          r.min = val;
	        }
	        if (val > r.max) {
	          r.max = val;
	        }
	        r.count += 1;
	      }
	    };
	    visit = function(val, k) {
	      if (filter(val, k)) {
	        if ((key != null) && type(key) === 'function') {
	          return add(key(val));
	        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
	          return add(val[key]);
	        } else {
	          return add(val);
	        }
	      }
	    };
	    if (type(data) === 'array') {
	      for (_i = 0, _len = data.length; _i < _len; _i++) {
	        val = data[_i];
	        visit(val);
	      }
	    } else {
	      for (k in data) {
	        val = data[k];
	        visit(val, k);
	      }
	    }
	    r.domain = [r.min, r.max];
	    r.limits = function(mode, num) {
	      return chroma.limits(r, mode, num);
	    };
	    return r;
	  };
	  chroma.limits = function(data, mode, num) {
	    var assignments,
	        best,
	        centroids,
	        cluster,
	        clusterSizes,
	        dist,
	        i,
	        j,
	        kClusters,
	        limits,
	        max,
	        max_log,
	        min,
	        min_log,
	        mindist,
	        n,
	        nb_iters,
	        newCentroids,
	        p,
	        pb,
	        pr,
	        repeat,
	        sum,
	        tmpKMeansBreaks,
	        value,
	        values,
	        _i,
	        _j,
	        _k,
	        _l,
	        _m,
	        _n,
	        _o,
	        _p,
	        _q,
	        _r,
	        _ref1,
	        _ref10,
	        _ref11,
	        _ref12,
	        _ref13,
	        _ref14,
	        _ref15,
	        _ref2,
	        _ref3,
	        _ref4,
	        _ref5,
	        _ref6,
	        _ref7,
	        _ref8,
	        _ref9,
	        _s,
	        _t,
	        _u,
	        _v,
	        _w;
	    if (mode == null) {
	      mode = 'equal';
	    }
	    if (num == null) {
	      num = 7;
	    }
	    if (data.values == null) {
	      data = chroma.analyze(data);
	    }
	    min = data.min;
	    max = data.max;
	    sum = data.sum;
	    values = data.values.sort(function(a, b) {
	      return a - b;
	    });
	    limits = [];
	    if (mode.substr(0, 1) === 'c') {
	      limits.push(min);
	      limits.push(max);
	    }
	    if (mode.substr(0, 1) === 'e') {
	      limits.push(min);
	      for (i = _i = 1, _ref1 = num - 1; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
	        limits.push(min + (i / num) * (max - min));
	      }
	      limits.push(max);
	    } else if (mode.substr(0, 1) === 'l') {
	      if (min <= 0) {
	        throw 'Logarithmic scales are only possible for values > 0';
	      }
	      min_log = Math.LOG10E * Math.log(min);
	      max_log = Math.LOG10E * Math.log(max);
	      limits.push(min);
	      for (i = _j = 1, _ref2 = num - 1; 1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 1 <= _ref2 ? ++_j : --_j) {
	        limits.push(Math.pow(10, min_log + (i / num) * (max_log - min_log)));
	      }
	      limits.push(max);
	    } else if (mode.substr(0, 1) === 'q') {
	      limits.push(min);
	      for (i = _k = 1, _ref3 = num - 1; 1 <= _ref3 ? _k <= _ref3 : _k >= _ref3; i = 1 <= _ref3 ? ++_k : --_k) {
	        p = values.length * i / num;
	        pb = Math.floor(p);
	        if (pb === p) {
	          limits.push(values[pb]);
	        } else {
	          pr = p - pb;
	          limits.push(values[pb] * pr + values[pb + 1] * (1 - pr));
	        }
	      }
	      limits.push(max);
	    } else if (mode.substr(0, 1) === 'k') {
	      n = values.length;
	      assignments = new Array(n);
	      clusterSizes = new Array(num);
	      repeat = true;
	      nb_iters = 0;
	      centroids = null;
	      centroids = [];
	      centroids.push(min);
	      for (i = _l = 1, _ref4 = num - 1; 1 <= _ref4 ? _l <= _ref4 : _l >= _ref4; i = 1 <= _ref4 ? ++_l : --_l) {
	        centroids.push(min + (i / num) * (max - min));
	      }
	      centroids.push(max);
	      while (repeat) {
	        for (j = _m = 0, _ref5 = num - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; j = 0 <= _ref5 ? ++_m : --_m) {
	          clusterSizes[j] = 0;
	        }
	        for (i = _n = 0, _ref6 = n - 1; 0 <= _ref6 ? _n <= _ref6 : _n >= _ref6; i = 0 <= _ref6 ? ++_n : --_n) {
	          value = values[i];
	          mindist = Number.MAX_VALUE;
	          for (j = _o = 0, _ref7 = num - 1; 0 <= _ref7 ? _o <= _ref7 : _o >= _ref7; j = 0 <= _ref7 ? ++_o : --_o) {
	            dist = Math.abs(centroids[j] - value);
	            if (dist < mindist) {
	              mindist = dist;
	              best = j;
	            }
	          }
	          clusterSizes[best]++;
	          assignments[i] = best;
	        }
	        newCentroids = new Array(num);
	        for (j = _p = 0, _ref8 = num - 1; 0 <= _ref8 ? _p <= _ref8 : _p >= _ref8; j = 0 <= _ref8 ? ++_p : --_p) {
	          newCentroids[j] = null;
	        }
	        for (i = _q = 0, _ref9 = n - 1; 0 <= _ref9 ? _q <= _ref9 : _q >= _ref9; i = 0 <= _ref9 ? ++_q : --_q) {
	          cluster = assignments[i];
	          if (newCentroids[cluster] === null) {
	            newCentroids[cluster] = values[i];
	          } else {
	            newCentroids[cluster] += values[i];
	          }
	        }
	        for (j = _r = 0, _ref10 = num - 1; 0 <= _ref10 ? _r <= _ref10 : _r >= _ref10; j = 0 <= _ref10 ? ++_r : --_r) {
	          newCentroids[j] *= 1 / clusterSizes[j];
	        }
	        repeat = false;
	        for (j = _s = 0, _ref11 = num - 1; 0 <= _ref11 ? _s <= _ref11 : _s >= _ref11; j = 0 <= _ref11 ? ++_s : --_s) {
	          if (newCentroids[j] !== centroids[i]) {
	            repeat = true;
	            break;
	          }
	        }
	        centroids = newCentroids;
	        nb_iters++;
	        if (nb_iters > 200) {
	          repeat = false;
	        }
	      }
	      kClusters = {};
	      for (j = _t = 0, _ref12 = num - 1; 0 <= _ref12 ? _t <= _ref12 : _t >= _ref12; j = 0 <= _ref12 ? ++_t : --_t) {
	        kClusters[j] = [];
	      }
	      for (i = _u = 0, _ref13 = n - 1; 0 <= _ref13 ? _u <= _ref13 : _u >= _ref13; i = 0 <= _ref13 ? ++_u : --_u) {
	        cluster = assignments[i];
	        kClusters[cluster].push(values[i]);
	      }
	      tmpKMeansBreaks = [];
	      for (j = _v = 0, _ref14 = num - 1; 0 <= _ref14 ? _v <= _ref14 : _v >= _ref14; j = 0 <= _ref14 ? ++_v : --_v) {
	        tmpKMeansBreaks.push(kClusters[j][0]);
	        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
	      }
	      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
	        return a - b;
	      });
	      limits.push(tmpKMeansBreaks[0]);
	      for (i = _w = 1, _ref15 = tmpKMeansBreaks.length - 1; _w <= _ref15; i = _w += 2) {
	        if (!isNaN(tmpKMeansBreaks[i])) {
	          limits.push(tmpKMeansBreaks[i]);
	        }
	      }
	    }
	    return limits;
	  };
	  chroma.brewer = brewer = {
	    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
	    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
	    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
	    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
	    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
	    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
	    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
	    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
	    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
	    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
	    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
	    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
	    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
	    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
	    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
	    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
	    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
	    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
	    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
	    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
	    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
	    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
	    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
	    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
	    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
	    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
	    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
	    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
	    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
	    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
	    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
	    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
	    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
	    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
	    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
	  };
	  chroma.colors = colors = {
	    indigo: "#4b0082",
	    gold: "#ffd700",
	    hotpink: "#ff69b4",
	    firebrick: "#b22222",
	    indianred: "#cd5c5c",
	    yellow: "#ffff00",
	    mistyrose: "#ffe4e1",
	    darkolivegreen: "#556b2f",
	    olive: "#808000",
	    darkseagreen: "#8fbc8f",
	    pink: "#ffc0cb",
	    tomato: "#ff6347",
	    lightcoral: "#f08080",
	    orangered: "#ff4500",
	    navajowhite: "#ffdead",
	    lime: "#00ff00",
	    palegreen: "#98fb98",
	    darkslategrey: "#2f4f4f",
	    greenyellow: "#adff2f",
	    burlywood: "#deb887",
	    seashell: "#fff5ee",
	    mediumspringgreen: "#00fa9a",
	    fuchsia: "#ff00ff",
	    papayawhip: "#ffefd5",
	    blanchedalmond: "#ffebcd",
	    chartreuse: "#7fff00",
	    dimgray: "#696969",
	    black: "#000000",
	    peachpuff: "#ffdab9",
	    springgreen: "#00ff7f",
	    aquamarine: "#7fffd4",
	    white: "#ffffff",
	    orange: "#ffa500",
	    lightsalmon: "#ffa07a",
	    darkslategray: "#2f4f4f",
	    brown: "#a52a2a",
	    ivory: "#fffff0",
	    dodgerblue: "#1e90ff",
	    peru: "#cd853f",
	    lawngreen: "#7cfc00",
	    chocolate: "#d2691e",
	    crimson: "#dc143c",
	    forestgreen: "#228b22",
	    darkgrey: "#a9a9a9",
	    lightseagreen: "#20b2aa",
	    cyan: "#00ffff",
	    mintcream: "#f5fffa",
	    silver: "#c0c0c0",
	    antiquewhite: "#faebd7",
	    mediumorchid: "#ba55d3",
	    skyblue: "#87ceeb",
	    gray: "#808080",
	    darkturquoise: "#00ced1",
	    goldenrod: "#daa520",
	    darkgreen: "#006400",
	    floralwhite: "#fffaf0",
	    darkviolet: "#9400d3",
	    darkgray: "#a9a9a9",
	    moccasin: "#ffe4b5",
	    saddlebrown: "#8b4513",
	    grey: "#808080",
	    darkslateblue: "#483d8b",
	    lightskyblue: "#87cefa",
	    lightpink: "#ffb6c1",
	    mediumvioletred: "#c71585",
	    slategrey: "#708090",
	    red: "#ff0000",
	    deeppink: "#ff1493",
	    limegreen: "#32cd32",
	    darkmagenta: "#8b008b",
	    palegoldenrod: "#eee8aa",
	    plum: "#dda0dd",
	    turquoise: "#40e0d0",
	    lightgrey: "#d3d3d3",
	    lightgoldenrodyellow: "#fafad2",
	    darkgoldenrod: "#b8860b",
	    lavender: "#e6e6fa",
	    maroon: "#800000",
	    yellowgreen: "#9acd32",
	    sandybrown: "#f4a460",
	    thistle: "#d8bfd8",
	    violet: "#ee82ee",
	    navy: "#000080",
	    magenta: "#ff00ff",
	    dimgrey: "#696969",
	    tan: "#d2b48c",
	    rosybrown: "#bc8f8f",
	    olivedrab: "#6b8e23",
	    blue: "#0000ff",
	    lightblue: "#add8e6",
	    ghostwhite: "#f8f8ff",
	    honeydew: "#f0fff0",
	    cornflowerblue: "#6495ed",
	    slateblue: "#6a5acd",
	    linen: "#faf0e6",
	    darkblue: "#00008b",
	    powderblue: "#b0e0e6",
	    seagreen: "#2e8b57",
	    darkkhaki: "#bdb76b",
	    snow: "#fffafa",
	    sienna: "#a0522d",
	    mediumblue: "#0000cd",
	    royalblue: "#4169e1",
	    lightcyan: "#e0ffff",
	    green: "#008000",
	    mediumpurple: "#9370db",
	    midnightblue: "#191970",
	    cornsilk: "#fff8dc",
	    paleturquoise: "#afeeee",
	    bisque: "#ffe4c4",
	    slategray: "#708090",
	    darkcyan: "#008b8b",
	    khaki: "#f0e68c",
	    wheat: "#f5deb3",
	    teal: "#008080",
	    darkorchid: "#9932cc",
	    deepskyblue: "#00bfff",
	    salmon: "#fa8072",
	    darkred: "#8b0000",
	    steelblue: "#4682b4",
	    palevioletred: "#db7093",
	    lightslategray: "#778899",
	    aliceblue: "#f0f8ff",
	    lightslategrey: "#778899",
	    lightgreen: "#90ee90",
	    orchid: "#da70d6",
	    gainsboro: "#dcdcdc",
	    mediumseagreen: "#3cb371",
	    lightgray: "#d3d3d3",
	    mediumturquoise: "#48d1cc",
	    lemonchiffon: "#fffacd",
	    cadetblue: "#5f9ea0",
	    lightyellow: "#ffffe0",
	    lavenderblush: "#fff0f5",
	    coral: "#ff7f50",
	    purple: "#800080",
	    aqua: "#00ffff",
	    whitesmoke: "#f5f5f5",
	    mediumslateblue: "#7b68ee",
	    darkorange: "#ff8c00",
	    mediumaquamarine: "#66cdaa",
	    darksalmon: "#e9967a",
	    beige: "#f5f5dc",
	    blueviolet: "#8a2be2",
	    azure: "#f0ffff",
	    lightsteelblue: "#b0c4de",
	    oldlace: "#fdf5e6"
	  };
	  type = (function() {
	    var classToType,
	        name,
	        _i,
	        _len,
	        _ref1;
	    classToType = {};
	    _ref1 = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
	    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	      name = _ref1[_i];
	      classToType["[object " + name + "]"] = name.toLowerCase();
	    }
	    return function(obj) {
	      var strType;
	      strType = Object.prototype.toString.call(obj);
	      return classToType[strType] || "object";
	    };
	  })();
	  limit = function(x, min, max) {
	    if (min == null) {
	      min = 0;
	    }
	    if (max == null) {
	      max = 1;
	    }
	    if (x < min) {
	      x = min;
	    }
	    if (x > max) {
	      x = max;
	    }
	    return x;
	  };
	  unpack = function(args) {
	    if (args.length >= 3) {
	      return args;
	    } else {
	      return args[0];
	    }
	  };
	  TWOPI = Math.PI * 2;
	  PITHIRD = Math.PI / 3;
	  cos = Math.cos;
	  bezier = function(colors) {
	    var I,
	        I0,
	        I1,
	        c,
	        lab0,
	        lab1,
	        lab2,
	        lab3,
	        _ref1,
	        _ref2,
	        _ref3;
	    colors = (function() {
	      var _i,
	          _len,
	          _results;
	      _results = [];
	      for (_i = 0, _len = colors.length; _i < _len; _i++) {
	        c = colors[_i];
	        _results.push(chroma(c));
	      }
	      return _results;
	    })();
	    if (colors.length === 2) {
	      _ref1 = (function() {
	        var _i,
	            _len,
	            _results;
	        _results = [];
	        for (_i = 0, _len = colors.length; _i < _len; _i++) {
	          c = colors[_i];
	          _results.push(c.lab());
	        }
	        return _results;
	      })(), lab0 = _ref1[0], lab1 = _ref1[1];
	      I = function(t) {
	        var i,
	            lab;
	        lab = (function() {
	          var _i,
	              _results;
	          _results = [];
	          for (i = _i = 0; _i <= 2; i = ++_i) {
	            _results.push(lab0[i] + t * (lab1[i] - lab0[i]));
	          }
	          return _results;
	        })();
	        return chroma.lab.apply(chroma, lab);
	      };
	    } else if (colors.length === 3) {
	      _ref2 = (function() {
	        var _i,
	            _len,
	            _results;
	        _results = [];
	        for (_i = 0, _len = colors.length; _i < _len; _i++) {
	          c = colors[_i];
	          _results.push(c.lab());
	        }
	        return _results;
	      })(), lab0 = _ref2[0], lab1 = _ref2[1], lab2 = _ref2[2];
	      I = function(t) {
	        var i,
	            lab;
	        lab = (function() {
	          var _i,
	              _results;
	          _results = [];
	          for (i = _i = 0; _i <= 2; i = ++_i) {
	            _results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
	          }
	          return _results;
	        })();
	        return chroma.lab.apply(chroma, lab);
	      };
	    } else if (colors.length === 4) {
	      _ref3 = (function() {
	        var _i,
	            _len,
	            _results;
	        _results = [];
	        for (_i = 0, _len = colors.length; _i < _len; _i++) {
	          c = colors[_i];
	          _results.push(c.lab());
	        }
	        return _results;
	      })(), lab0 = _ref3[0], lab1 = _ref3[1], lab2 = _ref3[2], lab3 = _ref3[3];
	      I = function(t) {
	        var i,
	            lab;
	        lab = (function() {
	          var _i,
	              _results;
	          _results = [];
	          for (i = _i = 0; _i <= 2; i = ++_i) {
	            _results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
	          }
	          return _results;
	        })();
	        return chroma.lab.apply(chroma, lab);
	      };
	    } else if (colors.length === 5) {
	      I0 = bezier(colors.slice(0, 3));
	      I1 = bezier(colors.slice(2, 5));
	      I = function(t) {
	        if (t < 0.5) {
	          return I0(t * 2);
	        } else {
	          return I1((t - 0.5) * 2);
	        }
	      };
	    }
	    return I;
	  };
	  chroma.interpolate.bezier = bezier;
	}).call(this);
	
	//# sourceMappingURL=<compileOutput>
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(46)(module)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() {
	  var list = [];
	  list.toString = function toString() {
	    var result = [];
	    for (var i = 0; i < this.length; i++) {
	      var item = this[i];
	      if (item[2]) {
	        result.push("@media " + item[2] + "{" + item[1] + "}");
	      } else {
	        result.push(item[1]);
	      }
	    }
	    return result.join("");
	  };
	  return list;
	};
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(16), __webpack_require__(21), __webpack_require__(39), __webpack_require__(45), __webpack_require__(40), __webpack_require__(20), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, U, KefirSignalHandler, uniqueID, dm, plugin, defer) {
	  'use strict';
	  return plugin.selected.then((function() {
	    if (U.isDefined(window._amy_Artefact)) {
	      return window._amy_Artefact;
	    }
	    window._amy_Artefact = dm.vp('Artefact', U.newSubclass(KefirSignalHandler, (function(superFn) {
	      return function Artefact(options) {
	        superFn.apply(this, arguments);
	        this._options = options;
	        var $__1 = options,
	            id = $__1.id,
	            type = $__1.type,
	            parent = $__1.parent,
	            beforeConstruction = $__1.beforeConstruction;
	        this._id = id || uniqueID(type);
	        this._type = type;
	        this._parent = parent;
	        this._children = [];
	        if (parent) {
	          U.array(parent, '_children').push(this);
	        }
	        this.newEvent('destroy');
	        this.beforeConstruction(beforeConstruction);
	        if (this.root === this) {
	          this._artefactsByID = {};
	          this._registerArtefact = function(artefact) {
	            U.getDef(this._artefactsByID, artefact.id, defer).resolve(artefact);
	          };
	        }
	      };
	    }), {
	      beforeConstruction: function(possiblePromise) {
	        if (!possiblePromise || !$.isFunction(possiblePromise.then)) {
	          return;
	        }
	        if (!this.constructed) {
	          this.constructed = P.resolve(this);
	        }
	        this.constructed = this.constructed.tap((function() {
	          return P.resolve(possiblePromise);
	        }));
	      },
	      get options() {
	        return this._options;
	      },
	      get id() {
	        return this._id;
	      },
	      get type() {
	        return this._type;
	      },
	      get parent() {
	        return this._parent;
	      },
	      get children() {
	        return this._children;
	      },
	      get root() {
	        if (!this._root) {
	          this._root = this.parent ? this.parent.root : this;
	        }
	        return this._root;
	      },
	      artefactById: function(id) {
	        return U.getDef(this.root._artefactsByID, id, defer).promise;
	      },
	      traverseArtefacts: function(fn) {
	        var options = arguments[1] !== (void 0) ? arguments[1] : {};
	        var order = options.order;
	        if (!order) {
	          order = 'prefix';
	        }
	        if (order === 'prefix') {
	          fn(this);
	        }
	        this.children.forEach((function(child) {
	          child.traverseArtefacts(fn, options);
	        }));
	        if (order === 'postfix') {
	          fn(this);
	        }
	      },
	      traverseArtefactsByType: function(type, fn) {
	        var options = arguments[2] !== (void 0) ? arguments[2] : {};
	        var order = options.order;
	        if (!order) {
	          order = 'prefix';
	        }
	        if (order === 'prefix' && this.type === type) {
	          fn(this);
	        }
	        if (options.beforeGoingIn) {
	          options.beforeGoingIn(this);
	        }
	        this.closestDescendantsByType(type).forEach((function(descendent) {
	          descendent.traverseArtefactsByType(type, fn, options);
	        }));
	        if (options.beforeGoingOut) {
	          options.beforeGoingOut(this);
	        }
	        if (order === 'postfix' && this.type === type) {
	          fn(this);
	        }
	      },
	      closestAncestorByType: function(type) {
	        var result = this;
	        do {
	          result = result.parent;
	        } while (result && result.type && result.type !== type);
	        return result;
	      },
	      closestDescendantsByType: function(type) {
	        var result = [];
	        this.children.forEach((function(child) {
	          if (child.type === type) {
	            result.push(child);
	          } else {
	            result = result.concat(child.closestDescendantsByType(type));
	          }
	        }));
	        return result;
	      },
	      destroy: function() {
	        this.trigger('destroy');
	        this.children.forEach((function(child) {
	          child.destroy();
	        }));
	      }
	    }));
	    window._amy_Artefact.newSubclass = function newSubClass(name, constructor) {
	      var prototype = arguments[2] !== (void 0) ? arguments[2] : {};
	      var optionDefaults = arguments[3] !== (void 0) ? arguments[3] : {};
	      return dm.vp(name, U.newSubclass(window._amy_Artefact, (function(superFn) {
	        return function() {
	          var options = arguments[0] !== (void 0) ? arguments[0] : {};
	          var $__0 = this;
	          var processedOptions = options;
	          Object.keys(optionDefaults).forEach((function(key) {
	            if (U.isUndefined(processedOptions[key])) {
	              processedOptions[key] = optionDefaults[key];
	            }
	          }));
	          processedOptions.type = name;
	          superFn.call(this, U.extend(options, processedOptions));
	          constructor.call(this, processedOptions);
	          if (this.constructed) {
	            this.constructed = this.constructed.then((function() {
	              if ($.isFunction($__0.construct)) {
	                return P.resolve($__0.construct(options)).return($__0);
	              }
	              return $__0;
	            }));
	          } else if ($.isFunction(this.construct)) {
	            this.beforeConstruction(this.construct(options));
	          }
	          (this.constructed || P.resolve()).then((function() {
	            $__0.root._registerArtefact($__0);
	          }));
	        };
	      }), U.extend({}, prototype, {get circuitboard() {
	          if (!this._circuitboard) {
	            this._circuitboard = this.closestAncestorByType('Circuitboard');
	          }
	          return this._circuitboard;
	        }})));
	    };
	    return window._amy_Artefact;
	  })).tap((function(c) {
	    $.circuitboard.Artefact = c;
	  }));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(21), __webpack_require__(26)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, U, Kefir) {
	  var KefirSignalHandler = U.newClass(function KefirSignalHandler() {
	    this._events = {};
	    this._properties = {};
	    this._propertyBusses = {};
	  }, {
	    newEvent: function(name) {
	      var source = (arguments[1] !== (void 0) ? arguments[1] : {}).source;
	      U.assert(!this._events[name], ("There is already an event '" + name + "' on this object."));
	      U.assert(!this._properties[name], ("There is already a property '" + name + "' on this object."));
	      var bus = Kefir.bus();
	      if (source) {
	        bus.plug(source);
	      }
	      return this._events[name] = bus;
	    },
	    event: function(name) {
	      U.assert(this._events[name], ("There is no event '" + name + "' on this object."));
	      return this._events[name];
	    },
	    property: function(name) {
	      return this._properties[name];
	    },
	    p: function(name) {
	      return this._properties[name];
	    },
	    newProperty: function(name) {
	      var $__1 = arguments[1] !== (void 0) ? arguments[1] : {},
	          settable = $__1.settable,
	          initial = $__1.initial,
	          isEqual = $__1.isEqual;
	      U.assert(!this._events[name], ("There is already an event '" + name + "' on this object."));
	      U.assert(!this._properties[name], ("There is already a property '" + name + "' on this object."));
	      if (U.isUndefined(settable)) {
	        settable = true;
	      }
	      var bus = Kefir.bus();
	      var property = this._properties[name] = bus.toProperty(initial).skipDuplicates(isEqual);
	      property.plug = (function(observable) {
	        bus.plug(observable);
	        return property;
	      });
	      property.unplug = (function(observable) {
	        bus.unplug(observable);
	        return property;
	      });
	      property.get = (function() {
	        return property._current;
	      });
	      if (settable) {
	        property.set = (function(value) {
	          bus.emit(value);
	          return property;
	        });
	      }
	      Object.defineProperty(this, name, {
	        get: property.get,
	        set: settable ? property.set : undefined
	      });
	      property.run();
	      this.event('destroy').onValue((function() {
	        bus.end();
	      }));
	      return property;
	    },
	    trigger: function(name, value) {
	      U.assert(this._events[name], ("There is no event '" + name + "' on this object."));
	      this._events[name].emit(value);
	    },
	    on: function(name, expectedValue, options, callback) {
	      var argsObj = this._gatherOnArguments(name, expectedValue, options, callback);
	      return this._on(argsObj);
	    },
	    _on: function($__1) {
	      var $__2 = $__1,
	          name = $__2.name,
	          expectedValue = $__2.expectedValue,
	          callback = $__2.callback;
	      U.assert(this._events[name] || this._properties[name], ("There is no event or property '" + name + "' on this object."));
	      var result = this._events[name] || this._properties[name];
	      if (U.isDefined(expectedValue)) {
	        result = result.filter((function(v) {
	          return v === expectedValue;
	        }));
	      }
	      if (callback) {
	        result = result.onValue(callback);
	      }
	      return result;
	    },
	    _gatherOnArguments: function() {
	      for (var args = [],
	          $__0 = 0; $__0 < arguments.length; $__0++)
	        args[$__0] = arguments[$__0];
	      var result = {name: args.shift()};
	      if (U.isDefined(args[0]) && !U.isFunction(args[0]) && !U.isPlainObject(args[0])) {
	        result.expectedValue = args.shift();
	      }
	      if (U.isDefined(args[0]) && U.isFunction(args[0])) {
	        result.callback = args.shift();
	      }
	      return result;
	    }
	  });
	  return KefirSignalHandler;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16), __webpack_require__(47)], __WEBPACK_AMD_DEFINE_RESULT__ = function(P, DM) {
	  'use strict';
	  if (window.__apinatomy_core_delta_model) {
	    return window.__apinatomy_core_delta_model;
	  }
	  DM.registerPromiseResolver(P.resolve);
	  window.__apinatomy_core_delta_model = new DM();
	  return window.__apinatomy_core_delta_model;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var process = module.exports = {};
	process.nextTick = (function() {
	  var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
	  var canMutationObserver = typeof window !== 'undefined' && window.MutationObserver;
	  var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;
	  ;
	  if (canSetImmediate) {
	    return function(f) {
	      return window.setImmediate(f);
	    };
	  }
	  var queue = [];
	  if (canMutationObserver) {
	    var hiddenDiv = document.createElement("div");
	    var observer = new MutationObserver(function() {
	      var queueList = queue.slice();
	      queue.length = 0;
	      queueList.forEach(function(fn) {
	        fn();
	      });
	    });
	    observer.observe(hiddenDiv, {attributes: true});
	    return function nextTick(fn) {
	      if (!queue.length) {
	        hiddenDiv.setAttribute('yes', 'no');
	      }
	      queue.push(fn);
	    };
	  }
	  if (canPost) {
	    window.addEventListener('message', function(ev) {
	      var source = ev.source;
	      if ((source === window || source === null) && ev.data === 'process-tick') {
	        ev.stopPropagation();
	        if (queue.length > 0) {
	          var fn = queue.shift();
	          fn();
	        }
	      }
	    }, true);
	    return function nextTick(fn) {
	      queue.push(fn);
	      window.postMessage('process-tick', '*');
	    };
	  }
	  return function nextTick(fn) {
	    setTimeout(fn, 0);
	  };
	})();
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	function noop() {}
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.binding = function(name) {
	  throw new Error('process.binding is not supported');
	};
	process.cwd = function() {
	  return '/';
	};
	process.chdir = function(dir) {
	  throw new Error('process.chdir is not supported');
	};
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;;
	(function(global) {
	  "use strict";
	  var Kefir = {};
	  function and() {
	    for (var i = 0; i < arguments.length; i++) {
	      if (!arguments[i]) {
	        return arguments[i];
	      }
	    }
	    return arguments[i - 1];
	  }
	  function or() {
	    for (var i = 0; i < arguments.length; i++) {
	      if (arguments[i]) {
	        return arguments[i];
	      }
	    }
	    return arguments[i - 1];
	  }
	  function not(x) {
	    return !x;
	  }
	  function concat(a, b) {
	    var result,
	        length,
	        i,
	        j;
	    if (a.length === 0) {
	      return b;
	    }
	    if (b.length === 0) {
	      return a;
	    }
	    j = 0;
	    result = new Array(a.length + b.length);
	    length = a.length;
	    for (i = 0; i < length; i++, j++) {
	      result[j] = a[i];
	    }
	    length = b.length;
	    for (i = 0; i < length; i++, j++) {
	      result[j] = b[i];
	    }
	    return result;
	  }
	  function find(arr, value) {
	    var length = arr.length,
	        i;
	    for (i = 0; i < length; i++) {
	      if (arr[i] === value) {
	        return i;
	      }
	    }
	    return -1;
	  }
	  function findByPred(arr, pred) {
	    var length = arr.length,
	        i;
	    for (i = 0; i < length; i++) {
	      if (pred(arr[i])) {
	        return i;
	      }
	    }
	    return -1;
	  }
	  function cloneArray(input) {
	    var length = input.length,
	        result = new Array(length),
	        i;
	    for (i = 0; i < length; i++) {
	      result[i] = input[i];
	    }
	    return result;
	  }
	  function remove(input, index) {
	    var length = input.length,
	        result,
	        i,
	        j;
	    if (index >= 0 && index < length) {
	      if (length === 1) {
	        return [];
	      } else {
	        result = new Array(length - 1);
	        for (i = 0, j = 0; i < length; i++) {
	          if (i !== index) {
	            result[j] = input[i];
	            j++;
	          }
	        }
	        return result;
	      }
	    } else {
	      return input;
	    }
	  }
	  function removeByPred(input, pred) {
	    return remove(input, findByPred(input, pred));
	  }
	  function map(input, fn) {
	    var length = input.length,
	        result = new Array(length),
	        i;
	    for (i = 0; i < length; i++) {
	      result[i] = fn(input[i]);
	    }
	    return result;
	  }
	  function forEach(arr, fn) {
	    var length = arr.length,
	        i;
	    for (i = 0; i < length; i++) {
	      fn(arr[i]);
	    }
	  }
	  function fillArray(arr, value) {
	    var length = arr.length,
	        i;
	    for (i = 0; i < length; i++) {
	      arr[i] = value;
	    }
	  }
	  function contains(arr, value) {
	    return find(arr, value) !== -1;
	  }
	  function rest(arr, start, onEmpty) {
	    if (arr.length > start) {
	      return Array.prototype.slice.call(arr, start);
	    }
	    return onEmpty;
	  }
	  function slide(cur, next, max) {
	    var length = Math.min(max, cur.length + 1),
	        offset = cur.length - length + 1,
	        result = new Array(length),
	        i;
	    for (i = offset; i < length; i++) {
	      result[i - offset] = cur[i];
	    }
	    result[length - 1] = next;
	    return result;
	  }
	  function isEqualArrays(a, b) {
	    var length,
	        i;
	    if (a == null && b == null) {
	      return true;
	    }
	    if (a == null || b == null) {
	      return false;
	    }
	    if (a.length !== b.length) {
	      return false;
	    }
	    for (i = 0, length = a.length; i < length; i++) {
	      if (a[i] !== b[i]) {
	        return false;
	      }
	    }
	    return true;
	  }
	  function spread(fn, length) {
	    switch (length) {
	      case 0:
	        return function(a) {
	          return fn();
	        };
	      case 1:
	        return function(a) {
	          return fn(a[0]);
	        };
	      case 2:
	        return function(a) {
	          return fn(a[0], a[1]);
	        };
	      case 3:
	        return function(a) {
	          return fn(a[0], a[1], a[2]);
	        };
	      case 4:
	        return function(a) {
	          return fn(a[0], a[1], a[2], a[3]);
	        };
	      default:
	        return function(a) {
	          return fn.apply(null, a);
	        };
	    }
	  }
	  function apply(fn, c, a) {
	    var aLength = a ? a.length : 0;
	    if (c == null) {
	      switch (aLength) {
	        case 0:
	          return fn();
	        case 1:
	          return fn(a[0]);
	        case 2:
	          return fn(a[0], a[1]);
	        case 3:
	          return fn(a[0], a[1], a[2]);
	        case 4:
	          return fn(a[0], a[1], a[2], a[3]);
	        default:
	          return fn.apply(null, a);
	      }
	    } else {
	      switch (aLength) {
	        case 0:
	          return fn.call(c);
	        default:
	          return fn.apply(c, a);
	      }
	    }
	  }
	  function get(map, key, notFound) {
	    if (map && key in map) {
	      return map[key];
	    } else {
	      return notFound;
	    }
	  }
	  function own(obj, prop) {
	    return Object.prototype.hasOwnProperty.call(obj, prop);
	  }
	  function createObj(proto) {
	    var F = function() {};
	    F.prototype = proto;
	    return new F();
	  }
	  function extend(target) {
	    var length = arguments.length,
	        i,
	        prop;
	    for (i = 1; i < length; i++) {
	      for (prop in arguments[i]) {
	        target[prop] = arguments[i][prop];
	      }
	    }
	    return target;
	  }
	  function inherit(Child, Parent) {
	    var length = arguments.length,
	        i;
	    Child.prototype = createObj(Parent.prototype);
	    Child.prototype.constructor = Child;
	    for (i = 2; i < length; i++) {
	      extend(Child.prototype, arguments[i]);
	    }
	    return Child;
	  }
	  var NOTHING = ['<nothing>'];
	  var END = 'end';
	  var VALUE = 'value';
	  var ERROR = 'error';
	  var ANY = 'any';
	  function noop() {}
	  function id(x) {
	    return x;
	  }
	  function strictEqual(a, b) {
	    return a === b;
	  }
	  function defaultDiff(a, b) {
	    return [a, b];
	  }
	  var now = Date.now ? function() {
	    return Date.now();
	  } : function() {
	    return new Date().getTime();
	  };
	  function isFn(fn) {
	    return typeof fn === 'function';
	  }
	  function isUndefined(x) {
	    return typeof x === 'undefined';
	  }
	  function isArrayLike(xs) {
	    return isArray(xs) || isArguments(xs);
	  }
	  var isArray = Array.isArray || function(xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	  };
	  var isArguments = function(xs) {
	    return Object.prototype.toString.call(xs) === '[object Arguments]';
	  };
	  if (!isArguments(arguments)) {
	    isArguments = function(obj) {
	      return !!(obj && own(obj, 'callee'));
	    };
	  }
	  function withInterval(name, mixin) {
	    function AnonymousStream(wait, args) {
	      Stream.call(this);
	      this._wait = wait;
	      this._intervalId = null;
	      var $ = this;
	      this._$onTick = function() {
	        $._onTick();
	      };
	      this._init(args);
	    }
	    inherit(AnonymousStream, Stream, {
	      _name: name,
	      _init: function(args) {},
	      _free: function() {},
	      _onTick: function() {},
	      _onActivation: function() {
	        this._intervalId = setInterval(this._$onTick, this._wait);
	      },
	      _onDeactivation: function() {
	        if (this._intervalId !== null) {
	          clearInterval(this._intervalId);
	          this._intervalId = null;
	        }
	      },
	      _clear: function() {
	        Stream.prototype._clear.call(this);
	        this._$onTick = null;
	        this._free();
	      }
	    }, mixin);
	    Kefir[name] = function(wait) {
	      return new AnonymousStream(wait, rest(arguments, 1, []));
	    };
	  }
	  function withOneSource(name, mixin, options) {
	    options = extend({
	      streamMethod: function(StreamClass, PropertyClass) {
	        return function() {
	          return new StreamClass(this, arguments);
	        };
	      },
	      propertyMethod: function(StreamClass, PropertyClass) {
	        return function() {
	          return new PropertyClass(this, arguments);
	        };
	      }
	    }, options || {});
	    mixin = extend({
	      _init: function(args) {},
	      _free: function() {},
	      _handleValue: function(x, isCurrent) {
	        this._send(VALUE, x, isCurrent);
	      },
	      _handleError: function(x, isCurrent) {
	        this._send(ERROR, x, isCurrent);
	      },
	      _handleEnd: function(__, isCurrent) {
	        this._send(END, null, isCurrent);
	      },
	      _handleAny: function(event) {
	        switch (event.type) {
	          case VALUE:
	            this._handleValue(event.value, event.current);
	            break;
	          case ERROR:
	            this._handleError(event.value, event.current);
	            break;
	          case END:
	            this._handleEnd(event.value, event.current);
	            break;
	        }
	      },
	      _onActivation: function() {
	        this._source.onAny(this._$handleAny);
	      },
	      _onDeactivation: function() {
	        this._source.offAny(this._$handleAny);
	      }
	    }, mixin || {});
	    function buildClass(BaseClass) {
	      function AnonymousObservable(source, args) {
	        BaseClass.call(this);
	        this._source = source;
	        this._name = source._name + '.' + name;
	        this._init(args);
	        var $ = this;
	        this._$handleAny = function(event) {
	          $._handleAny(event);
	        };
	      }
	      inherit(AnonymousObservable, BaseClass, {_clear: function() {
	          BaseClass.prototype._clear.call(this);
	          this._source = null;
	          this._$handleAny = null;
	          this._free();
	        }}, mixin);
	      return AnonymousObservable;
	    }
	    var AnonymousStream = buildClass(Stream);
	    var AnonymousProperty = buildClass(Property);
	    if (options.streamMethod) {
	      Stream.prototype[name] = options.streamMethod(AnonymousStream, AnonymousProperty);
	    }
	    if (options.propertyMethod) {
	      Property.prototype[name] = options.propertyMethod(AnonymousStream, AnonymousProperty);
	    }
	  }
	  function withTwoSources(name, mixin) {
	    mixin = extend({
	      _init: function(args) {},
	      _free: function() {},
	      _handlePrimaryValue: function(x, isCurrent) {
	        this._send(VALUE, x, isCurrent);
	      },
	      _handlePrimaryError: function(x, isCurrent) {
	        this._send(ERROR, x, isCurrent);
	      },
	      _handlePrimaryEnd: function(__, isCurrent) {
	        this._send(END, null, isCurrent);
	      },
	      _handleSecondaryValue: function(x, isCurrent) {
	        this._lastSecondary = x;
	      },
	      _handleSecondaryError: function(x, isCurrent) {
	        this._send(ERROR, x, isCurrent);
	      },
	      _handleSecondaryEnd: function(__, isCurrent) {},
	      _handlePrimaryAny: function(event) {
	        switch (event.type) {
	          case VALUE:
	            this._handlePrimaryValue(event.value, event.current);
	            break;
	          case ERROR:
	            this._handlePrimaryError(event.value, event.current);
	            break;
	          case END:
	            this._handlePrimaryEnd(event.value, event.current);
	            break;
	        }
	      },
	      _handleSecondaryAny: function(event) {
	        switch (event.type) {
	          case VALUE:
	            this._handleSecondaryValue(event.value, event.current);
	            break;
	          case ERROR:
	            this._handleSecondaryError(event.value, event.current);
	            break;
	          case END:
	            this._handleSecondaryEnd(event.value, event.current);
	            this._removeSecondary();
	            break;
	        }
	      },
	      _removeSecondary: function() {
	        if (this._secondary !== null) {
	          this._secondary.offAny(this._$handleSecondaryAny);
	          this._$handleSecondaryAny = null;
	          this._secondary = null;
	        }
	      },
	      _onActivation: function() {
	        if (this._secondary !== null) {
	          this._secondary.onAny(this._$handleSecondaryAny);
	        }
	        if (this._alive) {
	          this._primary.onAny(this._$handlePrimaryAny);
	        }
	      },
	      _onDeactivation: function() {
	        if (this._secondary !== null) {
	          this._secondary.offAny(this._$handleSecondaryAny);
	        }
	        this._primary.offAny(this._$handlePrimaryAny);
	      }
	    }, mixin || {});
	    function buildClass(BaseClass) {
	      function AnonymousObservable(primary, secondary, args) {
	        BaseClass.call(this);
	        this._primary = primary;
	        this._secondary = secondary;
	        this._name = primary._name + '.' + name;
	        this._lastSecondary = NOTHING;
	        var $ = this;
	        this._$handleSecondaryAny = function(event) {
	          $._handleSecondaryAny(event);
	        };
	        this._$handlePrimaryAny = function(event) {
	          $._handlePrimaryAny(event);
	        };
	        this._init(args);
	      }
	      inherit(AnonymousObservable, BaseClass, {_clear: function() {
	          BaseClass.prototype._clear.call(this);
	          this._primary = null;
	          this._secondary = null;
	          this._lastSecondary = null;
	          this._$handleSecondaryAny = null;
	          this._$handlePrimaryAny = null;
	          this._free();
	        }}, mixin);
	      return AnonymousObservable;
	    }
	    var AnonymousStream = buildClass(Stream);
	    var AnonymousProperty = buildClass(Property);
	    Stream.prototype[name] = function(secondary) {
	      return new AnonymousStream(this, secondary, rest(arguments, 1, []));
	    };
	    Property.prototype[name] = function(secondary) {
	      return new AnonymousProperty(this, secondary, rest(arguments, 1, []));
	    };
	  }
	  function Subscribers() {
	    this._items = [];
	  }
	  extend(Subscribers, {
	    callOne: function(fnData, event) {
	      if (fnData.type === ANY) {
	        fnData.fn(event);
	      } else if (fnData.type === event.type) {
	        if (fnData.type === VALUE || fnData.type === ERROR) {
	          fnData.fn(event.value);
	        } else {
	          fnData.fn();
	        }
	      }
	    },
	    callOnce: function(type, fn, event) {
	      if (type === ANY) {
	        fn(event);
	      } else if (type === event.type) {
	        if (type === VALUE || type === ERROR) {
	          fn(event.value);
	        } else {
	          fn();
	        }
	      }
	    }
	  });
	  extend(Subscribers.prototype, {
	    add: function(type, fn, _key) {
	      this._items = concat(this._items, [{
	        type: type,
	        fn: fn,
	        key: _key || null
	      }]);
	    },
	    remove: function(type, fn, _key) {
	      var pred = isArray(_key) ? function(fnData) {
	        return fnData.type === type && isEqualArrays(fnData.key, _key);
	      } : function(fnData) {
	        return fnData.type === type && fnData.fn === fn;
	      };
	      this._items = removeByPred(this._items, pred);
	    },
	    callAll: function(event) {
	      var items = this._items;
	      for (var i = 0; i < items.length; i++) {
	        Subscribers.callOne(items[i], event);
	      }
	    },
	    isEmpty: function() {
	      return this._items.length === 0;
	    }
	  });
	  function Event(type, value, current) {
	    return {
	      type: type,
	      value: value,
	      current: !!current
	    };
	  }
	  var CURRENT_END = Event(END, undefined, true);
	  function Observable() {
	    this._subscribers = new Subscribers();
	    this._active = false;
	    this._alive = true;
	  }
	  Kefir.Observable = Observable;
	  extend(Observable.prototype, {
	    _name: 'observable',
	    _onActivation: function() {},
	    _onDeactivation: function() {},
	    _setActive: function(active) {
	      if (this._active !== active) {
	        this._active = active;
	        if (active) {
	          this._onActivation();
	        } else {
	          this._onDeactivation();
	        }
	      }
	    },
	    _clear: function() {
	      this._setActive(false);
	      this._alive = false;
	      this._subscribers = null;
	    },
	    _send: function(type, x, isCurrent) {
	      if (this._alive) {
	        this._subscribers.callAll(Event(type, x, isCurrent));
	        if (type === END) {
	          this._clear();
	        }
	      }
	    },
	    _on: function(type, fn, _key) {
	      if (this._alive) {
	        this._subscribers.add(type, fn, _key);
	        this._setActive(true);
	      } else {
	        Subscribers.callOnce(type, fn, CURRENT_END);
	      }
	      return this;
	    },
	    _off: function(type, fn, _key) {
	      if (this._alive) {
	        this._subscribers.remove(type, fn, _key);
	        if (this._subscribers.isEmpty()) {
	          this._setActive(false);
	        }
	      }
	      return this;
	    },
	    onValue: function(fn, _key) {
	      return this._on(VALUE, fn, _key);
	    },
	    onError: function(fn, _key) {
	      return this._on(ERROR, fn, _key);
	    },
	    onEnd: function(fn, _key) {
	      return this._on(END, fn, _key);
	    },
	    onAny: function(fn, _key) {
	      return this._on(ANY, fn, _key);
	    },
	    offValue: function(fn, _key) {
	      return this._off(VALUE, fn, _key);
	    },
	    offError: function(fn, _key) {
	      return this._off(ERROR, fn, _key);
	    },
	    offEnd: function(fn, _key) {
	      return this._off(END, fn, _key);
	    },
	    offAny: function(fn, _key) {
	      return this._off(ANY, fn, _key);
	    }
	  });
	  Observable.prototype.toString = function() {
	    return '[' + this._name + ']';
	  };
	  function Stream() {
	    Observable.call(this);
	  }
	  Kefir.Stream = Stream;
	  inherit(Stream, Observable, {_name: 'stream'});
	  function Property() {
	    Observable.call(this);
	    this._current = NOTHING;
	    this._currentError = NOTHING;
	  }
	  Kefir.Property = Property;
	  inherit(Property, Observable, {
	    _name: 'property',
	    _send: function(type, x, isCurrent) {
	      if (this._alive) {
	        if (!isCurrent) {
	          this._subscribers.callAll(Event(type, x));
	        }
	        if (type === VALUE) {
	          this._current = x;
	        }
	        if (type === ERROR) {
	          this._currentError = x;
	        }
	        if (type === END) {
	          this._clear();
	        }
	      }
	    },
	    _on: function(type, fn, _key) {
	      if (this._alive) {
	        this._subscribers.add(type, fn, _key);
	        this._setActive(true);
	      }
	      if (this._current !== NOTHING) {
	        Subscribers.callOnce(type, fn, Event(VALUE, this._current, true));
	      }
	      if (this._currentError !== NOTHING) {
	        Subscribers.callOnce(type, fn, Event(ERROR, this._currentError, true));
	      }
	      if (!this._alive) {
	        Subscribers.callOnce(type, fn, CURRENT_END);
	      }
	      return this;
	    }
	  });
	  Observable.prototype.log = function(name) {
	    name = name || this.toString();
	    this.onAny(function(event) {
	      var typeStr = '<' + event.type + (event.current ? ':current' : '') + '>';
	      if (event.type === VALUE || event.type === ERROR) {
	        console.log(name, typeStr, event.value);
	      } else {
	        console.log(name, typeStr);
	      }
	    }, ['__logKey__', this, name]);
	    return this;
	  };
	  Observable.prototype.offLog = function(name) {
	    name = name || this.toString();
	    this.offAny(null, ['__logKey__', this, name]);
	    return this;
	  };
	  withInterval('withInterval', {
	    _init: function(args) {
	      this._fn = args[0];
	      var $ = this;
	      this._emitter = {
	        emit: function(x) {
	          $._send(VALUE, x);
	        },
	        error: function(x) {
	          $._send(ERROR, x);
	        },
	        end: function() {
	          $._send(END);
	        }
	      };
	    },
	    _free: function() {
	      this._fn = null;
	      this._emitter = null;
	    },
	    _onTick: function() {
	      this._fn(this._emitter);
	    }
	  });
	  withInterval('fromPoll', {
	    _init: function(args) {
	      this._fn = args[0];
	    },
	    _free: function() {
	      this._fn = null;
	    },
	    _onTick: function() {
	      this._send(VALUE, this._fn());
	    }
	  });
	  withInterval('interval', {
	    _init: function(args) {
	      this._x = args[0];
	    },
	    _free: function() {
	      this._x = null;
	    },
	    _onTick: function() {
	      this._send(VALUE, this._x);
	    }
	  });
	  withInterval('sequentially', {
	    _init: function(args) {
	      this._xs = cloneArray(args[0]);
	      if (this._xs.length === 0) {
	        this._send(END);
	      }
	    },
	    _free: function() {
	      this._xs = null;
	    },
	    _onTick: function() {
	      switch (this._xs.length) {
	        case 1:
	          this._send(VALUE, this._xs[0]);
	          this._send(END);
	          break;
	        default:
	          this._send(VALUE, this._xs.shift());
	      }
	    }
	  });
	  withInterval('repeatedly', {
	    _init: function(args) {
	      this._xs = cloneArray(args[0]);
	      this._i = -1;
	    },
	    _onTick: function() {
	      if (this._xs.length > 0) {
	        this._i = (this._i + 1) % this._xs.length;
	        this._send(VALUE, this._xs[this._i]);
	      }
	    }
	  });
	  withInterval('later', {
	    _init: function(args) {
	      this._x = args[0];
	    },
	    _free: function() {
	      this._x = null;
	    },
	    _onTick: function() {
	      this._send(VALUE, this._x);
	      this._send(END);
	    }
	  });
	  function _AbstractPool(options) {
	    Stream.call(this);
	    this._queueLim = get(options, 'queueLim', 0);
	    this._concurLim = get(options, 'concurLim', -1);
	    this._drop = get(options, 'drop', 'new');
	    if (this._concurLim === 0) {
	      throw new Error('options.concurLim can\'t be 0');
	    }
	    var $ = this;
	    this._$handleSubAny = function(event) {
	      $._handleSubAny(event);
	    };
	    this._queue = [];
	    this._curSources = [];
	    this._activating = false;
	  }
	  inherit(_AbstractPool, Stream, {
	    _name: 'abstractPool',
	    _add: function(obj, toObs) {
	      toObs = toObs || id;
	      if (this._concurLim === -1 || this._curSources.length < this._concurLim) {
	        this._addToCur(toObs(obj));
	      } else {
	        if (this._queueLim === -1 || this._queue.length < this._queueLim) {
	          this._addToQueue(toObs(obj));
	        } else if (this._drop === 'old') {
	          this._removeOldest();
	          this._add(toObs(obj));
	        }
	      }
	    },
	    _addAll: function(obss) {
	      var $ = this;
	      forEach(obss, function(obs) {
	        $._add(obs);
	      });
	    },
	    _remove: function(obs) {
	      if (this._removeCur(obs) === -1) {
	        this._removeQueue(obs);
	      }
	    },
	    _addToQueue: function(obs) {
	      this._queue = concat(this._queue, [obs]);
	    },
	    _addToCur: function(obs) {
	      this._curSources = concat(this._curSources, [obs]);
	      if (this._active) {
	        this._subscribe(obs);
	      }
	    },
	    _subscribe: function(obs) {
	      var $ = this;
	      obs.onAny(this._$handleSubAny);
	      obs.onEnd(function() {
	        $._removeCur(obs);
	      }, [this, obs]);
	    },
	    _unsubscribe: function(obs) {
	      obs.offAny(this._$handleSubAny);
	      obs.offEnd(null, [this, obs]);
	    },
	    _handleSubAny: function(event) {
	      if (event.type === VALUE || event.type === ERROR) {
	        this._send(event.type, event.value, event.current && this._activating);
	      }
	    },
	    _removeQueue: function(obs) {
	      var index = find(this._queue, obs);
	      this._queue = remove(this._queue, index);
	      return index;
	    },
	    _removeCur: function(obs) {
	      if (this._active) {
	        this._unsubscribe(obs);
	      }
	      var index = find(this._curSources, obs);
	      this._curSources = remove(this._curSources, index);
	      if (index !== -1) {
	        if (this._queue.length !== 0) {
	          this._pullQueue();
	        } else if (this._curSources.length === 0) {
	          this._onEmpty();
	        }
	      }
	      return index;
	    },
	    _removeOldest: function() {
	      this._removeCur(this._curSources[0]);
	    },
	    _pullQueue: function() {
	      if (this._queue.length !== 0) {
	        this._queue = cloneArray(this._queue);
	        this._addToCur(this._queue.shift());
	      }
	    },
	    _onActivation: function() {
	      var sources = this._curSources,
	          i;
	      this._activating = true;
	      for (i = 0; i < sources.length; i++) {
	        this._subscribe(sources[i]);
	      }
	      this._activating = false;
	    },
	    _onDeactivation: function() {
	      var sources = this._curSources,
	          i;
	      for (i = 0; i < sources.length; i++) {
	        this._unsubscribe(sources[i]);
	      }
	    },
	    _isEmpty: function() {
	      return this._curSources.length === 0;
	    },
	    _onEmpty: function() {},
	    _clear: function() {
	      Stream.prototype._clear.call(this);
	      this._queue = null;
	      this._curSources = null;
	      this._$handleSubAny = null;
	    }
	  });
	  var MergeLike = {_onEmpty: function() {
	      if (this._initialised) {
	        this._send(END, null, this._activating);
	      }
	    }};
	  function Merge(sources) {
	    _AbstractPool.call(this);
	    if (sources.length === 0) {
	      this._send(END);
	    } else {
	      this._addAll(sources);
	    }
	    this._initialised = true;
	  }
	  inherit(Merge, _AbstractPool, extend({_name: 'merge'}, MergeLike));
	  Kefir.merge = function(obss) {
	    return new Merge(obss);
	  };
	  Observable.prototype.merge = function(other) {
	    return Kefir.merge([this, other]);
	  };
	  function Concat(sources) {
	    _AbstractPool.call(this, {
	      concurLim: 1,
	      queueLim: -1
	    });
	    if (sources.length === 0) {
	      this._send(END);
	    } else {
	      this._addAll(sources);
	    }
	    this._initialised = true;
	  }
	  inherit(Concat, _AbstractPool, extend({_name: 'concat'}, MergeLike));
	  Kefir.concat = function(obss) {
	    return new Concat(obss);
	  };
	  Observable.prototype.concat = function(other) {
	    return Kefir.concat([this, other]);
	  };
	  function Pool() {
	    _AbstractPool.call(this);
	  }
	  inherit(Pool, _AbstractPool, {
	    _name: 'pool',
	    plug: function(obs) {
	      this._add(obs);
	      return this;
	    },
	    unplug: function(obs) {
	      this._remove(obs);
	      return this;
	    }
	  });
	  Kefir.pool = function() {
	    return new Pool();
	  };
	  function Bus() {
	    _AbstractPool.call(this);
	  }
	  inherit(Bus, _AbstractPool, {
	    _name: 'bus',
	    plug: function(obs) {
	      this._add(obs);
	      return this;
	    },
	    unplug: function(obs) {
	      this._remove(obs);
	      return this;
	    },
	    emit: function(x) {
	      this._send(VALUE, x);
	      return this;
	    },
	    error: function(x) {
	      this._send(ERROR, x);
	      return this;
	    },
	    end: function() {
	      this._send(END);
	      return this;
	    }
	  });
	  Kefir.bus = function() {
	    return new Bus();
	  };
	  function FlatMap(source, fn, options) {
	    _AbstractPool.call(this, options);
	    this._source = source;
	    this._fn = fn || id;
	    this._mainEnded = false;
	    this._lastCurrent = null;
	    var $ = this;
	    this._$handleMainSource = function(event) {
	      $._handleMainSource(event);
	    };
	  }
	  inherit(FlatMap, _AbstractPool, {
	    _onActivation: function() {
	      _AbstractPool.prototype._onActivation.call(this);
	      if (this._active) {
	        this._activating = true;
	        this._source.onAny(this._$handleMainSource);
	        this._activating = false;
	      }
	    },
	    _onDeactivation: function() {
	      _AbstractPool.prototype._onDeactivation.call(this);
	      this._source.offAny(this._$handleMainSource);
	    },
	    _handleMainSource: function(event) {
	      if (event.type === VALUE) {
	        if (!event.current || this._lastCurrent !== event.value) {
	          this._add(event.value, this._fn);
	        }
	        this._lastCurrent = event.value;
	      }
	      if (event.type === ERROR) {
	        this._send(ERROR, event.value, event.current);
	      }
	      if (event.type === END) {
	        if (this._isEmpty()) {
	          this._send(END, null, event.current);
	        } else {
	          this._mainEnded = true;
	        }
	      }
	    },
	    _onEmpty: function() {
	      if (this._mainEnded) {
	        this._send(END);
	      }
	    },
	    _clear: function() {
	      _AbstractPool.prototype._clear.call(this);
	      this._source = null;
	      this._lastCurrent = null;
	      this._$handleMainSource = null;
	    }
	  });
	  Observable.prototype.flatMap = function(fn) {
	    return new FlatMap(this, fn).setName(this, 'flatMap');
	  };
	  Observable.prototype.flatMapLatest = function(fn) {
	    return new FlatMap(this, fn, {
	      concurLim: 1,
	      drop: 'old'
	    }).setName(this, 'flatMapLatest');
	  };
	  Observable.prototype.flatMapFirst = function(fn) {
	    return new FlatMap(this, fn, {concurLim: 1}).setName(this, 'flatMapFirst');
	  };
	  Observable.prototype.flatMapConcat = function(fn) {
	    return new FlatMap(this, fn, {
	      queueLim: -1,
	      concurLim: 1
	    }).setName(this, 'flatMapConcat');
	  };
	  Observable.prototype.flatMapConcurLimit = function(fn, limit) {
	    var result;
	    if (limit === 0) {
	      result = Kefir.never();
	    } else {
	      if (limit < 0) {
	        limit = -1;
	      }
	      result = new FlatMap(this, fn, {
	        queueLim: -1,
	        concurLim: limit
	      });
	    }
	    return result.setName(this, 'flatMapConcurLimit');
	  };
	  function Zip(sources, combinator) {
	    Stream.call(this);
	    if (sources.length === 0) {
	      this._send(END);
	    } else {
	      this._buffers = map(sources, function(source) {
	        return isArray(source) ? cloneArray(source) : [];
	      });
	      this._sources = map(sources, function(source) {
	        return isArray(source) ? Kefir.never() : source;
	      });
	      this._combinator = combinator ? spread(combinator, this._sources.length) : id;
	      this._aliveCount = 0;
	    }
	  }
	  inherit(Zip, Stream, {
	    _name: 'zip',
	    _onActivation: function() {
	      var i,
	          length = this._sources.length;
	      this._drainArrays();
	      this._aliveCount = length;
	      for (i = 0; i < length; i++) {
	        this._sources[i].onAny(this._bindHandleAny(i), [this, i]);
	      }
	    },
	    _onDeactivation: function() {
	      for (var i = 0; i < this._sources.length; i++) {
	        this._sources[i].offAny(null, [this, i]);
	      }
	    },
	    _emit: function(isCurrent) {
	      var values = new Array(this._buffers.length);
	      for (var i = 0; i < this._buffers.length; i++) {
	        values[i] = this._buffers[i].shift();
	      }
	      this._send(VALUE, this._combinator(values), isCurrent);
	    },
	    _isFull: function() {
	      for (var i = 0; i < this._buffers.length; i++) {
	        if (this._buffers[i].length === 0) {
	          return false;
	        }
	      }
	      return true;
	    },
	    _emitIfFull: function(isCurrent) {
	      if (this._isFull()) {
	        this._emit(isCurrent);
	      }
	    },
	    _drainArrays: function() {
	      while (this._isFull()) {
	        this._emit(true);
	      }
	    },
	    _bindHandleAny: function(i) {
	      var $ = this;
	      return function(event) {
	        $._handleAny(i, event);
	      };
	    },
	    _handleAny: function(i, event) {
	      if (event.type === VALUE) {
	        this._buffers[i].push(event.value);
	        this._emitIfFull(event.current);
	      }
	      if (event.type === ERROR) {
	        this._send(ERROR, event.value, event.current);
	      }
	      if (event.type === END) {
	        this._aliveCount--;
	        if (this._aliveCount === 0) {
	          this._send(END, null, event.current);
	        }
	      }
	    },
	    _clear: function() {
	      Stream.prototype._clear.call(this);
	      this._sources = null;
	      this._buffers = null;
	      this._combinator = null;
	    }
	  });
	  Kefir.zip = function(sources, combinator) {
	    return new Zip(sources, combinator);
	  };
	  Observable.prototype.zip = function(other, combinator) {
	    return new Zip([this, other], combinator);
	  };
	  function SampledBy(passive, active, combinator) {
	    Stream.call(this);
	    if (active.length === 0) {
	      this._send(END);
	    } else {
	      this._passiveCount = passive.length;
	      this._sources = concat(passive, active);
	      this._combinator = combinator ? spread(combinator, this._sources.length) : id;
	      this._aliveCount = 0;
	      this._currents = new Array(this._sources.length);
	      fillArray(this._currents, NOTHING);
	      this._activating = false;
	      this._emitAfterActivation = false;
	      this._endAfterActivation = false;
	    }
	  }
	  inherit(SampledBy, Stream, {
	    _name: 'sampledBy',
	    _onActivation: function() {
	      var length = this._sources.length,
	          i;
	      this._aliveCount = length - this._passiveCount;
	      this._activating = true;
	      for (i = 0; i < length; i++) {
	        this._sources[i].onAny(this._bindHandleAny(i), [this, i]);
	      }
	      this._activating = false;
	      if (this._emitAfterActivation) {
	        this._emitAfterActivation = false;
	        this._emitIfFull(true);
	      }
	      if (this._endAfterActivation) {
	        this._send(END, null, true);
	      }
	    },
	    _onDeactivation: function() {
	      var length = this._sources.length,
	          i;
	      for (i = 0; i < length; i++) {
	        this._sources[i].offAny(null, [this, i]);
	      }
	    },
	    _emitIfFull: function(isCurrent) {
	      if (!contains(this._currents, NOTHING)) {
	        var combined = cloneArray(this._currents);
	        combined = this._combinator(combined);
	        this._send(VALUE, combined, isCurrent);
	      }
	    },
	    _bindHandleAny: function(i) {
	      var $ = this;
	      return function(event) {
	        $._handleAny(i, event);
	      };
	    },
	    _handleAny: function(i, event) {
	      if (event.type === VALUE) {
	        this._currents[i] = event.value;
	        if (i >= this._passiveCount) {
	          if (this._activating) {
	            this._emitAfterActivation = true;
	          } else {
	            this._emitIfFull(event.current);
	          }
	        }
	      }
	      if (event.type === ERROR) {
	        this._send(ERROR, event.value, event.current);
	      }
	      if (event.type === END) {
	        if (i >= this._passiveCount) {
	          this._aliveCount--;
	          if (this._aliveCount === 0) {
	            if (this._activating) {
	              this._endAfterActivation = true;
	            } else {
	              this._send(END, null, event.current);
	            }
	          }
	        }
	      }
	    },
	    _clear: function() {
	      Stream.prototype._clear.call(this);
	      this._sources = null;
	      this._currents = null;
	      this._combinator = null;
	    }
	  });
	  Kefir.sampledBy = function(passive, active, combinator) {
	    return new SampledBy(passive, active, combinator);
	  };
	  Observable.prototype.sampledBy = function(other, combinator) {
	    return Kefir.sampledBy([this], [other], combinator || id);
	  };
	  Kefir.combine = function(sources, combinator) {
	    return new SampledBy([], sources, combinator).setName('combine');
	  };
	  Observable.prototype.combine = function(other, combinator) {
	    return Kefir.combine([this, other], combinator);
	  };
	  function produceStream(StreamClass, PropertyClass) {
	    return function() {
	      return new StreamClass(this, arguments);
	    };
	  }
	  function produceProperty(StreamClass, PropertyClass) {
	    return function() {
	      return new PropertyClass(this, arguments);
	    };
	  }
	  withOneSource('toProperty', {_init: function(args) {
	      if (args.length > 0) {
	        this._send(VALUE, args[0]);
	      }
	    }}, {
	    propertyMethod: produceProperty,
	    streamMethod: produceProperty
	  });
	  withOneSource('changes', {
	    _handleValue: function(x, isCurrent) {
	      if (!isCurrent) {
	        this._send(VALUE, x);
	      }
	    },
	    _handleError: function(x, isCurrent) {
	      if (!isCurrent) {
	        this._send(ERROR, x);
	      }
	    }
	  }, {
	    streamMethod: function() {
	      return function() {
	        return this;
	      };
	    },
	    propertyMethod: produceStream
	  });
	  withOneSource('withHandler', {
	    _init: function(args) {
	      this._handler = args[0];
	      this._forcedCurrent = false;
	      var $ = this;
	      this._emitter = {
	        emit: function(x) {
	          $._send(VALUE, x, $._forcedCurrent);
	        },
	        error: function(x) {
	          $._send(ERROR, x, $._forcedCurrent);
	        },
	        end: function() {
	          $._send(END, null, $._forcedCurrent);
	        }
	      };
	    },
	    _free: function() {
	      this._handler = null;
	      this._emitter = null;
	    },
	    _handleAny: function(event) {
	      this._forcedCurrent = event.current;
	      this._handler(this._emitter, event);
	      this._forcedCurrent = false;
	    }
	  });
	  withOneSource('flatten', {
	    _init: function(args) {
	      this._fn = args[0] ? args[0] : id;
	    },
	    _free: function() {
	      this._fn = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      var xs = this._fn(x);
	      for (var i = 0; i < xs.length; i++) {
	        this._send(VALUE, xs[i], isCurrent);
	      }
	    }
	  });
	  function xformForObs(obs) {
	    return {
	      step: function(res, input) {
	        obs._send(VALUE, input, obs._forcedCurrent);
	        return null;
	      },
	      result: function(res) {
	        obs._send(END, null, obs._forcedCurrent);
	        return null;
	      }
	    };
	  }
	  withOneSource('transduce', {
	    _init: function(args) {
	      this._xform = args[0](xformForObs(this));
	    },
	    _free: function() {
	      this._xform = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      this._forcedCurrent = isCurrent;
	      if (this._xform.step(null, x) !== null) {
	        this._xform.result(null);
	      }
	      this._forcedCurrent = false;
	    },
	    _handleEnd: function(__, isCurrent) {
	      this._forcedCurrent = isCurrent;
	      this._xform.result(null);
	      this._forcedCurrent = false;
	    }
	  });
	  var withFnArgMixin = {
	    _init: function(args) {
	      this._fn = args[0] || id;
	    },
	    _free: function() {
	      this._fn = null;
	    }
	  };
	  withOneSource('map', extend({_handleValue: function(x, isCurrent) {
	      this._send(VALUE, this._fn(x), isCurrent);
	    }}, withFnArgMixin));
	  withOneSource('mapErrors', extend({_handleError: function(x, isCurrent) {
	      this._send(ERROR, this._fn(x), isCurrent);
	    }}, withFnArgMixin));
	  function defaultErrorsToValuesHandler(x) {
	    return {
	      convert: true,
	      value: x
	    };
	  }
	  withOneSource('errorsToValues', extend({
	    _init: function(args) {
	      this._fn = args[0] || defaultErrorsToValuesHandler;
	    },
	    _free: function() {
	      this._fn = null;
	    },
	    _handleError: function(x, isCurrent) {
	      var result = this._fn(x);
	      var type = result.convert ? VALUE : ERROR;
	      var newX = result.convert ? result.value : x;
	      this._send(type, newX, isCurrent);
	    }
	  }));
	  function defaultValuesToErrorsHandler(x) {
	    return {
	      convert: true,
	      error: x
	    };
	  }
	  withOneSource('valuesToErrors', extend({
	    _init: function(args) {
	      this._fn = args[0] || defaultValuesToErrorsHandler;
	    },
	    _free: function() {
	      this._fn = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      var result = this._fn(x);
	      var type = result.convert ? ERROR : VALUE;
	      var newX = result.convert ? result.error : x;
	      this._send(type, newX, isCurrent);
	    }
	  }));
	  withOneSource('filter', extend({_handleValue: function(x, isCurrent) {
	      if (this._fn(x)) {
	        this._send(VALUE, x, isCurrent);
	      }
	    }}, withFnArgMixin));
	  withOneSource('filterErrors', extend({_handleError: function(x, isCurrent) {
	      if (this._fn(x)) {
	        this._send(ERROR, x, isCurrent);
	      }
	    }}, withFnArgMixin));
	  withOneSource('takeWhile', extend({_handleValue: function(x, isCurrent) {
	      if (this._fn(x)) {
	        this._send(VALUE, x, isCurrent);
	      } else {
	        this._send(END, null, isCurrent);
	      }
	    }}, withFnArgMixin));
	  withOneSource('take', {
	    _init: function(args) {
	      this._n = args[0];
	      if (this._n <= 0) {
	        this._send(END);
	      }
	    },
	    _handleValue: function(x, isCurrent) {
	      this._n--;
	      this._send(VALUE, x, isCurrent);
	      if (this._n === 0) {
	        this._send(END, null, isCurrent);
	      }
	    }
	  });
	  withOneSource('skip', {
	    _init: function(args) {
	      this._n = Math.max(0, args[0]);
	    },
	    _handleValue: function(x, isCurrent) {
	      if (this._n === 0) {
	        this._send(VALUE, x, isCurrent);
	      } else {
	        this._n--;
	      }
	    }
	  });
	  withOneSource('skipDuplicates', {
	    _init: function(args) {
	      this._fn = args[0] || strictEqual;
	      this._prev = NOTHING;
	    },
	    _free: function() {
	      this._fn = null;
	      this._prev = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      if (this._prev === NOTHING || !this._fn(this._prev, x)) {
	        this._prev = x;
	        this._send(VALUE, x, isCurrent);
	      }
	    }
	  });
	  withOneSource('skipWhile', {
	    _init: function(args) {
	      this._fn = args[0] || id;
	      this._skip = true;
	    },
	    _free: function() {
	      this._fn = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      if (!this._skip) {
	        this._send(VALUE, x, isCurrent);
	        return;
	      }
	      if (!this._fn(x)) {
	        this._skip = false;
	        this._fn = null;
	        this._send(VALUE, x, isCurrent);
	      }
	    }
	  });
	  withOneSource('diff', {
	    _init: function(args) {
	      this._fn = args[0] || defaultDiff;
	      this._prev = args.length > 1 ? args[1] : NOTHING;
	    },
	    _free: function() {
	      this._prev = null;
	      this._fn = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      if (this._prev !== NOTHING) {
	        this._send(VALUE, this._fn(this._prev, x), isCurrent);
	      }
	      this._prev = x;
	    }
	  });
	  withOneSource('scan', {
	    _init: function(args) {
	      this._fn = args[0];
	      if (args.length > 1) {
	        this._send(VALUE, args[1], true);
	      }
	    },
	    _free: function() {
	      this._fn = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      if (this._current !== NOTHING) {
	        x = this._fn(this._current, x);
	      }
	      this._send(VALUE, x, isCurrent);
	    }
	  }, {streamMethod: produceProperty});
	  withOneSource('reduce', {
	    _init: function(args) {
	      this._fn = args[0];
	      this._result = args.length > 1 ? args[1] : NOTHING;
	    },
	    _free: function() {
	      this._fn = null;
	      this._result = null;
	    },
	    _handleValue: function(x) {
	      this._result = (this._result === NOTHING) ? x : this._fn(this._result, x);
	    },
	    _handleEnd: function(__, isCurrent) {
	      if (this._result !== NOTHING) {
	        this._send(VALUE, this._result, isCurrent);
	      }
	      this._send(END, null, isCurrent);
	    }
	  });
	  withOneSource('mapEnd', {
	    _init: function(args) {
	      this._fn = args[0];
	    },
	    _free: function() {
	      this._fn = null;
	    },
	    _handleEnd: function(__, isCurrent) {
	      this._send(VALUE, this._fn(), isCurrent);
	      this._send(END, null, isCurrent);
	    }
	  });
	  withOneSource('skipValues', {_handleValue: function() {}});
	  withOneSource('skipErrors', {_handleError: function() {}});
	  withOneSource('skipEnd', {_handleEnd: function() {}});
	  withOneSource('endOnError', extend({_handleError: function(x, isCurrent) {
	      this._send(ERROR, x, isCurrent);
	      this._send(END, null, isCurrent);
	    }}));
	  withOneSource('slidingWindow', {
	    _init: function(args) {
	      this._max = args[0];
	      this._min = args[1] || 0;
	      this._buff = [];
	    },
	    _free: function() {
	      this._buff = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      this._buff = slide(this._buff, x, this._max);
	      if (this._buff.length >= this._min) {
	        this._send(VALUE, this._buff, isCurrent);
	      }
	    }
	  });
	  withOneSource('bufferWhile', {
	    _init: function(args) {
	      this._fn = args[0] || id;
	      this._flushOnEnd = get(args[1], 'flushOnEnd', true);
	      this._buff = [];
	    },
	    _free: function() {
	      this._buff = null;
	    },
	    _flush: function(isCurrent) {
	      if (this._buff !== null && this._buff.length !== 0) {
	        this._send(VALUE, this._buff, isCurrent);
	        this._buff = [];
	      }
	    },
	    _handleValue: function(x, isCurrent) {
	      this._buff.push(x);
	      if (!this._fn(x)) {
	        this._flush(isCurrent);
	      }
	    },
	    _handleEnd: function(x, isCurrent) {
	      if (this._flushOnEnd) {
	        this._flush(isCurrent);
	      }
	      this._send(END, null, isCurrent);
	    }
	  });
	  withOneSource('debounce', {
	    _init: function(args) {
	      this._wait = Math.max(0, args[0]);
	      this._immediate = get(args[1], 'immediate', false);
	      this._lastAttempt = 0;
	      this._timeoutId = null;
	      this._laterValue = null;
	      this._endLater = false;
	      var $ = this;
	      this._$later = function() {
	        $._later();
	      };
	    },
	    _free: function() {
	      this._laterValue = null;
	      this._$later = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      if (isCurrent) {
	        this._send(VALUE, x, isCurrent);
	      } else {
	        this._lastAttempt = now();
	        if (this._immediate && !this._timeoutId) {
	          this._send(VALUE, x);
	        }
	        if (!this._timeoutId) {
	          this._timeoutId = setTimeout(this._$later, this._wait);
	        }
	        if (!this._immediate) {
	          this._laterValue = x;
	        }
	      }
	    },
	    _handleEnd: function(__, isCurrent) {
	      if (isCurrent) {
	        this._send(END, null, isCurrent);
	      } else {
	        if (this._timeoutId && !this._immediate) {
	          this._endLater = true;
	        } else {
	          this._send(END);
	        }
	      }
	    },
	    _later: function() {
	      var last = now() - this._lastAttempt;
	      if (last < this._wait && last >= 0) {
	        this._timeoutId = setTimeout(this._$later, this._wait - last);
	      } else {
	        this._timeoutId = null;
	        if (!this._immediate) {
	          this._send(VALUE, this._laterValue);
	          this._laterValue = null;
	        }
	        if (this._endLater) {
	          this._send(END);
	        }
	      }
	    }
	  });
	  withOneSource('throttle', {
	    _init: function(args) {
	      this._wait = Math.max(0, args[0]);
	      this._leading = get(args[1], 'leading', true);
	      this._trailing = get(args[1], 'trailing', true);
	      this._trailingValue = null;
	      this._timeoutId = null;
	      this._endLater = false;
	      this._lastCallTime = 0;
	      var $ = this;
	      this._$trailingCall = function() {
	        $._trailingCall();
	      };
	    },
	    _free: function() {
	      this._trailingValue = null;
	      this._$trailingCall = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      if (isCurrent) {
	        this._send(VALUE, x, isCurrent);
	      } else {
	        var curTime = now();
	        if (this._lastCallTime === 0 && !this._leading) {
	          this._lastCallTime = curTime;
	        }
	        var remaining = this._wait - (curTime - this._lastCallTime);
	        if (remaining <= 0) {
	          this._cancelTraling();
	          this._lastCallTime = curTime;
	          this._send(VALUE, x);
	        } else if (this._trailing) {
	          this._cancelTraling();
	          this._trailingValue = x;
	          this._timeoutId = setTimeout(this._$trailingCall, remaining);
	        }
	      }
	    },
	    _handleEnd: function(__, isCurrent) {
	      if (isCurrent) {
	        this._send(END, null, isCurrent);
	      } else {
	        if (this._timeoutId) {
	          this._endLater = true;
	        } else {
	          this._send(END);
	        }
	      }
	    },
	    _cancelTraling: function() {
	      if (this._timeoutId !== null) {
	        clearTimeout(this._timeoutId);
	        this._timeoutId = null;
	      }
	    },
	    _trailingCall: function() {
	      this._send(VALUE, this._trailingValue);
	      this._timeoutId = null;
	      this._trailingValue = null;
	      this._lastCallTime = !this._leading ? 0 : now();
	      if (this._endLater) {
	        this._send(END);
	      }
	    }
	  });
	  withOneSource('delay', {
	    _init: function(args) {
	      this._wait = Math.max(0, args[0]);
	      this._buff = [];
	      var $ = this;
	      this._$shiftBuff = function() {
	        $._send(VALUE, $._buff.shift());
	      };
	    },
	    _free: function() {
	      this._buff = null;
	      this._$shiftBuff = null;
	    },
	    _handleValue: function(x, isCurrent) {
	      if (isCurrent) {
	        this._send(VALUE, x, isCurrent);
	      } else {
	        this._buff.push(x);
	        setTimeout(this._$shiftBuff, this._wait);
	      }
	    },
	    _handleEnd: function(__, isCurrent) {
	      if (isCurrent) {
	        this._send(END, null, isCurrent);
	      } else {
	        var $ = this;
	        setTimeout(function() {
	          $._send(END);
	        }, this._wait);
	      }
	    }
	  });
	  function FromBinder(fn) {
	    Stream.call(this);
	    this._fn = fn;
	    this._unsubscribe = null;
	  }
	  inherit(FromBinder, Stream, {
	    _name: 'fromBinder',
	    _onActivation: function() {
	      var $ = this,
	          isCurrent = true,
	          emitter = {
	            emit: function(x) {
	              $._send(VALUE, x, isCurrent);
	            },
	            error: function(x) {
	              $._send(ERROR, x, isCurrent);
	            },
	            end: function() {
	              $._send(END, null, isCurrent);
	            }
	          };
	      this._unsubscribe = this._fn(emitter) || null;
	      if (!this._active && this._unsubscribe !== null) {
	        this._unsubscribe();
	        this._unsubscribe = null;
	      }
	      isCurrent = false;
	    },
	    _onDeactivation: function() {
	      if (this._unsubscribe !== null) {
	        this._unsubscribe();
	        this._unsubscribe = null;
	      }
	    },
	    _clear: function() {
	      Stream.prototype._clear.call(this);
	      this._fn = null;
	    }
	  });
	  Kefir.fromBinder = function(fn) {
	    return new FromBinder(fn);
	  };
	  function Emitter() {
	    Stream.call(this);
	  }
	  inherit(Emitter, Stream, {
	    _name: 'emitter',
	    emit: function(x) {
	      this._send(VALUE, x);
	      return this;
	    },
	    error: function(x) {
	      this._send(ERROR, x);
	      return this;
	    },
	    end: function() {
	      this._send(END);
	      return this;
	    }
	  });
	  Kefir.emitter = function() {
	    return new Emitter();
	  };
	  Kefir.Emitter = Emitter;
	  var neverObj = new Stream();
	  neverObj._send(END);
	  neverObj._name = 'never';
	  Kefir.never = function() {
	    return neverObj;
	  };
	  function Constant(x) {
	    Property.call(this);
	    this._send(VALUE, x);
	    this._send(END);
	  }
	  inherit(Constant, Property, {_name: 'constant'});
	  Kefir.constant = function(x) {
	    return new Constant(x);
	  };
	  function ConstantError(x) {
	    Property.call(this);
	    this._send(ERROR, x);
	    this._send(END);
	  }
	  inherit(ConstantError, Property, {_name: 'constantError'});
	  Kefir.constantError = function(x) {
	    return new ConstantError(x);
	  };
	  Observable.prototype.setName = function(sourceObs, selfName) {
	    this._name = selfName ? sourceObs._name + '.' + selfName : sourceObs;
	    return this;
	  };
	  Observable.prototype.mapTo = function(value) {
	    return this.map(function() {
	      return value;
	    }).setName(this, 'mapTo');
	  };
	  Observable.prototype.pluck = function(propertyName) {
	    return this.map(function(x) {
	      return x[propertyName];
	    }).setName(this, 'pluck');
	  };
	  Observable.prototype.invoke = function(methodName) {
	    var args = rest(arguments, 1);
	    return this.map(args ? function(x) {
	      return apply(x[methodName], x, args);
	    } : function(x) {
	      return x[methodName]();
	    }).setName(this, 'invoke');
	  };
	  Observable.prototype.timestamp = function() {
	    return this.map(function(x) {
	      return {
	        value: x,
	        time: now()
	      };
	    }).setName(this, 'timestamp');
	  };
	  Observable.prototype.tap = function(fn) {
	    return this.map(function(x) {
	      fn(x);
	      return x;
	    }).setName(this, 'tap');
	  };
	  Kefir.and = function(observables) {
	    return Kefir.combine(observables, and).setName('and');
	  };
	  Observable.prototype.and = function(other) {
	    return this.combine(other, and).setName('and');
	  };
	  Kefir.or = function(observables) {
	    return Kefir.combine(observables, or).setName('or');
	  };
	  Observable.prototype.or = function(other) {
	    return this.combine(other, or).setName('or');
	  };
	  Observable.prototype.not = function() {
	    return this.map(not).setName(this, 'not');
	  };
	  Observable.prototype.awaiting = function(other) {
	    return Kefir.merge([this.mapTo(true), other.mapTo(false)]).skipDuplicates().toProperty(false).setName(this, 'awaiting');
	  };
	  Kefir.fromCallback = function(callbackConsumer) {
	    var called = false;
	    return Kefir.fromBinder(function(emitter) {
	      if (!called) {
	        callbackConsumer(function(x) {
	          emitter.emit(x);
	          emitter.end();
	        });
	        called = true;
	      }
	    }).setName('fromCallback');
	  };
	  Kefir.fromNodeCallback = function(callbackConsumer) {
	    var called = false;
	    return Kefir.fromBinder(function(emitter) {
	      if (!called) {
	        callbackConsumer(function(error, x) {
	          if (error) {
	            emitter.error(error);
	          } else {
	            emitter.emit(x);
	          }
	          emitter.end();
	        });
	        called = true;
	      }
	    }).setName('fromNodeCallback');
	  };
	  Kefir.fromPromise = function(promise) {
	    var called = false;
	    return Kefir.fromBinder(function(emitter) {
	      if (!called) {
	        var onValue = function(x) {
	          emitter.emit(x);
	          emitter.end();
	        };
	        var onError = function(x) {
	          emitter.error(x);
	          emitter.end();
	        };
	        var _promise = promise.then(onValue, onError);
	        if (_promise && isFn(_promise.done)) {
	          _promise.done();
	        }
	        called = true;
	      }
	    }).toProperty().setName('fromPromise');
	  };
	  Kefir.fromSubUnsub = function(sub, unsub, transformer) {
	    return Kefir.fromBinder(function(emitter) {
	      var handler = transformer ? function() {
	        emitter.emit(apply(transformer, this, arguments));
	      } : emitter.emit;
	      sub(handler);
	      return function() {
	        unsub(handler);
	      };
	    });
	  };
	  var subUnsubPairs = [['addEventListener', 'removeEventListener'], ['addListener', 'removeListener'], ['on', 'off']];
	  Kefir.fromEvent = function(target, eventName, transformer) {
	    var pair,
	        sub,
	        unsub;
	    for (var i = 0; i < subUnsubPairs.length; i++) {
	      pair = subUnsubPairs[i];
	      if (isFn(target[pair[0]]) && isFn(target[pair[1]])) {
	        sub = pair[0];
	        unsub = pair[1];
	        break;
	      }
	    }
	    if (sub === undefined) {
	      throw new Error('target don\'t support any of ' + 'addEventListener/removeEventListener, addListener/removeListener, on/off method pair');
	    }
	    return Kefir.fromSubUnsub(function(handler) {
	      target[sub](eventName, handler);
	    }, function(handler) {
	      target[unsub](eventName, handler);
	    }, transformer).setName('fromEvent');
	  };
	  var withTwoSourcesAndBufferMixin = {
	    _init: function(args) {
	      this._buff = [];
	      this._flushOnEnd = get(args[0], 'flushOnEnd', true);
	    },
	    _free: function() {
	      this._buff = null;
	    },
	    _flush: function(isCurrent) {
	      if (this._buff !== null && this._buff.length !== 0) {
	        this._send(VALUE, this._buff, isCurrent);
	        this._buff = [];
	      }
	    },
	    _handlePrimaryEnd: function(__, isCurrent) {
	      if (this._flushOnEnd) {
	        this._flush(isCurrent);
	      }
	      this._send(END, null, isCurrent);
	    }
	  };
	  withTwoSources('bufferBy', extend({
	    _onActivation: function() {
	      this._primary.onAny(this._$handlePrimaryAny);
	      if (this._alive && this._secondary !== null) {
	        this._secondary.onAny(this._$handleSecondaryAny);
	      }
	    },
	    _handlePrimaryValue: function(x, isCurrent) {
	      this._buff.push(x);
	    },
	    _handleSecondaryValue: function(x, isCurrent) {
	      this._flush(isCurrent);
	    },
	    _handleSecondaryEnd: function(x, isCurrent) {
	      if (!this._flushOnEnd) {
	        this._send(END, null, isCurrent);
	      }
	    }
	  }, withTwoSourcesAndBufferMixin));
	  withTwoSources('bufferWhileBy', extend({
	    _handlePrimaryValue: function(x, isCurrent) {
	      this._buff.push(x);
	      if (this._lastSecondary !== NOTHING && !this._lastSecondary) {
	        this._flush(isCurrent);
	      }
	    },
	    _handleSecondaryEnd: function(x, isCurrent) {
	      if (!this._flushOnEnd && (this._lastSecondary === NOTHING || this._lastSecondary)) {
	        this._send(END, null, isCurrent);
	      }
	    }
	  }, withTwoSourcesAndBufferMixin));
	  withTwoSources('filterBy', {
	    _handlePrimaryValue: function(x, isCurrent) {
	      if (this._lastSecondary !== NOTHING && this._lastSecondary) {
	        this._send(VALUE, x, isCurrent);
	      }
	    },
	    _handleSecondaryEnd: function(__, isCurrent) {
	      if (this._lastSecondary === NOTHING || !this._lastSecondary) {
	        this._send(END, null, isCurrent);
	      }
	    }
	  });
	  withTwoSources('skipUntilBy', {
	    _handlePrimaryValue: function(x, isCurrent) {
	      if (this._lastSecondary !== NOTHING) {
	        this._send(VALUE, x, isCurrent);
	      }
	    },
	    _handleSecondaryEnd: function(__, isCurrent) {
	      if (this._lastSecondary === NOTHING) {
	        this._send(END, null, isCurrent);
	      }
	    }
	  });
	  withTwoSources('takeUntilBy', {_handleSecondaryValue: function(x, isCurrent) {
	      this._send(END, null, isCurrent);
	    }});
	  withTwoSources('takeWhileBy', {
	    _handlePrimaryValue: function(x, isCurrent) {
	      if (this._lastSecondary !== NOTHING) {
	        this._send(VALUE, x, isCurrent);
	      }
	    },
	    _handleSecondaryValue: function(x, isCurrent) {
	      this._lastSecondary = x;
	      if (!this._lastSecondary) {
	        this._send(END, null, isCurrent);
	      }
	    },
	    _handleSecondaryEnd: function(__, isCurrent) {
	      if (this._lastSecondary === NOTHING) {
	        this._send(END, null, isCurrent);
	      }
	    }
	  });
	  withTwoSources('skipWhileBy', {
	    _init: function() {
	      this._hasFalseyFromSecondary = false;
	    },
	    _handlePrimaryValue: function(x, isCurrent) {
	      if (this._hasFalseyFromSecondary) {
	        this._send(VALUE, x, isCurrent);
	      }
	    },
	    _handleSecondaryValue: function(x, isCurrent) {
	      this._hasFalseyFromSecondary = this._hasFalseyFromSecondary || !x;
	    },
	    _handleSecondaryEnd: function(__, isCurrent) {
	      if (!this._hasFalseyFromSecondary) {
	        this._send(END, null, isCurrent);
	      }
	    }
	  });
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Kefir;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    global.Kefir = Kefir;
	  } else if (typeof module === "object" && typeof exports === "object") {
	    module.exports = Kefir;
	    Kefir.Kefir = Kefir;
	  } else {
	    global.Kefir = Kefir;
	  }
	}(this));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	void 0 === Date.now && (Date.now = function() {
	  return (new Date).valueOf();
	});
	var TWEEN = TWEEN || function() {
	  var n = [];
	  return {
	    REVISION: "14",
	    getAll: function() {
	      return n;
	    },
	    removeAll: function() {
	      n = [];
	    },
	    add: function(t) {
	      n.push(t);
	    },
	    remove: function(t) {
	      var r = n.indexOf(t);
	      -1 !== r && n.splice(r, 1);
	    },
	    update: function(t) {
	      if (0 === n.length)
	        return !1;
	      var r = 0;
	      for (t = void 0 !== t ? t : "undefined" != typeof window && void 0 !== window.performance && void 0 !== window.performance.now ? window.performance.now() : Date.now(); r < n.length; )
	        n[r].update(t) ? r++ : n.splice(r, 1);
	      return !0;
	    }
	  };
	}();
	TWEEN.Tween = function(n) {
	  var t = n,
	      r = {},
	      i = {},
	      u = {},
	      o = 1e3,
	      e = 0,
	      a = !1,
	      f = !1,
	      c = !1,
	      s = 0,
	      h = null,
	      l = TWEEN.Easing.Linear.None,
	      p = TWEEN.Interpolation.Linear,
	      E = [],
	      d = null,
	      v = !1,
	      I = null,
	      w = null,
	      M = null;
	  for (var O in n)
	    r[O] = parseFloat(n[O], 10);
	  this.to = function(n, t) {
	    return void 0 !== t && (o = t), i = n, this;
	  }, this.start = function(n) {
	    TWEEN.add(this), f = !0, v = !1, h = void 0 !== n ? n : "undefined" != typeof window && void 0 !== window.performance && void 0 !== window.performance.now ? window.performance.now() : Date.now(), h += s;
	    for (var o in i) {
	      if (i[o] instanceof Array) {
	        if (0 === i[o].length)
	          continue;
	        i[o] = [t[o]].concat(i[o]);
	      }
	      r[o] = t[o], r[o] instanceof Array == !1 && (r[o] *= 1), u[o] = r[o] || 0;
	    }
	    return this;
	  }, this.stop = function() {
	    return f ? (TWEEN.remove(this), f = !1, null !== M && M.call(t), this.stopChainedTweens(), this) : this;
	  }, this.stopChainedTweens = function() {
	    for (var n = 0,
	        t = E.length; t > n; n++)
	      E[n].stop();
	  }, this.delay = function(n) {
	    return s = n, this;
	  }, this.repeat = function(n) {
	    return e = n, this;
	  }, this.yoyo = function(n) {
	    return a = n, this;
	  }, this.easing = function(n) {
	    return l = n, this;
	  }, this.interpolation = function(n) {
	    return p = n, this;
	  }, this.chain = function() {
	    return E = arguments, this;
	  }, this.onStart = function(n) {
	    return d = n, this;
	  }, this.onUpdate = function(n) {
	    return I = n, this;
	  }, this.onComplete = function(n) {
	    return w = n, this;
	  }, this.onStop = function(n) {
	    return M = n, this;
	  }, this.update = function(n) {
	    var f;
	    if (h > n)
	      return !0;
	    v === !1 && (null !== d && d.call(t), v = !0);
	    var M = (n - h) / o;
	    M = M > 1 ? 1 : M;
	    var O = l(M);
	    for (f in i) {
	      var m = r[f] || 0,
	          N = i[f];
	      N instanceof Array ? t[f] = p(N, O) : ("string" == typeof N && (N = m + parseFloat(N, 10)), "number" == typeof N && (t[f] = m + (N - m) * O));
	    }
	    if (null !== I && I.call(t, O), 1 == M) {
	      if (e > 0) {
	        isFinite(e) && e--;
	        for (f in u) {
	          if ("string" == typeof i[f] && (u[f] = u[f] + parseFloat(i[f], 10)), a) {
	            var T = u[f];
	            u[f] = i[f], i[f] = T;
	          }
	          r[f] = u[f];
	        }
	        return a && (c = !c), h = n + s, !0;
	      }
	      null !== w && w.call(t);
	      for (var g = 0,
	          W = E.length; W > g; g++)
	        E[g].start(n);
	      return !1;
	    }
	    return !0;
	  };
	}, TWEEN.Easing = {
	  Linear: {None: function(n) {
	      return n;
	    }},
	  Quadratic: {
	    In: function(n) {
	      return n * n;
	    },
	    Out: function(n) {
	      return n * (2 - n);
	    },
	    InOut: function(n) {
	      return (n *= 2) < 1 ? .5 * n * n : -.5 * (--n * (n - 2) - 1);
	    }
	  },
	  Cubic: {
	    In: function(n) {
	      return n * n * n;
	    },
	    Out: function(n) {
	      return --n * n * n + 1;
	    },
	    InOut: function(n) {
	      return (n *= 2) < 1 ? .5 * n * n * n : .5 * ((n -= 2) * n * n + 2);
	    }
	  },
	  Quartic: {
	    In: function(n) {
	      return n * n * n * n;
	    },
	    Out: function(n) {
	      return 1 - --n * n * n * n;
	    },
	    InOut: function(n) {
	      return (n *= 2) < 1 ? .5 * n * n * n * n : -.5 * ((n -= 2) * n * n * n - 2);
	    }
	  },
	  Quintic: {
	    In: function(n) {
	      return n * n * n * n * n;
	    },
	    Out: function(n) {
	      return --n * n * n * n * n + 1;
	    },
	    InOut: function(n) {
	      return (n *= 2) < 1 ? .5 * n * n * n * n * n : .5 * ((n -= 2) * n * n * n * n + 2);
	    }
	  },
	  Sinusoidal: {
	    In: function(n) {
	      return 1 - Math.cos(n * Math.PI / 2);
	    },
	    Out: function(n) {
	      return Math.sin(n * Math.PI / 2);
	    },
	    InOut: function(n) {
	      return .5 * (1 - Math.cos(Math.PI * n));
	    }
	  },
	  Exponential: {
	    In: function(n) {
	      return 0 === n ? 0 : Math.pow(1024, n - 1);
	    },
	    Out: function(n) {
	      return 1 === n ? 1 : 1 - Math.pow(2, -10 * n);
	    },
	    InOut: function(n) {
	      return 0 === n ? 0 : 1 === n ? 1 : (n *= 2) < 1 ? .5 * Math.pow(1024, n - 1) : .5 * (-Math.pow(2, -10 * (n - 1)) + 2);
	    }
	  },
	  Circular: {
	    In: function(n) {
	      return 1 - Math.sqrt(1 - n * n);
	    },
	    Out: function(n) {
	      return Math.sqrt(1 - --n * n);
	    },
	    InOut: function(n) {
	      return (n *= 2) < 1 ? -.5 * (Math.sqrt(1 - n * n) - 1) : .5 * (Math.sqrt(1 - (n -= 2) * n) + 1);
	    }
	  },
	  Elastic: {
	    In: function(n) {
	      var t,
	          r = .1,
	          i = .4;
	      return 0 === n ? 0 : 1 === n ? 1 : (!r || 1 > r ? (r = 1, t = i / 4) : t = i * Math.asin(1 / r) / (2 * Math.PI), -(r * Math.pow(2, 10 * (n -= 1)) * Math.sin(2 * (n - t) * Math.PI / i)));
	    },
	    Out: function(n) {
	      var t,
	          r = .1,
	          i = .4;
	      return 0 === n ? 0 : 1 === n ? 1 : (!r || 1 > r ? (r = 1, t = i / 4) : t = i * Math.asin(1 / r) / (2 * Math.PI), r * Math.pow(2, -10 * n) * Math.sin(2 * (n - t) * Math.PI / i) + 1);
	    },
	    InOut: function(n) {
	      var t,
	          r = .1,
	          i = .4;
	      return 0 === n ? 0 : 1 === n ? 1 : (!r || 1 > r ? (r = 1, t = i / 4) : t = i * Math.asin(1 / r) / (2 * Math.PI), (n *= 2) < 1 ? -.5 * r * Math.pow(2, 10 * (n -= 1)) * Math.sin(2 * (n - t) * Math.PI / i) : r * Math.pow(2, -10 * (n -= 1)) * Math.sin(2 * (n - t) * Math.PI / i) * .5 + 1);
	    }
	  },
	  Back: {
	    In: function(n) {
	      var t = 1.70158;
	      return n * n * ((t + 1) * n - t);
	    },
	    Out: function(n) {
	      var t = 1.70158;
	      return --n * n * ((t + 1) * n + t) + 1;
	    },
	    InOut: function(n) {
	      var t = 2.5949095;
	      return (n *= 2) < 1 ? .5 * n * n * ((t + 1) * n - t) : .5 * ((n -= 2) * n * ((t + 1) * n + t) + 2);
	    }
	  },
	  Bounce: {
	    In: function(n) {
	      return 1 - TWEEN.Easing.Bounce.Out(1 - n);
	    },
	    Out: function(n) {
	      return 1 / 2.75 > n ? 7.5625 * n * n : 2 / 2.75 > n ? 7.5625 * (n -= 1.5 / 2.75) * n + .75 : 2.5 / 2.75 > n ? 7.5625 * (n -= 2.25 / 2.75) * n + .9375 : 7.5625 * (n -= 2.625 / 2.75) * n + .984375;
	    },
	    InOut: function(n) {
	      return .5 > n ? .5 * TWEEN.Easing.Bounce.In(2 * n) : .5 * TWEEN.Easing.Bounce.Out(2 * n - 1) + .5;
	    }
	  }
	}, TWEEN.Interpolation = {
	  Linear: function(n, t) {
	    var r = n.length - 1,
	        i = r * t,
	        u = Math.floor(i),
	        o = TWEEN.Interpolation.Utils.Linear;
	    return 0 > t ? o(n[0], n[1], i) : t > 1 ? o(n[r], n[r - 1], r - i) : o(n[u], n[u + 1 > r ? r : u + 1], i - u);
	  },
	  Bezier: function(n, t) {
	    var r,
	        i = 0,
	        u = n.length - 1,
	        o = Math.pow,
	        e = TWEEN.Interpolation.Utils.Bernstein;
	    for (r = 0; u >= r; r++)
	      i += o(1 - t, u - r) * o(t, r) * n[r] * e(u, r);
	    return i;
	  },
	  CatmullRom: function(n, t) {
	    var r = n.length - 1,
	        i = r * t,
	        u = Math.floor(i),
	        o = TWEEN.Interpolation.Utils.CatmullRom;
	    return n[0] === n[r] ? (0 > t && (u = Math.floor(i = r * (1 + t))), o(n[(u - 1 + r) % r], n[u], n[(u + 1) % r], n[(u + 2) % r], i - u)) : 0 > t ? n[0] - (o(n[0], n[0], n[1], n[1], -i) - n[0]) : t > 1 ? n[r] - (o(n[r], n[r], n[r - 1], n[r - 1], i - r) - n[r]) : o(n[u ? u - 1 : 0], n[u], n[u + 1 > r ? r : u + 1], n[u + 2 > r ? r : u + 2], i - u);
	  },
	  Utils: {
	    Linear: function(n, t, r) {
	      return (t - n) * r + n;
	    },
	    Bernstein: function(n, t) {
	      var r = TWEEN.Interpolation.Utils.Factorial;
	      return r(n) / r(t) / r(n - t);
	    },
	    Factorial: function() {
	      var n = [1];
	      return function(t) {
	        var r,
	            i = 1;
	        if (n[t])
	          return n[t];
	        for (r = t; r > 1; r--)
	          i *= r;
	        return n[t] = i;
	      };
	    }(),
	    CatmullRom: function(n, t, r, i, u) {
	      var o = .5 * (r - n),
	          e = .5 * (i - t),
	          a = u * u,
	          f = u * a;
	      return (2 * t - 2 * r + o + e) * f + (-3 * t + 3 * r - 2 * o - e) * a + o * u + t;
	    }
	  }
	}, "undefined" != typeof module && module.exports && (module.exports = TWEEN);
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;;
	(function(global) {
	  "use strict";
	  function init(Kefir, $) {
	    $.fn.asKefirStream = function(eventName, selector, transformer) {
	      var $el = this;
	      if (transformer == null && selector != null && 'string' !== typeof selector) {
	        transformer = selector;
	        selector = null;
	      }
	      return Kefir.fromSubUnsub(function(handler) {
	        $el.on(eventName, selector, handler);
	      }, function(handler) {
	        $el.off(eventName, selector, handler);
	      }, transformer).setName('asKefirStream');
	    };
	    $.fn.asKefirProperty = function(eventName, selector, getter) {
	      if (getter == null) {
	        getter = selector;
	        selector = null;
	      }
	      return this.asKefirStream(eventName, selector, getter).toProperty(getter()).setName('asKefirProperty');
	    };
	  }
	  var exports = {init: init};
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return exports;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    global.KefirJQuery = exports;
	  } else if (typeof module === "object" && typeof exports === "object") {
	    module.exports = exports;
	  } else {
	    global.KefirJQuery = exports;
	  }
	}(this));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	  'use strict';
	  var _nextId = 0;
	  return function uniqueId(prefix) {
	    return ((prefix || "unique-id") + "-" + _nextId++);
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
	  if (!module.webpackPolyfill) {
	    module.deprecate = function() {};
	    module.paths = [];
	    module.children = [];
	    module.webpackPolyfill = 1;
	  }
	  return module;
	};
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
	  if (true)
	    module.exports = factory(__webpack_require__(48));
	  else if (typeof define === 'function' && define.amd)
	    define(["js-graph"], factory);
	  else if (typeof exports === 'object')
	    exports["DeltaModel"] = factory(require("js-graph"));
	  else
	    root["DeltaModel"] = factory(root["JsGraph"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
	  return (function(modules) {
	    var installedModules = {};
	    function __webpack_require__(moduleId) {
	      if (installedModules[moduleId])
	        return installedModules[moduleId].exports;
	      var module = installedModules[moduleId] = {
	        exports: {},
	        id: moduleId,
	        loaded: false
	      };
	      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	      module.loaded = true;
	      return module.exports;
	    }
	    __webpack_require__.m = modules;
	    __webpack_require__.c = installedModules;
	    __webpack_require__.p = "";
	    return __webpack_require__(0);
	  })([function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(JsGraph, U) {
	      'use strict';
	      var keepFirst = (function() {});
	      var keepSecond = (function(d1, p, d2) {
	        d1.operations[p] = d2;
	      });
	      var applySecondToFirstValue = (function(d1, p, d2) {
	        d2.applyTo(d1.operations[p], 'value');
	      });
	      function assertFunction(val, opType) {
	        U.assert(typeof val === 'function', ("The operation '" + opType + "' expects the property it acts on to be a function."));
	      }
	      function assertDefined(val, opType) {
	        U.assert(U.isDefined(val), ("The operation '" + opType + "' expects the property to be defined."));
	      }
	      function assertUndefined(val, opType) {
	        U.assert(U.isUndefined(val), ("The operation '" + opType + "' expects the property to be undefined."));
	      }
	      var DeltaModel = U.newClass(function() {
	        var $__0 = this;
	        var _opTypes = {};
	        var _composeFns = [];
	        U.extend(this, {
	          _addOperationType: function($__4) {
	            var $__5 = $__4,
	                name = $__5.name,
	                constructor = $__5.constructor,
	                applyTo = $__5.applyTo,
	                prototype = $__5.prototype,
	                method = $__5.method;
	            var objectWithMethod = {};
	            _opTypes[name] = {
	              name: name,
	              Delta: constructor,
	              method: objectWithMethod[name]
	            };
	            U.extend(_opTypes[name].Delta.prototype, prototype, {
	              constructor: constructor,
	              type: name,
	              applyTo: applyTo
	            });
	            _opTypes['modify'].Delta.prototype[name] = U.isDefined(method) ? method : function(property) {
	              for (var values = [],
	                  $__1 = 1; $__1 < arguments.length; $__1++)
	                values[$__1 - 1] = arguments[$__1];
	              this._addOperation(_opTypes[name], property, values);
	              return this;
	            };
	          },
	          _addOperationAlias: function($__4) {
	            var $__5 = $__4,
	                name = $__5.name,
	                target = $__5.target,
	                transform = $__5.transform;
	            var objectWithMethod = {};
	            Object.defineProperty(objectWithMethod, name, {value: function(property) {
	                for (var values = [],
	                    $__1 = 1; $__1 < arguments.length; $__1++)
	                  values[$__1 - 1] = arguments[$__1];
	                this._addOperation(_opTypes[target], property, transform(values));
	                return this;
	              }});
	            _opTypes[name] = {
	              name: name,
	              method: objectWithMethod[name]
	            };
	            _opTypes['modify'].Delta.prototype[name] = _opTypes[name].method;
	          },
	          _addCompositionRule: function(op1Type, op2Type, composeFn) {
	            _composeFns.push({
	              op1Type: op1Type,
	              op2Type: op2Type,
	              composeFn: composeFn
	            });
	          },
	          _newDelta: function(type) {
	            for (var values = [],
	                $__1 = 1; $__1 < arguments.length; $__1++)
	              values[$__1 - 1] = arguments[$__1];
	            return U.applyConstructor(_opTypes[type].Delta, values);
	          }
	        });
	        var thisDM = this;
	        this._addOperationType({
	          name: 'modify',
	          constructor: function Modify() {
	            var deltaDescription = arguments[0] !== (void 0) ? arguments[0] : {};
	            var operations = arguments[1] !== (void 0) ? arguments[1] : {};
	            var $__0 = this;
	            this.operations = operations;
	            Object.keys(deltaDescription).forEach((function(key) {
	              var match = key.match(/^(\w+)\s+([\w\.]+)$/);
	              if (match) {
	                var operation = match[1];
	                var property = match[2];
	                U.assert(operation in _opTypes, ("I don't know the '" + operation + "' operation."));
	                $__0[operation](property, deltaDescription[key]);
	              }
	            }));
	          },
	          applyTo: function(obj, property) {
	            var $__0 = this;
	            if (U.isDefined(property)) {
	              U.assert(U.isDefined(obj[property]), "The 'modify' operation expects the property to be already defined.");
	              Object.keys(this.operations).forEach((function(subProperty) {
	                $__0.operations[subProperty].applyTo(obj[property], subProperty);
	              }));
	            } else {
	              U.assert(U.isDefined(obj), "The 'modify' operation expects the property to be already defined.");
	              Object.keys(this.operations).forEach((function(subProperty) {
	                $__0.operations[subProperty].applyTo(obj, subProperty);
	              }));
	            }
	          },
	          prototype: {
	            selectivelyApplyTo: function(obj, subProperty) {
	              U.assert(U.isDefined(obj), "The 'modify' operation expects the property to be already defined.");
	              if (U.isDefined(this.operations[subProperty])) {
	                this.operations[subProperty].applyTo(obj, subProperty);
	              }
	            },
	            compose: function(property, op2) {
	              var $__0 = this;
	              if (U.isUndefined(op2)) {
	                return this;
	              }
	              var foundComposeFn;
	              _composeFns.some((function($__4) {
	                var $__5 = $__4,
	                    op1Type = $__5.op1Type,
	                    op2Type = $__5.op2Type,
	                    composeFn = $__5.composeFn;
	                if ($__0.operations[property].type === op1Type && op2.type === op2Type) {
	                  foundComposeFn = composeFn;
	                  return true;
	                }
	              }));
	              if (foundComposeFn) {
	                foundComposeFn(this, property, op2);
	              } else {
	                var err = new Error(("You cannot follow a '" + this.operations[property].type + "' operation ") + ("with a '" + op2.type + "' operation on the same property."));
	                err.op1 = this.operations[property].type;
	                err.op2 = op2.type;
	                throw err;
	              }
	            },
	            _addOperation: function(opType, property, values) {
	              var dotIndex = property.indexOf('.');
	              if (dotIndex !== -1) {
	                var actualProperty = property.slice(0, dotIndex);
	                var restOfProperty = property.slice(dotIndex + 1);
	                var newModifyDelta = this._addOperation(_opTypes['modify'], actualProperty);
	                return newModifyDelta[opType.name].apply(newModifyDelta, [restOfProperty].concat(values));
	              } else {
	                var _newDelta = thisDM._newDelta.apply(thisDM, [opType.name].concat(values));
	                if (this.operations.hasOwnProperty(property) && U.isDefined(this.operations[property])) {
	                  this.compose(property, _newDelta);
	                } else {
	                  this.operations[property] = _newDelta;
	                }
	                return this.operations[property];
	              }
	            }
	          },
	          method: function(property, deltaDescription) {
	            return this._addOperation(_opTypes['modify'], property, [deltaDescription]);
	          }
	        });
	        this._addOperationType({
	          name: 'add',
	          constructor: function Add(value) {
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertUndefined(obj[property], 'add');
	            obj[property] = this.value;
	          }
	        });
	        this._addOperationType({
	          name: 'replace',
	          constructor: function Replace(value) {
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertDefined(obj[property], 'replace');
	            obj[property] = this.value;
	          }
	        });
	        this._addOperationType({
	          name: 'replaceAround',
	          constructor: function ReplaceAround(value) {
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertDefined(obj[property], 'replaceAround');
	            obj[property] = this.value(obj[property]);
	          }
	        });
	        this._addOperationType({
	          name: 'remove',
	          constructor: function Remove() {},
	          applyTo: function(obj, property) {
	            assertDefined(obj[property], 'remove');
	            delete obj[property];
	          }
	        });
	        this._addOperationType({
	          name: 'forbid',
	          constructor: function Forbid() {},
	          applyTo: function(obj, property) {
	            assertUndefined(obj[property], 'forbid');
	          }
	        });
	        this._addCompositionRule('add', 'replace', (function(d1, p, d2) {
	          d1.operations[p] = DeltaModel._newDelta('add', d2.value);
	        }));
	        this._addCompositionRule('add', 'modify', applySecondToFirstValue);
	        this._addCompositionRule('add', 'remove', (function(d1, p) {
	          d1.operations[p] = DeltaModel._newDelta('forbid');
	        }));
	        this._addCompositionRule('replace', 'replace', keepSecond);
	        this._addCompositionRule('replace', 'modify', applySecondToFirstValue);
	        this._addCompositionRule('replace', 'remove', keepSecond);
	        this._addCompositionRule('modify', 'replace', keepSecond);
	        this._addCompositionRule('modify', 'modify', (function(d1, p, d2) {
	          Object.keys(d2.operations).forEach((function(prop) {
	            d1.compose(prop, d2.operations[prop]);
	          }));
	        }));
	        this._addCompositionRule('modify', 'remove', keepSecond);
	        this._addCompositionRule('remove', 'add', (function(d1, p, d2) {
	          d1.operations[p] = DeltaModel._newDelta('replace', d2.value);
	        }));
	        this._addCompositionRule('remove', 'forbid', keepFirst);
	        this._addCompositionRule('forbid', 'add', keepSecond);
	        this._addCompositionRule('forbid', 'forbid', keepFirst);
	        this._addOperationType({
	          name: 'alter',
	          constructor: function Alter(value, alias) {
	            this.value = value || [];
	            this.alias = alias || 'alter';
	          },
	          applyTo: function(obj, property) {
	            assertFunction(obj[property], this.alias);
	            this.value.forEach((function(subOp) {
	              var partOne = obj[property];
	              var partTwo = subOp.value;
	              if (subOp.type === 'prepend') {
	                obj[property] = function() {
	                  for (var args = [],
	                      $__2 = 0; $__2 < arguments.length; $__2++)
	                    args[$__2] = arguments[$__2];
	                  partTwo.apply(this, args);
	                  partOne.apply(this, args);
	                };
	              } else {
	                obj[property] = function() {
	                  for (var args = [],
	                      $__3 = 0; $__3 < arguments.length; $__3++)
	                    args[$__3] = arguments[$__3];
	                  partOne.apply(this, args);
	                  partTwo.apply(this, args);
	                };
	              }
	            }));
	          }
	        });
	        this._addCompositionRule('alter', 'alter', (function(d1, p, d2) {
	          [].push.apply(d1.operations[p].value, d2.value);
	        }));
	        this._addCompositionRule('alter', 'replace', keepSecond);
	        this._addCompositionRule('alter', 'remove', (function(d1, p) {
	          d1.operations[p] = DeltaModel._newDelta('forbid');
	        }));
	        this._addCompositionRule('add', 'alter', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, d2.alias);
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        this._addCompositionRule('replace', 'alter', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, d2.alias);
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        ['prepend', 'insert', 'append'].forEach((function(opType) {
	          $__0._addOperationAlias({
	            name: opType,
	            target: 'alter',
	            transform: (function(args) {
	              return [[{
	                type: opType,
	                value: args[0]
	              }], opType];
	            })
	          });
	        }));
	        this._addOperationType({
	          name: 'after',
	          constructor: function After(value) {
	            U.assert(typeof resolvePromise === 'function', "Before creating an 'after' operation, you must register a promise resolver with delta.js.");
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertFunction(obj[property], 'after');
	            var partOne = obj[property];
	            var partTwo = this.value;
	            obj[property] = function() {
	              for (var args = [],
	                  $__2 = 0; $__2 < arguments.length; $__2++)
	                args[$__2] = arguments[$__2];
	              return resolvePromise(partOne.apply(this, args)).then(function() {
	                return partTwo.apply(this, args);
	              }.bind(this));
	            };
	          }
	        });
	        this._addCompositionRule('after', 'replace', keepSecond);
	        this._addCompositionRule('after', 'remove', keepSecond);
	        this._addCompositionRule('add', 'after', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, 'after');
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        this._addCompositionRule('replace', 'after', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, 'after');
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        this._addCompositionRule('insert', 'after', applySecondToFirstValue);
	        this._addCompositionRule('after', 'insert', applySecondToFirstValue);
	        var _graph = new JsGraph();
	        U.extend(this, {graph: function() {
	            return _graph;
	          }});
	        var _deltaConditions = {};
	        var _settledDeltaConditions = {};
	        var _conditionsUnsettled = false;
	        function _registerDisjunct(deltaName, disjunct) {
	          _conditionsUnsettled = true;
	          if (disjunct === true) {
	            _settledDeltaConditions[deltaName] = true;
	          } else if (disjunct === false) {} else if (_deltaConditions[deltaName] !== true) {
	            U.array(_deltaConditions, deltaName).push(disjunct);
	          }
	        }
	        function _settleConditions() {
	          if (_conditionsUnsettled) {
	            _conditionsUnsettled = false;
	            var somethingChanged;
	            do {
	              somethingChanged = false;
	              _graph.eachVertex((function(deltaName) {
	                if (_settledDeltaConditions[deltaName]) {
	                  return;
	                }
	                if (U.isUndefined(_deltaConditions[deltaName])) {
	                  return;
	                }
	                if (_deltaConditions[deltaName].some((function(disjunct) {
	                  return disjunct.every((function(conjunct) {
	                    return _settledDeltaConditions[conjunct];
	                  }));
	                }))) {
	                  _settledDeltaConditions[deltaName] = true;
	                  somethingChanged = true;
	                }
	              }));
	            } while (somethingChanged);
	          }
	        }
	        this.Delta = U.newSubclass(_opTypes['modify'].Delta, function Delta(superFn, deltaName) {
	          var options = arguments[2] !== (void 0) ? arguments[2] : {};
	          superFn.call(this, options);
	          U.assert(options instanceof Object, "A delta should be given as an object.");
	          Object.defineProperties(this, {
	            name: {get: function() {
	                return deltaName;
	              }},
	            manuallySelectable: {get: function() {
	                if (U.isDefined(options['manuallySelectable'])) {
	                  return !!options['manuallySelectable'];
	                } else if (U.isDefined(options['resolves']) && options['resolves'].length > 0) {
	                  return false;
	                } else {
	                  return true;
	                }
	              }},
	            selected: {get: function() {
	                _settleConditions();
	                return !!_settledDeltaConditions[deltaName];
	              }},
	            if: {get: function() {
	                if (options['if'] === true || options['if'] === false) {
	                  return options['if'];
	                } else if (options['if'] || options['iff'] || options['resolves']) {
	                  return [].concat(options['if'] || [], options['iff'] || [], options['resolves'] || []);
	                } else {
	                  return false;
	                }
	              }},
	            onlyIf: {get: function() {
	                if (options['onlyIf'] === true || options['onlyIf'] === false) {
	                  return options['onlyIf'];
	                } else if (options['onlyIf'] || options['iff'] || options['expects'] || options['resolves']) {
	                  return [].concat(options['onlyIf'] || [], options['iff'] || [], options['expects'] || [], options['resolves'] || []);
	                } else {
	                  return true;
	                }
	              }},
	            appliedAfter: {get: function() {
	                return [].concat(options['appliedAfter'] || [], options['expects'] || [], options['resolves'] || [], options['requires'] || []);
	              }},
	            selects: {get: function() {
	                return [].concat(options['selects'] || [], options['requires'] || []);
	              }}
	          });
	          _conditionsUnsettled = true;
	          if (U.isDefined(this.if)) {
	            _registerDisjunct(deltaName, this.if);
	          }
	          this.selects.forEach((function(otherDeltaName) {
	            _registerDisjunct(otherDeltaName, [deltaName]);
	          }));
	          _graph.addVertex(deltaName, this);
	          this.appliedAfter.forEach((function(otherDeltaName) {
	            _graph.createEdge(otherDeltaName, deltaName);
	          }));
	          U.assert(!_graph.hasCycle(), ("The delta " + deltaName + " introduced a cycle in the application order."));
	        });
	        U.extend(this, {
	          select: function() {
	            for (var deltaNames = [],
	                $__2 = 0; $__2 < arguments.length; $__2++)
	              deltaNames[$__2] = arguments[$__2];
	            deltaNames.forEach((function(deltaName) {
	              _registerDisjunct(deltaName, true);
	            }));
	          },
	          vp: function(vpName, val) {
	            var obj = {};
	            obj[vpName] = val;
	            _settleConditions();
	            _graph.eachVertex((function(name, delta) {
	              U.assert(!delta.selected || delta.onlyIf === true || delta.onlyIf.every((function(d) {
	                return _graph.vertexValue(d).selected;
	              })), ("The 'onlyIf' condition of delta '" + delta.name + "' was violated."));
	            }));
	            _graph.topologically((function(name, delta) {
	              if (delta.selected) {
	                delta.selectivelyApplyTo(obj, vpName);
	              }
	            }));
	            return obj[vpName];
	          }
	        });
	      });
	      var resolvePromise = null;
	      U.extend(DeltaModel, {registerPromiseResolver: function(promiseResolverFn) {
	          resolvePromise = promiseResolverFn;
	        }});
	      return DeltaModel;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    module.exports = __WEBPACK_EXTERNAL_MODULE_1__;
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      'use strict';
	      var U = {
	        newClass: function(constructor, prototype) {
	          prototype = prototype || {};
	          var cls = function() {
	            for (var args = [],
	                $__0 = 0; $__0 < arguments.length; $__0++)
	              args[$__0] = arguments[$__0];
	            constructor.apply(this, args);
	          };
	          cls.prototype = prototype;
	          cls.prototype.constructor = cls;
	          return cls;
	        },
	        newSubclass: function(superClass, constructor, prototype) {
	          prototype = prototype || {};
	          var cls = function() {
	            for (var args = [],
	                $__0 = 0; $__0 < arguments.length; $__0++)
	              args[$__0] = arguments[$__0];
	            constructor.apply(this, [superClass.prototype.constructor].concat(args));
	          };
	          cls.prototype = Object.create(superClass.prototype, prototype);
	          cls.prototype.constructor = cls;
	          return cls;
	        },
	        extend: function(obj1) {
	          for (var rest = [],
	              $__0 = 1; $__0 < arguments.length; $__0++)
	            rest[$__0 - 1] = arguments[$__0];
	          rest.forEach((function(obj) {
	            for (var key in obj) {
	              if (obj.hasOwnProperty(key)) {
	                obj1[key] = obj[key];
	              }
	            }
	          }));
	          return obj1;
	        },
	        array: function(obj, name) {
	          if (U.isUndefined(obj[name])) {
	            obj[name] = [];
	          }
	          return obj[name];
	        },
	        bindA: function(fn, ctx, args) {
	          return fn.bind.apply(fn, [ctx].concat(args));
	        },
	        bind: function(obj, m) {
	          for (var args = [],
	              $__1 = 2; $__1 < arguments.length; $__1++)
	            args[$__1 - 2] = arguments[$__1];
	          return U.bindA(obj[m], obj, args);
	        },
	        applyConstructor: function(ConstructorFn, args) {
	          var NewConstructorFn = ConstructorFn.bind.apply(ConstructorFn, [null].concat(args));
	          return new NewConstructorFn();
	        },
	        assert: function(condition, message) {
	          if (!condition) {
	            throw new Error(message || "Assertion failed");
	          }
	        },
	        isUndefined: function(val) {
	          return typeof val === 'undefined';
	        },
	        isDefined: function(val) {
	          return typeof val !== 'undefined';
	        }
	      };
	      return U;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }]);
	});
	
	//# sourceMappingURL=<compileOutput>


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	(function(root, name, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    module.exports = factory();
	  } else {
	    root[name] = factory();
	  }
	}(this, 'JsGraph', function() {
	  function JsGraph() {
	    var that = this;
	    var _vertices = {};
	    var _edges = {};
	    var _reverseEdges = {};
	    var _vertexCount = 0;
	    var _edgeCount = 0;
	    var _addVertexCallbacks = new Callbacks();
	    var _removeVertexCallbacks = new Callbacks();
	    that.onAddVertex = _addVertexCallbacks.add;
	    that.onRemoveVertex = _removeVertexCallbacks.add;
	    that.addNewVertex = function(key, value) {
	      if (that.hasVertex(key)) {
	        throw new JsGraph.VertexExistsError(key, _vertices[key]);
	      }
	      _vertices[key] = value;
	      _edges[key] = {};
	      _reverseEdges[key] = {};
	      _vertexCount += 1;
	      _addVertexCallbacks.fire(key, value);
	    };
	    that.setVertex = function(key, value) {
	      if (!that.hasVertex(key)) {
	        throw new JsGraph.VertexNotExistsError(key);
	      }
	      _vertices[key] = value;
	    };
	    that.ensureVertex = function(key, value) {
	      if (!that.hasVertex(key)) {
	        that.addNewVertex(key, value);
	      }
	    };
	    that.addVertex = function(key, value) {
	      if (that.hasVertex(key)) {
	        that.setVertex(key, value);
	      } else {
	        that.addNewVertex(key, value);
	      }
	    };
	    that.removeExistingVertex = function(key) {
	      if (!that.hasVertex(key)) {
	        throw new JsGraph.VertexNotExistsError(key);
	      }
	      if (Object.keys(_edges[key]).length) {
	        throw new JsGraph.HasConnectedEdgesError(key);
	      }
	      if (Object.keys(_reverseEdges[key]).length) {
	        throw new JsGraph.HasConnectedEdgesError(key);
	      }
	      var valueOfRemovedVertex = _vertices[key];
	      delete _vertices[key];
	      _vertexCount -= 1;
	      _removeVertexCallbacks.fire(key, valueOfRemovedVertex);
	    };
	    that.destroyExistingVertex = function(key) {
	      if (!that.hasVertex(key)) {
	        throw new JsGraph.VertexNotExistsError(key);
	      }
	      that.eachVertexFrom(key, function(to) {
	        that.removeEdge(key, to);
	      });
	      that.eachVertexTo(key, function(from) {
	        that.removeEdge(from, key);
	      });
	      that.removeExistingVertex(key);
	    };
	    that.removeVertex = function(key) {
	      if (that.hasVertex(key)) {
	        that.removeExistingVertex(key);
	      }
	    };
	    that.destroyVertex = function(key) {
	      if (that.hasVertex(key)) {
	        that.destroyExistingVertex(key);
	      }
	    };
	    var _addEdgeCallbacks = new Callbacks();
	    var _removeEdgeCallbacks = new Callbacks();
	    that.onAddEdge = _addEdgeCallbacks.add;
	    that.onRemoveEdge = _removeEdgeCallbacks.add;
	    that.addNewEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeExistsError(from, to, that.edgeValue(from, to));
	      }
	      if (!that.hasVertex(from)) {
	        if (that.hasVertex(to)) {
	          throw new JsGraph.VertexNotExistsError(from);
	        } else {
	          throw new JsGraph.VertexNotExistsError(from).v(to);
	        }
	      } else if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      _edges[from][to] = value;
	      _reverseEdges[to][from] = null;
	      _edgeCount += 1;
	      _addEdgeCallbacks.fire(from, to, value);
	    };
	    that.createNewEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeExistsError(from, to, that.edgeValue(from, to));
	      }
	      that.ensureVertex(from);
	      that.ensureVertex(to);
	      that.addNewEdge(from, to, value);
	    };
	    that.setEdge = function(from, to, value) {
	      if (!that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeNotExistsError(from, to);
	      }
	      _edges[from][to] = value;
	    };
	    that.spanEdge = function(from, to, value) {
	      if (!that.hasVertex(from)) {
	        if (that.hasVertex(to)) {
	          throw new JsGraph.VertexNotExistsError(from);
	        } else {
	          throw new JsGraph.VertexNotExistsError(from).v(to);
	        }
	      } else if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      if (!that.hasEdge(from, to)) {
	        that.addNewEdge(from, to, value);
	      }
	    };
	    that.addEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        that.setEdge(from, to, value);
	      } else {
	        that.addNewEdge(from, to, value);
	      }
	    };
	    that.ensureEdge = function(from, to, value) {
	      if (!that.hasEdge(from, to)) {
	        that.createNewEdge(from, to, value);
	      }
	    };
	    that.createEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        that.setEdge(from, to, value);
	      } else {
	        that.createNewEdge(from, to, value);
	      }
	    };
	    that.removeExistingEdge = function(from, to) {
	      if (!that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeNotExistsError(from, to);
	      }
	      var valueOfRemovedEdge = _edges[from][to];
	      delete _edges[from][to];
	      delete _reverseEdges[to][from];
	      _edgeCount -= 1;
	      _removeEdgeCallbacks.fire(from, to, valueOfRemovedEdge);
	    };
	    that.removeEdge = function(from, to) {
	      if (that.hasEdge(from, to)) {
	        that.removeExistingEdge(from, to);
	      }
	    };
	    that.vertexCount = function() {
	      return _vertexCount;
	    };
	    that.hasVertex = function(key) {
	      return key in _vertices;
	    };
	    that.vertexValue = function(key) {
	      return _vertices[key];
	    };
	    that.edgeCount = function() {
	      return _edgeCount;
	    };
	    that.hasEdge = function(from, to) {
	      return that.hasVertex(from) && that.hasVertex(to) && from in _edges && to in _edges[from];
	    };
	    that.edgeValue = function(from, to) {
	      return that.hasEdge(from, to) ? _edges[from][to] : undefined;
	    };
	    that.successors = function(from) {
	      if (!that.hasVertex(from)) {
	        throw new JsGraph.VertexNotExistsError(from);
	      }
	      return Object.keys(_edges[from]);
	    };
	    that.predecessors = function(to) {
	      if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      return Object.keys(_reverseEdges[to]);
	    };
	    that.eachVertex = function(handler) {
	      Object.keys(_vertices).every(function(key) {
	        var r = handler(key, _vertices[key]);
	        return (r !== false);
	      });
	    };
	    that.eachVertexFrom = function(from, handler) {
	      if (!that.hasVertex(from)) {
	        throw new JsGraph.VertexNotExistsError(from);
	      }
	      Object.keys(_edges[from]).every(function(to) {
	        var r = handler(to, that.vertexValue(to), that.edgeValue(from, to));
	        return (r !== false);
	      });
	    };
	    that.eachVertexTo = function(to, handler) {
	      if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      Object.keys(_reverseEdges[to]).every(function(from) {
	        var r = handler(from, that.vertexValue(from), that.edgeValue(from, to));
	        return (r !== false);
	      });
	    };
	    that.eachEdge = function(handler) {
	      Object.keys(_edges).every(function(from) {
	        return Object.keys(_edges[from]).every(function(to) {
	          var r = handler(from, to, _edges[from][to]);
	          return (r !== false);
	        });
	      });
	    };
	    that.clearEdges = function() {
	      that.eachEdge(that.removeEdge);
	    };
	    that.clear = function() {
	      that.eachVertex(that.destroyVertex);
	    };
	    that.hasCycle = function() {
	      var visited = {};
	      var handled = {};
	      var cycleFound = false;
	      function visit(a) {
	        if (visited[a]) {
	          cycleFound = true;
	          return;
	        }
	        if (handled[a]) {
	          return;
	        }
	        handled[a] = true;
	        visited[a] = true;
	        that.eachVertexFrom(a, function(b) {
	          visit(b);
	          if (cycleFound) {
	            return false;
	          }
	        });
	        visited[a] = false;
	      }
	      that.eachVertex(function(a) {
	        visit(a);
	        if (cycleFound) {
	          return false;
	        }
	      });
	      return cycleFound;
	    };
	    that.hasPath = function(from, to) {
	      if (!that.hasVertex(from) || !that.hasVertex(to)) {
	        return false;
	      }
	      var visited = {};
	      function hasPathAux(current) {
	        if (that.hasEdge(current, to)) {
	          return true;
	        }
	        visited[current] = true;
	        var found = false;
	        that.eachVertexFrom(current, function(next) {
	          if (!found && !visited[next] && hasPathAux(next)) {
	            found = true;
	          }
	        });
	        delete visited[current];
	        return found;
	      }
	      return hasPathAux(from);
	    };
	    that.topologically = function(handler) {
	      var visited = [];
	      var handled = {};
	      function visit(a) {
	        visited.push(a);
	        var i = visited.indexOf(a);
	        if (i !== visited.length - 1) {
	          var cycle = visited.slice(i + 1).reverse();
	          throw new JsGraph.CycleError(cycle);
	        }
	        if (!handled[a]) {
	          that.eachVertexTo(a, visit);
	          handled[a] = {returned: handler(a, that.vertexValue(a))};
	        }
	        visited.pop();
	      }
	      that.eachVertex(function(a) {
	        if (!handled[a]) {
	          visit(a);
	        }
	      });
	    };
	    that.transitiveReduction = function() {
	      var result = new JsGraph();
	      that.eachVertex(function(key, val) {
	        result.addVertex(key, val);
	      });
	      that.eachEdge(function(from, to, val) {
	        result.addEdge(from, to, val);
	      });
	      result.eachVertex(function(x) {
	        result.eachVertex(function(y) {
	          if (result.hasEdge(x, y)) {
	            result.eachVertex(function(z) {
	              if (result.hasPath(y, z)) {
	                result.removeEdge(x, z);
	              }
	            });
	          }
	        });
	      });
	      return result;
	    };
	  }
	  function set2dObj(A, one, two, val) {
	    if (typeof A[one] === 'undefined') {
	      A[one] = {};
	    }
	    A[one][two] = val;
	  }
	  function Callbacks() {
	    var callbacks = [];
	    this.add = function(fn) {
	      if (callbacks.indexOf(fn) === -1) {
	        callbacks.push(fn);
	      }
	      return function removeCallback() {
	        var index = callbacks.indexOf(fn);
	        if (index !== -1) {
	          callbacks.splice(index, 1);
	        }
	      };
	    };
	    this.fire = function() {
	      var args = arguments;
	      callbacks.forEach(function(fn) {
	        fn.apply(null, args);
	      });
	    };
	  }
	  function newError(name, constructor) {
	    constructor.prototype.__proto__ = Error.prototype;
	    constructor.prototype.constructor = constructor;
	    constructor.prototype.name = name;
	    return constructor;
	  }
	  JsGraph.VertexExistsError = newError("VertexExistsError", function(key, value) {
	    var that = this;
	    function refreshMessage() {
	      that.message = "This graph has " + (that.vertices === 1 ? "a vertex" : "vertices") + " '" + Object.keys(that.vertices).join("', '") + "'";
	    }
	    that.v = function(key, value) {
	      that.vertices[key] = value;
	      refreshMessage();
	      return that;
	    };
	    that.vertices = {};
	    that.v(key, value);
	    refreshMessage();
	  });
	  JsGraph.VertexNotExistsError = newError("VertexNotExistError", function(key) {
	    var that = this;
	    function refreshMessage() {
	      that.message = "This graph does not have " + (that.vertices === 1 ? "a vertex" : "vertices") + " '" + Object.keys(that.vertices).join("', '") + "'";
	    }
	    that.v = function(key) {
	      that.vertices[key] = undefined;
	      refreshMessage();
	      return that;
	    };
	    that.vertices = {};
	    that.v(key);
	    refreshMessage();
	  });
	  JsGraph.EdgeExistsError = newError("EdgeExistsError", function(from, to, value) {
	    var that = this;
	    function refreshMessage() {
	      var edges = [];
	      Object.keys(that.edges).forEach(function(from) {
	        Object.keys(that.edges[from]).forEach(function(to) {
	          edges.push("('" + from + "', '" + to + "')");
	        });
	      });
	      that.message = "This graph has " + (edges.length === 1 ? "an edge " : "edges ") + edges.join(", ");
	    }
	    that.e = function(from, to, value) {
	      set2dObj(that.edges, from, to, value);
	      refreshMessage();
	      return that;
	    };
	    that.edges = {};
	    that.e(from, to, value);
	    refreshMessage();
	  });
	  JsGraph.EdgeNotExistsError = newError("EdgeNotExistError", function(from, to) {
	    var that = this;
	    function refreshMessage() {
	      var edges = [];
	      Object.keys(that.edges).forEach(function(from) {
	        Object.keys(that.edges[from]).forEach(function(to) {
	          edges.push("('" + from + "', '" + to + "')");
	        });
	      });
	      that.message = "This graph does not have " + (edges.length === 1 ? "an edge " : "edges ") + edges.join(", ");
	    }
	    that.e = function(from, to) {
	      set2dObj(that.edges, from, to, undefined);
	      refreshMessage();
	      return that;
	    };
	    that.edges = {};
	    that.e(from, to);
	    refreshMessage();
	  });
	  JsGraph.HasConnectedEdgesError = newError("HasConnectedEdgesError", function(key) {
	    this.message = "The '" + key + "' vertex has connected edges";
	    this.key = key;
	  });
	  JsGraph.CycleError = newError("CycleError", function(cycle) {
	    this.message = "This graph contains a cycle: " + cycle;
	    this.cycle = cycle;
	  });
	  return JsGraph;
	}));
	
	//# sourceMappingURL=<compileOutput>


/***/ }
/******/ ])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgM2ViNDBjODg4NzZkMmU3OTU1MzQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V4YW1wbGUyL2V4YW1wbGUyLmpzIiwid2VicGFjazovLy8uL3NyYy9jaXJjdWl0Ym9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3AtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC10aWxlLXNraW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3AtdGlsZS1zcGFjaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9wLXRpbGUtY2xpY2stdG8tb3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC10aWxlLXdlaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC10aWxlLWFjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC10aWxlLW9wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3AtdGlsZS1ncm93LXdoZW4tb3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC10aWxlLW9wZW4tYWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9wLXRpbGUtc2tpbi1ncm93LXdoZW4tb3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC1wb3NpdGlvbi10cmFja2luZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC10cmFuc2l0aW9uLXBvc2l0aW9uLXRyYWNraW5nLmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzPzFjZjIiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9ibHVlYmlyZC9qcy9icm93c2VyL2JsdWViaXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9leGFtcGxlMi9leGFtcGxlMi5zY3NzPzU2MGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V4YW1wbGUyL2V4YW1wbGUyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvbmV3V2lkZ2V0VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9wbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvbWlzYy5qcyIsIndlYnBhY2s6Ly8vQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzAiLCJ3ZWJwYWNrOi8vL0B0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwid2VicGFjazovLy8uL3NyYy91dGlsL2RlZmVyLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsL25lc3RlZC1mbGV4LWdyb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3AtY29yZS5zY3NzP2UzYzAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3AtY29yZS5zY3NzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2tlZmlyLWFuZC1lZ2dzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsL3B1dC1jc3MtcnVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3AtdGlsZS1za2luLnNjc3M/MzBhYSIsIndlYnBhY2s6Ly8vLi9zcmMvcC10aWxlLXNraW4uc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9jb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcC10aWxlLXNraW4tZ3Jvdy13aGVuLW9wZW4uc2Nzcz83YjkwIiwid2VicGFjazovLy8uL3NyYy9wLXRpbGUtc2tpbi1ncm93LXdoZW4tb3Blbi5zY3NzIiwid2VicGFjazovLy8uL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL3ZlbG9jaXR5L3ZlbG9jaXR5Lm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2Nocm9tYS1qcy9jaHJvbWEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jc3MtbG9hZGVyL2Nzc1RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9BcnRlZmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9rZWZpci1zaWduYWwtaGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9tYWluLWRlbHRhLW1vZGVsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvfi9ub2RlLWxpYnMtYnJvd3Nlci9+L3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2tlZmlyL2Rpc3Qva2VmaXIuanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy90d2VlbmpzL2J1aWxkL3R3ZWVuLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2tlZmlyLWpxdWVyeS9rZWZpci1qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvdW5pcXVlLWlkLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9kZWx0YS5qcy9kaXN0L2RlbHRhLmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvanMtZ3JhcGgvZGlzdC9qcy1ncmFwaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3Qzs7Ozs7OztBQ3JDQSxvQkFBUSxHQUFpQixDQUFDO0FBR3RCLE9BQUkscUJBQVEsR0FBc0IsQ0FBQztBQUNuQyxPQUFJLHFCQUFRLEdBQVUsQ0FBQztBQUd2QixnQkFBVyxFQUFJLHFCQUFRLEVBQW9CLENBQUM7QUFDaEQsb0JBQVEsRUFBYyxDQUFDO0FBQ3ZCLG9CQUFRLEVBQW1CLENBQUM7QUFDNUIsb0JBQVEsRUFBc0IsQ0FBQztBQUMvQixvQkFBUSxFQUE0QixDQUFDO0FBQ3JDLG9CQUFRLEVBQXFCLENBQUM7QUFDOUIsb0JBQVEsRUFBcUIsQ0FBQztBQUM5QixvQkFBUSxFQUFtQixDQUFDO0FBQzVCLG9CQUFRLEVBQTZCLENBQUM7QUFDdEMsb0JBQVEsR0FBMEIsQ0FBQztBQUNuQyxvQkFBUSxHQUFrQyxDQUFDO0FBQzNDLG9CQUFRLEdBQTJCLENBQUM7QUFDcEMsb0JBQVEsR0FBc0MsQ0FBQztBQTRCL0MsWUFBVyxPQUFRLENBQUMsQ0FDbkIsV0FBVSxDQUNWLHFCQUFtQixDQUNuQixzQkFBb0IsQ0FDcEIsZUFBYSxDQUNiLGNBQVksQ0FDYixDQUFDLENBQUM7QUFJRSxrQkFBYSxFQUFJO0FBQ3BCLEtBQUksR0FBQyxFQUFJO0FBQUUsVUFBTyxLQUFHLEtBQUs7R0FBRTtBQUM1QixhQUFVLENBQVYsVUFBWSxDQUFFO0FBQUUsVUFBTyxLQUFHLFNBQVMsR0FBSyxHQUFDO0dBQUU7QUFDM0MsV0FBUSxDQUFSLFVBQVUsR0FBRSxDQUFHO0FBQUUsVUFBTyxlQUFjLENBQUMsR0FBRSxDQUFDO0dBQUU7QUFDN0MsRUFBQztBQUNELFFBQVMsUUFBTSxDQUFFLEtBQUksQ0FBRztBQUN2QixRQUFPLEVBQUUsTUFBSyxDQUFHLEVBQUUsR0FBRSxDQUFHLEVBQUUsR0FBRSxDQUFHO0FBQUUseUJBQWMsQ0FBRyxNQUFJO0FBQUcscUJBQVUsQ0FBRyxRQUFNO0FBQUEsU0FBRSxDQUFFLENBQUUsQ0FBRSxDQUFDO0FBQ3RGO0FBQ0ksVUFBSyxFQUFJO0FBQ1osTUFBRyxDQUFHO0FBQUUsUUFBRyxDQUFHLE9BQUs7QUFBRyxZQUFPLENBQUcsRUFBQyxHQUFFLENBQUcsSUFBRSxDQUFHLElBQUUsQ0FBRyxJQUFFLENBQUcsSUFBRSxDQUFDO0FBQUEsR0FBRTtBQUMxRCxJQUFJO0FBQUUsUUFBRyxDQUFHLElBQUU7QUFBRyxZQUFPLENBQUcsRUFBQyxJQUFHLENBQUcsS0FBRyxDQUFHLEtBQUcsQ0FBQztBQUFHLFFBQUcsQ0FBRyxRQUFPLENBQUMsV0FBVSxDQUFDO0FBQUEsR0FBRTtBQUMxRSxJQUFJO0FBQUUsUUFBRyxDQUFHLElBQUU7QUFBRyxZQUFPLENBQUcsRUFBQyxJQUFHLENBQUcsS0FBRyxDQUFHLEtBQUcsQ0FBQztBQUFHLFFBQUcsQ0FBRyxRQUFPLENBQUMsWUFBVyxDQUFDO0FBQUEsR0FBRTtBQUMzRSxJQUFJO0FBQUUsUUFBRyxDQUFHLElBQUU7QUFBRyxZQUFPLENBQUcsRUFBQyxJQUFHLENBQUcsS0FBRyxDQUFHLEtBQUcsQ0FBQztBQUFBLEdBQUU7QUFDOUMsSUFBSTtBQUFFLFFBQUcsQ0FBRyxJQUFFO0FBQUcsWUFBTyxDQUFHLEVBQUMsSUFBRyxDQUFHLEtBQUcsQ0FBRyxLQUFHLENBQUM7QUFBQSxHQUFFO0FBQzlDLElBQUk7QUFBRSxRQUFHLENBQUcsSUFBRTtBQUFHLFlBQU8sQ0FBRyxFQUFDLElBQUcsQ0FBRyxLQUFHLENBQUcsS0FBRyxDQUFDO0FBQUEsR0FBRTtBQUM5QyxJQUFDLENBQUc7QUFBRSxRQUFHLENBQUcsS0FBRztBQUFHLFFBQUcsQ0FBRyxRQUFPLENBQUMsUUFBTyxDQUFDO0FBQUEsR0FBRTtBQUMxQyxJQUFDLENBQUcsRUFBRSxJQUFHLENBQUcsS0FBRyxDQUFFO0FBQ2pCLElBQUMsQ0FBRyxFQUFFLElBQUcsQ0FBRyxLQUFHLENBQUU7QUFDakIsSUFBQyxDQUFHLEVBQUUsSUFBRyxDQUFHLEtBQUcsQ0FBRTtBQUNqQixJQUFDLENBQUcsRUFBRSxJQUFHLENBQUcsS0FBRyxDQUFFO0FBQ2pCLElBQUMsQ0FBRyxFQUFFLElBQUcsQ0FBRyxLQUFHLENBQUU7QUFDakIsSUFBQyxDQUFHLEVBQUUsSUFBRyxDQUFHLEtBQUcsQ0FBRTtBQUNqQixJQUFDLENBQUcsRUFBRSxJQUFHLENBQUcsS0FBRyxDQUFFO0FBQ2pCLElBQUMsQ0FBRyxFQUFFLElBQUcsQ0FBRyxLQUFHLENBQUU7QUFDakIsSUFBQyxDQUFHLEVBQUUsSUFBRyxDQUFHLEtBQUcsQ0FBRTtBQUNqQixJQUFDLENBQUcsRUFBRSxJQUFHLENBQUcsS0FBRyxDQUFFO0FBQ2pCLElB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QUFVLENBQU0sR0FBQztBQUNqQixjQUFTLENBQU8sR0FBQztBQUNqQixVQUFLLENBQVcsR0FBQztBQUNqQixVQUFLLENBQVcsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixNQUFnQixHQUFDO0FBQ2pCLE1BQWdCLEdBQUM7QUFDakIsTUFBZ0IsR0FBQztBQUNqQixhQUFRLENBQVEsR0FBQztBQUNqQixjQUFTLENBQU8sR0FBQztBQUNqQixVQUFLLENBQVcsR0FBQztBQUNqQixZQUFPLENBQVMsR0FBQztBQUNqQixZQUFPLENBQVMsR0FBQztBQUNqQixZQUFPLENBQVMsR0FBQztBQUNqQixZQUFPLENBQVMsR0FBQztBQUNqQixZQUFPLENBQVEsSUFBRTtBQUNqQixZQUFPLENBQVEsSUFBRTtBQUNqQixZQUFPLENBQVEsSUFBRTtB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QUFFO0FBQUMsVUFBRyxJQUFLLE1BQUksR0FBRTtBQUFLLGVBQUUsR0FBRSxTQUFRLENBQUM7QUFBRSxlQUFFLEtBQUcsR0FBRSxFQUFDLENBQUM7QUFBQyxZQUFHLElBQUssTUFBSTtBQUFFLGdCQUFPLEdBQUM7QUFBQyxZQUFHLElBQUcsS0FBSztBQUFFLGdCQUFPLEdBQUUsRUFBQztBQUFBLE9BQUMsS0FBTSxLQUFHLElBQUssTUFBSSxHQUFFO0FBQUssZUFBRSxHQUFFLFNBQVEsQ0FBQyxHQUFHLEVBQUMsRUFBRSxTQUFRLENBQUMsRUFBRSxHQUFFLE1BQUssQ0FBQyxDQUFDO0FBQUMsY0FBTyxHQUFFLEVBQUMsRUFBRSxHQUFFLEVBQUMsR0FBRyxHQUFDLENBQUUsR0FBRSxFQUFDLENBQUUsRUFBQyxFQUFFLEdBQUU7T0FBQztBQUFBLEtBQUMsQ0FBRSxhQUFXLEVBQUUsVUFBUyxFQUFFLEdBQUU7QUFBSyxhQUFFLEdBQUUsU0FBUSxDQUFDO0FBQUUsYUFBRSxLQUFHLEdBQUUsRUFBQyxDQUFDO0FBQUMsVUFBRyxPQUFNLENBQUMsRUFBRSxVQUFTLEVBQUUsR0FBRTtBQUFDLGNBQU8sR0FBRSxFQUFDO09BQUMsQ0FBQztLQUFDLENBQUUsU0FBTyxFQUFFLFVBQVMsQ0FBQztBQUFLO0FBQUU7QUFBRTtBQUFFO0FBQUU7QUFBRTtBQUFFLGFBQUUsVUFBUSxDQUFFLEVBQUMsR0FBRyxHQUFDO0FBQUUsYUFBRTtBQUFFLGFBQUUsVUFBUSxPQUFPO0FBQUUsYUFBRSxFQUFDLEVBQUM7QUFBQyxXQUFJLFNBQVEsR0FBRyxPQUFPLEtBQUcsRUFBQyxHQUFFLEdBQUUsSUFBRSxVQUFRLENBQUUsRUFBQyxHQUFHLEdBQUMsQ0FBRSxJQUFFLENBQUMsQ0FBRSxTQUFPLEdBQUcsT0FBTyxLQUFHLFdBQVMsSUFBSSxPQUFNLENBQUMsRUFBQyxHQUFHLEVBQUMsR0FBRSxHQUFDLENBQUMsQ0FBRSxNQUFJLEtBQUcsRUFBQyxHQUFFLEtBQUcsQ0FBRSxJQUFFLENBQUMsQ0FBRSxJQUFFLEdBQUUsSUFBRTtBQUFFLFlBQUcsSUFBRyxHQUFHLEVBQUMsR0FBRSxVQUFRLENBQUUsRUFBQyxDQUFDO0FBQUUsZUFBSSxJQUFLO0FBQUUsZUFBRSxHQUFFLEVBQUMsQ0FBRSxJQUFFLEdBQUUsRUFBQyxDQUFFLE1BQUksS0FBRyxFQUFDLElBQUcsS0FBRyxFQUFDLGVBQWUsQ0FBQyxFQUFDLEdBQUcsRUFBQyxHQUFFLFVBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsRUFBQyxFQUFFLElBQUUsS0FBRyxVQUFTLENBQUMsRUFBQyxFQUFFLElBQUUsR0FBQyxDQUFDLEVBQUUsSUFBRSxLQUFHLGdCQUFlLENBQUMsRUFBQyxFQUFFLElBQUUsR0FBQyxDQUFFLEdBQUUsRUFBQyxFQUFFLFNBQVEsQ0FBQyxFQUFFLEdBQUUsR0FBQyxDQUFDLEVBQUUsS0FBSyxNQUFJLEtBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQztBQUFDLFlBQU87S0FBQyxDQUFFLFFBQU0sRUFBRSxVQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUMsY0FBUyxHQUFFLEVBQUUsR0FBRTtBQUFLLGVBQUUsS0FBRyxHQUFDLENBQUM7QUFBQyxjQUFPLEtBQUcsR0FBRyxLQUFHLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBRSxHQUFFO0FBQUMsZUFBUSxPQUFFLEVBQUMsUUFBTztBQUFFLGlCQUFFO0FBQUUsaUJBQUUsU0FBTyxDQUFFLElBQUU7QUFBRyxjQUFFLEdBQUUsQ0FBQyxFQUFFLEdBQUUsR0FBRSxDQUFDLENBQUM7QUFBQyxjQUFHLEtBQUk7QUFBRSxrQkFBSyxLQUFLLE1BQUksR0FBRSxFQUFDO0FBQUcsZ0JBQUUsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLENBQUMsQ0FBQztBQUFDLGdCQUFPLFNBQU8sRUFBRSxHQUFFO1NBQUUsQ0FBQyxFQUFFLFNBQU8sR0FBRyxPQUFPLElBQUUsRUFBQyxFQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUMsS0FB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QUFDO0FBQUEsS0FBQyxDQUFDO0FBQUssV0FBRSxHQUFDLENBQUM7QUFBQyxhQUFRLEVBQUUsV0FBUyxFQUFFLEVBQUMsR0FBSSxLQUFHLENBQUMsUUFBUyxFQUFDLENBQUUsT0FBSyxFQUFFLEdBQUM7QUFBQyxTQUFRLE9BQUUsR0FBQztBQUFFLFdBQUUsaUJBQWU7QUFBRSxXQUFFLFdBQVM7QUFBRSxXQUFFLGdFQUE4RCxNQUFPLENBQUMsR0FBRSxDQUFDO0FBQUUsV0FBRSxHQUFFLElBQUUsU0FBTyxDQUFFLElBQUU7QUFBRSxRQUFFLFVBQVMsRUFBRSxHQUFFLEVBQUMsRUFBRSxJQUFFLENBQUMsRUFBRSxHQUFFLEVBQUMsWUFBYSxFQUFDLENBQUM7QUFBQyxRQUFHLEtBQUssVUFBVSxFQUFFLEtBQUcsQ0FBRSxXQUFTLEVBQUUsRUFBQyxTQUFRLENBQUUsR0FBQztHQUFDO0FBQUUsRUFBQyxNQUFLLENBQUMsQ0FBRSxVQUFTLEVBQUU7QUFBQyxVQUFPLEdBQUcsT0FBTyxPQUFLLEdBQUcsU0FBTyxHQUFHLE9BQU8sT0FBSyxRQUFRLEVBQUUsT0FBSyxRQUFRLEVBQUUsRUFBQyxFQUFDLEVBQUUsTUFBb0MsQ0FBRSxzQ0FBTyxDQUFDLG9UQUFFLEVBQUMsRUFBQztBQUFFLEVBQUMsU0FBUyxDQUFDO0FBQUMsUUFBTyxVQUFTLEVBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxZQUFTLEdBQUUsRUFBRTtBQUFDLFdBQVEsT0FBRSxFQUFDO0FBQUUsYUFBRSxJQUFFLFNBQU8sRUFBRTtBQUFFLGFBQUUsR0FBQyxDQUFFLEdBQUUsR0FBRSxLQUFHO0FBQUssZUFBRSxHQUFFLEVBQUMsQ0FBQztBQUFDLFlBQUcsT0FBTSxDQUFDLEVBQUM7T0FBQztBQUFDLFlBQU87S0FBQztBQUFDLFlBQVMsR0FBRSxFQUFFO0FBQUMsWUFBTyxZQUFXLENBQUMsRUFBQyxFQUFFLElBQUUsR0FBQyxNQUFNLEtBQU0sQ0FBQyxFQUFDLEVBQUUsU0FBUSxDQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUUsRUFBQyxFQUFDLENBQUMsQ0FBRTtLQUFDO0FBQUMsWUFBUyxHQUFFLEVBQUU7QUFBSyxhQUFFLE9BQU0sQ0FBQyxFQUFFLFdBQVMsQ0FBQyxDQUFDO0FBQUMsWUFBTyxLQUFHLElBQUksSUFBRSxJQUFFO0tBQUM7QUFBQyxZQUFTLEdBQUUsRUFBRTtBQUFDLFlBQU8sVUFBUyxFQUFFO0FBQUMsY0FBTyxLQUFHLE1BQU8sQ0FBQyxHQUFFLEdBQUMsRUFBRSxFQUFDLEdBQUUsR0FBQztPQUFDO0tBQUM7QUFBQyxZQUFTLEdBQUUsRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGNBQVMsR0FBRSxFQUFFLEdBQUU7QUFBQyxjQUFPLElBQUUsSUFBRSxJQUFFLElBQUU7T0FBQztBQUFDLGNBQVMsR0FBRSxFQUFFLEdBQUU7QUFBQyxjQUFPLElBQUUsSUFBRSxJQUFFO09BQUM7QUFBQyxjQUFTLEdBQUUsRUFBRTtBQUFDLGNBQU8sSUFBRTtPQUFDO0FBQUMsY0FBUyxHQUFFLEVBQUUsR0FBRSxHQUFFO0FBQUMsY0FBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxFQUFFLElBQUUsRUFBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUUsSUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUU7T0FBQztBQUFDLGNBQVMsR0FBRSxFQUFFLEdBQUUsR0FBRTtBQUFDLGNBQU8sSUFBRSxFQUFDLENBQUMsRUFBRSxHQUFDLEVBQUUsSUFBRSxJQUFFLElBQUUsRUFBQyxDQUFDLEVBQUUsR0FBQyxFQUFFLElBQUUsRUFBQyxDQUFDLEVBQUM7T0FBQztBQUFDLGNBQVMsR0FBRSxFQUFFLEdBQUU7QUFBQyxhQUFRLE9BQUUsR0FBRSxJQUFFLEdBQUUsR0FBRSxFQUFFO0FBQUssaUJBQUUsRUFBQyxDQUFDLEVBQUUsR0FBRSxHQUFDLENBQUM7QUFBQyxjQUFHLEtBQUk7QUFBRSxrQkFBTyxHQUFDO0FBQUssaUJBQUUsRUFBQyxDQUFDLEVBQUUsR0FBRSxHQUFDLEVBQUUsR0FBQztBQUFDLGNBQUcsSUFBRTtTQUFDO0FBQUMsY0FBTztPQUFDO0FBQUMsY0FBUyxHQUFFLENBQUM7QUFBQyxhQUFRLE9BQUUsR0FBRSxJQUFFLEdBQUUsR0FBRTtBQUFFLFlBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxHQUFFLEdBQUUsR0FBRSxHQUFDO0FBQUEsT0FBQztBQUFDLGNBQVMsR0FBRSxFQUFFLEdBQUUsR0FBRTtBQUFLO0FBQUU7QUFBRSxlQUFFLEdBQUM7QUFBQztBQUFHLGFBQUUsSUFBRSxFQUFDLEdBQUUsR0FBQyxFQUFFLEdBQUUsSUFBRSxFQUFDLENBQUMsRUFBRSxHQUFFLEdBQUMsRUFBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFDO1FBQU8sSUFBRyxJQUFLLENBQUMsRUFBQyxFQUFFLEtBQUcsR0FBRSxHQUFFLElBQUU7QUFBQyxjQUFPO09BQUM7QUFBQyxjQUFTLEdBQUUsRUFBRTtBQUFDLGFBQVEsT0FBRTtBQUFFLGVBQUU7QUFBRSxlQUFFLElBQUUsR0FBRSxLQUFHLEtBQUcsR0FBRSxFQUFDLEdBQUcsR0FBRSxHQUFFO0FBQUUsY0FBRyxHQUFDO0FBQUMsVUFBRSxFQUFDO0FBQUssZUFBRSxFQUFDLEdBQUUsR0FBRSxFQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsR0FBRSxHQUFDLEVBQUUsR0FBRSxFQUFDLENBQUM7QUFBRSxlQUFFLElBQUUsSUFBRTtBQUFFLGVBQUUsRUFBQyxDQUFDLEVBQUUsR0FBRSxHQUFDLENBQUM7QUFBQyxjQUFPLEtBQUcsSUFBRSxFQUFDLENBQUMsRUFBRSxHQUFDLEVBQUUsS0FBRyxJQUFFLElBQUUsRUFBQyxDQUFDLEVBQUUsR0FBRSxJQUFFLEdBQUM7T0FBQztBQUFDLGNBQVMsR0FBRSxDQUFDO0FBQUMsV0FBRSxFQUFDLEVBQUUsRUFBQyxJQUFHLEtBQUcsS0FBRyxHQUFDLEdBQUcsRUFBQyxFQUFDO09BQUM7QUFBSyxhQUFFO0FBQUUsYUFBRSxLQUFHO0FBQUUsYUFBRSxLQUFHO0FBQUUsYUFBRSxHQUFDO0FBQUUsYUFBRSxHQUFDO0FBQUUsYUFBRSxJQUFFLEVBQUMsR0FBRSxHQUFDO0FBQUUsYUFBRSxlQUFhLEdBQUksR0FBQztBQUFDLFVBQUcsS0FBSSxVQUFRLE9BQU87QUFBRSxjQUFNLEVBQUMsRUFBQztBQUFDLFdBQVEsT0FBRSxHQUFFLElBQUUsR0FBRSxHQUFFO0FBQUUsWUFBRyxRQUFPLEdBQUcsT0FBTyxVQUFRLENBQUUsRUFBQyxHQUFHLE1BQUssQ0FBQyxTQUFRLENBQUUsRUFBQyxDQUFDLEdBQUcsRUFBQyxRQUFRLENBQUMsU0FBUSxDQUFFLEVBQUMsQ0FBQztBQUFFLGdCQUFNLEVBQUMsRUFBQztBQUFDLFNBQUUsS0FBRyxJQUFLLENBQUMsRUFBRSxHQUFDLENBQUUsSUFBRSxLQUFHLElBQUssQ0FBQyxFQUFFLEdBQUMsQ0FBRSxJQUFFLEtBQUcsSUFBSyxDQUFDLEVBQUUsR0FBQyxDQUFFLElBQUUsS0FBRyxJQUFLLENBQUMsRUFBRSxHQUFDLENBQUM7QUFBSyxhQUFFLElBQUUsSUFBSSxhQUFZLENBQUMsRUFBQyxFQUFFLElBQUksTUFBSyxDQUFDLEVBQUM7QUFBRSxhQUFFLEVBQUM7QUFBRSxhQUFFLFVBQVMsRUFBRTtBQUFDLGtCQUFPLEtBQUcsRUFBQyxFQUFDLENBQUUsTUFBSSxLQUFHLE1BQUksSUFBRSxJQUFFLE1BQUksSUFBRSxJQUFFLE1BQUksSUFBRSxJQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFFLEdBQUUsR0FBQztXQUFDLENBQUM7QUFBQyx3QkFBaUIsRUFBRSxVQUFTLENBQUM7QUFBQyxjQUFNLEVBQUM7QUFBQyxZQUFFO0FBQUUsWUFBRTtBQUFBLFNBQUMsQ0FBRTtBQUFDLFlBQUU7QUFBRSxZQUFFO0FBQUEsU0FBQyxDQUFDO09BQUMsQ0FBQztBQUFLLGFBQUUsa0JBQWdCLEVBQUUsRUFBQyxFQUFFLEdBQUUsR0FBRSxHQUFDLEVBQUUsSUFBRSxDQUFDO0FBQUMsWUFBTyxXQUFTLEVBQUUsVUFBUyxDQUFDO0FBQUMsY0FBTztPQUFDLENBQUU7S0FBQztBQUFDLFlBQVMsR0FBRSxFQUFFLEdBQUU7QUFBSyxhQUFFLEdBQUM7QUFBQyxZQUFPLFdBQVUsQ0FBQyxFQUFDLEVBQUUsVUFBUSxDQUFFLEVBQUMsR0FBRyxFQUFDLEdBQUUsRUFBQyxFQUFDLEVBQUUsSUFBRSxVQUFTLENBQUMsRUFBQyxHQUFHLE1BQUksU0FBTyxFQUFFLFFBQU8sQ0FBQyxJQUFHLENBQUUsR0FBQyxFQUFFLFVBQVMsQ0FBQyxFQUFDLEdBQUcsTUFBSSxTQUFPLEVBQUUsUUFBTyxDQUFDLElBQUcsQ0FBRSxTQUFRLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVMsQ0FBQyxFQUFDLEdBQUcsTUFBSSxTQUFPLEVBQUUsUUFBTyxDQUFDLElBQUcsQ0FBRSxHQUFDLEVBQUUsRUFBQyxFQUFFLE1BQUksRUFBQyxJQUFHLEVBQUMsR0FBRSxVQUFRLENBQUUsVUFBUyxPQUFPLENBQUMsRUFBRSxXQUFTLE9BQU8sRUFBRSxHQUFDLENBQUU7S0FBQztBQUFDLFlBQVMsR0FBRSxFQUFFO0FBQUMsVUFBRyxFQUFFO0FBQUssZUFBRSxFQUFDLEdBQUksS0FBRyxDQUFDLFFBQVMsRUFBQztBQUFFLGVBQUUsUUFBTSxNQUFNLE9BQU8sQ0FBQztBQUFDLFdBQUUsSUFBRSxHQUFHLEVBQUMsT0FBTSxNQUFNLEVBQUUsRUFBQyxDQUFDLE9BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQztBQUFDLGFBQVEsT0FBRSxHQUFFLElBQUUsR0FBRSxJQUFFO0FBQUUsY0FBRyxPQUFNLE1BQU0sQ0FBRSxFQUFDLENBQUU7QUFBSyxtQkFBRSxRQUFNLE1BQU0sQ0FBRSxFQUFDO0FBQUUsbUJBQUUsR0FBRSxFQUFDO0FBQUUsbUJBQUUsR0FBRSxFQUFDO0FBQUUsbUJBQUUsR0FBRSxFQUFDO0FBQUUsbUJBQUUsRUFBQyxDQUFDO0FBQUUsbUJBQUUsS0FBRyxDQUFDO0FBQUMsZ0JBQUcsRUFBQyxHQUFFLFFBQU0sTUFBTSxDQUFFLEVBQUMsQ0FBRSxFQUFDLEVBQUUsSUFBRSxHQUFDLENBQUMsQ0FBQztBQUFDLGlCQUFRLE9BQUUsS0FBRyxJQUFLLENBQUMsQ0FBQyxHQUFFLEdBQUMsRUFB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QUU7T0FBQztBQUFDLGNBQVMsR0FBRSxFQUFFLEdBQUUsR0FBRTtBQUFLLGVBQUU7QUFBQyxZQUFFLElBQUUsRUFBRSxLQUFHLEVBQUU7QUFBRSxZQUFFLElBQUUsRUFBRSxLQUFHLEVBQUU7QUFBRSxpQkFBTSxDQUFFLFVBQVE7QUFBRSxrQkFBTyxDQUFFLFdBQVM7QUFBQSxTQUFDLENBQUM7QUFBQyxjQUFNO0FBQUMsWUFBQyxDQUFFLElBQUU7QUFBRSxZQUFDLENBQUUsRUFBQyxDQUFDLEVBQUM7QUFBQSxTQUFDO09BQUM7QUFBQyxjQUFTLEdBQUUsRUFBRSxHQUFFO0FBQUssZUFBRTtBQUFDLFlBQUMsQ0FBRSxJQUFFO0FBQUUsWUFBQyxDQUFFLEVBQUMsQ0FBQyxFQUFDO0FBQUEsU0FBQztBQUFFLGVBQUUsRUFBQyxDQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUUsR0FBQztBQUFFLGVBQUUsRUFBQyxDQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUUsR0FBQztBQUFFLGVBQUUsRUFBQyxDQUFDLEVBQUUsR0FBRSxHQUFDO0FBQUUsZUFBRSxJQUFFLElBQUUsRUFBQyxJQUFHLEVBQUUsSUFBRSxFQUFDLElBQUcsRUFBRSxLQUFHLENBQUMsRUFBRSxLQUFHLENBQUM7QUFBRSxlQUFFLElBQUUsSUFBRSxFQUFDLElBQUcsRUFBRSxJQUFFLEVBQUMsSUFBRyxFQUFFLEtBQUcsQ0FBQyxFQUFFLEtBQUcsQ0FBQyxDQUFDO0FBQUMsY0FBTyxJQUFFLEVBQUUsSUFBRSxFQUFFLElBQUUsR0FBRSxJQUFFLEVBQUUsSUFBRSxFQUFFLElBQUUsR0FBRTtPQUFDO0FBQUMsWUFBTyxTQUFTLEdBQUUsRUFBRSxHQUFFLEdBQUU7QUFBSyxlQUFFO0FBQUMsWUFBRSxFQUFDO0FBQUUsWUFBRTtBQUFFLGlCQUFNLENBQUUsS0FBRztBQUFFLGtCQUFPLENBQUUsS0FBRztBQUFBLFNBQUM7QUFBRSxlQUFFLEVBQUMsRUFBQztBQUFFLGVBQUU7QUFBRSxlQUFFLEtBQUc7QUFBRSxlQUFFLEtBQUc7QUFBRTtBQUFFO0FBQUUsY0FBQztBQUFDLGFBQUksR0FBRSxXQUFVLENBQUMsRUFBQyxHQUFHLElBQUUsQ0FBRSxJQUFFLFdBQVUsQ0FBQyxFQUFDLEdBQUcsR0FBQyxDQUFFLElBQUUsS0FBRyxLQUFHLENBQUUsVUFBUSxFQUFFLEdBQUUsV0FBUyxFQUFFLEdBQUUsSUFBRSxLQUFHLElBQUksR0FBRSxJQUFFLEVBQUMsR0FBRSxFQUFDLENBQUMsRUFBRSxHQUFDLENBQUUsSUFBRSxJQUFFLElBQUUsR0FBQyxFQUFFLElBQUU7QUFBSSxjQUFHLEdBQUUsRUFBQyxDQUFDLElBQUcsR0FBRSxHQUFDLENBQUUsT0FBTSxDQUFDLEdBQUUsSUFBRSxDQUFDLENBQUUsS0FBRyxHQUFDLENBQUUsRUFBQyxDQUFDLElBQUcsSUFBSyxDQUFDLEdBQUUsQ0FBQyxFQUFFLEtBQUcsS0FBRyxJQUFLLENBQUMsR0FBRSxDQUFDLEVBQUUsR0FBQztBQUFFLGtCQUFLO0FBQUMsY0FBTyxJQUFFLFVBQVMsRUFBRTtBQUFDLGdCQUFPLEdBQUUsR0FBRSxFQUFDLFFBQU8sRUFBRSxHQUFDLEVBQUUsR0FBQztTQUFDLEVBQUU7T0FBQztLQUFFLEVBQUMsQ0FBQztBQUFDLGFBQVEsRUFBRTtBQUFDLFlBQUssQ0FBRSxVQUFTLEVBQUU7QUFBQyxjQUFPO09BQUM7QUFBRSxXQUFJLENBQUUsVUFBUyxFQUFFO0FBQUMsY0FBTSxHQUFDLEVBQUUsS0FBRyxJQUFLLENBQUMsR0FBRSxLQUFHLEdBQUcsQ0FBQyxFQUFFO09BQUM7QUFBRSxZQUFLLENBQUUsVUFBUyxFQUFFO0FBQUMsY0FBTyxJQUFFLEtBQUcsSUFBSyxDQUFDLEdBQUUsRUFBRSxJQUFFLEtBQUcsR0FBRyxDQUFDLEVBQUUsS0FBRyxJQUFLLENBQUMsR0FBRSxFQUFDLEVBQUM7T0FBQztBQUFBLEtBQUMsQ0FBRSxPQUFNLENBQUMsQ0FBQyxDQUFDLE1BQUssQ0FBRSxFQUFDLEdBQUUsQ0FBRSxHQUFDLENBQUUsSUFBRSxDQUFFLEdBQUMsQ0FBQyxDQUFFLEVBQUMsU0FBUSxDQUFFLEVBQUMsR0FBRSxDQUFFLEdBQUUsR0FBRSxHQUFDLENBQUMsQ0FBRSxFQUFDLFVBQVMsQ0FBRSxFQUFDLEVBQUUsR0FBRSxJQUFFLENBQUUsR0FBQyxDQUFDLENBQUUsRUFBQyxhQUFZLENBQUUsRUFBQyxHQUFFLENBQUUsR0FBRSxJQUFFLENBQUUsR0FBQyxDQUFDLENBQUUsRUFBQyxZQUFXLENBQUUsRUFBQyxHQUFFLENBQUUsR0FBRSxLQUFHLENBQUUsS0FBRyxDQUFDLENBQUMsQ0FBRSxFQUFDLGFBQVksQ0FBRSxFQUFDLEdBQUUsQ0FBRSxLQUFHLENBQUUsS0FBRyxDQUFFLEdBQUMsQ0FBQyxDQUFFLEVBQUMsZUFBYyxDQUFFLEVBQUMsSUFBRyxDQUFFLElBQUUsQ0FBRSxJQUFFLENBQUUsSUFBRSxDQUFDLENBQUMsQ0FBRSxFQUFDLFlBQVcsQ0FBRSxFQUFDLEdBQUUsQ0FBRSxLQUFHLENBQUUsSUFBRSxDQUFFLElBQUUsQ0FBQyxDQUFDLENBQUUsRUFBQyxhQUFZLENBQUUsRUFBQyxHQUFFLENBQUUsSUFBRSxDQUFFLElBQUUsQ0FBRSxJQUFFLENBQUMsQ0FBQyxDQUFFLEVBQUMsZUFBYyxDQUFFLEVBQUMsSUFBRyxDQUFFLElBQUUsQ0FBRSxLQUFHLENBQUUsS0FBRyxDQUFDLENBQUMsQ0FBRSxFQUFDLGFBQVksQ0FBRSxFQUFDLEdBQUUsQ0FBRSxLQUFHLENBQUUsS0FBRyxDQUFFLElBQUUsQ0FBQyxDQUFDLENBQUUsRUFBQyxjQUFhLENBQUUsRUFBQyxJQUFHLENBQUUsSUFBRSxDQUFFLEtBQUcsQ0FBRSxHQUFDLENBQUMsQ0FBRSxFQUFDLGdCQUFlLENBQUUsRUFBQyxJQUFHLENBQUUsS0FBRyxDQUFFLEtBQUcsQ0FBRSxHQUFDLENBQUMsQ0FBRSxFQUFDLGFBQVksQ0FBRSxFQUFDLElBQUcsQ0FBRSxJQUFFLENBQUUsS0FBRyxDQUFFLElBQUUsQ0FBQyxDQUFDLENBQUUsRUFBQyxjQUFhLENBQUUsRUFBQyxJQUFHLENBQUUsSUFBRSxDQUFFLElBQUUsQ0FBRSxHQUFDLENBQUMsQ0FBRSxFQUFDLGdCQUFl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LElBQUcsQ0FBQyxFQUFFLEVBQUMsR0FBRSxFQUFDLEVBQUUsSUFBRSxHQUFFLElBQUUsS0FBRyxDQUFFLElBQUUsS0FBRyxDQUFDLEVBQUUsRUFBQyxHQUFFLEVBQUMsRUFBRSxJQUFFLEdBQUUsSUFBRSxJQUFFLFVBQVEsQ0FBRSxFQUFDLFNBQVMsR0FBRyxVQUFRLENBQUUsRUFBQyxFQUFFLEVBQUUsVUFBUSxDQUFFLEVBQUMsQ0FBQyxDQUFFLElBQUUsRUFBQyxDQUFDLEVBQUMsQ0FBRTtBQUFDLFdBQUUsRUFBQyxHQUFFLFVBQVEsQ0FBRSxFQUFDLFdBQVcsR0FBRyxVQUFRLENBQUUsRUFBQyxFQUFFLENBQUUsSUFBRSxVQUFRLENBQUUsRUFBQyxRQUFRLEdBQUcsVUFBUSxDQUFFLEVBQUMsRUFBRSxDQUFDLEVBQUUsRUFBQyxHQUFFLFVBQVEsQ0FBRSxFQUFDLENBQUUsSUFBRSxVQUFRLENBQUUsR0FBRSxHQUFDLENBQUMsQ0FBQztBQUFLLGVBQUUsU0FBTztBQUFFLGVBQUUsR0FBQztBQUFDLFlBQUcsQ0FBQyxrQkFBaUIsS0FBTSxDQUFDLEVBQUMsR0FBRyxFQUFDLGVBQWUsQ0FBQyxFQUFDLENBQUU7QUFBSyxpQkFBRSxJQUFFLEdBQUM7QUFBQyxhQUFFLEdBQUMsQ0FBQztBQUFDLGVBQVEsT0FBRSxHQUFFLElBQUUsVUFBUSxPQUFPLENBQUUsSUFBRTtBQUFFLHFCQUFTLENBQUMsU0FBUSxDQUFFLEVBQUMsQ0FBQyxHQUFHLEVBQUMsdUJBQXNCLEtBQU0sQ0FBQyxTQUFRLENBQUUsRUFBQyxDQUFDLEdBQUcsRUFBQyxLQUFJLEtBQU0sQ0FBQyxTQUFRLENBQUUsRUFBQyxDQUFDLEVBQUUsV0FBVSxDQUFDLFNBQVEsQ0FBRSxFQUFDLENBQUMsR0FBRyxVQUFTLENBQUMsU0FBUSxDQUFFLEVBQUMsQ0FBQyxFQUFFLFNBQU8sRUFBRSxVQUFRLENBQUUsRUFBQyxFQUFFLGFBQVksQ0FBQyxTQUFRLENBQUUsRUFBQyxDQUFDLEdBQUcsRUFBQyxVQUFTLEVBQUUsVUFBUSxDQUFFLEVBQUMsQ0FB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UUFBTSxTQUFTLENBQUUsUUFBTSxTQUFTLEVBQUUsU0FBTztTQUFDLENBQUUsV0FBUyxFQUFFLFVBQVMsQ0FBQztBQUFDLGVBQVEsUUFBSztBQUFFLG1CQUFNLENBQUUsRUFBQyxFQUFFLEdBQUUsRUFBQyxDQUFDO0FBQUMsY0FBRyxPQUFNLENBQUMsRUFBRSxHQUFDLENBQUUsS0FBRyxXQUFVLENBQUMsRUFBQztTQUFDLENBQUUsRUFBQyxDQUFDLEVBQUUsR0FBRSxHQUFDO09BQUM7S0FBQyxDQUFDLENBQUUsT0FBTSxDQUFDLENBQUMsSUFBRyxDQUFFLE1BQUksQ0FBQyxDQUFFLFVBQVMsRUFBRSxHQUFFO0FBQUMsaUJBQVUsQ0FBRSxNQUFLLEVBQUUsR0FBQyxFQUFFLFVBQVMsRUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBSyxlQUFFLFNBQVEsQ0FBQyxFQUFDLENBQUUsR0FBQztBQUFFLGVBQUUsRUFBQyxPQUFNLENBQUUsS0FBRyxJQUFJLElBQUUsSUFBRSxHQUFDO0FBQUUsZUFBRSxXQUFTLENBQUM7QUFBQyxrQkFBUyxFQUFFLE1BQUksSUFBRSxJQUFFLFFBQU0sRUFBRSxLQUFHLEVBQUUsVUFBUyxDQUFDO0FBQUMsY0FBRyxPQUFNLENBQUMsRUFBRSxHQUFDLENBQUUsS0FBRyxXQUFVLENBQUMsRUFBQztTQUFDLENBQUUsVUFBUSxJQUFJLEtBQUcsRUFBQyxTQUFRLEVBQUUsS0FBRyxJQUFJLElBQUUsT0FBSyxFQUFFLE9BQUssQ0FBQyxDQUFFLEVBQUMsQ0FBQyxJQUFHLENBQUUsR0FBRSxHQUFDO09BQUM7S0FBQyxDQUFDLENBQUU7R0FBRSxDQUFDLE1BQUssT0FBTyxHQUFHLE9BQUssTUFBTSxHQUFHLE9BQUssQ0FBRSxPQUFLLENBQUUsU0FBTyxDQUFDO0FBQUMsRUFBQyxDQUFDO0FBQUE7Ozs7Ozs7O2lFQ0V0aEYsdURBQVMsQ0FBRTtBQUNOLFdBQUk7QUFBRztBQUFHLGFBQU07QUFBRyxXQUFJO0FBQUc7QUFBRztBQUFHO0FBQUcsWUFBSztBQUFHLFlBQUs7QUFBRyxZQUFLO0FBQUcsY0FBTztBQUFHLFlBQUs7QUFBRyxTQUFFO0FBQUcsYUFBTTtBQUFHLGFBQU07QUFBRyxhQUFNO0FBQUcsYUFBTTtBQUFHLGFBQU07QUFBRyxhQUFNO0FBQUcsYUFBTTtBQUFHLGFBQU07QUFBRyxhQUFNO0FBQUcsYUFBTTtBQUFHLFdBQUk7QUFBRyxlQUFRO0FBQUcsaUJBQVU7QUFBRyxhQUFNO0FBQUcsYUFBTTtBQUFHLGFBQU07QUFBRyxhQUFNO0FBQUcsYUFBTTtBQUFHLGFBQU07QUFBRyxhQUFNO0FBQUcsVUFBRztBQUFHLFVBQUc7QUFBRyxZQUFLO0FBQUcsYUFBTTtBQUFHLGFBQU07QUFBRyxVQUFHLENBQUM7QUFFeFQsUUFBSyxFQUFJLFVBQVMsRUFBRyxHQUFHLEdBQUcsR0FBRztBQUM1QixVQUFPLElBQUksTUFBSyxDQUFDLEVBQUcsR0FBRyxHQUFHLEdBQUMsQ0FBQztHQUM5QixDQUFDO0FBRUQsTUFBSSxDQUFDLE1BQU8sT0FBSyxJQUFNLFlBQVUsR0FBSyxPQUFLLElBQU0sS0FBRyxDQUFDLEdBQUssRUFBQyxNQUFLLFFBQVEsR0FBSyxLQUFHLENBQUMsQ0FBRztBQUNsRixVQUFLLFFBQVEsRUFBSSxPQUFLLENBQUM7R0FDekI7QUFFQSxNQUFJLEtBQTRDO0FBQzlDLHNDQUFPLENBQUMsQ0FBRywwQ0FBUyxDQUFFO0FBQ3BCLFlBQU8sT0FBSyxDQUFDO0tBQ2YsQ0FBQywrSUFBQztHQUNKLEtBQU87QUFDTCxRQUFHLEVBQUksT0FBTyxRQUFNLElBQU0sWUFBVSxHQUFLLFFBQU0sSUFBTSxLQUFHLEVBQUksUUFBTSxFQUFJLEtBQUcsQ0FBQztBQUMxRSxRQUFHLE9BQU8sRUFBSSxPQUFLLENBQUM7R0FDdEI7QUFFQSxRQUFLLE1BQU0sRUFBSSxVQUFTLEVBQUcsR0FBRyxHQUFHLEdBQUc7QUFDbEMsVUFBTyxJQUFJLE1BQUssQ0FBQyxFQUFHLEdBQUcsR0FBRyxHQUFDLENBQUM7R0FDOUIsQ0FBQztBQUVELFFBQUssSUFBSSxFQUFJLFVBQVMsRUFBRyxHQUFHLEdBQUcsR0FBRztBQUNoQyxVQUFPLElBQUksTUFBSyxDQUFDLEVBQUcsR0FBRyxHQUFHLEdBQUcsTUFBSSxDQUFDLENBQUM7R0FDckMsQ0FBQztBQUVELFFBQUssSUFBSSxFQUFJLFVBQVMsRUFBRyxHQUFHLEdBQUcsR0FBRztBQUNoQyxVQUFPLElBQUksTUFBSyxDQUFDLEVBQUcsR0FBRyxHQUFHLEdBQUcsTUFBSSxDQUFDLENBQUM7R0FDckMsQ0FBQztBQUVELFFBQUssSUFBSSxFQUFJLFVBQVMsRUFBRyxHQUFHLEdBQUcsR0FBRztBQUNoQyxVQUFPLElBQUksTUFBSyxDQUFDLEVBQUcsR0FBRyxHQUFHLEdBQUcsTUFBSSxDQUFDLENBQUM7R0FDckMsQ0FBQztBQUVELFFBQUssSUFBSSxFQUFJLFVBQVMsRUFBRztBQUN2QixVQUFPLElBQUksTUFBSyxDQUFDLEVBQUMsQ0FBQztHQUNyQixDQUFDO0FBRUQsUUFBSyxJQUFJLEVBQUksVUFBUyxFQUFHO0FBQ3ZCLFVBQU8sSUFBSSxNQUFLLENBQUMsRUFBQyxDQUFDO0dBQ3JCLENBQUM7QUFFRCxRQUFLLElBQUksRUFBSSxVQUFTLEVBQUcsR0FBRyxHQUFHO0FBQzdCLFVBQU8sSUFBSSxNQUFLLENBQUMsRUFBRyxHQUFHLEdBQUcsTUFBSSxDQUFDLENBQUM7R0FDbEMsQ0FBQztBQUVELFFBQUssSUFBSSxFQUFJLFVBQVMsRUFBRyxHQUFHLEdBQUc7QUFDN0IsVUFBTyxJQUFJLE1BQUssQ0FBQyxFQUFHLEdBQUcsR0FBRyxNQUFJLENBQUMsQ0FBQztHQUNsQyxDQUFDO0FBRUQsUUFBSyxJQUFJLEVBQUksVUFBUyxFQUFHLEdBQUcsR0FBRztBQUM3QixVQUFPLElBQUksTUFBSyxDQUFDLEVBQUcsR0FBRyxHQUFHLE1BQUksQ0FBQyxDQUFDO0dBQ2xDLENBQUM7QUFFRCxRQUFLLEdBQUcsRUFBSSxVQUFTLEVBQUcsR0FBRyxHQUFHLEdBQUc7QUFDL0IsVUFBTyxJQUFJLE1BQUssQ0FBQyxHQUFJLElBQUUsQ0FBRyxJQUFJLElBQUUsQ0FBRyxJQUFJLElBQUUsQ0FBRyxHQUFHLEtBQUcsQ0FBQyxDQUFDO0dBQ3RELENBQUM7QUFFRCxRQUFLLFlBQVksRUFBSSxVQUFTLEVBQUcsR0FBRyxHQUFHLEdBQUc7QUFDeEMsUUFBSSxDQUFDLElBQUssS0FBRyxDQUFDLEdBQUssRUFBQyxJQUFLLEtBQUcsQ0FBQyxDQUFHO0FBQzlCLFlBQU8sT0FBSyxDQUFDO0tBQ2Y7QUFDQSxRQUFJLElBQUksQ0FBQyxFQUFDLElBQU0sU0FBTyxDQUFHO0FBQ3hCLFNBQUksSUFBSSxNQUFLLENBQUMsRUFBQyxDQUFDO0tBQ2xCO0FBQ0EsUUFBSSxJQUFJLENBQUMsRUFBQyxJQUFNLFNBQU8sQ0FBRztBQUN4QixTQUFJLElBQUksTUFBSyxDQUFDLEVBQUMsQ0FBQztLQUNsQjtBQUNBLFVBQU8sY0FBYSxDQUFDLEVBQUcsR0FBRyxHQUFDLENBQUM7R0FDL0IsQ0FBQztBQUVELFFBQUssSUFBSSxFQUFJLE9BQUssWUFBWSxDQUFDO0FBRS9CLFFBQUssU0FBUyxFQUFJLFVBQVMsRUFBRyxHQUFHO0FBQzNCLFVBQUM7QUFBRyxVQUFDLENBQUM7QUFFVixRQUFJLElBQUksQ0FBQyxFQUFDLElBQU0sU0FBTyxDQUFHO0FBQ3hCLFNBQUksSUFBSSxNQUFLLENBQUMsRUFBQyxDQUFDO0tBQ2xCO0FBQ0EsUUFBSSxJQUFJLENBQUMsRUFBQyxJQUFNLFNBQU8sQ0FBRztBQUN4QixTQUFJLElBQUksTUFBSyxDQUFDLEVBQUMsQ0FBQztLQUNsQjtBQUNBLE1BQUMsRUFBSSxZQUFXLEVBQUMsQ0FBQztBQUNsQixNQUFDLEVBQUksWUFBVyxFQUFDLENBQUM7QUFDbEIsUUFBSSxFQUFDLEVBQUksR0FBQyxDQUFHO0FBQ1gsWUFBTyxFQUFDLEVBQUMsRUFBSSxLQUFHLENBQUMsRUFBSSxFQUFDLEVBQUMsRUFBSSxLQUFHLENBQUMsQ0FBQztLQUNsQyxLQUFPO0FBQ0wsWUFBTyxFQUFDLEVBQUMsRUFBSSxLQUFHLENBQUMsRUFBSSxFQUFDLEVBQUMsRUFBSSxLQUFHLENBQUMsQ0FBQztLQUNsQztBQUFBLEdBQ0YsQ0FBQztBQUVELFFBQUssVUFBVSxFQUFJLFVBQVMsS0FBSSxDQUFHO0FBQ2pDLFVBQU8sT0FBTSxDQUFDLEtBQUksQ0FBQyxVQUFXLEVBQUMsQ0FBQztHQUNsQyxDQUFDO0FBRUQsUUFBSyxPQUFPLEVBQUksTUFBSSxDQUFDO0FBb0NyQixPQUFJLEVBQUksRUFBQyxTQUFTLENBQUU7QUFDbEIsWUFBUyxNQUFJLENBQUUsQ0FBRTtBQUNYO0FBQUcsYUFBRTtBQUFHLGNBQUc7QUFBRztBQUFHLFlBQUM7QUFBRyxnQkFBSztBQUFHO0FBQUc7QUFBRztBQUFHLFlBQUM7QUFBRyxjQUFHO0FBQUcsY0FBRztBQUFHLGVBQUk7QUFBRyxlQUFJO0FBQUcsZUFBSSxDQUFDO0FBRTdFLFFBQUMsRUFBSSxLQUFHLENBQUM7QUFDVCxVQUFHLEVBQUksR0FBQyxDQUFDO0FBQ1QsV0FBSyxFQUFDLEVBQUksR0FBRyxLQUFHLEVBQUksVUFBUSxPQUFPLENBQUcsR0FBQyxFQUFJLEtBQUcsQ0FBRyxHQUFDLEVBQUUsQ0FBRztBQUNyRCxXQUFFLEVBQUksVUFBUSxDQUFFLEVBQUMsQ0FBQyxDQUFDO0FBQ25CLFlBQUksR0FBRSxHQUFLLEtBQUcsQ0FBRztBQUNmLGNBQUcsS0FBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDO1NBQ2hCO0FBQUEsT0FDRjtBQUNBLFVBQUksSUFBRyxPQUFPLElBQU0sR0FBRztBQUNyQixZQUFHLEVBQUksRUFBQyxHQUFFLENBQUcsR0FBRyxJQUFFLENBQUcsR0FBRyxNQUFJLENBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO09BQ2pHLEtBQU8sS0FBSSxJQUFJLENBQUMsSUFBRyxDQUFFLEVBQUMsQ0FBQyxJQUFNLFFBQU0sQ0FBRztBQUNwQyxZQUFJLElBQUcsQ0FBRSxFQUFDLE9BQU8sSUFBTSxHQUFHO0FBQ3hCLGVBQUksRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFDO0FBQ3pELGFBQUksR0FBQztTQUNQLEtBQU8sS0FBSSxJQUFHLENBQUUsRUFBQyxPQUFPLElBQU0sR0FBRztBQUMvQixlQUFJLEVBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUM7U0FDekUsS0FBTztBQUNMLGVBQU0seUJBQXVCLENBQUM7U0FDaEM7QUFDQSxXQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7T0FDYixLQUFPLEtBQUksSUFBSSxDQUFDLElBQUcsQ0FBRSxFQUFDLENBQUMsSUFBTSxTQUFPLENBQUc7QUFDckMsV0FBSSxLQUFHLENBQUUsRUFBQyxDQUFDO0FBQ1gsV0FBSSxNQUFJLENBQUM7T0FDWCxLQUFPLEtBQUksSUFBSSxDQUFDLElBQUcsQ0FBRSxFQUFDLENBQUMsSUFBTSxTQUFPLENBQUc7QUFDckMsYUFBSSxFQUFJLEtBQUcsQ0FBRSxFQUFDLEtBQUssQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUM7QUFDNUUsV0FBSSxNQUFJLENBQUM7T0FDWCxLQUFPLEtBQUksSUFBRyxPQUFPLEdBQUssR0FBRztBQUMzQixXQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDWCxXQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDWCxXQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7T0FDYjtBQUNBLFVBQUksSUFBRyxPQUFPLElBQU0sR0FBRztBQUNyQixXQUFJLE1BQUksQ0FBQztBQUNULFdBQUksR0FBQztPQUNQLEtBQU8sS0FBSSxJQUFHLE9BQU8sSUFBTSxHQUFHO0FBQzVCLFlBQUksSUFBSSxDQUFDLElBQUcsQ0FBRSxFQUFDLENBQUMsSUFBTSxTQUFPLENBQUc7QUFDOUIsYUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO0FBQ1gsYUFBSSxHQUFDO1NBQ1AsS0FBTyxLQUFJLElBQUksQ0FBQyxJQUFHLENBQUUsRUFBQyxDQUFDLElBQU0sU0FBTyxDQUFHO0FBQ3JDLGFBQUksTUFBSSxDQUFDO0FBQ1QsYUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO1NBQ2I7QUFBQSxPQUNGLEtBQU8sS0FBSSxJQUFHLE9BQU8sSUFBTSxHQUFHO0FBQzVCLFdBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztBQUNYLFdBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztPQUNiO0FBQ0EsVUFBSSxJQUFLLEtBQUcsQ0FBRztBQUNiLFdBQUksR0FBQztPQUNQO0FBQ0EsVUFBSSxLQUFNLE1BQUksQ0FBRztBQUNmLFVBQUMsS0FBSyxFQUFJLEVBQUMsRUFBRyxHQUFHLEdBQUcsR0FBQyxDQUFDO09BQ3hCLEtBQU8sS0FBSSxLQUFNLEtBQUcsQ0FBRztBQUNyQixVQUFDLEtBQUssRUFBSSxFQUFDLEdBQUksSUFBRSxDQUFHLElBQUksSUFBRSxDQUFHLElBQUksSUFBRSxDQUFHLEdBQUMsQ0FBQztPQUMxQyxLQUFPLEtBQUksS0FBTSxNQUFJLENBQUc7QUFDdEIsVUFBQyxLQUFLLEVBQUksUUFBTyxDQUFDLEVBQUcsR0FBRyxHQUFDLENBQUM7QUFDMUIsVUFBQyxLQUFLLENBQUUsRUFBQyxFQUFJLEdBQUM7T0FDaEIsS0FBTyxLQUFJLEtBQU0sTUFBSSxDQUFHO0FBQ3RCLFVBQUMsS0FBSyxFQUFJLFFBQU8sQ0FBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0FBQzFCLFVBQUMsS0FBSyxDQUFFLEVBQUMsRUFBSSxHQUFDO09BQ2hCLEtBQU8sS0FBSSxLQUFNLE1BQUksQ0FBRztBQUN0QixVQUFDLEtBQUssRUFBSSxRQUFPLENBQUMsRUFBQyxDQUFDO09BQ3RCLEtBQU8sS0FBSSxLQUFNLE1BQUksQ0FBRztBQUN0QixVQUFDLEtBQUssRUFBSSxRQUFPLENBQUMsRUFBRyxHQUFHLEdBQUMsQ0FBQztBQUMxQixVQUFDLEtBQUssQ0FBRSxFQUFDLEVBQUksR0FBQztPQUNoQixLQUFPLEtBQUksS0FBTSxNQUFJLENBQUc7QUFDdEIsVUFBQyxLQUFLLEVBQUksUUFBTyxDQUFDLEVBQUcsR0FBRyxHQUFDLENBQUM7QUFDMUIsVUFBQyxLQUFLLENBQUUsRUFBQyxFQUFJLEdBQUM7T0FDaEIsS0FBTyxLQUFJLEtBQU0sTUFBSSxDQUFHO0FBQ3RCLFVBQUMsS0FBSyxFQUFJLFFBQU8sQ0FBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0FBQzFCLFVBQUMsS0FBSyxDQUFFLEVBQUMsRUFBSSxHQUFDO09BQ2hCO0FBQ0EsWUFBSyxFQUFJLFNBQVEsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVCO0FBRUEsU0FBSSxVQUFVLElBQUksRUFBSSxVQUFTLENBQUU7QUFDL0IsWUFBTyxLQUFHLEtBQUssTUFBTyxDQUFDLEVBQUcsR0FBQyxDQUFDO0tBQzlCLENBQUM7QUFFRCxTQUFJLFVBQVUsS0FBSyxFQUFJLFVBQVMsQ0FBRTtBQUNoQyxZQUFPLEtBQUcsS0FBSyxDQUFDO0tBQ2xCLENBQUM7QUFFRCxTQUFJLFVBQVUsSUFBSSxFQUFJLFVBQVMsQ0FBRTtBQUMvQixZQUFPLFFBQU8sQ0FBQyxJQUFHLEtBQUssQ0FBQyxDQUFDO0tBQzNCLENBQUM7QUFFRCxTQUFJLFVBQVUsU0FBUyxFQUFJLFVBQVMsQ0FBRTtBQUNwQyxZQUFPLEtBQUcsS0FBTSxFQUFDLENBQUM7S0FDcEIsQ0FBQztBQUVELFNBQUksVUFBVSxJQUFJLEVBQUksVUFBUyxDQUFFO0FBQy9CLFlBQU8sUUFBTyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7S0FDM0IsQ0FBQztBQUVELFNBQUksVUFBVSxJQUFJLEVBQUksVUFBUyxDQUFFO0FBQy9CLFlBQU8sUUFBTyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7S0FDM0IsQ0FBQztBQUVELFNBQUksVUFBVSxJQUFJLEVBQUksVUFBUyxDQUFFO0FBQy9CLFlBQU8sUUFBTyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7S0FDM0IsQ0FBQztBQUVELFNBQUksVUFBVSxJQUFJLEVBQUksVUFBUyxDQUFFO0FBQy9CLFlBQU8sUUFBTyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7S0FDM0IsQ0FBQztBQUVELFNBQUksVUFBVSxJQUFJLEVBQUksVUFBUyxDQUFFO0FBQy9CLFlBQU8sUUFBTyxDQUFDLElBQUcsS0FBSyxDQUFDLENBQUM7S0FDM0IsQ0FBQztBQUVELFNBQUksVUFBVSxHQUFHLEVBQUksVUFBUyxDQUFFO0FBQzlCLFlBQU8sRUFBQyxJQUFHLEtBQUssQ0FBRSxFQUFDLEVBQUksSUFBRSxDQUFHLEtBQUcsS0FBSyxDQUFFLEVBQUMsRUFBSSxJQUFFLENBQUcsS0FBRyxLQUFLLENBQUUsRUFBQyxFQUFJLElBQUUsQ0FBRyxLQUFHLEtBQUssQ0FBRSxFQUFDLENBQUMsQ0FBQztLQUNuRixDQUFDO0FBRUQsU0FBSSxVQUFVLFVBQVUsRUFBSSxVQUFTLENBQUU7QUFDckMsWUFBTyxVQUFTLENBQUMsSUFBRyxLQUFLLENBQUMsQ0FBQztLQUM3QixDQUFDO0FBRUQsU0FBSSxVQUFVLEtBQUssRUFBSSxVQUFTLENBQUU7QUFDNUI7QUFBRyxZQUFDO0FBRVIsU0FBSSxLQUFHLElBQUssRUFBQyxDQUFDO0FBQ2QsV0FBSyxJQUFLLE9BQUssT0FBTyxDQUFHO0FBQ3ZCLFlBQUksS0FBTSxPQUFLLE9BQU8sQ0FBRSxFQUFDLENBQUc7QUFDMUIsZ0JBQU8sR0FBQztTQUNWO0FBQUEsT0FDRjtBQUNBLFlBQU8sR0FBQztLQUNWLENBQUM7QUFFRCxTQUFJLFVBQVUsTUFBTSxFQUFJLFVBQVMsS0FBSSxDQUFHO0FBQ3RDLFVBQUksU0FBUSxPQUFPLENBQUc7QUFDcEIsWUFBRyxLQUFLLENBQUUsRUFBQyxFQUFJLE1BQUksQ0FBQztBQUNwQixjQUFPLEtBQUcsQ0FBQztPQUNiO0FBQ0EsWUFBTyxLQUFHLEtBQUssQ0FBRSxFQUFDLENBQUM7S0FDckIsQ0FBQztBQUVELFNBQUksVUFBVSxJQUFJLEVBQUksVUFBUyxJQUFHLENBQUc7QUFDL0IsYUFBRTtBQUFHLFlBQUM7QUFBRyxhQUFFO0FBQUcsYUFBRSxDQUFDO0FBRXJCLFVBQUksSUFBRyxHQUFLLEtBQUcsQ0FBRztBQUNoQixZQUFHLEVBQUksTUFBSSxDQUFDO09BQ2Q7QUFDQSxRQUFDLEVBQUksS0FBRyxDQUFDO0FBQ1QsU0FBRSxFQUFJLEdBQUMsS0FBSyxDQUFDO0FBQ2IsVUFBSSxJQUFHLE9BQU8sSUFBTSxLQUFLLElBQUUsQ0FBRSxFQUFDLEVBQUksR0FBRztBQUNuQyxZQUFHLEdBQUssSUFBRSxDQUFDO09BQ2I7QUFDQSxVQUFJLElBQUcsSUFBTSxNQUFJLENBQUc7QUFDbEIsY0FBTyxLQUFHLEVBQUksSUFBRSxFQUFJLElBQUUsTUFBTyxDQUFDLEVBQUcsR0FBQyxLQUFNLENBQUMsR0FBRSxDQUFDLEVBQUksSUFBRSxDQUFDO09BQ3JELEtBQU8sS0FBSSxJQUFHLElBQU0sT0FBSyxDQUFHO0FBQzFCLGNBQU8sS0FBRyxFQUFJLElBQUUsRUFBSSxJQUFFLEtBQU0sQ0FBQyxHQUFFLENBQUMsRUFBSSxJQUFFLENBQUM7T0FDekMsS0FBTyxLQUFJLElBQUcsSUFBTSxNQUFJLEdBQUssS0FBRyxJQUFNLE9BQUssQ0FBRztBQUM1QyxXQUFFLEVBQUksR0FBQyxJQUFLLEVBQUMsQ0FBQztBQUNkLFdBQUUsRUFBSSxVQUFTLEVBQUc7QUFDaEIsZ0JBQU8sS0FBRyxNQUFPLENBQUMsR0FBSSxJQUFFLENBQUMsRUFBSSxJQUFFLENBQUM7U0FDbEMsQ0FBQztBQUNELFdBQUUsQ0FBRSxFQUFDLEVBQUksSUFBRyxDQUFDLEdBQUUsQ0FBRSxFQUFDLENBQUMsQ0FBQztBQUNwQixXQUFFLENBQUUsRUFBQyxFQUFJLElBQUcsQ0FBQyxHQUFFLENBQUUsRUFBQyxFQUFJLElBQUUsQ0FBQyxFQUFJLElBQUUsQ0FBQztBQUNoQyxXQUFFLENBQUUsRUFBQyxFQUFJLElBQUcsQ0FBQyxHQUFFLENBQUUsRUFBQyxFQUFJLElBQUUsQ0FBQyxFQUFJLElBQUUsQ0FBQztBQUNoQyxZQUFJLElBQUcsT0FBTyxJQUFNLEdBQUc7QUFDckIsYUFBRSxDQUFFLEVBQUMsRUFBSSxJQUFFLENBQUUsRUFBQyxDQUFDO1NBQ2pCO0FBQ0EsY0FBTyxLQUFHLEVBQUksSUFBRSxFQUFJLElBQUUsS0FBTSxDQUFDLEdBQUUsQ0FBQyxFQUFJLElBQUUsQ0FBQztPQUN6QztBQUFBLEtBQ0YsQ0FBQztBQUVELFNBQUksVUFBVSxZQUFZLEVBQUksVUFBUyxFQUFHLElBQUUsQ0FBRyxHQUFHO0FBTzVDLFlBQUM7QUFBRyxhQUFFO0FBQUcsY0FBRztBQUFHLGNBQUc7QUFBRyxhQUFFO0FBQUcsY0FBRztBQUFHLGNBQUc7QUFBRyxZQUFDO0FBQUcsYUFBRTtBQUFHLGFBQUU7QUFBRyxjQUFHO0FBQUcsY0FBRztBQUFHLGNBQUc7QUFBRyxjQUFHLENBQUM7QUFFOUUsUUFBQyxFQUFJLEtBQUcsQ0FBQztBQUNULFVBQUksSUFBSyxLQUFHLENBQUc7QUFDYixXQUFJLE1BQUksQ0FBQztPQUNYO0FBQ0EsVUFBSSxJQUFJLENBQUMsR0FBRSxDQUFDLElBQU0sU0FBTyxDQUFHO0FBQzFCLFdBQUUsRUFBSSxJQUFJLE1BQUssQ0FBQyxHQUFFLENBQUMsQ0FBQztPQUN0QjtBQUNBLFVBQUksS0FBTSxNQUFJLEdBQUssTUFBTSxNQUFJLEdBQUssTUFBTSxNQUFJLEdBQUssTUFBTSxNQUFJLENBQUc7QUFDNUQsWUFBSSxLQUFNLE1BQUksQ0FBRztBQUNmLGNBQUcsRUFBSSxHQUFDLElBQUssRUFBQyxDQUFDO0FBQ2YsY0FBRyxFQUFJLElBQUUsSUFBSyxFQUFDLENBQUM7U0FDbEIsS0FBTyxLQUFJLEtBQU0sTUFBSSxDQUFHO0FBQ3RCLGNBQUcsRUFBSSxHQUFDLElBQUssRUFBQyxDQUFDO0FBQ2YsY0FBRyxFQUFJLElBQUUsSUFBSyxFQUFDLENBQUM7U0FDbEIsS0FBTyxLQUFJLEtBQU0sTUFBSSxDQUFHO0FBQ3RCLGNBQUcsRUFBSSxHQUFDLElBQUssRUFBQyxDQUFDO0FBQ2YsY0FBRyxFQUFJLElBQUUsSUFBSyxFQUFDLENBQUM7U0FDbEIsS0FBTyxLQUFJLEtBQU0sTUFBSSxDQUFHO0FBQ3RCLGNBQUcsRUFBSSxHQUFDLElBQUssRUFBQyxDQUFDO0FBQ2YsY0FBRyxFQUFJLElBQUUsSUFBSyxFQUFDLENBQUM7U0FDbEI7QUFDQSxZQUFJLFFBQVEsQ0FBQyxFQUFHLEdBQUMsSUFBTSxJQUFFLENBQUc7QUFDMUIsY0FBRyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsS0FBRyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsS0FBRyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDOUMsY0FBRyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsS0FBRyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsS0FBRyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7U0FDaEQsS0FBTztBQUNMLGNBQUcsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLEtBQUcsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLEtBQUcsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO0FBQzlDLGNBQUcsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLEtBQUcsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLEtBQUcsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO1NBQ2hEO0FBQ0EsWUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFHLENBQUMsR0FBSyxFQUFDLEtBQUssQ0FBQyxJQUFHLENBQUMsQ0FBRztBQUNoQyxjQUFJLElBQUcsRUFBSSxLQUFHLEdBQUssS0FBRyxFQUFJLEtBQUcsRUFBSSxJQUFFLENBQUc7QUFDcEMsY0FBQyxFQUFJLEtBQUcsRUFBSSxFQUFDLElBQUcsRUFBSSxJQUFFLENBQUMsQ0FBQztXQUMxQixLQUFPLEtBQUksSUFBRyxFQUFJLEtBQUcsR0FBSyxLQUFHLEVBQUksS0FBRyxFQUFJLElBQUUsQ0FBRztBQUMzQyxjQUFDLEVBQUksS0FBRyxFQUFJLElBQUUsRUFBSSxLQUFHLENBQUM7V0FDeEIsS0FBTztBQUNMLGNBQUMsRUFBSSxLQUFHLEVBQUksS0FBRyxDQUFDO1dBQ2xCO0FBQ0EsYUFBRSxFQUFJLEtBQUcsRUFBSSxJQUFJLEdBQUMsQ0FBQztTQUNyQixLQUFPLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBRyxDQUFDLENBQUc7QUFDdkIsYUFBRSxFQUFJLEtBQUcsQ0FBQztBQUNWLGNBQUksQ0FBQyxJQUFHLElBQU0sS0FBSyxLQUFHLElBQU0sR0FBQyxHQUFLLE1BQU0sTUFBSSxDQUFHO0FBQzdDLGVBQUUsRUFBSSxLQUFHLENBQUM7V0FDWjtBQUFBLFNBQ0YsS0FBTyxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUcsQ0FBQyxDQUFHO0FBQ3ZCLGFBQUUsRUFBSSxLQUFHLENBQUM7QUFDVixjQUFJLENBQUMsSUFBRyxJQUFNLEtBQUssS0FBRyxJQUFNLEdBQUMsR0FBSyxNQUFNLE1BQUksQ0FBRztBQUM3QyxlQUFFLEVBQUksS0FBRyxDQUFDO1dBQ1o7QUFBQSxTQUNGLEtBQU87QUFDTCxhQUFFLEVBQUksT0FBSyxJQUFJLENBQUM7U0FDbEI7QUFDQSxZQUFJLEdBQUUsR0FBSyxLQUFHLENBQUc7QUFDZixhQUFFLEVBQUksS0FBRyxFQUFJLElBQUksRUFBQyxJQUFHLEVBQUksS0FBRyxDQUFDLENBQUM7U0FDaEM7QUFDQSxXQUFFLEVBQUksS0FBRyxFQUFJLElBQUksRUFBQyxJQUFHLEVBQUksS0FBRyxDQUFDLENBQUM7QUFDOUIsWUFBSSxRQUFRLENBQUMsRUFBRyxHQUFDLElBQU0sSUFBRSxDQUFHO0FBQzFCLGFBQUUsRUFBSSxJQUFJLE1BQUssQ0FBQyxHQUFFLENBQUcsSUFBRSxDQUFHLElBQUUsQ0FBRyxHQUFDLENBQUM7U0FDbkMsS0FBTztBQUNMLGFBQUUsRUFBSSxJQUFJLE1BQUssQ0FBQyxHQUFFLENBQUcsSUFBRSxDQUFHLElBQUUsQ0FBRyxHQUFDLENBQUM7U0FDbkM7QUFBQSxPQUNGLEtBQU8sS0FBSSxLQUFNLE1BQUksQ0FBRztBQUN0QixZQUFHLEVBQUksR0FBQyxLQUFLLENBQUM7QUFDZCxZQUFHLEVBQUksSUFBRSxLQUFLLENBQUM7QUFDZixXQUFFLEVBQUksSUFBSSxNQUFLLENBQUMsSUFBRyxDQUFFLEVBQUMsRUFBSSxJQUFJLEVBQUMsSUFBRyxDQUFFLEVBQUMsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDLENBQUcsS0FBRyxDQUFFLEVBQUMsRUFBSSxJQUFJLEVBQUMsSUFBRyxDQUFFLEVBQUMsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDLENBQUcsS0FBRyxDQUFFLEVBQUMsRUFBSSxJQUFJLEVBQUMsSUFBRyxDQUFFLEVBQUMsRUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDLENBQUcsR0FBQyxDQUFDO09BQzdILEtBQU8sS0FBSSxLQUFNLE1BQUksQ0FBRztBQUN0QixZQUFHLEVBQUksR0FBQyxJQUFLLEVBQUMsQ0FBQztBQUNmLFlBQUcsRUFBSSxJQUFFLElBQUssRUFBQyxDQUFDO0FBQ2hCLFdBQUUsRUFBSSxJQUFJLE1BQUssQ0FBQyxJQUFHLENBQUUsRUFBQyxFQUFJLElBQUksRUFBQyxJQUFHLENBQUUsRUFBQyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUMsQ0FBRyxLQUFHLENBQUUsRUFBQyxFQUFJLElBQUksRUFBQyxJQUFHLENBQUUsRUFBQyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUMsQ0FBRyxLQUFHLENBQUUsRUFBQyxFQUFJLElBQUksRUFBQyxJQUFHLENBQUUsRUFBQyxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUMsQ0FBRyxHQUFDLENBQUM7T0FDN0gsS0FBTztBQUNMLGFBQU0sY0FBWSxFQUFJLElBQUksb0JBQWtCLENBQUM7T0FDL0M7QUFDQSxTQUFFLE1BQU8sQ0FBQyxFQUFDLE1BQU8sRUFBQyxFQUFJLElBQUksRUFBQyxHQUFFLE1BQU8sRUFBQyxFQUFJLEdBQUMsTUFBTyxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RELFlBQU8sSUFBRSxDQUFDO0tBQ1osQ0FBQztBQUVELFNBQUksVUFBVSxZQUFZLEVBQUksVUFBUyxDQUFFO0FBQ25DO0FBQUcsYUFBRSxDQUFDO0FBRVYsU0FBRSxFQUFJLEtBQUcsSUFBSyxFQUFDLENBQUM7QUFDaEIsU0FBSSxLQUFHLE1BQU8sRUFBQyxDQUFDO0FBQ2hCLFlBQU8sT0FBTSxDQUFDLEdBQUUsQ0FBRSxFQUFDLEVBQUksR0FBRyxJQUFFLENBQUUsRUFBQyxFQUFJLEdBQUcsSUFBRSxDQUFFLEVBQUMsRUFBSSxHQUFHLEdBQUMsQ0FBQztLQUN0RCxDQUFDO0FBRUQsU0FBSSxVQUFVLE9BQU8sRUFBSSxVQUFTLE1BQUssQ0FBRztBQUNwQyxhQUFFO0FBQUcsWUFBQyxDQUFDO0FBRVgsVUFBSSxNQUFLLEdBQUssS0FBRyxDQUFHO0FBQ2xCLGNBQUssRUFBSSxHQUFDLENBQUM7T0FDYjtBQUNBLFFBQUMsRUFBSSxLQUFHLENBQUM7QUFDVCxTQUFFLEVBQUksR0FBQyxJQUFLLEVBQUMsQ0FBQztBQUNkLFNBQUUsQ0FBRSxFQUFDLEdBQUssT0FBSyxDQUFDO0FBQ2hCLFlBQU8sT0FBSyxJQUFLLENBQUMsR0FBRSxDQUFDLE1BQU8sQ0FBQyxFQUFDLE1BQU8sRUFBQyxDQUFDLENBQUM7S0FDMUMsQ0FBQztBQUVELFNBQUksVUFBVSxPQUFPLEVBQUksVUFBUyxNQUFLLENBQUc7QUFDeEMsWUFBTyxLQUFHLE9BQVEsQ0FBQyxNQUFLLENBQUMsQ0FBQztLQUM1QixDQUFDO0FBRUQsU0FBSSxVQUFVLFNBQVMsRUFBSSxVQUFTLE1BQUssQ0FBRztBQUMxQyxVQUFJLE1BQUssR0FBSyxLQUFHLENBQUc7QUFDbEIsY0FBSyxFQUFJLEdBQUMsQ0FBQztPQUNiO0FBQ0EsWUFBTyxLQUFHLE9BQVEsQ0FBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0tBQzdCLENBQUM7QUFFRCxTQUFJLFVBQVUsU0FBUyxFQUFJLFVBQVMsTUFBSyxDQUFHO0FBQzFDLFlBQU8sS0FBRyxTQUFVLENBQUMsTUFBSyxDQUFDLENBQUM7S0FDOUIsQ0FBQztBQUVELFNBQUksVUFBVSxTQUFTLEVBQUksVUFBUyxNQUFLLENBQUc7QUFDdEMsYUFBRTtBQUFHLFlBQUMsQ0FBQztBQUVYLFVBQUksTUFBSyxHQUFLLEtBQUcsQ0FBRztBQUNsQixjQUFLLEVBQUksR0FBQyxDQUFDO09BQ2I7QUFDQSxRQUFDLEVBQUksS0FBRyxDQUFDO0FBQ1QsU0FBRSxFQUFJLEdBQUMsSUFBSyxFQUFDLENBQUM7QUFDZCxTQUFFLENBQUUsRUFBQyxHQUFLLE9BQUssQ0FBQztBQUNoQixZQUFPLE9BQUssSUFBSyxDQUFDLEdBQUUsQ0FBQyxNQUFPLENBQUMsRUFBQyxNQUFPLEVBQUMsQ0FBQyxDQUFDO0tBQzFDLENBQUM7QUFFRCxTQUFJLFVBQVUsV0FBVyxFQUFJLFVBQVMsTUFBSyxDQUFHO0FBQzVDLFVBQUksTUFBSyxHQUFLLEtBQUcsQ0FBRztBQUNsQixjQUFLLEVBQUksR0FBQyxDQUFDO09BQ2I7QUFDQSxZQUFPLEtBQUcsU0FBVSxDQUFDLENBQUMsTUFBSyxDQUFDLENBQUM7S0FDL0IsQ0FBQztBQUVELFVBQU8sTUFBSSxDQUFDO0dBRWQsQ0FBRSxFQUFDLENBQUM7QUFFSixVQUFPLEVBQUksVUFBUyxHQUFFLENBQUc7QUFDbkIsVUFBQztBQUVMLFNBQUssSUFBSyxJQUFFLENBQUc7QUFDYixVQUFJLEdBQUksR0FBRztBQUNULFlBQUksR0FBRSxDQUFFLEVBQUMsRUFBSSxHQUFHO0FBQ2QsYUFBRSxDQUFFLEVBQUMsRUFBSSxHQUFDO1NBQ1o7QUFDQSxZQUFJLEdBQUUsQ0FBRSxFQUFDLEVBQUksSUFBRSxDQUFHO0FBQ2hCLGFBQUUsQ0FBRSxFQUFDLEVBQUksSUFBRSxDQUFDO1NBQ2Q7QUFBQSxPQUNGLEtBQU8sS0FBSSxLQUFNLEdBQUc7QUFDbEIsWUFBSSxHQUFFLENBQUUsRUFBQyxFQUFJLEdBQUc7QUFDZCxhQUFFLENBQUUsRUFBQyxFQUFJLEdBQUM7U0FDWjtBQUNBLFlBQUksR0FBRSxDQUFFLEVBQUMsRUFBSSxHQUFHO0FBQ2QsYUFBRSxDQUFFLEVBQUMsRUFBSSxHQUFDO1NBQ1o7QUFBQSxPQUNGO0FBQUEsS0FDRjtBQUNBLFVBQU8sSUFBRSxDQUFDO0dBQ1osQ0FBQztBQUVELFNBQU0sRUFBSSxVQUFTLEdBQUUsQ0FBRztBQUNsQixXQUFFO0FBQUc7QUFBRztBQUFHLFdBQUU7QUFBRyxVQUFDO0FBQUcsVUFBQztBQUFHLFVBQUM7QUFBRyxVQUFDLENBQUM7QUFFbEMsT0FBRSxFQUFJLElBQUUsWUFBYSxFQUFDLENBQUM7QUFDdkIsUUFBSSxDQUFDLE1BQUssT0FBTyxHQUFLLEtBQUcsQ0FBQyxHQUFLLE9BQUssT0FBTyxDQUFFLEdBQUUsQ0FBQyxDQUFHO0FBQ2pELFlBQU8sUUFBTyxDQUFDLE1BQUssT0FBTyxDQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7S0FDcEM7QUFDQSxRQUFJLEdBQUksSUFBRSxNQUFPLENBQUMsa0RBQWlELENBQUMsQ0FBRztBQUNyRSxTQUFFLEVBQUksUUFBTyxDQUFDLEVBQUcsR0FBQyxDQUFDO0FBQ25CLFdBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxHQUFDLEdBQUssR0FBRyxJQUFJLEdBQUUsRUFBQyxDQUFHO0FBQ2xDLFdBQUUsQ0FBRSxFQUFDLEVBQUksRUFBQyxHQUFFLENBQUUsRUFBQyxDQUFDO09BQ2xCO0FBQ0EsU0FBRSxDQUFFLEVBQUMsRUFBSSxHQUFDO0tBQ1osS0FBTyxLQUFJLEdBQUksSUFBRSxNQUFPLENBQUMsd0VBQXVFLENBQUMsQ0FBRztBQUNsRyxTQUFFLEVBQUksUUFBTyxDQUFDLEVBQUcsR0FBQyxDQUFDO0FBQ25CLFdBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxHQUFDLEdBQUssR0FBRyxJQUFJLEdBQUUsRUFBQyxDQUFHO0FBQ2xDLFdBQUUsQ0FBRSxFQUFDLEVBQUksRUFBQyxHQUFFLENBQUUsRUFBQyxDQUFDO09BQ2xCO0FBQUEsS0FDRixLQUFPLEtBQUksR0FBSSxJQUFFLE1BQU8sQ0FBQyxtRkFBa0YsQ0FBQyxDQUFHO0FBQzdHLFNBQUUsRUFBSSxRQUFPLENBQUMsRUFBRyxHQUFDLENBQUM7QUFDbkIsV0FBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLEdBQUMsR0FBSyxHQUFHLElBQUksR0FBRSxFQUFDLENBQUc7QUFDbEMsV0FBRSxDQUFFLEVBQUMsRUFBSSxLQUFHLE1BQU8sQ0FBQyxHQUFFLENBQUUsRUFBQyxFQUFJLEtBQUcsQ0FBQyxDQUFDO09BQ3BDO0FBQ0EsU0FBRSxDQUFFLEVBQUMsRUFBSSxHQUFDO0tBQ1osS0FBTyxLQUFJLEdBQUksSUFBRSxNQUFPLENBQUMseUdBQXdHLENBQUMsQ0FBRztBQUNuSSxTQUFFLEVBQUksUUFBTyxDQUFDLEVBQUcsR0FBQyxDQUFDO0FBQ25CLFdBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxHQUFDLEdBQUssR0FBRyxJQUFJLEdBQUUsRUFBQyxDQUFHO0FBQ2xDLFdBQUUsQ0FBRSxFQUFDLEVBQUksS0FBRyxNQUFPLENBQUMsR0FBRSxDQUFFLEVBQUMsRUFBSSxLQUFHLENBQUMsQ0FBQztPQUNwQztBQUNBLFNBQUUsQ0FBRSxFQUFDLEVBQUksRUFBQyxHQUFFLENBQUUsRUFBQyxDQUFDO0tBQ2xCLEtBQU8sS0FBSSxHQUFJLElBQUUsTUFBTyxDQUFDLGtGQUFpRixDQUFDLENBQUc7QUFDNUcsU0FBRSxFQUFJLFFBQU8sQ0FBQyxFQUFHLEdBQUMsQ0FBQztBQUNuQixTQUFFLENBQUUsRUFBQyxHQUFLLEtBQUcsQ0FBQztBQUNkLFNBQUUsQ0FBRSxFQUFDLEdBQUssS0FBRyxDQUFDO0FBQ2QsU0FBRSxFQUFJLFFBQU8sQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUNsQixTQUFFLENBQUUsRUFBQyxFQUFJLEdBQUM7S0FDWixLQUFPLEtBQUksR0FBSSxJQUFFLE1BQU8sQ0FBQyx3R0FBdUcsQ0FBQyxDQUFHO0FBQ2xJLFNBQUUsRUFBSSxRQUFPLENBQUMsRUFBRyxHQUFDLENBQUM7QUFDbkIsU0FBRSxDQUFFLEVBQUMsR0FBSyxLQUFHLENBQUM7QUFDZCxTQUFFLENBQUUsRUFBQyxHQUFLLEtBQUcsQ0FBQztBQUNkLFNBQUUsRUFBSSxRQUFPLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDbEIsU0FBRSxDQUFFLEVBQUMsRUFBSSxFQUFDLEVBQUUsRUFBQyxDQUFDO0tBQ2hCO0FBQ0EsVUFBTyxJQUFFLENBQUM7R0FDWixDQUFDO0FBRUQsU0FBTSxFQUFJLFVBQVMsR0FBRSxDQUFHO0FBQ2xCO0FBQUc7QUFBRztBQUFHO0FBQUcsV0FBRTtBQUFHLFVBQUM7QUFFdEIsUUFBSSxHQUFFLE1BQU8sQ0FBQyxxQ0FBb0MsQ0FBQyxDQUFHO0FBQ3BELFVBQUksR0FBRSxPQUFPLElBQU0sS0FBSyxJQUFFLE9BQU8sSUFBTSxHQUFHO0FBQ3hDLFdBQUUsRUFBSSxJQUFFLE9BQVEsQ0FBQyxFQUFDLENBQUM7T0FDckI7QUFDQSxVQUFJLEdBQUUsT0FBTyxJQUFNLEdBQUc7QUFDcEIsV0FBRSxFQUFJLElBQUUsTUFBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQ25CLFdBQUUsRUFBSSxJQUFFLENBQUUsRUFBQyxFQUFJLElBQUUsQ0FBRSxFQUFDLEVBQUksSUFBRSxDQUFFLEVBQUMsRUFBSSxJQUFFLENBQUUsRUFBQyxFQUFJLElBQUUsQ0FBRSxFQUFDLEVBQUksSUFBRSxDQUFFLEVBQUMsQ0FBQztPQUMzRDtBQUNBLFNBQUksU0FBUSxDQUFDLEdBQUUsQ0FBRyxHQUFDLENBQUMsQ0FBQztBQUNyQixTQUFJLEtBQUssR0FBQyxDQUFDO0FBQ1gsU0FBSSxLQUFLLElBQUksS0FBRyxDQUFDO0FBQ2pCLFNBQUksSUFBSSxLQUFHLENBQUM7QUFDWixZQUFPLEVBQUMsRUFBRyxHQUFHLEdBQUcsR0FBQyxDQUFDO0tBQ3JCO0FBQ0EsUUFBSSxHQUFFLE1BQU8sQ0FBQyxzQkFBcUIsQ0FBQyxDQUFHO0FBQ3JDLFVBQUksR0FBRSxPQUFPLElBQU0sR0FBRztBQUNwQixXQUFFLEVBQUksSUFBRSxPQUFRLENBQUMsRUFBQyxDQUFDO09BQ3JCO0FBQ0EsU0FBSSxTQUFRLENBQUMsR0FBRSxDQUFHLEdBQUMsQ0FBQyxDQUFDO0FBQ3JCLFNBQUksS0FBSyxHQUFDLEVBQUksS0FBRyxDQUFDO0FBQ2xCLFNBQUksS0FBSyxHQUFDLEVBQUksS0FBRyxDQUFDO0FBQ2xCLFNBQUksS0FBSyxJQUFJLEtBQUcsQ0FBQztBQUNqQixTQUFJLElBQUksS0FBRyxDQUFDO0FBQ1osWUFBTyxFQUFDLEVBQUcsR0FBRyxHQUFHLEdBQUMsQ0FBQztLQUNyQjtBQUNBLFFBQUksR0FBRSxFQUFJLFFBQU8sQ0FBQyxHQUFFLENBQUMsQ0FBRztBQUN0QixZQUFPLElBQUUsQ0FBQztLQUNaO0FBQ0EsU0FBTSxrQkFBZ0IsRUFBSSxJQUFFLENBQUM7R0FDL0IsQ0FBQztBQUVELFNBQU0sRUFBSSxVQUFTLEVBQUcsR0FBRyxHQUFHO0FBTXRCO0FBQUc7QUFBRztBQUFHLFlBQUcsQ0FBQztBQUVqQixRQUFHLEVBQUksT0FBTSxDQUFDLFNBQVEsQ0FBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO0FBQy9ELFFBQUssSUFBRSxDQUFDO0FBQ1IsUUFBSSxHQUFJLElBQUksR0FBRztBQUNiLFNBQUksRUFBQyxHQUFJLEdBQUMsRUFBSSxHQUFDO0FBQ2YsU0FBSSxFQUFDLEdBQUksSUFBSSxJQUFHLENBQUMsS0FBSSxFQUFJLEdBQUMsRUFBSSxJQUFHLENBQUMsT0FBTSxFQUFJLE1BQUksRUFBSSxHQUFDLENBQUMsRUFBSSxHQUFDO0FBQzNELFNBQUksSUFBSSxFQUFDLEdBQUksR0FBQyxDQUFDO0tBQ2pCLEtBQU8sS0FBSSxHQUFJLElBQUksR0FBRztBQUNwQixVQUFLLElBQUksR0FBQztBQUNWLFNBQUksRUFBQyxHQUFJLEdBQUMsRUFBSSxHQUFDO0FBQ2YsU0FBSSxFQUFDLEdBQUksSUFBSSxJQUFHLENBQUMsS0FBSSxFQUFJLEdBQUMsRUFBSSxJQUFHLENBQUMsT0FBTSxFQUFJLE1BQUksRUFBSSxHQUFDLENBQUMsRUFBSSxHQUFDO0FBQzNELFNBQUksSUFBSSxFQUFDLEdBQUksR0FBQyxDQUFDO0tBQ2pCLEtBQU87QUFDTCxVQUFLLElBQUksR0FBQztBQUNWLFNBQUksRUFBQyxHQUFJLEdBQUMsRUFBSSxHQUFDO0FBQ2YsU0FBSSxFQUFDLEdBQUksSUFBSSxJQUFHLENBQUMsS0FBSSxFQUFJLEdBQUMsRUFBSSxJQUFHLENBQUMsT0FBTSxFQUFJLE1BQUksRUFBSSxHQUFDLENBQUMsRUFBSSxHQUFDO0FBQzNELFNBQUksSUFBSSxFQUFDLEdBQUksR0FBQyxDQUFDO0tBQ2pCO0FBQ0EsT0FBSSxNQUFLLENBQUMsR0FBSSxJQUFJLEdBQUMsQ0FBQztBQUNwQixPQUFJLE1BQUssQ0FBQyxHQUFJLElBQUksR0FBQyxDQUFDO0FBQ3BCLE9BQUksTUFBSyxDQUFDLEdBQUksSUFBSSxHQUFDLENBQUM7QUFDcEIsVUFBTyxFQUFDLEdBQUksSUFBRSxDQUFHLElBQUksSUFBRSxDQUFHLElBQUksSUFBRSxDQUFDLENBQUM7R0FDcEMsQ0FBQztBQUVELFNBQU0sRUFBSSxVQUFTLENBQUU7QUFDZjtBQUFHO0FBQUc7QUFBRztBQUFHO0FBQUc7QUFBRztBQUFHO0FBQUcsVUFBQztBQUFHLFVBQUM7QUFBRyxVQUFDO0FBQUcsVUFBQztBQUFHLFlBQUc7QUFBRyxhQUFJLENBQUM7QUFFdkQsUUFBRyxFQUFJLE9BQU0sQ0FBQyxTQUFRLENBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztBQUMvRCxRQUFJLEtBQU0sR0FBRztBQUNYLFNBQUksSUFBSSxJQUFJLElBQUksSUFBRSxDQUFDO0tBQ3JCLEtBQU87QUFDTCxRQUFDLEVBQUksRUFBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0FBQ2QsU0FBSSxFQUFDLEVBQUcsR0FBRyxHQUFDLENBQUM7QUFDYixRQUFDLEVBQUksSUFBSSxJQUFFLEVBQUksSUFBSSxFQUFDLEdBQUksR0FBQyxFQUFJLElBQUksSUFBSSxJQUFJLEdBQUM7QUFDMUMsUUFBQyxFQUFJLElBQUksSUFBSSxHQUFDLENBQUM7QUFDZixVQUFLLElBQUUsQ0FBQztBQUNSLFFBQUMsQ0FBRSxFQUFDLEVBQUksSUFBSSxJQUFJLEdBQUM7QUFDakIsUUFBQyxDQUFFLEVBQUMsRUFBSSxHQUFDO0FBQ1QsUUFBQyxDQUFFLEVBQUMsRUFBSSxJQUFJLElBQUksR0FBQztBQUNqQixXQUFLLEdBQUksR0FBQyxFQUFJLEdBQUcsR0FBQyxHQUFLLEdBQUcsSUFBSSxHQUFFLEVBQUMsQ0FBRztBQUNsQyxZQUFJLEVBQUMsQ0FBRSxFQUFDLEVBQUksR0FBRztBQUNiLFlBQUMsQ0FBRSxFQUFDLEdBQUssR0FBQztTQUNaO0FBQ0EsWUFBSSxFQUFDLENBQUUsRUFBQyxFQUFJLEdBQUc7QUFDYixZQUFDLENBQUUsRUFBQyxHQUFLLEdBQUM7U0FDWjtBQUNBLFlBQUksR0FBSSxHQUFDLENBQUUsRUFBQyxFQUFJLEdBQUc7QUFDakIsWUFBRSxFQUFDLEVBQUksR0FBQyxFQUFJLEVBQUMsRUFBQyxFQUFJLEdBQUMsQ0FBQyxFQUFJLElBQUksR0FBQyxDQUFFLEVBQUMsQ0FBQztTQUNuQyxLQUFPLEtBQUksR0FBSSxHQUFDLENBQUUsRUFBQyxFQUFJLEdBQUc7QUFDeEIsWUFBRSxFQUFDLEVBQUksR0FBQyxDQUFDO1NBQ1gsS0FBTyxLQUFJLEdBQUksR0FBQyxDQUFFLEVBQUMsRUFBSSxHQUFHO0FBQ3hCLFlBQUUsRUFBQyxFQUFJLEdBQUMsRUFBSSxFQUFDLEVBQUMsRUFBSSxHQUFDLENBQUMsRUFBSSxFQUFDLENBQUMsR0FBSSxHQUFDLEVBQUksR0FBQyxDQUFFLEVBQUMsQ0FBQyxFQUFJLEdBQUM7U0FDL0MsS0FBTztBQUNMLFlBQUUsRUFBQyxFQUFJLEdBQUMsQ0FBQztTQUNYO0FBQUEsT0FDRjtBQUNBLFdBQUksRUFBSSxFQUFDLElBQUcsTUFBTyxDQUFDLEVBQUUsRUFBQyxFQUFJLElBQUUsQ0FBQyxDQUFHLEtBQUcsTUFBTyxDQUFDLEVBQUUsRUFBQyxFQUFJLElBQUUsQ0FBQyxDQUFHLEtBQUcsTUFBTyxDQUFDLEVBQUUsRUFBQyxFQUFJLElBQUUsQ0FBQyxDQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUM7S0FDNUg7QUFDQSxVQUFPLEVBQUMsRUFBRyxHQUFHLEdBQUMsQ0FBQztHQUNsQixDQUFDO0FBRUQsU0FBTSxFQUFJLFVBQVMsQ0FBRTtBQUNmO0FBQUc7QUFBRztBQUFHO0FBQUc7QUFBRztBQUFHO0FBQUc7QUFBRztBQUFHO0FBQUc7QUFBRyxZQUFHO0FBQUcsYUFBSTtBQUFHLGFBQUk7QUFBRyxhQUFJO0FBQUcsYUFBSTtBQUFHLGFBQUk7QUFBRyxhQUFJLENBQUM7QUFFbkYsUUFBRyxFQUFJLE9BQU0sQ0FBQyxTQUFRLENBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztBQUMvRCxRQUFLLElBQUUsQ0FBQztBQUNSLFFBQUksS0FBTSxHQUFHO0FBQ1gsU0FBSSxJQUFJLElBQUksR0FBQztLQUNmLEtBQU87QUFDTCxVQUFJLEtBQU0sSUFBRSxDQUFHO0FBQ2IsV0FBSSxHQUFDO09BQ1A7QUFDQSxVQUFJLEdBQUksSUFBRSxDQUFHO0FBQ1gsWUFBSyxJQUFFLENBQUM7T0FDVjtBQUNBLFVBQUksR0FBSSxHQUFHO0FBQ1QsWUFBSyxJQUFFLENBQUM7T0FDVjtBQUNBLFVBQUssR0FBQyxDQUFDO0FBQ1AsU0FBSSxLQUFHLE1BQU8sQ0FBQyxFQUFDLENBQUM7QUFDakIsU0FBSSxJQUFJLEdBQUM7QUFDVCxTQUFJLElBQUksRUFBQyxHQUFJLEdBQUMsQ0FBQztBQUNmLFNBQUksSUFBSSxFQUFDLEdBQUksSUFBSSxHQUFDLENBQUM7QUFDbkIsU0FBSSxJQUFJLEVBQUMsR0FBSSxJQUFJLEVBQUMsR0FBSSxHQUFDLENBQUMsQ0FBQztBQUN6QixjQUFRO0FBQ04sWUFBSztBQUNILGVBQUksRUFBSSxFQUFDLEVBQUcsR0FBRyxHQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUM7QUFDM0QsZ0JBQUs7QUFDUCxZQUFLO0FBQ0gsZUFBSSxFQUFJLEVBQUMsRUFBRyxHQUFHLEdBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBQztBQUMzRCxnQkFBSztBQUNQLFlBQUs7QUFDSCxlQUFJLEVBQUksRUFBQyxFQUFHLEdBQUcsR0FBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFDO0FBQzNELGdCQUFLO0FBQ1AsWUFBSztBQUNILGVBQUksRUFBSSxFQUFDLEVBQUcsR0FBRyxHQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUM7QUFDM0QsZ0JBQUs7QUFDUCxZQUFLO0FBQ0gsZUFBSSxFQUFJLEVBQUMsRUFBRyxHQUFHLEdBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBQztBQUMzRCxnQkFBSztBQUNQLFlBQUs7QUFDSCxlQUFJLEVBQUksRUFBQyxFQUFHLEdBQUcsR0FBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFDO0FBQUEsT0FDL0Q7S0FDRjtBQUNBLE9BQUksS0FBRyxNQUFPLENBQUMsRUFBQyxDQUFDO0FBQ2pCLE9BQUksS0FBRyxNQUFPLENBQUMsRUFBQyxDQUFDO0FBQ2pCLE9BQUksS0FBRyxNQUFPLENBQUMsRUFBQyxDQUFDO0FBQ2pCLFVBQU8sRUFBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0dBQ2xCLENBQUM7QUFFRCxLQUFJLEdBQUMsQ0FBQztBQUVOLEtBQUksU0FBTyxDQUFDO0FBRVosS0FBSSxHQUFDO0FBRUwsS0FBSSxTQUFPLENBQUM7QUFFWixTQUFNLEVBQUksVUFBUyxDQUFFO0FBQ2Y7QUFBRztBQUFHO0FBQUc7QUFBRztBQUFHLFlBQUcsQ0FBQztBQUV2QixRQUFHLEVBQUksT0FBTSxDQUFDLFNBQVEsQ0FBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO0FBQy9ELE9BQUksS0FBRyxLQUFNLENBQUMsR0FBSSxJQUFJLElBQUksR0FBQyxDQUFDO0FBQzVCLE9BQUksS0FBRyxNQUFPLENBQUMsRUFBRyxHQUFDLEVBQUksS0FBRyxHQUFHLEVBQUksSUFBRSxDQUFDO0FBQ3BDLFVBQU8sRUFBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0dBQ2xCLENBQUM7QUFFRCxTQUFNLEVBQUksVUFBUyxFQUFHLEdBQUcsR0FBRztBQUt0QjtBQUFHO0FBQUc7QUFBRztBQUFHO0FBQUcsWUFBRztBQUFHLGFBQUksQ0FBQztBQUU5QixRQUFJLEtBQU0sS0FBSyxLQUFLLFNBQU8sSUFBTSxHQUFHO0FBQ2xDLFVBQUcsRUFBSSxHQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO0tBQ2pEO0FBQ0EsUUFBSSxLQUFNLEtBQUssS0FBSyxTQUFPLElBQU0sR0FBRztBQUNsQyxXQUFJLEVBQUksR0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBQztLQUNyRDtBQUNBLE9BQUksRUFBQyxHQUFJLEdBQUMsQ0FBQyxFQUFJLElBQUUsQ0FBQztBQUNsQixPQUFJLElBQUksSUFBSSxJQUFFLENBQUM7QUFDZixPQUFJLElBQUksSUFBSSxJQUFFLENBQUM7QUFDZixPQUFJLFFBQU8sQ0FBQyxFQUFDLEVBQUksR0FBQztBQUNsQixPQUFJLFFBQU8sQ0FBQyxFQUFDLEVBQUksR0FBQztBQUNsQixPQUFJLFFBQU8sQ0FBQyxFQUFDLEVBQUksR0FBQztBQUNsQixPQUFJLFFBQU8sQ0FBQyxTQUFRLEVBQUksSUFBSSxVQUFRLEVBQUksSUFBSSxVQUFRLEVBQUksR0FBQyxDQUFDO0FBQzFELE9BQUksUUFBTyxDQUFDLENBQUMsU0FBUSxFQUFJLElBQUksVUFBUSxFQUFJLElBQUksVUFBUSxFQUFJLEdBQUMsQ0FBQztBQUMzRCxPQUFJLFFBQU8sQ0FBQyxTQUFRLEVBQUksSUFBSSxVQUFRLEVBQUksSUFBSSxVQUFRLEVBQUksR0FBQyxDQUFDO0FBQzFELFVBQU8sRUFBQyxLQUFLLENBQUMsRUFBRyxHQUFHLElBQUUsQ0FBQyxDQUFHLE1BQUssQ0FBQyxFQUFHLEdBQUcsSUFBRSxDQUFDLENBQUcsTUFBSyxDQUFDLEVBQUcsR0FBRyxJQUFFLENBQUMsQ0FBRyxHQUFDLENBQUM7R0FDbEUsQ0FBQztBQUVELFNBQU0sRUFBSSxVQUFTLEVBQUc7QUFDcEIsUUFBSSxHQUFJLFlBQVUsQ0FBRztBQUNuQixZQUFPLElBQUksSUFBSSxHQUFDO0tBQ2xCLEtBQU87QUFDTCxZQUFPLEVBQUMsR0FBSSxJQUFJLEdBQUMsQ0FBQyxFQUFJLFNBQU8sQ0FBQztLQUNoQztBQUFBLEdBQ0YsQ0FBQztBQUVELFNBQU0sRUFBSSxVQUFTLEVBQUc7QUFDcEIsVUFBTyxLQUFHLE1BQU8sQ0FBQyxHQUFFLEVBQUksRUFBQyxJQUFLLFFBQU0sRUFBSSxNQUFJLEVBQUksSUFBSSxNQUFJLEVBQUksS0FBRyxJQUFLLENBQUMsRUFBRyxJQUFJLElBQUUsQ0FBQyxFQUFJLE1BQUksQ0FBQyxDQUFDLENBQUM7R0FDNUYsQ0FBQztBQUVELFNBQU0sRUFBSSxVQUFTLENBQUU7QUFNZjtBQUFHO0FBQUc7QUFBRyxZQUFHLENBQUM7QUFFakIsUUFBRyxFQUFJLE9BQU0sQ0FBQyxTQUFRLENBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztBQUMvRCxPQUFJLElBQUksS0FBRyxHQUFHLEVBQUksSUFBRSxDQUFDO0FBQ3JCLFVBQU8sRUFBQyxFQUFHLEtBQUcsSUFBSyxDQUFDLEVBQUMsRUFBSSxHQUFHLEtBQUcsSUFBSyxDQUFDLEVBQUMsRUFBSSxHQUFDLENBQUM7R0FDOUMsQ0FBQztBQUVELFNBQU0sRUFBSSxVQUFTLEVBQUcsR0FBRyxHQUFHO0FBQ3RCO0FBQUc7QUFBRztBQUFHO0FBQUc7QUFBRyxZQUFHO0FBQUcsYUFBSSxDQUFDO0FBRTlCLFFBQUcsRUFBSSxRQUFPLENBQUMsRUFBRyxHQUFHLEdBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztBQUM5RCxTQUFJLEVBQUksUUFBTyxDQUFDLEVBQUcsR0FBRyxHQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUM7QUFDbEUsVUFBTyxFQUFDLEtBQUssQ0FBQyxFQUFHLEdBQUcsSUFBRSxDQUFDLENBQUcsTUFBSyxDQUFDLEVBQUcsR0FBRyxJQUFFLENBQUMsQ0FBRyxNQUFLLENBQUMsRUFBRyxHQUFHLElBQUUsQ0FBQyxDQUFDLENBQUM7R0FDL0QsQ0FBQztBQUVELFdBQVEsRUFBSSxVQUFTLEVBQUcsR0FBRyxHQUFHO0FBQ3hCLFlBQUcsQ0FBQztBQUVSLFFBQUcsRUFBSSxPQUFNLENBQUMsU0FBUSxDQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDL0QsT0FBSSxZQUFXLENBQUMsRUFBQyxDQUFDO0FBQ2xCLE9BQUksWUFBVyxDQUFDLEVBQUMsQ0FBQztBQUNsQixPQUFJLFlBQVcsQ0FBQyxFQUFDLENBQUM7QUFDbEIsVUFBTyxPQUFLLEVBQUksSUFBSSxPQUFLLEVBQUksSUFBSSxPQUFLLEVBQUksR0FBQztHQUM3QyxDQUFDO0FBRUQsYUFBVSxFQUFJLFVBQVMsRUFBRztBQUN4QixRQUFLLElBQUUsQ0FBQztBQUNSLFFBQUksSUFBSyxRQUFNLENBQUc7QUFDaEIsWUFBTyxJQUFJLE1BQUksQ0FBQztLQUNsQixLQUFPO0FBQ0wsWUFBTyxLQUFHLElBQUssQ0FBQyxDQUFDLEdBQUksTUFBSSxDQUFDLEVBQUksTUFBSSxDQUFHLElBQUUsQ0FBQyxDQUFDO0tBQzNDO0FBQUEsR0FDRixDQUFDO0FBRUQsU0FBTSxFQUFJLFVBQVMsQ0FBRTtBQUNmO0FBQUc7QUFBRztBQUFHLFdBQUU7QUFBRztBQUFHLFlBQUcsQ0FBQztBQUV6QixRQUFHLEVBQUksT0FBTSxDQUFDLFNBQVEsQ0FBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFDO0FBQy9ELE9BQUksS0FBSyxHQUFDLEVBQUksS0FBSyxJQUFJLEdBQUM7QUFDeEIsT0FBRSxFQUFJLFNBQU8sRUFBSSxXQUFVLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDL0IsVUFBTyxJQUFFLEVBQUksSUFBRSxPQUFRLENBQUMsR0FBRSxPQUFPLEVBQUksR0FBQyxDQUFDO0dBQ3pDLENBQUM7QUFFRCxTQUFNLEVBQUksVUFBUyxDQUFFO0FBTWYsYUFBSTtBQUFHO0FBQUc7QUFBRztBQUFHO0FBQUcsV0FBRTtBQUFHO0FBQUc7QUFBRyxZQUFHLENBQUM7QUFFdEMsUUFBRyxFQUFJLE9BQU0sQ0FBQyxTQUFRLENBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztBQUMvRCxTQUFJLEVBQUksS0FBRyxHQUFHLEVBQUksR0FBQztBQUNuQixRQUFLLElBQUUsQ0FBQztBQUNSLFFBQUssSUFBRSxDQUFDO0FBQ1IsUUFBSyxJQUFFLENBQUM7QUFDUixPQUFFLEVBQUksS0FBRyxJQUFLLENBQUMsRUFBRyxHQUFHLEdBQUMsQ0FBQztBQUN2QixPQUFJLEVBQUMsR0FBSSxJQUFJLEdBQUMsRUFBSSxHQUFDO0FBQ25CLE9BQUksSUFBSSxJQUFFLEVBQUksR0FBQztBQUNmLFFBQUksS0FBTSxHQUFHO0FBQ1gsU0FBSSxHQUFDO0tBQ1AsS0FBTztBQUNMLFNBQUksRUFBQyxDQUFDLEdBQUksR0FBQyxFQUFJLEVBQUMsR0FBSSxHQUFDLENBQUMsRUFBSSxHQUFDO0FBQzNCLFVBQUssS0FBRyxLQUFNLENBQUMsQ0FBQyxHQUFJLEdBQUMsRUFBSSxFQUFDLEdBQUksR0FBQyxFQUFJLEVBQUMsR0FBSSxHQUFDLEVBQUksRUFBQyxHQUFJLEdBQUMsQ0FBQyxDQUFDO0FBQ3JELFNBQUksS0FBRyxLQUFNLENBQUMsRUFBQyxDQUFDO0FBQ2hCLFVBQUksR0FBSSxHQUFHO0FBQ1QsV0FBSSxNQUFJLEVBQUksR0FBQztPQUNmO0FBQ0EsVUFBSyxNQUFJLENBQUM7S0FDWjtBQUNBLFVBQU8sRUFBQyxHQUFJLElBQUUsQ0FBRyxHQUFHLEdBQUMsQ0FBQztHQUN4QixDQUFDO0FBRUQsU0FBTSxFQUFJLFVBQVMsRUFBRyxHQUFHLEdBQUc7QUFDdEI7QUFBRztBQUFHLFdBQUU7QUFBRyxXQUFFO0FBQUc7QUFBRyxZQUFHLENBQUM7QUFFM0IsUUFBSSxLQUFNLEtBQUssS0FBSyxTQUFPLEdBQUssR0FBRztBQUNqQyxVQUFHLEVBQUksR0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztLQUNqRDtBQUNBLFFBQUssSUFBRSxDQUFDO0FBQ1IsUUFBSyxJQUFFLENBQUM7QUFDUixRQUFLLElBQUUsQ0FBQztBQUNSLE9BQUUsRUFBSSxLQUFHLElBQUssQ0FBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0FBQ3ZCLE9BQUUsRUFBSSxLQUFHLElBQUssQ0FBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0FBQ3ZCLE9BQUksRUFBQyxHQUFFLEVBQUksSUFBRSxDQUFDLEVBQUksR0FBQztBQUNuQixRQUFJLEdBQUUsSUFBTSxJQUFFLENBQUc7QUFDZixTQUFJLEdBQUM7QUFDTCxTQUFJLE9BQUssSUFBSSxDQUFDO0tBQ2hCLEtBQU87QUFDTCxTQUFJLElBQUksSUFBRSxFQUFJLEVBQUMsR0FBRSxFQUFJLElBQUUsQ0FBQyxFQUFJLEVBQUMsR0FBRSxFQUFJLElBQUUsQ0FBQyxFQUFJLEVBQUMsR0FBRSxFQUFJLElBQUUsQ0FBQyxFQUFJLEVBQUMsR0FBSSxJQUFFLEVBQUksSUFBRSxDQUFDLENBQUM7S0FDekU7QUFDQSxRQUFJLEtBQU0sSUFBRSxDQUFHO0FBQ2IsU0FBSSxFQUFDLEdBQUksR0FBQyxFQUFJLEVBQUMsR0FBRSxFQUFJLElBQUUsQ0FBQyxDQUFDO0tBQzNCLEtBQU8sS0FBSSxLQUFNLElBQUUsQ0FBRztBQUNwQixTQUFJLElBQUksRUFBQyxHQUFJLEdBQUMsRUFBSSxFQUFDLEdBQUUsRUFBSSxJQUFFLENBQUMsQ0FBQztLQUMvQixLQUFPLEtBQUksS0FBTSxJQUFFLENBQUc7QUFDcEIsU0FBSSxJQUFJLEVBQUMsR0FBSSxHQUFDLEVBQUksRUFBQyxHQUFFLEVBQUksSUFBRSxDQUFDLENBQUM7S0FDL0I7QUFDQSxRQUFLLEdBQUMsQ0FBQztBQUNQLFFBQUksR0FBSSxHQUFHO0FBQ1QsVUFBSyxJQUFFLENBQUM7S0FDVjtBQUNBLFVBQU8sRUFBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0dBQ2xCLENBQUM7QUFFRCxTQUFNLEVBQUksVUFBUyxDQUFFO0FBQ2Y7QUFBRyxhQUFJO0FBQUc7QUFBRztBQUFHLFdBQUU7QUFBRyxXQUFFO0FBQUc7QUFBRztBQUFHO0FBQUcsWUFBRyxDQUFDO0FBRTNDLFFBQUcsRUFBSSxPQUFNLENBQUMsU0FBUSxDQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDL0QsT0FBRSxFQUFJLEtBQUcsSUFBSyxDQUFDLEVBQUcsR0FBRyxHQUFDLENBQUM7QUFDdkIsT0FBRSxFQUFJLEtBQUcsSUFBSyxDQUFDLEVBQUcsR0FBRyxHQUFDLENBQUM7QUFDdkIsU0FBSSxFQUFJLElBQUUsRUFBSSxJQUFFLENBQUM7QUFDakIsT0FBSSxJQUFFLEVBQUksTUFBSSxDQUFDO0FBQ2YsUUFBSSxHQUFFLElBQU0sR0FBRztBQUNiLFNBQUksT0FBSyxJQUFJLENBQUM7QUFDZCxTQUFJLEdBQUM7S0FDUCxLQUFPO0FBQ0wsU0FBSSxNQUFJLEVBQUksSUFBRSxDQUFDO0FBQ2YsVUFBSSxLQUFNLElBQUUsQ0FBRztBQUNiLFdBQUksRUFBQyxHQUFJLEdBQUMsRUFBSSxNQUFJLENBQUM7T0FDckI7QUFDQSxVQUFJLEtBQU0sSUFBRSxDQUFHO0FBQ2IsV0FBSSxJQUFJLEVBQUMsR0FBSSxHQUFDLEVBQUksTUFBSSxDQUFDO09BQ3pCO0FBQ0EsVUFBSSxLQUFNLElBQUUsQ0FBRztBQUNiLFdBQUksSUFBSSxFQUFDLEdBQUksR0FBQyxFQUFJLE1BQUksQ0FBQztPQUN6QjtBQUNBLFVBQUssR0FBQyxDQUFDO0FBQ1AsVUFBSSxHQUFJLEdBQUc7QUFDVCxZQUFLLElBQUUsQ0FBQztPQUNWO0FBQUEsS0FDRjtBQUNBLFVBQU8sRUFBQyxFQUFHLEdBQUcsR0FBQyxDQUFDO0dBQ2xCLENBQUM7QUFFRCxTQUFNLEVBQUksVUFBUyxDQUFFO0FBQ2Y7QUFBRztBQUFHO0FBQUc7QUFBRztBQUFHO0FBQUcsWUFBRyxDQUFDO0FBRTFCLFFBQUcsRUFBSSxPQUFNLENBQUMsU0FBUSxDQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDL0QsT0FBSSxRQUFPLENBQUMsRUFBQyxDQUFDO0FBQ2QsT0FBSSxRQUFPLENBQUMsRUFBQyxDQUFDO0FBQ2QsT0FBSSxRQUFPLENBQUMsRUFBQyxDQUFDO0FBQ2QsT0FBSSxRQUFPLENBQUMsQ0FBQyxTQUFRLEVBQUksSUFBSSxVQUFRLEVBQUksSUFBSSxVQUFRLEVBQUksR0FBQyxFQUFJLEdBQUMsQ0FBQztBQUNoRSxPQUFJLFFBQU8sQ0FBQyxDQUFDLFNBQVEsRUFBSSxJQUFJLFVBQVEsRUFBSSxJQUFJLFVBQVEsRUFBSSxHQUFDLEVBQUksR0FBQyxDQUFDO0FBQ2hFLE9BQUksUUFBTyxDQUFDLENBQUMsU0FBUSxFQUFJLElBQUksVUFBUSxFQUFJLElBQUksVUFBUSxFQUFJLEdBQUMsRUFBSSxHQUFDLENBQUM7QUFDaEUsVUFBTyxFQUFDLEdBQUUsRUFBSSxJQUFJLEdBQUMsQ0FBRyxJQUFFLEVBQUksRUFBQyxHQUFJLEdBQUMsQ0FBRyxJQUFFLEVBQUksRUFBQyxHQUFJLEdBQUMsQ0FBQyxDQUFDO0dBQ3JELENBQUM7QUFFRCxTQUFNLEVBQUksVUFBUyxFQUFHO0FBQ3BCLFFBQUksQ0FBQyxJQUFLLElBQUUsQ0FBQyxHQUFLLFFBQU0sQ0FBRztBQUN6QixZQUFPLElBQUksTUFBSSxDQUFDO0tBQ2xCLEtBQU87QUFDTCxZQUFPLEtBQUcsSUFBSyxDQUFDLENBQUMsR0FBSSxNQUFJLENBQUMsRUFBSSxNQUFJLENBQUcsSUFBRSxDQUFDLENBQUM7S0FDM0M7QUFBQSxHQUNGLENBQUM7QUFFRCxTQUFNLEVBQUksVUFBUyxFQUFHO0FBQ3BCLFFBQUksR0FBSSxTQUFPLENBQUc7QUFDaEIsWUFBTyxLQUFHLElBQUssQ0FBQyxFQUFHLElBQUksR0FBQyxDQUFDO0tBQzNCLEtBQU87QUFDTCxZQUFPLFNBQU8sRUFBSSxJQUFJLElBQUksR0FBQyxDQUFDO0tBQzlCO0FBQUEsR0FDRixDQUFDO0FBRUQsU0FBTSxFQUFJLFVBQVMsQ0FBRTtBQUNmO0FBQUc7QUFBRztBQUFHO0FBQUc7QUFBRyxZQUFHO0FBQUcsYUFBSSxDQUFDO0FBRTlCLFFBQUcsRUFBSSxPQUFNLENBQUMsU0FBUSxDQUFDLENBQUcsSUFBSSxLQUFHLENBQUUsRUFBQyxDQUFHLElBQUksS0FBRyxDQUFFLEVBQUMsQ0FBRyxJQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDL0QsU0FBSSxFQUFJLFFBQU8sQ0FBQyxFQUFHLEdBQUcsR0FBQyxDQUFHLElBQUksTUFBSSxDQUFFLEVBQUMsQ0FBRyxJQUFJLE1BQUksQ0FBRSxFQUFDLENBQUcsSUFBSSxNQUFJLENBQUUsRUFBQyxDQUFDO0FBQ2xFLFVBQU8sUUFBTyxDQUFDLEVBQUcsR0FBRyxHQUFDLENBQUM7R0FDekIsQ0FBQztBQW9DRCxRQUFLLE1BQU0sRUFBSSxVQUFTLE1BQUssQ0FBRyxVQUFRLENBQUc7QUFDckMscUJBQVk7QUFBRztBQUFHLGdCQUFPO0FBQUcsZ0JBQU87QUFBRyxrQkFBUztBQUFHLGlCQUFRO0FBQUcsaUJBQVE7QUFBRyxZQUFHO0FBQUcsbUJBQVU7QUFBRyxlQUFNO0FBQUcseUJBQWdCO0FBQUcsZUFBTTtBQUFHLGNBQUs7QUFBRyxZQUFHO0FBQUcsWUFBRztBQUFHLGFBQUk7QUFBRyxjQUFLO0FBQUcsbUJBQVU7QUFBRyxZQUFHO0FBQUcsWUFBRztBQUFHLGVBQU0sQ0FBQztBQUV2TSxTQUFJLEVBQUksTUFBSSxDQUFDO0FBQ2IsVUFBSyxFQUFJLE9BQU0sQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUN2QixXQUFNLEVBQUksR0FBQztBQUNYLFVBQUssRUFBSSxNQUFJLENBQUM7QUFDZCxXQUFNLEVBQUksRUFBQyxFQUFHLEdBQUMsQ0FBQztBQUNoQixXQUFNLEVBQUksR0FBQyxDQUFDO0FBQ1osUUFBRyxFQUFJLE1BQUksQ0FBQztBQUNaLFFBQUcsRUFBSSxHQUFDLENBQUM7QUFDVCxRQUFHLEVBQUksR0FBQztBQUNSLFFBQUcsRUFBSSxHQUFDO0FBQ1IscUJBQWdCLEVBQUksTUFBSSxDQUFDO0FBQ3pCLGVBQVUsRUFBSSxHQUFDO0FBQ2YsZUFBVSxFQUFJLEdBQUMsQ0FBQztBQUNoQixhQUFRLEVBQUksVUFBUyxNQUFLLENBQUcsVUFBUSxDQUFHO0FBQ2xDO0FBQUcsYUFBRTtBQUFHLFlBQUM7QUFBRyxZQUFDO0FBQUcsY0FBRztBQUFHLGVBQUk7QUFBRyxlQUFJLENBQUM7QUFFdEMsVUFBSSxNQUFLLEdBQUssS0FBRyxDQUFHO0FBQ2xCLGNBQUssRUFBSSxFQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztPQUMzQjtBQUNBLFVBQUksQ0FBQyxNQUFLLEdBQUssS0FBRyxDQUFDLEdBQUssS0FBSSxDQUFDLE1BQUssQ0FBQyxJQUFNLFNBQU8sR0FBSyxFQUFDLENBQUMsQ0FBQyxJQUFHLEVBQUksT0FBSyxPQUFPLENBQUMsR0FBSyxLQUFHLEVBQUksS0FBRyxDQUFFLE1BQUssQ0FBQyxFQUFJLEtBQUssR0FBQyxHQUFLLEtBQUcsQ0FBQyxDQUFHO0FBQ3ZILGNBQUssRUFBSSxPQUFLLE9BQU8sQ0FBRSxNQUFLLENBQUMsQ0FBQztPQUNoQztBQUNBLFVBQUksSUFBSSxDQUFDLE1BQUssQ0FBQyxJQUFNLFFBQU0sQ0FBRztBQUM1QixjQUFLLEVBQUksT0FBSyxNQUFPLENBQUMsRUFBQyxDQUFDO0FBQ3hCLGFBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxNQUFJLEVBQUksT0FBSyxPQUFPLEVBQUksR0FBRyxLQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxFQUFJLEdBQUMsR0FBSyxNQUFJLENBQUcsSUFBSSxLQUFLLE1BQUksRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUNoSCxhQUFFLEVBQUksT0FBSyxDQUFFLEVBQUMsQ0FBQztBQUNmLGNBQUksSUFBSSxDQUFDLEdBQUUsQ0FBQyxJQUFNLFNBQU8sQ0FBRztBQUMxQixrQkFBSyxDQUFFLEVBQUMsRUFBSSxPQUFNLENBQUMsR0FBRSxDQUFDLENBQUM7V0FDekI7QUFBQSxTQUNGO0FBQ0EsWUFBSSxTQUFRLEdBQUssS0FBRyxDQUFHO0FBQ3JCLGNBQUcsRUFBSSxVQUFRLENBQUM7U0FDbEIsS0FBTztBQUNMLGNBQUcsRUFBSSxHQUFDLENBQUM7QUFDVCxlQUFLLEdBQUksR0FBQyxFQUFJLEdBQUcsTUFBSSxFQUFJLE9BQUssT0FBTyxFQUFJLEdBQUcsS0FBSyxNQUFJLEVBQUksR0FBQyxHQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxDQUFHLElBQUksS0FBSyxNQUFJLEVBQUksR0FBRSxFQUFDLEVBQUksR0FBRSxFQUFDLENBQUc7QUFDaEgsZ0JBQUcsS0FBTSxDQUFDLEdBQUksRUFBQyxNQUFLLE9BQU8sRUFBSSxHQUFDLENBQUMsQ0FBQztXQUNwQztBQUFBLFNBQ0Y7QUFBQSxPQUNGO0FBQ0EsZ0JBQVUsRUFBQyxDQUFDO0FBQ1osWUFBTyxRQUFNLEVBQUksT0FBSyxDQUFDO0tBQ3pCLENBQUM7QUFDRCxhQUFRLEVBQUksVUFBUyxNQUFLLENBQUc7QUFDM0IsVUFBSSxNQUFLLEdBQUssS0FBRyxDQUFHO0FBQ2xCLGNBQUssRUFBSSxHQUFDLENBQUM7T0FDYjtBQU1BLGFBQU0sRUFBSSxPQUFLLENBQUM7QUFDaEIsVUFBRyxFQUFJLE9BQUssQ0FBRSxFQUFDLENBQUM7QUFDaEIsVUFBRyxFQUFJLE9BQUssQ0FBRSxNQUFLLE9BQU8sRUFBSSxHQUFDLENBQUM7QUFDaEMsZ0JBQVUsRUFBQyxDQUFDO0FBQ1osVUFBSSxNQUFLLE9BQU8sSUFBTSxHQUFHO0FBQ3ZCLGNBQU8sWUFBVSxFQUFJLEdBQUM7T0FDeEIsS0FBTztBQUNMLGNBQU8sWUFBVSxFQUFJLE9BQUssT0FBTyxFQUFJLEdBQUM7T0FDeEM7QUFBQSxLQUNGLENBQUM7QUFDRCxZQUFPLEVBQUksVUFBUyxLQUFJLENBQUc7QUFDckI7QUFBRyxZQUFDO0FBRVIsVUFBSSxPQUFNLEdBQUssS0FBRyxDQUFHO0FBQ25CLFdBQUksUUFBTSxPQUFPLEVBQUksR0FBQztBQUN0QixXQUFJLEdBQUM7QUFDTCxlQUFPLEdBQUksS0FBSyxNQUFJLEdBQUssUUFBTSxDQUFFLEVBQUMsQ0FBRztBQUNuQyxhQUFFLENBQUM7U0FDTDtBQUNBLGNBQU8sSUFBSSxHQUFDO09BQ2Q7QUFDQSxZQUFPLEdBQUM7S0FDVixDQUFDO0FBQ0QsUUFBRyxFQUFJLFVBQVMsRUFBRztBQUNqQixZQUFPLEdBQUM7S0FDVixDQUFDO0FBQ0QsaUJBQVksRUFBSSxVQUFTLEtBQUksQ0FBRztBQUMxQjtBQUFHLGNBQUc7QUFBRyxjQUFHO0FBQUc7QUFBRyxhQUFFLENBQUM7QUFFekIsU0FBRSxFQUFJLE1BQUksQ0FBQztBQUNYLFVBQUksT0FBTSxPQUFPLEVBQUksR0FBRztBQUN0QixXQUFJLFFBQU0sT0FBTyxFQUFJLEdBQUM7QUFDdEIsV0FBSSxTQUFRLENBQUMsS0FBSSxDQUFDLENBQUM7QUFDbkIsWUFBRyxFQUFJLFFBQU0sQ0FBRSxFQUFDLEVBQUksRUFBQyxPQUFNLENBQUUsRUFBQyxFQUFJLFFBQU0sQ0FBRSxFQUFDLENBQUMsRUFBSSxFQUFDLEdBQUksUUFBTSxFQUFJLElBQUUsQ0FBQyxDQUFDO0FBQ25FLFlBQUcsRUFBSSxRQUFNLENBQUUsR0FBSSxHQUFDLEVBQUksRUFBQyxPQUFNLENBQUUsRUFBQyxFQUFJLFFBQU0sQ0FBRSxHQUFJLEdBQUMsQ0FBQyxFQUFJLEVBQUMsR0FBSSxRQUFNLEVBQUksSUFBRSxDQUFDLENBQUM7QUFDM0UsV0FBRSxFQUFJLEtBQUcsRUFBSSxFQUFDLENBQUMsT0FBTSxDQUFFLEVBQUMsRUFBSSxFQUFDLE9BQU0sQ0FBRSxHQUFJLEdBQUMsRUFBSSxRQUFNLENBQUUsRUFBQyxDQUFDLEVBQUksSUFBRSxFQUFJLEtBQUcsQ0FBQyxFQUFJLEVBQUMsSUFBRyxFQUFJLEtBQUcsQ0FBQyxDQUFDLEVBQUksRUFBQyxJQUFHLEVBQUksS0FBRyxDQUFDLENBQUM7T0FDMUc7QUFDQSxZQUFPLElBQUUsQ0FBQztLQUNaLENBQUM7QUFDRCxZQUFPLEVBQUksVUFBUyxHQUFFLENBQUcsVUFBUSxDQUFHO0FBQzlCO0FBQUcsYUFBRTtBQUFHLFlBQUM7QUFBRztBQUFHO0FBQUc7QUFBRztBQUFHLFlBQUM7QUFBRyxjQUFHLENBQUM7QUFFcEMsVUFBSSxTQUFRLEdBQUssS0FBRyxDQUFHO0FBQ3JCLGlCQUFRLEVBQUksTUFBSSxDQUFDO09BQ25CO0FBQ0EsVUFBSSxLQUFLLENBQUMsR0FBRSxDQUFDLENBQUc7QUFDZCxjQUFPLE9BQUssQ0FBQztPQUNmO0FBQ0EsVUFBSSxDQUFDLFNBQVEsQ0FBRztBQUNkLFlBQUksT0FBTSxPQUFPLEVBQUksR0FBRztBQUN0QixhQUFJLFNBQVEsQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUNqQixhQUFJLElBQUksRUFBQyxXQUFVLEVBQUksR0FBQyxDQUFDO1NBQzNCLEtBQU87QUFDTCxhQUFJLEdBQUMsRUFBSSxFQUFDLEdBQUUsRUFBSSxLQUFHLENBQUMsRUFBSSxFQUFDLElBQUcsRUFBSSxLQUFHLENBQUMsQ0FBQztBQUNyQyxhQUFJLEtBQUcsSUFBSyxDQUFDLEVBQUcsS0FBRyxJQUFLLENBQUMsRUFBRyxHQUFDLENBQUMsQ0FBQztTQUNqQztBQUFBLE9BQ0YsS0FBTztBQUNMLFdBQUksSUFBRSxDQUFDO09BQ1Q7QUFDQSxVQUFJLENBQUMsU0FBUSxDQUFHO0FBQ2QsV0FBSSxLQUFJLENBQUMsRUFBQyxDQUFDO09BQ2I7QUFDQSxTQUFJLEtBQUcsTUFBTyxDQUFDLEdBQUksTUFBSSxDQUFDLENBQUM7QUFDekIsVUFBSSxXQUFVLENBQUUsRUFBQyxDQUFHO0FBQ2xCLFdBQUUsRUFBSSxZQUFVLENBQUUsRUFBQyxDQUFDO09BQ3RCLEtBQU87QUFDTCxZQUFJLElBQUksQ0FBQyxPQUFNLENBQUMsSUFBTSxRQUFNLENBQUc7QUFDN0IsZUFBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLEtBQUcsRUFBSSxLQUFHLE9BQU8sRUFBSSxHQUFHLEtBQUssS0FBRyxFQUFJLEdBQUMsR0FBSyxLQUFHLEVBQUksR0FBQyxHQUFLLEtBQUcsQ0FBRyxJQUFJLEtBQUssS0FBRyxFQUFJLEdBQUUsRUFBQyxFQUFJLEdBQUUsRUFBQyxDQUFHO0FBQ3pHLGVBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQztBQUNYLGdCQUFJLElBQUssR0FBRztBQUNWLGlCQUFFLEVBQUksUUFBTSxDQUFFLEVBQUMsQ0FBQztBQUNoQixvQkFBSzthQUNQO0FBQ0EsZ0JBQUksSUFBSyxLQUFLLE1BQU0sS0FBRyxPQUFPLEVBQUksR0FBRztBQUNuQyxpQkFBRSxFQUFJLFFBQU0sQ0FBRSxFQUFDLENBQUM7QUFDaEIsb0JBQUs7YUFDUDtBQUNBLGdCQUFJLEdBQUksS0FBSyxJQUFJLEtBQUcsQ0FBRSxHQUFJLEdBQUMsQ0FBRztBQUM1QixpQkFBSSxFQUFDLEdBQUksR0FBQyxFQUFJLEVBQUMsSUFBRyxDQUFFLEdBQUksR0FBQyxFQUFJLEdBQUMsQ0FBQztBQUMvQixpQkFBRSxFQUFJLE9BQUssWUFBYSxDQUFDLE9BQU0sQ0FBRSxFQUFDLENBQUcsUUFBTSxDQUFFLEdBQUksR0FBQyxDQUFHLEdBQUcsTUFBSSxDQUFDLENBQUM7QUFDOUQsb0JBQUs7YUFDUDtBQUFBLFdBQ0Y7QUFBQSxTQUNGLEtBQU8sS0FBSSxJQUFJLENBQUMsT0FBTSxDQUFDLElBQU0sV0FBUyxDQUFHO0FBQ3ZDLGFBQUUsRUFBSSxRQUFPLENBQUMsRUFBQyxDQUFDO1NBQ2xCO0FBQ0EsbUJBQVUsQ0FBRSxFQUFDLEVBQUksSUFBRSxDQUFDO09BQ3RCO0FBQ0EsWUFBTyxJQUFFLENBQUM7S0FDWixDQUFDO0FBQ0QsY0FBUyxFQUFJLFVBQVMsQ0FBRTtBQUN0QixZQUFPLFlBQVUsRUFBSSxHQUFDLENBQUM7S0FDekIsQ0FBQztBQUNELGFBQVMsQ0FBQyxNQUFLLENBQUcsVUFBUSxDQUFDLENBQUM7QUFDNUIsT0FBSSxVQUFTLEVBQUc7QUFDVixZQUFDO0FBRUwsU0FBSSxTQUFRLENBQUMsRUFBQyxDQUFDO0FBQ2YsVUFBSSxJQUFHLEdBQUssR0FBRSxJQUFHLENBQUMsQ0FBRztBQUNuQixjQUFPLEdBQUUsSUFBRyxDQUFFLEVBQUMsQ0FBQztPQUNsQixLQUFPO0FBQ0wsY0FBTyxHQUFDO09BQ1Y7QUFBQSxLQUNGLENBQUM7QUFDRCxZQUFPLEVBQUksVUFBUyxNQUFLLENBQUcsUUFBTSxDQUFHLEtBQUcsQ0FBRyxJQUFFLENBQUc7QUFDMUMsWUFBQztBQUVMLFVBQUksSUFBRyxHQUFLLEtBQUcsQ0FBRztBQUNoQixZQUFHLEVBQUksSUFBRSxDQUFDO09BQ1o7QUFDQSxVQUFJLENBQUMsU0FBUSxPQUFPLENBQUc7QUFDckIsY0FBTyxRQUFNLENBQUM7T0FDaEI7QUFDQSxVQUFJLE9BQU0sR0FBSyxLQUFHLENBQUc7QUFDbkIsV0FBSSxPQUFLLFFBQVMsQ0FBQyxNQUFLLENBQUcsSUFBRSxDQUFDLENBQUM7QUFDL0IsWUFBSSxPQUFNLElBQU0sR0FBRztBQUNqQixnQkFBSyxFQUFJLEVBQUMsS0FBSSxDQUFHLE1BQUksQ0FBQyxDQUFDO1NBQ3pCLEtBQU87QUFDTCxnQkFBSyxFQUFJLE9BQUssT0FBUSxDQUFDLEVBQUcsS0FBRyxDQUFHLFFBQU0sQ0FBQyxDQUFDO1NBQzFDO0FBQUEsT0FDRjtBQUNBLGVBQVMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUNqQixZQUFPLEdBQUM7S0FDVixDQUFDO0FBQ0QsVUFBSyxFQUFJLFVBQVMsRUFBQyxDQUFHO0FBQ3BCLFVBQUksQ0FBQyxTQUFRLE9BQU8sQ0FBRztBQUNyQixjQUFPLE1BQUksQ0FBQztPQUNkO0FBQ0EsV0FBSSxFQUFJLEdBQUMsQ0FBQztBQUNWLGdCQUFVLEVBQUMsQ0FBQztBQUNaLFlBQU8sR0FBQztLQUNWLENBQUM7QUFDRCxXQUFNLEVBQUksVUFBUyxNQUFLLENBQUcsS0FBRyxDQUFHO0FBQy9CLGVBQVMsQ0FBQyxNQUFLLENBQUcsS0FBRyxDQUFDLENBQUM7QUFDdkIsWUFBTyxHQUFDO0tBQ1YsQ0FBQztBQUNELFNBQUksRUFBSSxVQUFTLEVBQUMsQ0FBRztBQUNuQixVQUFHLEVBQUksR0FBQyxDQUFDO0FBQ1QsWUFBTyxHQUFDO0tBQ1YsQ0FBQztBQUNELFlBQU8sRUFBSSxVQUFTLEdBQUUsQ0FBRztBQUN2QixVQUFJLENBQUMsU0FBUSxPQUFPLENBQUc7QUFDckIsY0FBTyxRQUFNLENBQUM7T0FDaEI7QUFDQSxhQUFNLEVBQUksSUFBRSxDQUFDO0FBQ2IsWUFBTyxHQUFDO0tBQ1YsQ0FBQztBQUNELHNCQUFpQixFQUFJLFVBQVMsRUFBRztBQUMvQixVQUFJLENBQUMsU0FBUSxPQUFPLENBQUc7QUFDckIsY0FBTyxrQkFBZ0IsQ0FBQztPQUMxQjtBQUNBLHVCQUFnQixFQUFJLEdBQUM7QUFDckIsZ0JBQVUsRUFBQyxDQUFDO0FBQ1osVUFBSSxpQkFBZ0IsQ0FBRztBQUNyQixZQUFHLEVBQUksVUFBUyxFQUFHO0FBQ2IsZ0JBQUM7QUFBRyxnQkFBQztBQUFHLHNCQUFPO0FBQUcsb0JBQUs7QUFBRyxxQkFBTTtBQUFHLHNCQUFPO0FBQUcsaUJBQUU7QUFBRyxnQkFBQztBQUFHLGdCQUFDLENBQUM7QUFFNUQsWUFBQyxFQUFJLFNBQVEsQ0FBQyxFQUFHLEtBQUcsQ0FBQyxJQUFLLEVBQUMsQ0FBRSxFQUFDLENBQUM7QUFDL0IsWUFBQyxFQUFJLFNBQVEsQ0FBQyxFQUFHLEtBQUcsQ0FBQyxJQUFLLEVBQUMsQ0FBRSxFQUFDLENBQUM7QUFDL0IsYUFBRSxFQUFJLEdBQUMsRUFBSSxHQUFDLENBQUM7QUFDYixrQkFBTyxFQUFJLFNBQVEsQ0FBQyxFQUFHLEtBQUcsQ0FBQyxJQUFLLEVBQUMsQ0FBRSxFQUFDLENBQUM7QUFDckMsaUJBQU0sRUFBSSxHQUFDLEVBQUksRUFBQyxFQUFDLEVBQUksR0FBQyxDQUFDLEVBQUksR0FBQztBQUM1QixnQkFBSyxFQUFJLFNBQU8sRUFBSSxRQUFNLENBQUM7QUFDM0IsWUFBQyxFQUFJLEdBQUM7QUFDTixZQUFDLEVBQUksR0FBQztBQUNOLGtCQUFPLEVBQUksR0FBQyxDQUFDO0FBQ2IsaUJBQU8sSUFBRyxJQUFLLENBQUMsTUFBSyxDQUFDLEVBQUksS0FBRyxHQUFLLFNBQU8sRUFBRSxFQUFJLEdBQUc7QUFDaEQsYUFBQyxTQUFTLENBQUU7QUFDVixrQkFBSSxHQUFFLENBQUc7QUFDUCxzQkFBSyxHQUFLLEVBQUMsRUFBQztlQUNkO0FBQ0Esa0JBQUksTUFBSyxFQUFJLEdBQUc7QUFDZCxrQkFBQyxFQUFJLEdBQUM7QUFDTixvQkFBSyxFQUFDLEVBQUMsRUFBSSxHQUFDLEVBQUksSUFBRSxDQUFDO2VBQ3JCLEtBQU87QUFDTCxrQkFBQyxFQUFJLEdBQUM7QUFDTixvQkFBSyxFQUFDLEVBQUMsRUFBSSxHQUFDLEVBQUksSUFBRSxDQUFDO2VBQ3JCO0FBQ0Esc0JBQU8sRUFBSSxTQUFRLENBQUMsRUFBRyxLQUFHLENBQUMsSUFBSyxFQUFDLENBQUUsRUFBQyxDQUFDO0FBQ3JDLG9CQUFPLE9BQUssRUFBSSxTQUFPLEVBQUksUUFBTSxDQUFDO2FBQ3BDLENBQUUsRUFBQyxDQUFDO1dBQ047QUFDQSxnQkFBTyxHQUFDO1NBQ1YsQ0FBQztPQUNILEtBQU87QUFDTCxZQUFHLEVBQUksVUFBUyxFQUFHO0FBQ2pCLGdCQUFPLEdBQUM7U0FDVixDQUFDO09BQ0g7QUFDQSxZQUFPLEdBQUM7S0FDVixDQUFDO0FBQ0QsWUFBTyxFQUFJLFVBQVMsR0FBRSxDQUFHO0FBQ25CO0FBQUcsaUJBQU07QUFBRyxZQUFDO0FBQUcsWUFBQztBQUFHLGNBQUc7QUFBRyxjQUFHLENBQUM7QUFFbEMsVUFBSSxHQUFFLEdBQUssS0FBRyxDQUFHO0FBQ2YsV0FBRSxFQUFJLE1BQUksQ0FBQztPQUNiO0FBQ0EsWUFBSyxFQUFJLEdBQUMsQ0FBQztBQUNYLGFBQU0sRUFBSSxHQUFDLENBQUM7QUFDWixVQUFJLE9BQU0sT0FBTyxFQUFJLEdBQUc7QUFDdEIsYUFBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLEtBQUcsRUFBSSxRQUFNLE9BQU8sQ0FBRyxLQUFLLEtBQUcsRUFBSSxHQUFDLEVBQUksS0FBRyxFQUFJLEdBQUMsRUFBSSxLQUFHLENBQUcsSUFBSSxLQUFLLEtBQUcsRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUN0RyxpQkFBTSxLQUFNLENBQUMsQ0FBQyxPQUFNLENBQUUsR0FBSSxHQUFDLEVBQUksUUFBTSxDQUFFLEVBQUMsQ0FBQyxFQUFJLElBQUUsQ0FBQyxDQUFDO1NBQ25EO0FBQUEsT0FDRixLQUFPO0FBQ0wsZUFBTSxFQUFJLFFBQU0sQ0FBQztPQUNuQjtBQUNBLFdBQUssRUFBQyxFQUFJLEdBQUcsS0FBRyxFQUFJLFFBQU0sT0FBTyxDQUFHLEdBQUMsRUFBSSxLQUFHLENBQUcsR0FBQyxFQUFFLENBQUc7QUFDbkQsV0FBSSxRQUFNLENBQUUsRUFBQyxDQUFDLENBQUM7QUFDZixjQUFLLEtBQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFFLEdBQUUsQ0FBRSxFQUFDLENBQUMsQ0FBQztPQUMxQjtBQUNBLFlBQU8sT0FBSyxDQUFDO0tBQ2YsQ0FBQztBQUNELFVBQU8sR0FBQztHQUNWLENBQUM7QUFFRCxNQUFJLENBQUMsSUFBRyxFQUFJLE9BQUssT0FBTyxDQUFDLEdBQUssS0FBRyxDQUFHO0FBQ2xDLFVBQUssT0FBTyxFQUFJLEdBQUMsQ0FBQztHQUNwQjtBQUVBLFFBQUssT0FBTyxLQUFLLEVBQUksVUFBUyxDQUFFO0FBQzlCLFVBQU8sT0FBSyxNQUFPLENBQUMsQ0FBQyxNQUFLLElBQUssQ0FBQyxHQUFFLENBQUcsR0FBRyxHQUFDLENBQUMsQ0FBRyxPQUFLLElBQUssQ0FBQyxHQUFFLENBQUcsR0FBQyxDQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUN4RSxDQUFDO0FBRUQsUUFBSyxPQUFPLElBQUksRUFBSSxVQUFTLENBQUU7QUFDN0IsVUFBTyxPQUFLLE1BQU8sQ0FBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUcsT0FBSyxDQUFHLE9BQUssQ0FBQyxDQUFHLEVBQUMsRUFBRyxJQUFFLENBQUcsSUFBRSxDQUFHLEdBQUMsQ0FBQyxLQUFNLENBQUMsS0FBSSxDQUFDLENBQUM7R0FDckYsQ0FBQztBQW9DRCxRQUFLLFFBQVEsRUFBSSxVQUFTLElBQUcsQ0FBRyxJQUFFLENBQUcsT0FBSyxDQUFHO0FBQ3ZDLFdBQUU7QUFBRztBQUFHO0FBQUcsV0FBRTtBQUFHLGFBQUk7QUFBRyxVQUFDO0FBQUcsWUFBRyxDQUFDO0FBRW5DLE9BQUk7QUFDRixTQUFFLENBQUcsT0FBSyxVQUFVO0FBQ3BCLFNBQUUsQ0FBRyxPQUFLLFVBQVUsRUFBSSxFQUFDO0FBQ3pCLFNBQUUsQ0FBRztBQUNMLFlBQUssQ0FBRyxHQUFDO0FBQ1QsV0FBSSxDQUFHO0FBQUEsS0FDVCxDQUFDO0FBQ0QsUUFBSSxNQUFLLEdBQUssS0FBRyxDQUFHO0FBQ2xCLFlBQUssRUFBSSxVQUFTLENBQUU7QUFDbEIsY0FBTyxLQUFHLENBQUM7T0FDYixDQUFDO0tBQ0g7QUFDQSxPQUFFLEVBQUksVUFBUyxHQUFFLENBQUc7QUFDbEIsVUFBSSxDQUFDLEdBQUUsR0FBSyxLQUFHLENBQUMsR0FBSyxFQUFDLEtBQUssQ0FBQyxHQUFFLENBQUMsQ0FBRztBQUNoQyxnQkFBTyxLQUFNLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDbEIsYUFBSSxHQUFLLElBQUUsQ0FBQztBQUNaLFlBQUksR0FBRSxFQUFJLE1BQUksQ0FBRztBQUNmLGVBQUksRUFBSSxJQUFFLENBQUM7U0FDYjtBQUNBLFlBQUksR0FBRSxFQUFJLE1BQUksQ0FBRztBQUNmLGVBQUksRUFBSSxJQUFFLENBQUM7U0FDYjtBQUNBLGVBQU0sR0FBSyxHQUFDO09BQ2Q7QUFBQSxLQUNGLENBQUM7QUFDRCxTQUFJLEVBQUksVUFBUyxHQUFFLENBQUcsR0FBRztBQUN2QixVQUFJLE1BQU0sQ0FBQyxHQUFFLENBQUcsR0FBQyxDQUFHO0FBQ2xCLFlBQUksQ0FBQyxHQUFFLEdBQUssS0FBRyxDQUFDLEdBQUssS0FBSSxDQUFDLEdBQUUsQ0FBQyxJQUFNLFdBQVMsQ0FBRztBQUM3QyxnQkFBTyxJQUFHLENBQUMsR0FBRyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdEIsS0FBTyxLQUFJLENBQUMsR0FBRSxHQUFLLEtBQUcsQ0FBQyxHQUFLLEtBQUksQ0FBQyxHQUFFLENBQUMsSUFBTSxTQUFPLEdBQUssS0FBSSxDQUFDLEdBQUUsQ0FBQyxJQUFNLFNBQU8sQ0FBRztBQUM1RSxnQkFBTyxJQUFHLENBQUMsR0FBRSxDQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdEIsS0FBTztBQUNMLGdCQUFPLElBQUcsQ0FBQyxHQUFFLENBQUMsQ0FBQztTQUNqQjtBQUFBLE9BQ0Y7QUFBQSxLQUNGLENBQUM7QUFDRCxRQUFJLElBQUksQ0FBQyxJQUFHLENBQUMsSUFBTSxRQUFNLENBQUc7QUFDMUIsV0FBSyxFQUFDLEVBQUksR0FBRyxLQUFHLEVBQUksS0FBRyxPQUFPLENBQUcsR0FBQyxFQUFJLEtBQUcsQ0FBRyxHQUFDLEVBQUUsQ0FBRztBQUNoRCxXQUFFLEVBQUksS0FBRyxDQUFFLEVBQUMsQ0FBQyxDQUFDO0FBQ2QsYUFBSyxDQUFDLEdBQUUsQ0FBQyxDQUFDO09BQ1o7QUFBQSxLQUNGLEtBQU87QUFDTCxXQUFLLElBQUssS0FBRyxDQUFHO0FBQ2QsV0FBRSxFQUFJLEtBQUcsQ0FBRSxFQUFDLENBQUM7QUFDYixhQUFLLENBQUMsR0FBRSxDQUFHLEdBQUMsQ0FBQztPQUNmO0FBQUEsS0FDRjtBQUNBLFlBQU8sRUFBSSxFQUFDLEtBQUksQ0FBRyxNQUFJLENBQUMsQ0FBQztBQUN6QixZQUFPLEVBQUksVUFBUyxJQUFHLENBQUcsSUFBRSxDQUFHO0FBQzdCLFlBQU8sT0FBSyxPQUFRLENBQUMsRUFBRyxLQUFHLENBQUcsSUFBRSxDQUFDLENBQUM7S0FDcEMsQ0FBQztBQUNELFVBQU8sR0FBQztHQUNWLENBQUM7QUFFRCxRQUFLLE9BQU8sRUFBSSxVQUFTLElBQUcsQ0FBRyxLQUFHLENBQUcsSUFBRSxDQUFHO0FBQ3BDLG1CQUFVO0FBQUcsWUFBRztBQUFHLGlCQUFRO0FBQUcsZUFBTTtBQUFHLG9CQUFXO0FBQUcsWUFBRztBQUFHO0FBQUc7QUFBRyxpQkFBUTtBQUFHLGNBQUs7QUFBRyxXQUFFO0FBQUcsZUFBTTtBQUFHLFdBQUU7QUFBRyxlQUFNO0FBQUcsZUFBTTtBQUFHO0FBQUcsZ0JBQU87QUFBRyxvQkFBVztBQUFHO0FBQUcsVUFBQztBQUFHLFVBQUM7QUFBRyxjQUFLO0FBQUcsV0FBRTtBQUFHLHVCQUFjO0FBQUcsYUFBSTtBQUFHLGNBQUs7QUFBRyxVQUFDO0FBQUcsVUFBQztBQUFHLFVBQUM7QUFBRyxVQUFDO0FBQUcsVUFBQztBQUFHLFVBQUM7QUFBRyxVQUFDO0FBQUcsVUFBQztBQUFHLFVBQUM7QUFBRyxVQUFDO0FBQUcsYUFBSTtBQUFHLGNBQUs7QUFBRyxjQUFLO0FBQUcsY0FBSztBQUFHLGNBQUs7QUFBRyxjQUFLO0FBQUcsY0FBSztBQUFHLGFBQUk7QUFBRyxhQUFJO0FBQUcsYUFBSTtBQUFHLGFBQUk7QUFBRyxhQUFJO0FBQUcsYUFBSTtBQUFHLGFBQUk7QUFBRyxhQUFJO0FBQUcsVUFBQztBQUFHLFVBQUM7QUFBRyxVQUFDO0FBQUcsVUFBQztBQUFHLFVBQUMsQ0FBQztBQUV6WCxRQUFJLElBQUcsR0FBSyxLQUFHLENBQUc7QUFDaEIsVUFBRyxFQUFJLFFBQU0sQ0FBQztLQUNoQjtBQUNBLFFBQUksR0FBRSxHQUFLLEtBQUcsQ0FBRztBQUNmLFNBQUUsRUFBSSxHQUFDO0tBQ1Q7QUFDQSxRQUFJLElBQUcsT0FBTyxHQUFLLEtBQUcsQ0FBRztBQUN2QixVQUFHLEVBQUksT0FBSyxRQUFTLENBQUMsSUFBRyxDQUFDLENBQUM7S0FDN0I7QUFDQSxPQUFFLEVBQUksS0FBRyxJQUFJLENBQUM7QUFDZCxPQUFFLEVBQUksS0FBRyxJQUFJLENBQUM7QUFDZCxPQUFFLEVBQUksS0FBRyxJQUFJLENBQUM7QUFDZCxVQUFLLEVBQUksS0FBRyxPQUFPLEtBQU0sQ0FBQyxTQUFTLEVBQUcsR0FBRztBQUN2QyxZQUFPLElBQUksR0FBQztLQUNkLENBQUMsQ0FBQztBQUNGLFVBQUssRUFBSSxHQUFDLENBQUM7QUFDWCxRQUFJLElBQUcsT0FBUSxDQUFDLEVBQUcsR0FBQyxJQUFNLElBQUUsQ0FBRztBQUM3QixZQUFLLEtBQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUNoQixZQUFLLEtBQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQztLQUNsQjtBQUNBLFFBQUksSUFBRyxPQUFRLENBQUMsRUFBRyxHQUFDLElBQU0sSUFBRSxDQUFHO0FBQzdCLFlBQUssS0FBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQ2hCLFdBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxNQUFJLEVBQUksSUFBRSxFQUFJLEdBQUcsS0FBSyxNQUFJLEVBQUksR0FBQyxHQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxDQUFHLElBQUksS0FBSyxNQUFJLEVBQUksR0FBRSxFQUFDLEVBQUksR0FBRSxFQUFDLENBQUc7QUFDdEcsY0FBSyxLQUFNLENBQUMsR0FBRSxFQUFJLEVBQUMsR0FBSSxJQUFFLENBQUMsRUFBSSxFQUFDLEdBQUUsRUFBSSxJQUFFLENBQUMsQ0FBQyxDQUFDO09BQzVDO0FBQ0EsWUFBSyxLQUFNLENBQUMsR0FBRSxDQUFDLENBQUM7S0FDbEIsS0FBTyxLQUFJLElBQUcsT0FBUSxDQUFDLEVBQUcsR0FBQyxJQUFNLElBQUUsQ0FBRztBQUNwQyxVQUFJLEdBQUUsR0FBSyxHQUFHO0FBQ1osYUFBTSxzREFBb0QsQ0FBQztPQUM3RDtBQUNBLGFBQU0sRUFBSSxLQUFHLE9BQU8sRUFBSSxLQUFHLElBQUssQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUNyQyxhQUFNLEVBQUksS0FBRyxPQUFPLEVBQUksS0FBRyxJQUFLLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDckMsWUFBSyxLQUFNLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDaEIsV0FBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLE1BQUksRUFBSSxJQUFFLEVBQUksR0FBRyxLQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxFQUFJLEdBQUMsR0FBSyxNQUFJLENBQUcsSUFBSSxLQUFLLE1BQUksRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUN0RyxjQUFLLEtBQU0sQ0FBQyxJQUFHLElBQUssQ0FBQyxFQUFDLENBQUcsUUFBTSxFQUFJLEVBQUMsR0FBSSxJQUFFLENBQUMsRUFBSSxFQUFDLE9BQU0sRUFBSSxRQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDdEU7QUFDQSxZQUFLLEtBQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQztLQUNsQixLQUFPLEtBQUksSUFBRyxPQUFRLENBQUMsRUFBRyxHQUFDLElBQU0sSUFBRSxDQUFHO0FBQ3BDLFlBQUssS0FBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQ2hCLFdBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxNQUFJLEVBQUksSUFBRSxFQUFJLEdBQUcsS0FBSyxNQUFJLEVBQUksR0FBQyxHQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxDQUFHLElBQUksS0FBSyxNQUFJLEVBQUksR0FBRSxFQUFDLEVBQUksR0FBRSxFQUFDLENBQUc7QUFDdEcsV0FBSSxPQUFLLE9BQU8sRUFBSSxJQUFJLElBQUUsQ0FBQztBQUMzQixVQUFDLEVBQUksS0FBRyxNQUFPLENBQUMsRUFBQyxDQUFDO0FBQ2xCLFlBQUksRUFBQyxJQUFNLEdBQUc7QUFDWixnQkFBSyxLQUFNLENBQUMsTUFBSyxDQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekIsS0FBTztBQUNMLFlBQUMsRUFBSSxJQUFJLEdBQUMsQ0FBQztBQUNYLGdCQUFLLEtBQU0sQ0FBQyxNQUFLLENBQUUsRUFBQyxDQUFDLEVBQUksR0FBQyxFQUFJLE9BQUssQ0FBRSxFQUFDLEVBQUksR0FBQyxFQUFJLEVBQUMsR0FBSSxHQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFEO0FBQUEsT0FDRjtBQUNBLFlBQUssS0FBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDO0tBQ2xCLEtBQU8sS0FBSSxJQUFHLE9BQVEsQ0FBQyxFQUFHLEdBQUMsSUFBTSxJQUFFLENBQUc7QUFPcEMsU0FBSSxPQUFLLE9BQU8sQ0FBQztBQUNqQixpQkFBVSxFQUFJLElBQUksTUFBSyxDQUFDLEVBQUMsQ0FBQztBQUMxQixrQkFBVyxFQUFJLElBQUksTUFBSyxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQzdCLFlBQUssRUFBSSxLQUFHLENBQUM7QUFDYixjQUFPLEVBQUksR0FBQztBQUNaLGVBQVEsRUFBSSxLQUFHLENBQUM7QUFDaEIsZUFBUSxFQUFJLEdBQUMsQ0FBQztBQUNkLGVBQVEsS0FBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQ25CLFdBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxNQUFJLEVBQUksSUFBRSxFQUFJLEdBQUcsS0FBSyxNQUFJLEVBQUksR0FBQyxHQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxDQUFHLElBQUksS0FBSyxNQUFJLEVBQUksR0FBRSxFQUFDLEVBQUksR0FBRSxFQUFDLENBQUc7QUFDdEcsaUJBQVEsS0FBTSxDQUFDLEdBQUUsRUFBSSxFQUFDLEdBQUksSUFBRSxDQUFDLEVBQUksRUFBQyxHQUFFLEVBQUksSUFBRSxDQUFDLENBQUMsQ0FBQztPQUMvQztBQUNBLGVBQVEsS0FBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQ25CLGFBQU8sTUFBSyxDQUFHO0FBQ2IsYUFBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLE1BQUksRUFBSSxJQUFFLEVBQUksR0FBRyxLQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxFQUFJLEdBQUMsR0FBSyxNQUFJLENBQUcsSUFBSSxLQUFLLE1BQUksRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUN0RyxzQkFBVyxDQUFFLEVBQUMsRUFBSSxHQUFDO1NBQ3JCO0FBQ0EsYUFBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLE1BQUksRUFBSSxJQUFJLEdBQUcsS0FBSyxNQUFJLEVBQUksR0FBQyxHQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxDQUFHLElBQUksS0FBSyxNQUFJLEVBQUksR0FBRSxFQUFDLEVBQUksR0FBRSxFQUFDLENBQUc7QUFDcEcsZUFBSSxFQUFJLE9BQUssQ0FBRSxFQUFDLENBQUM7QUFDakIsaUJBQU0sRUFBSSxPQUFLLFVBQVUsQ0FBQztBQUMxQixlQUFLLEdBQUksR0FBQyxFQUFJLEdBQUcsTUFBSSxFQUFJLElBQUUsRUFBSSxHQUFHLEtBQUssTUFBSSxFQUFJLEdBQUMsR0FBSyxNQUFJLEVBQUksR0FBQyxHQUFLLE1BQUksQ0FBRyxJQUFJLEtBQUssTUFBSSxFQUFJLEdBQUUsRUFBQyxFQUFJLEdBQUUsRUFBQyxDQUFHO0FBQ3RHLGdCQUFHLEVBQUksS0FBRyxJQUFLLENBQUMsU0FBUSxDQUFFLEVBQUMsRUFBSSxNQUFJLENBQUMsQ0FBQztBQUNyQyxnQkFBSSxJQUFHLEVBQUksUUFBTSxDQUFHO0FBQ2xCLHFCQUFNLEVBQUksS0FBRyxDQUFDO0FBQ2Qsa0JBQUcsRUFBSSxHQUFDO2FBQ1Y7QUFBQSxXQUNGO0FBQ0Esc0JBQVcsQ0FBRSxJQUFHLENBQUMsRUFBRSxDQUFDO0FBQ3BCLHFCQUFVLENBQUUsRUFBQyxFQUFJLEtBQUcsQ0FBQztTQUN2QjtBQUNBLG9CQUFXLEVBQUksSUFBSSxNQUFLLENBQUMsR0FBRSxDQUFDLENBQUM7QUFDN0IsYUFBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLE1BQUksRUFBSSxJQUFFLEVBQUksR0FBRyxLQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxFQUFJLEdBQUMsR0FBSyxNQUFJLENBQUcsSUFBSSxLQUFLLE1BQUksRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUN0RyxzQkFBVyxDQUFFLEVBQUMsRUFBSSxLQUFHLENBQUM7U0FDeEI7QUFDQSxhQUFLLEdBQUksR0FBQyxFQUFJLEdBQUcsTUFBSSxFQUFJLElBQUksR0FBRyxLQUFLLE1BQUksRUFBSSxHQUFDLEdBQUssTUFBSSxFQUFJLEdBQUMsR0FBSyxNQUFJLENBQUcsSUFBSSxLQUFLLE1BQUksRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUNwRyxpQkFBTSxFQUFJLFlBQVUsQ0FBRSxFQUFDLENBQUM7QUFDeEIsY0FBSSxZQUFXLENBQUUsT0FBTSxDQUFDLElBQU0sS0FBRyxDQUFHO0FBQ2xDLHdCQUFXLENBQUUsT0FBTSxDQUFDLEVBQUksT0FBSyxDQUFFLEVBQUMsQ0FBQztXQUNuQyxLQUFPO0FBQ0wsd0JBQVcsQ0FBRSxPQUFNLENBQUMsR0FBSyxPQUFLLENBQUUsRUFBQyxDQUFDO1dBQ3BDO0FBQUEsU0FDRjtBQUNBLGFBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxPQUFLLEVBQUksSUFBRSxFQUFJLEdBQUcsS0FBSyxPQUFLLEVBQUksR0FBQyxHQUFLLE9BQUssRUFBSSxHQUFDLEdBQUssT0FBSyxDQUFHLElBQUksS0FBSyxPQUFLLEVBQUksR0FBRSxFQUFDLEVBQUksR0FBRSxFQUFDLENBQUc7QUFDM0csc0JBQVcsQ0FBRSxFQUFDLEdBQUssSUFBSSxhQUFXLENBQUUsRUFBQyxDQUFDO1NBQ3hDO0FBQ0EsY0FBSyxFQUFJLE1BQUksQ0FBQztBQUNkLGFBQUssR0FBSSxHQUFDLEVBQUksR0FBRyxPQUFLLEVBQUksSUFBRSxFQUFJLEdBQUcsS0FBSyxPQUFLLEVBQUksR0FBQyxHQUFLLE9BQUssRUFBSSxHQUFDLEdBQUssT0FBSyxDQUFHLElBQUksS0FBSyxPQUFLLEVBQUksR0FBRSxFQUFDLEVBQUksR0FBRSxFQUFDLENBQUc7QUFDM0csY0FBSSxZQUFXLENBQUUsRUFBQyxJQUFNLFVBQVEsQ0FBRSxFQUFDLENBQUc7QUFDcEMsa0JBQUssRUFBSSxLQUFHLENBQUM7QUFDYixrQkFBSztXQUNQO0FBQUEsU0FDRjtBQUNBLGlCQUFRLEVBQUksYUFBVyxDQUFDO0FBQ3hCLGdCQUFPLEVBQUUsQ0FBQztBQUNWLFlBQUksUUFBTyxFQUFJLElBQUUsQ0FBRztBQUNsQixnQkFBSyxFQUFJLE1BQUksQ0FBQztTQUNoQjtBQUFBLE9BQ0Y7QUFDQSxlQUFRLEVBQUksR0FBQyxDQUFDO0FBQ2QsV0FBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLE9BQUssRUFBSSxJQUFFLEVBQUksR0FBRyxLQUFLLE9BQUssRUFBSSxHQUFDLEdBQUssT0FBSyxFQUFJLEdBQUMsR0FBSyxPQUFLLENBQUcsSUFBSSxLQUFLLE9BQUssRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUMzRyxpQkFBUSxDQUFFLEVBQUMsRUFBSSxHQUFDLENBQUM7T0FDbkI7QUFDQSxXQUFLLEdBQUksR0FBQyxFQUFJLEdBQUcsT0FBSyxFQUFJLElBQUksR0FBRyxLQUFLLE9BQUssRUFBSSxHQUFDLEdBQUssT0FBSyxFQUFJLEdBQUMsR0FBSyxPQUFLLENBQUcsSUFBSSxLQUFLLE9BQUssRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUN6RyxlQUFNLEVBQUksWUFBVSxDQUFFLEVBQUMsQ0FBQztBQUN4QixpQkFBUSxDQUFFLE9BQU0sQ0FBQyxLQUFNLENBQUMsTUFBSyxDQUFFLEVBQUMsQ0FBQyxDQUFDO09BQ3BDO0FBQ0EscUJBQWMsRUFBSSxHQUFDLENBQUM7QUFDcEIsV0FBSyxHQUFJLEdBQUMsRUFBSSxHQUFHLE9BQUssRUFBSSxJQUFFLEVBQUksR0FBRyxLQUFLLE9BQUssRUFBSSxHQUFDLEdBQUssT0FBSyxFQUFJLEdBQUMsR0FBSyxPQUFLLENBQUcsSUFBSSxLQUFLLE9BQUssRUFBSSxHQUFFLEVBQUMsRUFBSSxHQUFFLEVBQUMsQ0FBRztBQUMzRyx1QkFBYyxLQUFNLENBQUMsU0FBUSxDQUFFLEVBQUMsQ0FBRSxFQUFDLENBQUMsQ0FBQztBQUNyQyx1QkFBYyxLQUFNLENBQUMsU0FBUSxDQUFFLEVBQUMsQ0FBRSxTQUFRLENBQUUsRUFBQyxPQUFPLEVBQUksR0FBQyxDQUFDLENBQUM7T0FDN0Q7QUFDQSxxQkFBYyxFQUFJLGdCQUFjLEtBQU0sQ0FBQyxTQUFTLEVBQUcsR0FBRztBQUNwRCxjQUFPLElBQUksR0FBQztPQUNkLENBQUMsQ0FBQztBQUNGLFlBQUssS0FBTSxDQUFDLGVBQWMsQ0FBRSxFQUFDLENBQUMsQ0FBQztBQUMvQixXQUFLLEdBQUksR0FBQyxFQUFJLEdBQUcsT0FBSyxFQUFJLGdCQUFjLE9BQU8sRUFBSSxHQUFHLEdBQUMsR0FBSyxPQUFLLENBQUcsSUFBSSxHQUFDLEdBQUssR0FBRztBQUMvRSxZQUFJLENBQUMsS0FBSyxDQUFDLGVBQWMsQ0FBRSxFQUFDLENBQUMsQ0FBRztBQUM5QixnQkFBSyxLQUFNLENBQUMsZUFBYyxDQUFFLEVBQUMsQ0FBQyxDQUFDO1NBQ2pDO0FBQUEsT0FDRjtBQUFBLEtBQ0Y7QUFDQSxVQUFPLE9BQUssQ0FBQztHQUNmLENBQUM7QUFzQkQsUUFBSyxPQUFPLEVBQUksT0FBSyxFQUFJO0FBQ3ZCLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFdBQU0sQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzNHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFVBQUssQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzFHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFVBQUssQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzFHLFVBQUssQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzFHLFdBQU0sQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzNHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFNBQUksQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3pHLFVBQUssQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzFHLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3hHLFNBQUksQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ3pHLFVBQUssQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzFHLFlBQU8sQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUM7QUFDbEksVUFBSyxDQUFHLEVBQUMsU0FBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBQztBQUNoSSxRQUFHLENBQUcsRUFBQyxTQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzlILFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUM7QUFDOUgsUUFBRyxDQUFHLEVBQUMsU0FBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBQztBQUM5SCxVQUFLLENBQUcsRUFBQyxTQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQ2hJLFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUM7QUFDOUgsUUFBRyxDQUFHLEVBQUMsU0FBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBQztBQUM5SCxRQUFHLENBQUcsRUFBQyxTQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFDO0FBQzlILFFBQUcsQ0FBRyxFQUFDLFNBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUM7QUFDN0YsVUFBSyxDQUFHLEVBQUMsU0FBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBQztBQUMvRixRQUFHLENBQUcsRUFBQyxTQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBQztBQUN4RyxRQUFHLENBQUcsRUFBQyxTQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEsQ0FBRyxVQUFRLENBQUcsVUFBUSxDQUFHLFVBQVEs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QUFDO0FBQUMsU0FBRSxHQUFDO0tBQUM7QUFBRSxPQUFFLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTSxDQUFDLEVBQUM7S0FBQztBQUFFLFVBQUssQ0FBRSxVQUFTLEVBQUU7QUFBSyxhQUFFLFVBQVMsQ0FBQyxFQUFDLENBQUM7QUFBQyxPQUFDLEtBQUksS0FBRyxTQUFRLENBQUMsRUFBRSxHQUFDO0tBQUM7QUFBRSxVQUFLLENBQUUsVUFBUyxFQUFFO0FBQUMsVUFBRyxLQUFJLFNBQU87QUFBRSxjQUFNLEVBQUMsRUFBQztBQUFLLGFBQUUsR0FBQztBQUFDLFdBQUksR0FBRSxLQUFLLE1BQUksSUFBRSxJQUFFLFlBQVUsR0FBRyxPQUFPLE9BQUssR0FBRyxLQUFLLE1BQUksT0FBSyxZQUFZLEdBQUcsS0FBSyxNQUFJLE9BQUssWUFBWSxJQUFJLEVBQUUsT0FBSyxZQUFZLElBQUssRUFBQyxFQUFFLEtBQUcsSUFBSyxFQUFDLENBQUUsSUFBRSxTQUFPO0FBQUcsVUFBRSxFQUFDLE9BQVEsQ0FBQyxFQUFDLEVBQUUsSUFBRSxFQUFFLFNBQVEsQ0FBQyxFQUFFLEdBQUMsQ0FBQztBQUFDLFlBQU0sRUFBQztLQUFDO0FBQUEsR0FBQztBQUFFLEdBQUMsQ0FBQztBQUFDLEtBQUksTUFBTSxFQUFFLFVBQVMsRUFBRTtBQUFLLFNBQUU7QUFBRSxTQUFFLEdBQUM7QUFBRSxTQUFFLEdBQUM7QUFBRSxTQUFFLEdBQUM7QUFBRSxTQUFFLElBQUU7QUFBRSxTQUFFO0FBQUUsU0FBRSxFQUFDO0FBQUUsU0FBRSxFQUFDO0FBQUUsU0FBRSxFQUFDO0FBQUUsU0FBRTtBQUFFLFNBQUUsS0FBRztBQUFFLFNBQUUsTUFBSSxPQUFPLE9BQU8sS0FBSztBQUFFLFNBQUUsTUFBSSxjQUFjLE9BQU87QUFBRSxTQUFFLEdBQUM7QUFBRSxTQUFFLEtBQUc7QUFBRSxTQUFFLEVBQUM7QUFBRSxTQUFFLEtBQUc7QUFBRSxTQUFFLEtBQUc7QUFBRSxTQUFFLEtBQUcsQ0FBQztBQUFDLE9BQVEsUUFBSztBQUFFLE1BQUUsRUFBQyxFQUFFLFdBQVUsQ0FBQyxFQUFFLEVBQUMsQ0FBRSxHQUFDLENBQUMsQ0FBQztBQUFDLE1BQUcsR0FBRyxFQUFFLFVBQVMsRUFBRSxHQUFFO0FBQUMsVUFBTyxLQUFLLE1BQUksS0FBRyxFQUFDLEdBQUUsR0FBQyxDQUFFLElBQUUsR0FBRSxLQUFHO0dBQUMsQ0FBRSxLQUFHLE1BQU0sRUFBRSxVQUFTLEVBQUU7QUFBQyxTQUFJLElBQUssQ0FBQyxJQUFHLENBQUMsQ0FBRSxJQUFFLEVBQUMsRUFBRSxJQUFFLEVBQUMsRUFBRSxJQUFFLEtBQUssTUFBSSxJQUFFLElBQUUsWUFBVSxHQUFHLE9BQU8sT0FBSyxHQUFHLEtBQUssTUFBSSxPQUFLLFlBQVksR0FBRyxLQUFLLE1BQUksT0FBSyxZQUFZLElBQUksRUFBRSxPQUFLLFlBQVksSUFBSyxFQUFDLEVBQUUsS0FBRyxJQUFLLEVBQUMsQ0FBRSxLQUFHLEdBQUM7QUFBQyxTQUFRLFFBQUssR0FBRTtBQUFDLFVBQUcsRUFBRSxFQUFDLFdBQVksTUFBSSxDQUFFO0FBQUMsWUFBRyxLQUFJLEdBQUUsRUFBQyxPQUFPO0FBQUUsbUJBQVE7QUFBQyxVQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLE9BQVEsQ0FBQyxFQUFFLEVBQUMsQ0FBQztPQUFDO0FBQUMsUUFBRSxFQUFDLEVBQUUsR0FBRSxFQUFDLENBQUUsR0FBRSxFQUFDLFdBQVksTUFBSSxHQUFHLEVBQUMsSUFBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEdBQUMsQ0FBRSxHQUFFLEVBQUMsRUFBRSxHQUFFLEVBQUMsR0FBRztLQUFDO0FBQUMsVUFBTyxLQUFHO0dBQUMsQ0FBRSxLQUFHLEtBQUssRUFBRSxVQUFTLENBQUM7QUFBQyxVQUFPLElBQUUsRUFBQyxLQUFJLE9BQVEsQ0FBQyxJQUFHLENBQUMsQ0FBRSxJQUFFLEVBQUMsRUFBRSxLQUFHLElBQUksS0FBRyxPQUFNLENBQUMsRUFBQyxDQUFFLEtBQUcsa0JBQW1CLEVBQUMsQ0FBRSxLQUFHLENBQUMsRUFBRSxLQUFHO0dBQUMsQ0FBRSxLQUFHLGtCQUFrQixFQUFFLFVBQVMsQ0FBQztBQUFDLFNBQVEsT0FBRTtBQUFFLFdBQUUsU0FBTyxDQUFFLElBQUUsR0FBRSxJQUFFO0FBQUUsUUFBRSxFQUFDLEtBQU0sRUFBQztBQUFBLEdBQUMsQ0FBRSxLQUFHLE1BQU0sRUFBRSxVQUFTLEVBQUU7QUFBQyxVQUFPLElBQUUsR0FBRSxLQUFHO0dBQUMsQ0FBRSxLQUFHLE9BQU8sRUFBRSxVQUFTLEVBQUU7QUFBQyxVQUFPLElBQUUsR0FBRSxLQUFHO0dBQUMsQ0FBRSxLQUFHLEtBQUssRUFBRSxVQUFTLEVBQUU7QUFBQyxVQUFPLElBQUUsR0FBRSxLQUFHO0dBQUMsQ0FBRSxLQUFHLE9BQU8sRUFBRSxVQUFTLEVBQUU7QUFBQyxVQUFPLElBQUUsR0FBRSxLQUFHO0dBQUMsQ0FBRSxLQUFHLGNBQWMsRUFBRSxVQUFTLEVBQUU7QUFBQyxVQUFPLElBQUUsR0FBRSxLQUFHO0dBQUMsQ0FBRSxLQUFHLE1BQU0sRUFBRSxVQUFTLENBQUM7QUFBQyxVQUFPLElBQUUsVUFBUSxDQUFFLEtBQUc7R0FBQyxDQUFFLEtBQUcsUUFBUSxFQUFFLFVBQVMsRUFBRTtBQUFDLFVBQU8sSUFBRSxHQUFFLEtBQUc7R0FBQyxDQUFFLEtBQUcsU0FBUyxFQUFFLFVBQVMsRUFBRTtBQUFDLFVBQU8sSUFBRSxHQUFFLEtBQUc7R0FBQyxDQUFFLEtBQUcsV0FBVyxFQUFFLFVBQVMsRUFBRTtBQUFDLFVBQU8sSUFBRSxHQUFFLEtBQUc7R0FBQyxDQUFFLEtBQUcsT0FBTyxFQUFFLFVBQVMsRUFBRTtBQUFDLFVBQU8sSUFBRSxHQUFFLEtBQUc7R0FBQyxDQUFFLEtBQUcsT0FBTyxFQUFFLFVBQVMsRUFBRTtBQUFLLFVBQUM7QUFBQyxRQUFHLEdBQUU7QUFBRSxZQUFNLEVBQUMsRUFBQztBQUFDLFNBQUksRUFBQyxJQUFHLEVBQUMsSUFBRyxJQUFJLEtBQUcsT0FBTSxDQUFDLEVBQUMsQ0FBRSxJQUFFLEVBQUMsRUFBQyxDQUFDO0FBQUssV0FBRSxFQUFDLEdBQUUsR0FBQyxFQUFFLEdBQUM7QUFBQyxPQUFFLElBQUUsSUFBRSxJQUFFLEdBQUM7QUFBSyxXQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUM7QUFBQyxTQUFJLElBQUssR0FBRTtBQUFLLGFBQUUsR0FBRSxFQUFDLEdBQUc7QUFBRSxhQUFFLEdBQUUsRUFBQyxDQUFDO0FBQUMsa0JBQWEsTUFBSSxFQUFFLEdBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLEdBQUMsRUFBRSxFQUFDLFFBQU8sR0FBRyxPQUFPLEtBQUcsRUFBQyxHQUFFLElBQUUsV0FBVSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBRSxTQUFPLEdBQUcsT0FBTyxLQUFHLEVBQUMsRUFBRSxFQUFDLEVBQUUsSUFBRSxFQUFDLEdBQUUsR0FBQyxFQUFFLEdBQUMsQ0FBQztLQUFDO0FBQUMsUUFBRyxJQUFHLElBQUksS0FBRyxPQUFNLENBQUMsRUFBRSxHQUFDLENBQUUsS0FBRyxHQUFFO0FBQUMsVUFBRyxHQUFFLEdBQUU7QUFBQyxnQkFBUSxDQUFDLEVBQUMsR0FBRyxJQUFFLENBQUM7QUFBQyxhQUFJLElBQUssR0FBRTtBQUFDLGNBQUcsUUFBTyxHQUFHLE9BQU8sR0FBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsRUFBRSxHQUFFLEVBQUMsRUFBRSxXQUFVLENBQUMsRUFBRSxFQUFDLENBQUUsR0FBQyxDQUFDLENBQUMsQ0FBRSxHQUFFO0FBQUssbUJBQUUsR0FBRSxFQUFDLENBQUM7QUFBQyxjQUFFLEVBQUMsRUFBRSxHQUFFLEVBQUMsQ0FBRSxHQUFFLEVBQUMsRUFBRTtXQUFDO0FBQUMsWUFBRSxFQUFDLEVBQUUsR0FBRSxFQUFDO1NBQUM7QUFBQyxjQUFPLEtBQUcsRUFBQyxHQUFFLEVBQUMsRUFBQyxDQUFFLElBQUUsSUFBRSxHQUFFLEVBQUM7T0FBQztBQUFDLFVBQUcsSUFBSSxLQUFHLE9BQU0sQ0FBQyxFQUFDLENBQUM7QUFBQyxXQUFRLE9BQUU7QUFBRSxhQUFFLFNBQU8sQ0FBRSxJQUFFLEdBQUUsSUFBRTtBQUFFLFVBQUUsRUFBQyxNQUFPLENBQUMsRUFBQyxDQUFDO0FBQUMsWUFBTSxFQUFDO0tBQUM7QUFBQyxVQUFNLEVBQUM7R0FBQztBQUFDLEVBQUUsTUFBSSxPQUFPLEVBQUU7QUFBQyxRQUFLLENBQUUsRUFBQyxJQUFHLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTztLQUFDLENBQUM7QUFBRSxXQUFRLENBQUU7QUFBQyxNQUFDLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTyxJQUFFO0tBQUM7QUFBRSxPQUFFLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTyxJQUFFLEVBQUMsR0FBRSxHQUFDO0tBQUM7QUFBRSxTQUFJLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTSxFQUFDLElBQUcsR0FBQyxFQUFFLElBQUUsR0FBQyxFQUFFLElBQUUsSUFBRSxFQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsR0FBRSxFQUFDLEdBQUUsR0FBQyxFQUFFLEdBQUM7S0FBQztBQUFBLEdBQUM7QUFBRSxPQUFJLENBQUU7QUFBQyxNQUFDLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTyxJQUFFLElBQUU7S0FBQztBQUFFLE9BQUUsQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFNLEdBQUUsR0FBRSxJQUFFLElBQUU7S0FBQztBQUFFLFNBQUksQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFNLEVBQUMsSUFBRyxHQUFDLEVBQUUsSUFBRSxHQUFDLEVBQUUsSUFBRSxJQUFFLElBQUUsR0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFHLEdBQUMsRUFBRSxJQUFFLElBQUUsR0FBQztLQUFDO0FBQUEsR0FBQztBQUFFLFNBQU0sQ0FBRTtBQUFDLE1BQUMsQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFPLElBQUUsSUFBRSxJQUFFO0tBQUM7QUFBRSxPQUFFLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTyxJQUFHLEdBQUUsR0FBRSxJQUFFLElBQUU7S0FBQztBQUFFLFNBQUksQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFNLEVBQUMsSUFBRyxHQUFDLEVBQUUsSUFBRSxHQUFDLEVBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxFQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsSUFBRyxHQUFDLEVBQUUsSUFBRSxJQUFFLElBQUUsR0FBQztLQUFDO0FBQUEsR0FBQztBQUFFLFNBQU0sQ0FBRTtBQUFDLE1BQUMsQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFPLElBQUUsSUFBRSxJQUFFLElBQUU7S0FBQztBQUFFLE9BQUUsQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFNLEdBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0tBQUM7QUFBRSxTQUFJLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTSxFQUFDLElBQUcsR0FBQyxFQUFFLElBQUUsR0FBQyxFQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFDLEVBQUUsRUFBQyxDQUFDLElBQUcsR0FBQyxFQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBQztLQUFDO0FBQUEsR0FBQztBQUFFLFlBQVMsQ0FBRTtBQUFDLE1BQUMsQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFPLElBQUUsS0FBRyxJQUFLLENBQUMsR0FBRSxLQUFHLEdBQUcsRUFBRSxHQUFDO0tBQUM7QUFBRSxPQUFFLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTyxLQUFHLElBQUssQ0FBQyxHQUFFLEtBQUcsR0FBRyxFQUFFLEdBQUM7S0FBQztBQUFFLFNBQUksQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFNLEdBQUMsRUFBRSxFQUFDLEdBQUUsS0FBRyxJQUFLLENBQUMsSUFBRyxHQUFHLEVBQUUsR0FBQyxDQUFDO0tBQUM7QUFBQSxHQUFDO0FBQUUsYUFBVSxDQUFFO0FBQUMsTUFBQyxDQUFFLFVBQVMsRUFBRTtBQUFDLFlBQU8sTUFBSSxJQUFFLElBQUUsS0FBRyxJQUFLLENBQUMsSUFBRyxDQUFFLElBQUUsR0FBQztLQUFDO0FBQUUsT0FBRSxDQUFFLFVBQVMsRUFBRTtBQUFDLFlBQU8sTUFBSSxJQUFFLElBQUUsSUFBRSxLQUFHLElBQUssQ0FBQyxFQUFFLEVBQUMsRUFBQyxFQUFFLEdBQUM7S0FBQztBQUFFLFNBQUksQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFPLE1BQUksSUFBRSxJQUFFLE1BQUksSUFBRSxJQUFFLEVBQUMsSUFBRyxHQUFDLEVBQUUsSUFBRSxHQUFDLEVBQUUsS0FBRyxJQUFLLENBQUMsSUFBRyxDQUFFLElBQUUsR0FBQyxFQUFFLEdBQUMsRUFBRSxFQUFDLENBQUMsSUFBRyxJQUFLLENBQUMsRUFBRSxFQUFDLEVBQUMsRUFBRSxFQUFDLEdBQUUsR0FBQyxDQUFDLEVBQUUsR0FBQztLQUFDO0FBQUEsR0FBQztBQUFFLFVBQU8sQ0FBRTtBQUFDLE1BQUMsQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFPLElBQUUsS0FBRyxLQUFNLENBQUMsR0FBRSxJQUFFLEdBQUM7S0FBQztBQUFFLE9BQUUsQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFPLEtBQUcsS0FBTSxDQUFDLEdBQUcsR0FBRSxHQUFFLEdBQUM7S0FBQztBQUFFLFNBQUksQ0FBRSxVQUFTLEVBQUU7QUFBQyxZQUFNLEVBQUMsSUFBRyxHQUFDLEVBQUUsSUFBRSxFQUFDLEVBQUMsRUFBRSxFQUFDLElBQUcsS0FBTSxDQUFDLEdBQUUsSUFBRSxHQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUMsRUFBRSxFQUFDLElBQUcsS0FBTSxDQUFDLEdBQUUsRUFBQyxJQUFHLEdBQUMsRUFBRSxHQUFDLEVBQUUsR0FBQztLQUFDO0FBQUEsR0FBQztBQUFFLFNBQU0sQ0FBRTtBQUFDLE1BQUMsQ0FBRSxVQUFTLEVBQUU7QUFBSztBQUFFLGFBQUUsR0FBQztBQUFFLGFBQUUsR0FBQyxDQUFDO0FBQUMsWUFBTyxNQUFJLElBQUUsSUFBRSxNQUFJLElBQUUsSUFBRSxFQUFDLENBQUMsSUFBRyxJQUFFLElBQUUsRUFBQyxHQUFFLEdBQUUsSUFBRSxJQUFFLEdBQUMsRUFBRSxJQUFFLElBQUUsS0FBRyxLQUFNLENBQUMsR0FBRSxHQUFDLEVBQUUsRUFBQyxHQUFFLEtBQUcsR0FBRyxDQUFDLENBQUUsRUFBQyxDQUFDLEdBQUUsS0FBRyxJQUFLLENBQUMsRUFBRSxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxFQUFFLEtBQUcsSUFBSyxDQUFDLEdBQUUsRUFBQyxHQUFFLEdBQUMsRUFBRSxLQUFHLEdBQUcsRUFBRSxHQUFDLENBQUMsQ0FBQztLQUFDO0FBQUUsT0FBRSxDQUFFLFVBQVMsRUFBRTtBQUFLO0FBQUUsYUFBRSxHQUFDO0FBQUUsYUFBRSxHQUFDLENBQUM7QUFBQyxZQUFPLE1BQUksSUFBRSxJQUFFLE1BQUksSUFBRSxJQUFFLEVBQUMsQ0FBQyxJQUFHLElBQUUsSUFBRSxFQUFDLEdBQUUsR0FBRSxJQUFFLElBQUUsR0FBQyxFQUFFLElBQUUsSUFBRSxLQUFHLEtBQU0sQ0FBQyxHQUFFLEdBQUMsRUFBRSxFQUFDLEdBQUUsS0FBRyxHQUFHLENBQUMsQ0FBRSxJQUFFLEtBQUcsSUFBSyxDQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUUsR0FBQyxFQUFFLEtBQUcsSUFBSyxDQUFDLEdBQUUsRUFBQyxHQUFFLEdBQUMsRUFBRSxLQUFHLEdBQUcsRUFBRSxHQUFDLEVBQUUsR0FBQztLQUFDO0FBQUUsU0FBSSxDQUFFLFVBQVMsRUFBRTtBQUFLO0FBQUUsYUFBRSxHQUFDO0FBQUUsYUFBRSxHQUFDLENBQUM7QUFBQyxZQUFPLE1BQUksSUFBRSxJQUFFLE1BQUksSUFBRSxJQUFFLEVBQUMsQ0FBQyxJQUFHLElBQUUsSUFBRSxFQUFDLEdBQUUsR0FBRSxJQUFFLElBQUUsR0FBQyxFQUFFLElBQUUsSUFBRSxLQUFHLEtBQU0sQ0FBQyxHQUFFLEdBQUMsRUFBRSxFQUFDLEdBQUUsS0FBRyxHQUFHLENBQUMsQ0FBRSxFQUFDLElBQUcsR0FBQyxFQUFFLElBQUUsRUFBQyxFQUFDLEVBQUUsSUFBRSxLQUFHLElBQUssQ0FBQyxFQUFFLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLEVBQUUsS0FBRyxJQUFLLENBQUMsR0FBRSxFQUFDLEdBQUUsR0FBQyxFQUFFLEtBQUcsR0FBRyxFQUFFLEdBQUMsRUFBRSxJQUFFLEtBQUcsSUFBSyxDQUFDLEVBQUUsRUFBQyxFQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxFQUFFLEtBQUcsSUFBSyxDQUFDLEdBQUUsRUFBQyxHQUFFLEdBQUMsRUFBRSxLQUFHLEdBQUcsRUFBRSxHQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUM7S0FBQztBQUFBLEdBQUM7QUFBRSxNQUFHLENBQUU7QUFBQyxNQUFDLENBQUUsVUFBUyxFQUFFO0FBQUssYUFBRSxRQUFNLENBQUM7QUFBQyxZQUFPLElBQUUsSUFBRSxFQUFDLENBQUMsR0FBRSxHQUFDLEVBQUUsSUFBRSxHQUFDO0tBQUM7QUFBRSxPQUFFLENBQUUsVUFBUyxFQUFFO0FBQUssYUFBRSxRQUFNLENBQUM7QUFBQyxZQUFNLEdBQUUsR0FBRSxJQUFFLEVBQUMsQ0FBQyxHQUFFLEdBQUMsRUFBRSxJQUFFLEdBQUMsRUFBRTtLQUFDO0FBQUUsU0FBSSxDQUFFLFVBQVMsRUFBRTtBQUFLLGFBQUUsVUFBUSxDQUFDO0FBQUMsWUFBTSxFQUFDLElBQUcsR0FBQyxFQUFFLElBQUUsR0FBQyxFQUFFLElBQUUsSUFBRSxFQUFDLENBQUMsR0FBRSxHQUFDLEVBQUUsSUFBRSxHQUFDLEVBQUUsR0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFHLEdBQUMsRUFBRSxJQUFFLEVBQUMsQ0FBQyxHQUFFLEdBQUMsRUFBRSxJQUFFLEdBQUMsRUFBRSxHQUFDO0tBQUM7QUFBQSxHQUFDO0FBQUUsUUFBSyxDQUFFO0FBQUMsTUFBQyxDQUFFLFVBQVMsRUFBRTtBQUFDLFlBQU8sSUFBRSxNQUFJLE9BQU8sT0FBTyxJQUFLLENBQUMsR0FBRSxHQUFDO0tBQUM7QUFBRSxPQUFFLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTyxJQUFFLEtBQUcsRUFBRSxJQUFFLE9BQUssRUFBRSxJQUFFLElBQUUsSUFBRSxLQUFHLEVBQUUsSUFBRSxPQUFLLEVBQUUsRUFBQyxJQUFHLElBQUUsRUFBRSxLQUFHLENBQUMsRUFBRSxJQUFFLElBQUUsRUFBRSxJQUFFLEVBQUUsS0FBRyxFQUFFLElBQUUsT0FBSyxFQUFFLEVBQUMsSUFBRyxLQUFHLEVBQUUsS0FBRyxDQUFDLEVBQUUsSUFBRSxNQUFJLEVBQUUsT0FBSyxFQUFFLEVBQUMsSUFBRyxNQUFJLEVBQUUsS0FBRyxDQUFDLEVBQUUsSUFBRSxRQUFNO0tBQUM7QUFBRSxTQUFJLENBQUUsVUFBUyxFQUFFO0FBQUMsWUFBTSxHQUFDLEVBQUUsSUFBRSxHQUFDLEVBQUUsTUFBSSxPQUFPLE9BQU8sR0FBSSxDQUFDLEdBQUUsR0FBQyxFQUFFLEdBQUMsRUFBRSxNQUFJLE9BQU8sT0FBTyxJQUFLLENBQUMsR0FBRSxJQUFFLEdBQUMsRUFBRSxHQUFDO0tBQUM7QUFBQSxHQUFDO0FBQUMsRUFBRSxNQUFJLGNBQWMsRUFBRTtBQUFDLFFBQUssQ0FBRSxVQUFTLEVBQUUsR0FBRTtBQUFLLFdBQUUsU0FBTyxFQUFFO0FBQUUsV0FBRSxJQUFFO0FBQUUsV0FBRSxLQUFHLE1BQU8sQ0FBQyxFQUFDO0FBQUUsV0FBRSxNQUFJLGNBQWMsTUFBTSxPQUFPLENBQUM7QUFBQyxVQUFPLElBQUUsSUFBRSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUUsR0FBRSxFQUFDLENBQUUsR0FBQyxFQUFFLElBQUUsSUFBRSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUUsR0FBRSxHQUFFLEdBQUMsQ0FBRSxJQUFFLEdBQUMsRUFBRSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUUsR0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBQyxDQUFFLElBQUUsR0FBQztHQUFDO0FBQUUsUUFBSyxDQUFFLFVBQVMsRUFBRSxHQUFFO0FBQUs7QUFBRSxXQUFFO0FBQUUsV0FBRSxTQUFPLEVBQUU7QUFBRSxXQUFFLEtBQUcsSUFBSTtBQUFFLFdBQUUsTUFBSSxjQUFjLE1BQU0sVUFBVSxDQUFDO0FBQUMsU0FBSSxHQUFFLEdBQUUsS0FBRyxHQUFFLElBQUU7QUFBRSxVQUFHLEVBQUMsQ0FBQyxHQUFFLEdBQUUsSUFBRSxHQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUUsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQztBQUFDLFVBQU87R0FBQztBQUFFLFlBQVMsQ0FBRSxVQUFTLEVBQUUsR0FBRTtBQUFLLFdBQUUsU0FBTyxFQUFFO0FBQUUsV0FBRSxJQUFFO0FBQUUsV0FBRSxLQUFHLE1BQU8sQ0FBQyxFQUFDO0FBQUUsV0FBRSxNQUFJLGNBQWMsTUFBTSxXQUFXLENBQUM7QUFBQyxVQUFPLEdBQUUsRUFBQyxJQUFJLEdBQUUsRUFBQyxFQUFFLEVBQUMsR0FBRSxLQUFHLEVBQUMsR0FBRSxLQUFHLE1BQU8sQ0FBQyxHQUFFLElBQUUsRUFBQyxHQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUUsRUFBQyxDQUFDLEVBQUUsQ0FBQyxHQUFFLElBQUUsR0FBQyxFQUFFLEdBQUMsQ0FBRSxHQUFFLEVBQUMsQ0FBRSxHQUFFLENBQUMsR0FBRSxHQUFDLEVBQUUsR0FBQyxDQUFFLEdBQUUsQ0FBQyxHQUFFLEdBQUMsRUFBRSxHQUFDLENBQUUsSUFBRSxHQUFDLENBQUMsRUFBRSxJQUFFLElBQUUsR0FBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUUsR0FBRSxFQUFDLENBQUUsR0FBRSxFQUFDLENBQUUsR0FBRSxFQUFDLENBQUUsRUFBQyxFQUFDLEVBQUUsR0FBRSxFQUFDLENBQUMsRUFBRSxJQUFFLElBQUUsR0FBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUUsR0FBRSxFQUFDLENBQUUsR0FBRSxHQUFFLEdBQUMsQ0FBRSxHQUFFLEdBQUUsR0FBQyxDQUFFLElBQUUsR0FBQyxFQUFFLEdBQUUsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsR0FBRSxJQUFFLElBQUUsR0FBQyxDQUFFLEdBQUUsRUFBQyxDQUFFLEdBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUMsQ0FBRSxHQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFDLENBQUUsSUFBRSxHQUFDO0dBQUM7QUFBRSxPQUFJLENBQUU7QUFBQyxVQUFLLENBQUUsVUFB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Q0FBQztBQUN0RCxRQUFHLE1BQU0sRUFBSSxNQUFJLENBQUM7R0FDbkIsQ0FBQyxDQUFDO0FBTUYsUUFBTyxRQUFNLENBQUM7QUFHZixFQUFDLENBQUMsQ0FBQztBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgM2ViNDBjODg4NzZkMmU3OTU1MzRcbiAqKi8iLCIvKiBzdHlsaW5nICovXG5yZXF1aXJlKCcuL2V4YW1wbGUyLnNjc3MnKTtcblxuLyogbGlicmFyaWVzICovXG52YXIgJCA9IHJlcXVpcmUoJ2V4cG9zZT9qUXVlcnkhanF1ZXJ5Jyk7XG52YXIgUCA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5cbi8qIGxvYWQgdGhlIGNpcmN1aXRib2FyZCBhbmQgcGx1Z2lucyAqL1xudmFyIGNpcmN1aXRib2FyZCA9IHJlcXVpcmUoJy4uL2NpcmN1aXRib2FyZC5qcycpO1xucmVxdWlyZSgnLi4vcC1jb3JlLmpzJyk7XG5yZXF1aXJlKCcuLi9wLXRpbGUtc2tpbi5qcycpO1xucmVxdWlyZSgnLi4vcC10aWxlLXNwYWNpbmcuanMnKTtcbnJlcXVpcmUoJy4uL3AtdGlsZS1jbGljay10by1vcGVuLmpzJyk7XG5yZXF1aXJlKCcuLi9wLXRpbGUtd2VpZ2h0LmpzJyk7XG5yZXF1aXJlKCcuLi9wLXRpbGUtYWN0aXZlLmpzJyk7XG5yZXF1aXJlKCcuLi9wLXRpbGUtb3Blbi5qcycpO1xucmVxdWlyZSgnLi4vcC10aWxlLWdyb3ctd2hlbi1vcGVuLmpzJyk7XG5yZXF1aXJlKCcuLi9wLXRpbGUtb3Blbi1hY3RpdmUuanMnKTtcbnJlcXVpcmUoJy4uL3AtdGlsZS1za2luLWdyb3ctd2hlbi1vcGVuLmpzJyk7XG5yZXF1aXJlKCcuLi9wLXBvc2l0aW9uLXRyYWNraW5nLmpzJyk7XG5yZXF1aXJlKCcuLi9wLXRyYW5zaXRpb24tcG9zaXRpb24tdHJhY2tpbmcuanMnKTtcbi8vcmVxdWlyZSgnLi4vcC10aWxlLWhpZGRlbi5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLXRpbGUtbWF4aW1pemVkLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGlsZS1taWRkbGVjbGljay10by1tYXhpbWl6ZS5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLWQzLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtcHBpLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGhyZWUtZC5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLXRocmVlLWQtZ2VvbWV0cmljLW1vZGVscy5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLXRocmVlLWQtZ2VvbWV0cmljLW1vZGVscy1zdGwuanMnKTtcbi8vcmVxdWlyZSgnLi4vcC10aHJlZS1kLWdlb21ldHJpYy1tb2RlbHMtb2JqLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGhyZWUtZC1nZW9tZXRyaWMtbW9kZWxzLWpzb24uanMnKTtcbi8vcmVxdWlyZSgnLi4vcC1kMy10aHJlZS1kLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGhyZWUtZC1tYW51YWwtY29udHJvbHMuanMnKTtcbi8vcmVxdWlyZSgnLi4vcC10aHJlZS1kLWF1dG8tY29udHJvbHMuanMnKTtcbi8vcmVxdWlyZSgnLi4vcC1zbmFwc2hvdC5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLXRocmVlLWQtY2FtZXJhLXNuYXBzaG90LmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGlsZS1vcGVuLXNuYXBzaG90LmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGlsZS1idXR0b25zLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGlsZS1idXR0b24tdG8taGlkZS5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLXRpbGUtdmlzaWJsZS1zbmFwc2hvdC5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLXRpbGUtbWF4aW1pemVkLXNuYXBzaG90LmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGhyZWUtZC1tb2RlbC1zbmFwc2hvdC5qcycpO1xuLy9yZXF1aXJlKCcuLi9wLXRpbGUtYnV0dG9uLXRvLW1heGltaXplLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGlsZS1idXR0b24tdG8tc3dhcC10aHJlZS1kLW1vZGVsLmpzJyk7XG4vL3JlcXVpcmUoJy4uL3AtdGlsZS1idXR0b24tdG8tcG9pbnQtY2FtZXJhLmpzJyk7XG5cblxuLyogc2VsZWN0IHBsdWdpbnMgdG8gYWN0aXZhdGUgdGhlbSAgKG5vdGUgdGhhdCB0aGVzZSBtdXN0IGFscmVhZHkgYmUgKmxvYWRlZCogYXQgdGhpcyBwb2ludCkgKi9cbmNpcmN1aXRib2FyZC5wbHVnaW4oW1xuXHQndGlsZS1za2luJyxcblx0J3RpbGUtY2xpY2stdG8tb3BlbicsXG5cdCd0aWxlLWdyb3ctd2hlbi1vcGVuJyxcblx0J3RpbGUtc3BhY2luZycsXG5cdCd0aWxlLWFjdGl2ZSdcbl0pO1xuXG5cbi8qIGEgbW9kZWwgcHJvdG90eXBlICovXG52YXIgbW9kZWxQcm90b3R5cGUgPSB7XG5cdGdldCBpZCgpIHsgcmV0dXJuIHRoaXMubmFtZSB9LFxuXHRnZXRDaGlsZElkcygpIHsgcmV0dXJuIHRoaXMuY2hpbGRyZW4gfHwgW10gfSxcblx0Z2V0TW9kZWxzKGlkcykgeyByZXR1cm4gZ2V0TW9kZWxzQnlJZHMoaWRzKSB9XG59O1xuZnVuY3Rpb24gYmdDb2xvcihjb2xvcikgeyAvLyBmb3Igc29tZSBjc3MgY3VzdG9taXphdGlvbnNcblx0cmV0dXJuIHsgbm9ybWFsOiB7IGNzczogeyAnJic6IHsgYmFja2dyb3VuZENvbG9yOiBjb2xvciwgYm9yZGVyQ29sb3I6ICdibGFjaycgfSB9IH0gfTtcbn1cbnZhciBtb2RlbHMgPSB7XG5cdHJvb3Q6IHsgbmFtZTogJ3Jvb3QnLCBjaGlsZHJlbjogWydBJywgJ0InLCAnQycsICdEJywgJ0UnXSB9LFxuXHRBOiAgeyBuYW1lOiAnQScsIGNoaWxkcmVuOiBbJ0ExJywgJ0EyJywgJ0EzJ10sIHRpbGU6IGJnQ29sb3IoJ2xpZ2h0Ymx1ZScpIH0sICAvLyBleGFtcGxlIG9mIGN1c3RvbSB0aWxlIHN0eWxpbmdcblx0QjogIHsgbmFtZTogJ0InLCBjaGlsZHJlbjogWydCMScsICdCMicsICdCMyddLCB0aWxlOiBiZ0NvbG9yKCdsaWdodGdyZWVuJykgfSwgLy9cblx0QzogIHsgbmFtZTogJ0MnLCBjaGlsZHJlbjogWydDMScsICdDMicsICdDMyddIH0sXG5cdEQ6ICB7IG5hbWU6ICdEJywgY2hpbGRyZW46IFsnRDEnLCAnRDInLCAnRDMnXSB9LFxuXHRFOiAgeyBuYW1lOiAnRScsIGNoaWxkcmVuOiBbJ0UxJywgJ0UyJywgJ0UzJ10gfSxcblx0QTE6IHsgbmFtZTogJ0ExJywgdGlsZTogYmdDb2xvcignb3JhbmdlJykgfSxcblx0QTI6IHsgbmFtZTogJ0EyJyB9LFxuXHRBMzogeyBuYW1lOiAnQTMnIH0sXG5cdEIxOiB7IG5hbWU6ICdCMScgfSxcblx0QjI6IHsgbmFtZTogJ0IyJyB9LFxuXHRCMzogeyBuYW1lOiAnQjMnIH0sXG5cdEMxOiB7IG5hbWU6ICdDMScgfSxcblx0QzI6IHsgbmFtZTogJ0MyJyB9LFxuXHRDMzogeyBuYW1lOiAnQzMnIH0sXG5cdEQxOiB7IG5hbWU6ICdEMScgfSxcblx0RDI6IHsgbmFtZTogJ0QyJyB9LFxuXHREMzogeyBuYW1lOiAnRDMnIH0sXG5cdEUxOiB7IG5hbWU6ICdFMScgfSxcblx0RTI6IHsgbmFtZTogJ0UyJyB9LFxuXHRFMzogeyBuYW1lOiAnRTMnIH1cbn07XG5mdW5jdGlvbiBnZXRNb2RlbHNCeUlkcyhpZHMpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHRpZHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcblx0XHR2YXIgbW9kZWwgPSBPYmplY3QuY3JlYXRlKG1vZGVsUHJvdG90eXBlKTtcblx0XHRPYmplY3Qua2V5cyhtb2RlbHNbaWRdKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdG1vZGVsW2tleV0gPSBtb2RlbHNbaWRdW2tleV07XG5cdFx0fSk7XG5cdFx0cmVzdWx0LnB1c2goUC5yZXNvbHZlKG1vZGVsKSk7IC8vIG11c3QgYmUgd3JhcHBlZCBpbiBhIHByb21pc2UgKGZvciBub3cpXG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cbi8qIHVzZSB0aGUgJC5mbi5jaXJjdWl0Ym9hcmQgbWV0aG9kIHRvIGluc3RhbnRpYXRlIHRoZSBjaXJjdWl0LWJvYXJkICovXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cblx0JCgnI2NpcmN1aXRib2FyZCcpLmNpcmN1aXRib2FyZCh7XG5cdFx0bW9kZWw6IGdldE1vZGVsc0J5SWRzKFsncm9vdCddKVswXSxcblx0XHR0aWxlU3BhY2luZzogNCxcblx0XHR0aWxlbWFwTWFyZ2luOiA0XG5cdH0pLmNpcmN1aXRib2FyZCgnaW5zdGFuY2UnKS50aGVuKGZ1bmN0aW9uIChjaXJjdWl0Ym9hcmQpIHtcblxuXHRcdGNvbnNvbGUuaW5mbygnY2lyY3VpdGJvYXJkIGxvYWRlZCcpO1xuXG5cdH0pO1xuXG59KTtcblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZXhhbXBsZTIvZXhhbXBsZTIuanNcbiAqKi8iLCJkZWZpbmUoW1xuXHQnanF1ZXJ5Jyxcblx0J2JsdWViaXJkJyxcblx0Jy4vdXRpbC9uZXdXaWRnZXRUeXBlLmpzJyxcblx0Jy4vdXRpbC9wbHVnaW4uanMnXG5dLCBmdW5jdGlvbiAoJCwgUCwgbmV3V2lkZ2V0VHlwZSwgcGx1Z2luKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdC8qIGNyZWF0ZSAkLmNpcmN1aXRib2FyZCBvYmplY3QgaWYgaXQgZG9lc24ndCBleGlzdCAqL1xuXHQkLmNpcmN1aXRib2FyZCA9IHsgcGx1Z2luIH07XG5cblxuXHQvKiBjcmVhdGUgdGhlIGNsYXNzZXMgZGlyZWN0bHkgY2lyY3VpdGJvYXJkIHJlbGF0ZWQgKi9cblx0dmFyIENpcmN1aXRib2FyZFAgPSBuZXdXaWRnZXRUeXBlKCdDaXJjdWl0Ym9hcmQnLCB7XG5cdFx0Y3NzQ2xhc3M6IFwiY2lyY3VpdGJvYXJkXCIsXG5cdFx0ZmlsdGVyOiAoKSA9PiBQLnJlc29sdmUodHJ1ZSkgLy8gZG9uJ3QgaGlkZSBhbnkgZW50aXRpZXNcblx0fSk7XG5cdHZhciBUaWxlbWFwUCA9IG5ld1dpZGdldFR5cGUoJ1RpbGVtYXAnLCB7XG5cdFx0Y3NzQ2xhc3M6IFwidGlsZW1hcFwiXG5cdH0pO1xuXHR2YXIgVGlsZVAgPSBuZXdXaWRnZXRUeXBlKCdUaWxlJywge1xuXHRcdGNzc0NsYXNzOiBcInRpbGVcIlxuXHR9KTtcblxuXG5cdC8qIHB1dCB0aG9zZSBjbGFzc2VzIG9uIHRoZSAkLmNpcmN1aXRib2FyZCBvYmplY3QgKi9cblx0Q2lyY3VpdGJvYXJkUC50aGVuKChjKSA9PiB7ICQuY2lyY3VpdGJvYXJkLkNpcmN1aXRib2FyZCA9IGMgfSk7XG5cdFRpbGVtYXBQLnRoZW4oKGMpID0+IHsgJC5jaXJjdWl0Ym9hcmQuVGlsZW1hcCA9IGMgfSk7XG5cdFRpbGVQLnRoZW4oKGMpID0+IHsgJC5jaXJjdWl0Ym9hcmQuVGlsZSA9IGMgfSk7XG5cblxuXHQvKiAgcmV0dXJuIHRoZSBzdGF0aWMgYCQuY2lyY3VpdGJvYXJkYCBvYmplY3QsICAgICAgICAgKi9cblx0LyogIHRocm91Z2ggd2hpY2ggcGx1Z2lucyBjYW4gYmUgYXBwbGllZCBhbmQgc2VsZWN0ZWQgICovXG5cdHJldHVybiAkLmNpcmN1aXRib2FyZDtcblxuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NpcmN1aXRib2FyZC5qc1xuICoqLyIsImRlZmluZShbXG5cdCdqcXVlcnknLFxuXHQnYmx1ZWJpcmQnLFxuXHQnLi91dGlsL21pc2MuanMnLFxuXHQnLi91dGlsL2RlZmVyLmpzJyxcblx0Jy4vdXRpbC9uZXN0ZWQtZmxleC1ncm93LmpzJyxcblx0Jy4vcC1jb3JlLnNjc3MnXG5dLCBmdW5jdGlvbiAoJCwgUCwgVSwgZGVmZXIpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIHBsdWdpbiA9ICQuY2lyY3VpdGJvYXJkLnBsdWdpbih7XG5cdFx0bmFtZTogJ2NvcmUnLFxuXHRcdGlmOiB0cnVlXG5cdH0pO1xuXG5cblx0LyogQ2lyY3VpdGJvYXJkICovXG5cdHBsdWdpbi5tb2RpZnkoJ0NpcmN1aXRib2FyZC5wcm90b3R5cGUnKVxuXHRcdFx0LmFkZCgnX3JlZ2lzdGVyVGlsZScsIGZ1bmN0aW9uIF9yZWdpc3RlclRpbGUodGlsZSkge1xuXG5cdFx0XHRcdC8vIGNhbGxlZCBieSB0aGUgVGlsZSBjb25zdHJ1Y3RvclxuXG5cdFx0XHRcdFUuZ2V0RGVmKHRoaXMuX3BfY2lyY3VpdGJvYXJkQ29yZV90aWxlc0J5TW9kZWxJZCwgdGlsZS5tb2RlbC5pZCwgZGVmZXIpLnJlc29sdmUodGlsZSk7XG5cblx0XHRcdH0pLmFkZCgnYWxsVGlsZXMnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0dmFyIHRpbGVzID0ge307XG5cblx0XHRcdFx0T2JqZWN0LmtleXModGhpcy5fcF9jaXJjdWl0Ym9hcmRDb3JlX3RpbGVzQnlNb2RlbElkKS5mb3JFYWNoKChpZCkgPT4ge1xuXHRcdFx0XHRcdHRpbGVzW2lkXSA9IHRoaXMuX3BfY2lyY3VpdGJvYXJkQ29yZV90aWxlc0J5TW9kZWxJZFtpZF0ucHJvbWlzZTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuIHRpbGVzO1xuXG5cdFx0XHR9KS5hZGQoJ3RpbGUnLCBmdW5jdGlvbiAodGlsZVNlbGVjdG9yKSB7XG5cblx0XHRcdFx0cmV0dXJuIFUuZ2V0RGVmKHRoaXMuX3BfY2lyY3VpdGJvYXJkQ29yZV90aWxlc0J5TW9kZWxJZCwgdGlsZVNlbGVjdG9yLCBkZWZlcikucHJvbWlzZTtcblxuXHRcdFx0fSkuYWRkKCdjb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0dGhpcy5fcF9jaXJjdWl0Ym9hcmRDb3JlX3RpbGVzQnlNb2RlbElkID0ge307XG5cblx0XHRcdFx0Ly8gY3JlYXRlIHRoZSByb290IHRpbGVtYXBcblx0XHRcdFx0JCgnPGRpdi8+JykuYXBwZW5kVG8odGhpcy5lbGVtZW50KVxuXHRcdFx0XHRcdFx0LmNzcygnZmxleC1ncm93JywgMSlcblx0XHRcdFx0XHRcdC50aWxlbWFwKHtcblx0XHRcdFx0XHRcdFx0bW9kZWw6IHRoaXMub3B0aW9ucy5tb2RlbCxcblx0XHRcdFx0XHRcdFx0cGFyZW50OiB0aGlzXG5cdFx0XHRcdFx0XHR9KS50aWxlbWFwKCdpbnN0YW5jZScpO1xuXG5cdFx0XHR9KTtcblxuXG5cdC8qIFRpbGVtYXAgKi9cblx0cGx1Z2luLm1vZGlmeSgnVGlsZW1hcC5wcm90b3R5cGUnKVxuXHRcdFx0LmFkZCgncmVmcmVzaFRpbGVzJywgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdC8qIHNhbml0eSBjaGVjayAqL1xuXHRcdFx0XHRVLmFzc2VydChVLmlzRGVmaW5lZCh0aGlzLm1vZGVsKSxcblx0XHRcdFx0XHRcdGBBbiBBcGlOQVRPTVkgdGlsZW1hcCBzaG91bGQgaGF2ZSBhIG1vZGVsLmApO1xuXG5cdFx0XHRcdC8qIHJlbmRlciB0aGUgbmV3IHRpbGVtYXAgKHRocm91Z2ggYSBwcm9taXNlIGNoYWluLCByZXR1cm5pbmcgdGhlIGZpbmFsIHByb21pc2UpICovXG5cdFx0XHRcdHJldHVybiBQLnJlc29sdmUodGhpcy5tb2RlbClcblx0XHRcdFx0XHQvKiBnZXQgdGhlIGlkJ3Mgb2YgYWxsIGNoaWxkIG1vZGVscyAqL1xuXHRcdFx0XHRcdFx0LmNhbGwoJ2dldENoaWxkSWRzJylcblx0XHRcdFx0XHQvKiBmaWx0ZXIgb3V0IHRoZSBpZHMgb2YgY2hpbGRyZW4gdGhhdCBvdWdodCBub3QgYmUgZGlzcGxheWVkICovXG5cdFx0XHRcdFx0XHQubWFwKChpZCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gUC5yZXNvbHZlKHRoaXMuY2lyY3VpdGJvYXJkLm9wdGlvbnMuZmlsdGVyKGlkLCBVLmJpbmQoUC5yZXNvbHZlKHRoaXMubW9kZWwpLnZhbHVlKCksICdnZXRNb2RlbHMnLCBpZCkpKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnRoZW4oKHNob3cpID0+IHsgcmV0dXJuIHsgaWQ6IGlkLCBzaG93OiBzaG93IH0gfSk7XG5cdFx0XHRcdFx0XHR9KS5maWx0ZXIoVS5maWVsZCgnc2hvdycpKS5tYXAoVS5maWVsZCgnaWQnKSlcblx0XHRcdFx0XHQvKiBnZXQgcHJvbWlzZXMgdG8gYWxsIGNoaWxkIGVudGl0aWVzICovXG5cdFx0XHRcdFx0XHQudGhlbigoaWRzKSA9PiBQLnJlc29sdmUodGhpcy5tb2RlbCkudmFsdWUoKS5nZXRNb2RlbHMoaWRzKSlcblx0XHRcdFx0XHQvKiBjcmVhdGUgYSB0aWxlIGZvciBlYWNoIGNoaWxkIGVudGl0eSAqL1xuXHRcdFx0XHRcdFx0LnRoZW4oKGNoaWxkcmVuVG9EaXNwbGF5KSA9PiB7XG5cdFx0XHRcdFx0XHRcdC8qIHJlbW92ZSBhbGwgb2xkIHRpbGVzICovXG5cdFx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5jaGlsZHJlbigpLmVtcHR5KCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5lbXB0eSgpO1xuXG5cdFx0XHRcdFx0XHRcdC8qIHJlbmRlciBhbmQgc3RvcmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IHRpbGVzICovXG5cdFx0XHRcdFx0XHRcdHRoaXMuX3BfdGlsZW1hcENvcmVfdGlsZXMgPSBbXTtcblx0XHRcdFx0XHRcdFx0dmFyIHJvd0NvdW50ID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoY2hpbGRyZW5Ub0Rpc3BsYXkubGVuZ3RoKSk7XG5cdFx0XHRcdFx0XHRcdHZhciBjb2xDb3VudCA9IE1hdGguY2VpbChjaGlsZHJlblRvRGlzcGxheS5sZW5ndGggLyByb3dDb3VudCk7XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChyb3dDb3VudC0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJvdyA9ICQoJzxkaXYvPicpLmFkZENsYXNzKCd0aWxlcm93JykuYXBwZW5kVG8odGhpcy5lbGVtZW50KTtcblx0XHRcdFx0XHRcdFx0XHRmb3IgKHZhciBjb2x1bW4gPSAwOyBjb2x1bW4gPCBjb2xDb3VudCAmJiBjaGlsZHJlblRvRGlzcGxheS5sZW5ndGggPiAwOyBjb2x1bW4gKz0gMSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0JCgnPGRpdi8+JykudGlsZSh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1vZGVsOiBjaGlsZHJlblRvRGlzcGxheS5zaGlmdCgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJlbnQ6IHRoaXNcblx0XHRcdFx0XHRcdFx0XHRcdH0pLmFwcGVuZFRvKHJvdykuYW15TmVzdGVkRmxleEdyb3coMSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC8qIHNpZ25hbCB0aGF0IHRoZSB0aWxlcyBoYXZlIGJlZW4gKHJlKXJlbmRlcmVkICovXG5cdFx0XHRcdFx0XHQudGhlbigoKT0+IHsgdGhpcy50cmlnZ2VyKCd0aWxlcy1yZWZyZXNoZWQnKSB9KTtcblxuXHRcdFx0fSkuYWRkKCdjb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0dGhpcy5uZXdFdmVudCgndGlsZXMtcmVmcmVzaGVkJyk7XG5cblx0XHRcdFx0dGhpcy5fcF90aWxlbWFwQ29yZV90aWxlcyA9IG51bGw7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndGlsZXMnLCB7IGdldDogKCkgPT4gdGhpcy5fcF90aWxlbWFwQ29yZV90aWxlcyB9KTtcblx0XHRcdFx0dGhpcy5yZWZyZXNoVGlsZXMoKTtcblxuXHRcdFx0fSk7XG5cblxuXHQvKiBUaWxlICovXG5cdHBsdWdpbi5tb2RpZnkoJ1RpbGUucHJvdG90eXBlJylcblx0XHRcdC5hZGQoJ3BvcHVsYXRlSW5uZXJUaWxlbWFwJywgZnVuY3Rpb24gcG9wdWxhdGVJbm5lclRpbGVtYXAoKSB7XG5cblx0XHRcdFx0aWYgKCF0aGlzLl9wX3RpbGVDb3JlX3RpbGVtYXApIHtcblx0XHRcdFx0XHR0aGlzLl9wX3RpbGVDb3JlX3RpbGVtYXAgPSB0aGlzLmRvbS50aWxlbWFwKHtcblx0XHRcdFx0XHRcdG1vZGVsOiB0aGlzLm9wdGlvbnMubW9kZWwsXG5cdFx0XHRcdFx0XHRwYXJlbnQ6IHRoaXNcblx0XHRcdFx0XHR9KS50aWxlbWFwKCdpbnN0YW5jZScpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0pLmFkZCgnY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHRoaXMuX3BfdGlsZUNvcmVfdGlsZW1hcCA9IG51bGw7XG5cblx0XHRcdFx0Lyogc3VwcG9ydCBjZXJ0YWluIERPTS1ldmVudCBzdWJzY3JpcHRpb25zIGZyb20gdGhlIHRpbGUgb2JqZWN0IGl0c2VsZiAqL1xuXHRcdFx0XHRbJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdtb3VzZWVudGVyJywgJ21vdXNlbGVhdmUnXS5mb3JFYWNoKChldmVudCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMubmV3RXZlbnQoZXZlbnQsIHsgc291cmNlOiB0aGlzLmVsZW1lbnQuYXNLZWZpclN0cmVhbShldmVudCkgfSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0aGlzLm5ld0V2ZW50KCdjbGljaycsIHtcblx0XHRcdFx0XHRzb3VyY2U6IHRoaXMuZWxlbWVudC5tb3VzZUNsaWNrKHsgdGhyZXNob2xkOiB0aGlzLmNpcmN1aXRib2FyZC5vcHRpb25zLmRyYWdUaHJlc2hvbGQgfSlcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0LyogYSBmaWVsZCB0byBob2xkIHRoZSBpbm5lcm1vc3QgSFRNTCBjb250ZW50IGVsZW1lbnQgc3RpbGwgYmVsb25naW5nIHRvIHRoaXMgdGlsZSAqL1xuXHRcdFx0XHR0aGlzLmRvbSA9IHRoaXMuZWxlbWVudDtcblxuXHRcdFx0XHQvKiBhbiBlbGVtZW50IGlkIGZvciBxdWljayBqUXVlcnkgbG9va3VwcyAqL1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuYXR0cignaWQnLCB0aGlzLmlkKTtcblxuXHRcdFx0XHQvKiBub3RpZnkgdGhlIGNpcmN1aXRib2FyZCBvZiB0aGlzIG5ldyB0aWxlICovXG5cdFx0XHRcdHRoaXMuY2lyY3VpdGJvYXJkLl9yZWdpc3RlclRpbGUodGhpcyk7XG5cblx0XHRcdH0pO1xuXG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcC1jb3JlLmpzXG4gKiovIiwiZGVmaW5lKFtcblx0J2pxdWVyeScsXG5cdCdjaHJvbWEtanMnLFxuXHQnLi91dGlsL21pc2MuanMnLFxuXHQnLi91dGlsL2tlZmlyLWFuZC1lZ2dzLmpzJyxcblx0Jy4vdXRpbC9kZWZhdWx0cy5qcycsXG5cdCcuL3V0aWwvcHV0LWNzcy1ydWxlcy5qcycsXG5cdCcuL3AtdGlsZS1za2luLnNjc3MnXG5dLCBmdW5jdGlvbiAoJCwgY29sb3IsIFUsIEtlZmlyLCBkZWZhdWx0cykge1xuXHQndXNlIHN0cmljdCc7XG5cblxuXHR2YXIgcGx1Z2luID0gJC5jaXJjdWl0Ym9hcmQucGx1Z2luKHtcblx0XHRuYW1lOiAndGlsZS1za2luJyxcblx0XHRyZXF1aXJlczogWyd0aWxlLW9wZW4nLCAncG9zaXRpb24tdHJhY2tpbmcnXVxuXHR9KS5tb2RpZnkoJ1RpbGUucHJvdG90eXBlJyk7XG5cblxuXHQvKiB0aWxlIHN0eWxpbmcgZGVmYXVsdHMgZ2VuZXJhdG9yICovXG5cdHZhciBhcHBseVN0eWxlRGVmYXVsdHMgPSBkZWZhdWx0cyh7XG5cdFx0JyYnOiAgICAgICAgICAgIHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogXCIgJ3doaXRlJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIixcblx0XHRcdGJvcmRlckNvbG9yOiAgICAgXCIgY29sb3IoYFsnJiddLmJhY2tncm91bmRDb2xvcmApLmJyaWdodGVuKDIwKS5jc3MoKSAgICAgICAgICAgICAgICAgICAgICBcIixcblx0XHRcdGNvbG9yOiAgICAgICAgICAgXCIgY29sb3IoYFsnJiddLmJhY2tncm91bmRDb2xvcmApLmx1bWluYW5jZSgpID4gMC41ICYmICdibGFjaycgfHwgJ3doaXRlJyBcIlxuXHRcdH0sXG5cdFx0JyYgPiBoZWFkZXInOiAgIHtcblx0XHRcdGJvcmRlckNvbG9yOiBcIiBgWycmJ10uYm9yZGVyQ29sb3JgIFwiXG5cdFx0fSxcblx0XHQnJiA+IGljb24tYnRuJzoge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBcIiBgWycmJ10uYmFja2dyb3VuZENvbG9yYCBcIlxuXHRcdH1cblx0fSwgeyBjb2xvciB9KTtcblxuXG5cdC8qIG1ha2UgdGlsZXMgbG9vayBuaWNlLCB3aXRoIGEgaGVhZGVyLCBjb250ZW50IHNlY3Rpb24sIGFuZCBDU1Mgc3R5bGluZyBkZXJpdmVkIGZyb20gdGhlIG1vZGVsICovXG5cdHBsdWdpbi5pbnNlcnQoJ2NvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qICBjcmVhdGUgdGhlIGhlYWRlciBhbmQgY29udGVudCBlbGVtZW50cywgYW5kIHJlcm91dGUgdGhlICAqL1xuXHRcdC8qICdkb20nIHByb3BlcnR5IHRvIHRoZSBuZXcgY29udGVudCBlbGVtZW50ICAgICAgICAgICAgICAgICAqL1xuXHRcdHZhciBvcmlnRWxlbWVudCA9IHRoaXMuZG9tO1xuXHRcdG9yaWdFbGVtZW50LmFkZENsYXNzKCdza2lubmVkLXRpbGUnKTtcblx0XHR0aGlzLl9wX3RpbGVTa2luX2hlYWRlckVsZW1lbnQgPSAkKGA8aGVhZGVyLz5gKS5hcHBlbmRUbyhvcmlnRWxlbWVudCk7XG5cdFx0dGhpcy5kb20gPSAkKGA8c2VjdGlvbi8+YCkuYXBwZW5kVG8ob3JpZ0VsZW1lbnQpO1xuXG5cdFx0LyogcHV0IHRoZSBuYW1lIG9mIHRoZSBtb2RlbCBpbiB0aGUgaGVhZGVyIGVsZW1lbnQgKi9cblx0XHR0aGlzLm1vZGVsLmdldCgnbmFtZScpLnRoZW4oKG5hbWUpPT4geyB0aGlzLl9wX3RpbGVTa2luX2hlYWRlckVsZW1lbnQudGV4dChuYW1lKSB9KTtcblxuXHRcdC8qIHRha2UgYW55IGNzcyBydWxlcyBmcm9tIHRoZSBtb2RlbCBhbmQgYXBwbHkgdGhlbSB0byB0aGUgdGlsZSAqL1xuXHRcdHRoaXMubW9kZWwuZ2V0KCd0aWxlJykuZ2V0KCdub3JtYWwnKS5nZXQoJ2NzcycpLnRoZW4oKGNzcyk9PiB7IHRoaXMuZWxlbWVudC5hbXlQdXRDc3NSdWxlcyhhcHBseVN0eWxlRGVmYXVsdHMoY3NzKSkgfSlcblx0XHRcdFx0LmNhdGNoKCgpPT57fSk7IC8vIGl0J3MgT0sgaWYgJy50aWxlLm5vcm1hbC5jc3MnIGlzIG5vdCBvbiB0aGUgbW9kZWxcblxuXHRcdC8qIHdoZW4gdGhlIHRpbGUgaXMgY2xvc2VkLCBtYWtlIHRoZSBmb250IHNpemUgZHluYW1pYyAqL1xuXHRcdHRoaXMub24oJ3NpemUnKS5maWx0ZXJCeSh0aGlzLnAoJ29wZW4nKS5ub3QoKSkub25WYWx1ZSgoc2l6ZSkgPT4ge1xuXHRcdFx0dGhpcy5fcF90aWxlU2tpbl9oZWFkZXJFbGVtZW50IC8vIGZvcm11bGEgZ290dGVuIGV4cGVyaW1lbnRhbGx5XG5cdFx0XHRcdFx0LmNzcygnZm9udFNpemUnLCBNYXRoLm1pbigwLjIgKiBNYXRoLnBvdyhzaXplLmhlaWdodCwgMS4wMSksIDAuMTMgKiBNYXRoLnBvdyhzaXplLndpZHRoLCAxLjAxKSkpO1xuXHRcdFx0XHRcdC8vIFdlJ3JlIGdyb3dpbmcgLyBzaHJpbmtpbmcgdGhlIGZvbnQgc2l6ZSBpbiBwcm9wb3J0aW9uIHRvIHRoZSAoMS4wMSlzdCBwb3dlciBvZiB0aGUgdGlsZSBzaXplLlxuXHRcdFx0XHRcdC8vIE1ha2luZyB0aGUgZm9udCBncm93L3NocmluayBqdXN0IGEgdGlueSBiaXQgZmFzdGVyIHRoYW4gdGhlIHRpbGUgcHJldmVudHMgYW4gYXdrd2FyZCAnZmxpY2tlcmluZydcblx0XHRcdFx0XHQvLyBiZXR3ZWVuIGRpZmZlcmVudCBsaW5lLWJyZWFrcyB0aGF0IHdvdWxkIG90aGVyd2lzZSBoYXBwZW4gc29tZXRpbWVzLlxuXHRcdH0pO1xuXG5cdFx0LyogdGhlICdoZWFkZXJTaXplJyBvYnNlcnZhYmxlICovXG5cdFx0dGhpcy5uZXdQcm9wZXJ0eSgnaGVhZGVyU2l6ZScsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuU2l6ZS5lcXVhbHNcblx0XHR9KS5wbHVnKEtlZmlyLm1lcmdlKFtcblx0XHRcdEtlZmlyLm9uY2UoKSxcblx0XHRcdHRoaXMub24oJ3NpemUnKS5jaGFuZ2VzKCksXG5cdFx0XHR0aGlzLm9uKCdvcGVuJykuY2hhbmdlcygpXG5cdFx0XSkubWFwKCgpID0+IG5ldyBVLlNpemUodGhpcy5fcF90aWxlU2tpbl9oZWFkZXJFbGVtZW50LmhlaWdodCgpLCB0aGlzLnNpemUud2lkdGgpKSk7XG5cblxuXHRcdC8qIHRoZSAnaGVhZGVyUG9zaXRpb24nIG9ic2VydmFibGUgKi9cblx0XHR0aGlzLm5ld1Byb3BlcnR5KCdoZWFkZXJQb3NpdGlvbicsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZVxuXHRcdH0pLnBsdWcodGhpcy5vbigncG9zaXRpb24nKSk7XG5cblx0fSk7XG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3AtdGlsZS1za2luLmpzXG4gKiovIiwiZGVmaW5lKFsnanF1ZXJ5J10sIGZ1bmN0aW9uICgkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgcGx1Z2luID0gJC5jaXJjdWl0Ym9hcmQucGx1Z2luKHtcblx0XHRuYW1lOiAndGlsZS1zcGFjaW5nJyxcblx0XHRyZXF1aXJlczogWydjb3JlJ11cblx0fSkubW9kaWZ5KCdUaWxlbWFwLnByb3RvdHlwZScpO1xuXG5cdC8vXG5cdC8vIHJlc2V0IHRoZSB0aWxlLXNwYWNpbmcgaW4gdGhlIERPTVxuXHQvL1xuXHRwbHVnaW4uYWRkKCdyZWZyZXNoVGlsZVNwYWNpbmcnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5lbGVtZW50LmNzcygnbWFyZ2luJywgdGhpcy5jaXJjdWl0Ym9hcmQub3B0aW9ucy50aWxlbWFwTWFyZ2luKTtcblx0XHR0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKS5jc3MoJ21hcmdpbi1ib3R0b20nLCB0aGlzLmNpcmN1aXRib2FyZC5vcHRpb25zLnRpbGVTcGFjaW5nKTtcblx0XHR0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNzcygnbWFyZ2luLXJpZ2h0JywgdGhpcy5jaXJjdWl0Ym9hcmQub3B0aW9ucy50aWxlU3BhY2luZyk7XG5cdH0pO1xuXG5cdC8vXG5cdC8vIHJlZnJlc2ggdGlsZS1zcGFjaW5nIGFmdGVyIHRpbGVzIGFyZSByZWZyZXNoZWRcblx0Ly9cblx0cGx1Z2luLmFmdGVyKCdyZWZyZXNoVGlsZXMnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5yZWZyZXNoVGlsZVNwYWNpbmcoKTtcblx0fSk7XG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3AtdGlsZS1zcGFjaW5nLmpzXG4gKiovIiwiZGVmaW5lKFsnanF1ZXJ5JywgJy4vdXRpbC9jb2Rlcy5qcycsICcuL3V0aWwva2VmaXItYW5kLWVnZ3MuanMnXSwgZnVuY3Rpb24gKCQsIHtidXR0b259KSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdHZhciBwbHVnaW4gPSAkLmNpcmN1aXRib2FyZC5wbHVnaW4oe1xuXHRcdG5hbWU6ICd0aWxlLWNsaWNrLXRvLW9wZW4nLFxuXHRcdHJlcXVpcmVzOiBbJ3RpbGUtb3BlbiddXG5cdH0pLm1vZGlmeSgnVGlsZS5wcm90b3R5cGUnKTtcblxuXG5cdC8qIFdoZW4gYSB0aWxlIGlzIGNsaWNrZWQsIGl0IGlzIG9wZW5lZC9jbG9zZWQuICovXG5cdHBsdWdpbi5pbnNlcnQoJ2NvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMub24oJ2NsaWNrJykud2hpY2goYnV0dG9uLkxFRlQpXG5cdFx0XHRcdC5za2lwUHJvcGFnYXRpb24oJ3RpbGUtbGVmdC1jbGljaycpICAvLyBvbmx5IHJlZ2lzdGVyIHRoaXMgZXZlbnQgZm9yIHRoZSBpbm5lci1tb3N0IHRpbGVcblx0XHRcdFx0Lm9uVmFsdWUoKCkgPT4geyB0aGlzLm9wZW4gPSAhdGhpcy5vcGVuIH0pO1xuXG5cdH0pO1xuXG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcC10aWxlLWNsaWNrLXRvLW9wZW4uanNcbiAqKi8iLCJkZWZpbmUoWydqcXVlcnknXSwgZnVuY3Rpb24gKCQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIHBsdWdpbiA9ICQuY2lyY3VpdGJvYXJkLnBsdWdpbih7XG5cdFx0bmFtZTogJ3RpbGUtd2VpZ2h0Jyxcblx0XHRyZXF1aXJlczogWydjb3JlJ11cblx0fSkubW9kaWZ5KCdUaWxlLnByb3RvdHlwZScpO1xuXG5cblx0LyogIGdpdmVzIHRpbGVzIGEgYHdlaWdodGAgd2hpY2ggcmVmbGVjdHMgdGhlIHNjcmVlbiBhcmVhIHRoZXkgdGFrZSB1cCAgKi9cblx0LyogIGluIHJlbGF0aW9uIHRvIG90aGVyIHRpbGVzIGluIHRoZSBzYW1lIHRpbGVtYXAgICAgICAgICAgICAgICAgICAgICAgKi9cblx0cGx1Z2luLmluc2VydCgnY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gVE9ETzogdGhpcyBpcyBub3cgZG9uZSBpbiAndGlsZS1ncm93LXdoZW4tJyBkZWx0YXNcblxuXHRcdC8vLyogdGhlICd3ZWlnaHQnIG9ic2VydmFibGUgKi9cblx0XHQvL3RoaXMubmV3UHJvcGVydHkoJ3dlaWdodCcsIHsgaW5pdGlhbDogMSB9KTtcblxuXHRcdC8vLyogZW5hY3QgJ3dlaWdodCcgb24gdGhlIERPTSAqL1xuXHRcdC8vdGhpcy5wKCd3ZWlnaHQnKS5vblZhbHVlKCh3KSA9PiB7IHRoaXMuZWxlbWVudC5hbXlOZXN0ZWRGbGV4R3Jvdyh3KSB9KTtcblxuXHR9KTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9wLXRpbGUtd2VpZ2h0LmpzXG4gKiovIiwiZGVmaW5lKFsnanF1ZXJ5JywgJy4vdXRpbC9taXNjLmpzJ10sIGZ1bmN0aW9uICgkLCBVKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgcGx1Z2luID0gJC5jaXJjdWl0Ym9hcmQucGx1Z2luKHtcblx0XHRuYW1lOiAndGlsZS1hY3RpdmUnLFxuXHRcdHJlcXVpcmVzOiBbJ2NvcmUnXVxuXHR9KS5tb2RpZnkoJ1RpbGUucHJvdG90eXBlJyk7XG5cblx0LyogIEZvciBhbGwgdGlsZXMgdGhhdCBzaGFyZSB0aGUgc2FtZSBtb2RlbCwgb25seSBvbmUgY2FuIGJlICdhY3RpdmUnLiAgKi9cblx0LyogIElmIG9uZSBvZiB0aGVtIGlzIHZpc2libGUsIG9uZSBvZiB0aGVtIGlzIGFjdGl2ZS4gICAgICAgICAgICAgICAgICAgKi9cblx0cGx1Z2luLmluc2VydCgnY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0Lyogb25seSBpbnRlcmVzdGluZyBpZiB0aGUgdGlsZSBoYXMgYSBtb2RlbCAqL1xuXHRcdGlmICghdGhpcy5tb2RlbCkgeyByZXR1cm4gfVxuXG5cdFx0LyogdGhlICdhY3RpdmUnIHByb3BlcnR5ICovXG5cdFx0dGhpcy5uZXdQcm9wZXJ0eSgnYWN0aXZlJywgeyBpbml0aWFsOiBmYWxzZSB9KTtcblxuXHRcdC8qIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBhY3RpdmF0aW5nIHRoZSBmaXJzdCB0aWxlIGluIHRoZSBtb2RlbCBxdWV1ZSBhbmQgZGVhY3RpdmF0aW5nIHRoZSBzZWNvbmQgKi9cblx0XHR2YXIgX2FjdGl2YXRlUHJvcGVyVGlsZSA9ICgpID0+IHtcblx0XHRcdHZhciB0aWxlcyA9IHRoaXMubW9kZWwuX3BfYW15QWN0aXZlVGlsZVF1ZXVlO1xuXHRcdFx0aWYgKHRpbGVzWzFdKSB7IHRpbGVzWzFdLmFjdGl2ZSA9IGZhbHNlIH1cblx0XHRcdGlmICh0aWxlc1swXSkgeyB0aWxlc1swXS5hY3RpdmUgPSB0cnVlIH1cblx0XHR9O1xuXG5cdFx0LyogcHV0IHRoaXMgdGlsZSBpbiB0aGUgcXVldWUgb2YgcG90ZW50aWFsbHkgYWN0aXZlIHRpbGVzICovXG5cdFx0VS5hcnJheSh0aGlzLm1vZGVsLCAnX3BfYW15QWN0aXZlVGlsZVF1ZXVlJykucHVzaCh0aGlzKTtcblx0XHRfYWN0aXZhdGVQcm9wZXJUaWxlKCk7XG5cdFx0dGhpcy5vbignZGVzdHJveScpLnRha2UoMSkub25WYWx1ZSgoKSA9PiB7XG5cdFx0XHR2YXIgaW5kZXggPSB0aGlzLm1vZGVsLl9wX2FteUFjdGl2ZVRpbGVRdWV1ZS5pbmRleE9mKHRoaXMpO1xuXHRcdFx0dGhpcy5tb2RlbC5fcF9hbXlBY3RpdmVUaWxlUXVldWUuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdF9hY3RpdmF0ZVByb3BlclRpbGUoKTtcblx0XHR9KTtcblxuXHRcdC8qIG1ha2Ugc2V0dGluZyB0aGUgJ2FjdGl2ZScgcHJvcGVydHkgYWZmZWN0IHRoZSB0aWxlIHF1ZXVlIG9uIHRoZSBtb2RlbCAqL1xuXHRcdHRoaXMucCgnYWN0aXZlJykudmFsdWUodHJ1ZSkub25WYWx1ZSgoKSA9PiB7XG5cdFx0XHR2YXIgaW5kZXggPSB0aGlzLm1vZGVsLl9wX2FteUFjdGl2ZVRpbGVRdWV1ZS5pbmRleE9mKHRoaXMpO1xuXHRcdFx0aWYgKGluZGV4ICE9PSAwKSB7XG5cdFx0XHRcdHRoaXMubW9kZWwuX3BfYW15QWN0aXZlVGlsZVF1ZXVlLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdHRoaXMubW9kZWwuX3BfYW15QWN0aXZlVGlsZVF1ZXVlLnVuc2hpZnQodGhpcyk7XG5cdFx0XHRcdF9hY3RpdmF0ZVByb3BlclRpbGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8qIGF1dG9tYXRpY2FsbHkgKHVuKXNldCB0aGUgQ1NTIGNsYXNzICdhY3RpdmUnICovXG5cdFx0dGhpcy5vbignYWN0aXZlJykub25WYWx1ZSgoYSkgPT4geyB0aGlzLmVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScsIGEpIH0pO1xuXG5cdH0pO1xufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9wLXRpbGUtYWN0aXZlLmpzXG4gKiovIiwiZGVmaW5lKFsnanF1ZXJ5J10sIGZ1bmN0aW9uICgkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdHZhciBwbHVnaW4gPSAkLmNpcmN1aXRib2FyZC5wbHVnaW4oe1xuXHRcdG5hbWU6ICd0aWxlLW9wZW4nLFxuXHRcdHJlcXVpcmVzOiBbJ2NvcmUnXVxuXHR9KS5tb2RpZnkoJ1RpbGUucHJvdG90eXBlJyk7XG5cblxuXHQvKiBhbGxvdyBhIHRpbGUgdG8gYmUgYG9wZW5gIChvciBjbG9zZWQpICovXG5cdHBsdWdpbi5pbnNlcnQoJ2NvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qIHRoZSAnb3Blbicgb2JzZXJ2YWJsZSAqL1xuXHRcdHRoaXMubmV3UHJvcGVydHkoJ29wZW4nLCB7IGluaXRpYWw6IGZhbHNlIH0pO1xuXG5cdFx0Lyogd2hlbiB0aGUgdGlsZSBvcGVucywgcG9wdWxhdGUgdGhlIGlubmVyIHRpbGVtYXAgKi9cblx0XHR0aGlzLnAoJ29wZW4nKS52YWx1ZSh0cnVlKS50YWtlKDEpLm9uVmFsdWUoKCkgPT4geyB0aGlzLnBvcHVsYXRlSW5uZXJUaWxlbWFwKCkgfSk7IC8vIFRPRE86IGRlbGF5IGJ5IG9wZW5pbmctYW5pbWF0aW9uIHRpbWVcblxuXHRcdC8qIG1hbmFnZSB0aGUgQ1NTIGNsYXNzICdvcGVuJyAqL1xuXHRcdHRoaXMucCgnb3BlbicpLm9uVmFsdWUoKG8pID0+IHsgdGhpcy5lbGVtZW50LnRvZ2dsZUNsYXNzKCdvcGVuJywgbykgfSk7XG5cblx0XHQvKiBpZiB0aGlzIHRpbGUgY2xvc2VzLCBhbGwgaXRzIGNoaWxkcmVuIGNsb3NlICovXG5cdFx0dGhpcy5wKCdvcGVuJykudmFsdWUoZmFsc2UpLm9uVmFsdWUoKCkgPT4ge1xuXHRcdFx0dGhpcy5jbG9zZXN0RGVzY2VuZGFudHNCeVR5cGUoJ1RpbGUnKS5mb3JFYWNoKCh0aWxlKSA9PiB7IHRpbGUub3BlbiA9IGZhbHNlIH0pO1xuXHRcdH0pO1xuXG5cdH0pO1xufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9wLXRpbGUtb3Blbi5qc1xuICoqLyIsImRlZmluZShbXG5cdCdqcXVlcnknLFxuXHQnYmx1ZWJpcmQnLFxuXHQnLi91dGlsL2tlZmlyLWFuZC1lZ2dzLmpzJyxcblx0J3ZlbG9jaXR5J1xuXSwgZnVuY3Rpb24gKCQsIFAsIEtlZmlyKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdHZhciBwbHVnaW4gPSAkLmNpcmN1aXRib2FyZC5wbHVnaW4oe1xuXHRcdG5hbWU6ICd0aWxlLWdyb3ctd2hlbi1vcGVuJyxcblx0XHRyZXF1aXJlczogWyd0aWxlLW9wZW4nXVxuXHR9KS5tb2RpZnkoJ1RpbGUucHJvdG90eXBlJyk7XG5cblxuXHQvKiBkZWZhdWx0IGZsZXgtZ3JvdyB2YWx1ZXMgZm9yIG9wZW4gLyBjbG9zZWQgdGlsZXMgKi9cblx0cGx1Z2luXG5cdFx0LmFkZCgnd2VpZ2h0V2hlbk9wZW4nLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmNpcmN1aXRib2FyZC5vcHRpb25zLndlaWdodFdoZW5PcGVuIHx8IDIgfSlcblx0XHQuYWRkKCd3ZWlnaHRXaGVuQ2xvc2VkJywgKCkgPT4gMSk7XG5cblxuXHRwbHVnaW4uYWRkKCdncm93V2hlbk9wZW4nLCBmdW5jdGlvbiAob3Blbikge1xuXHRcdHZhciBmbGV4R3Jvd0Zyb20gPSBwYXJzZUZsb2F0KHRoaXMuZWxlbWVudC5kYXRhKCdhbXlGbGV4R3Jvd1RhcmdldCcpIHx8IDEpO1xuXHRcdHZhciBmbGV4R3Jvd1RvID0gb3BlbiA/IHRoaXMud2VpZ2h0V2hlbk9wZW4oKSA6IHRoaXMud2VpZ2h0V2hlbkNsb3NlZCgpO1xuXHRcdHRoaXMuZWxlbWVudC5kYXRhKCdhbXlGbGV4R3Jvd1RhcmdldCcsIGZsZXhHcm93VG8pO1xuXHRcdHZhciByb3dGbGV4R3Jvd1RvID0gMDtcblx0XHR0aGlzLmVsZW1lbnQucGFyZW50KCkuY2hpbGRyZW4oKVxuXHRcdFx0LmVhY2goZnVuY3Rpb24gKCkgeyByb3dGbGV4R3Jvd1RvICs9IHBhcnNlRmxvYXQoJCh0aGlzKS5kYXRhKCdhbXlGbGV4R3Jvd1RhcmdldCcpIHx8IDEpIH0pO1xuXHRcdHZhciByb3dGbGV4R3Jvd0Zyb20gPSByb3dGbGV4R3Jvd1RvIC0gZmxleEdyb3dUbyArIGZsZXhHcm93RnJvbTtcblx0XHRyZXR1cm4gUC5hbGwoW1xuXHRcdFx0bmV3IFAoKHJlc29sdmUpID0+IHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnZlbG9jaXR5KFxuXHRcdFx0XHRcdHsgZmxleEdyb3c6IFtmbGV4R3Jvd1RvLCBmbGV4R3Jvd0Zyb21dIH0sXG5cdFx0XHRcdFx0eyBjb21wbGV0ZTogcmVzb2x2ZSwgZHVyYXRpb246IDMwMCB9XG5cdFx0XHRcdCk7XG5cdFx0XHR9KSwgbmV3IFAoKHJlc29sdmUpID0+IHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnBhcmVudCgpLnZlbG9jaXR5KFxuXHRcdFx0XHRcdHsgZmxleEdyb3c6IFtyb3dGbGV4R3Jvd1RvLCByb3dGbGV4R3Jvd0Zyb21dIH0sXG5cdFx0XHRcdFx0eyBjb21wbGV0ZTogcmVzb2x2ZSwgZHVyYXRpb246IDMwMCB9XG5cdFx0XHRcdCk7XG5cdFx0XHR9KVxuXHRcdF0pO1xuXHR9KTtcblxuXG5cdHBsdWdpbi5pbnNlcnQoJ2NvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qIG1ha2UgdGhlIHRpbGUgZ3Jvdy9zaHJpbmsgYmFzZWQgb24gb3Blbi1uZXNzICovXG5cdFx0dGhpcy5wKCdvcGVuJykuY2hhbmdlcygpLm9uVmFsdWUoKG9wZW4pID0+IHtcblx0XHRcdHRoaXMuZ3Jvd1doZW5PcGVuKG9wZW4pLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRpZiAob3Blbikge1xuXHRcdFx0XHRcdGZpbmlzaGVkT3BlbmluZ0J1cy5lbWl0KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZmluaXNoZWRDbG9zaW5nQnVzLmVtaXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR2YXIgZmluaXNoZWRPcGVuaW5nQnVzID0gS2VmaXIuYnVzKCk7XG5cdFx0dmFyIGZpbmlzaGVkQ2xvc2luZ0J1cyA9IEtlZmlyLmJ1cygpO1xuXG5cdFx0LyogY3JlYXRlIGEgcHJvcGVydHkgdGhhdCB0ZWxscyBpZiBhIHRpbGUgaXMgJ2Z1bGx5IG9wZW4nLCBpLmUuLCBhbHNvIHRoZSBhbmltYXRpb24gaXMgZG9uZSAqL1xuXHRcdHRoaXMubmV3UHJvcGVydHkoJ2Z1bGx5T3BlbicsIHsgc2V0dGFibGU6IGZhbHNlLCBpbml0aWFsOiB0aGlzLm9wZW4gfSlcblx0XHRcdC5wbHVnKHRoaXMucCgnb3BlbicpLnZhbHVlKGZhbHNlKSlcblx0XHRcdC5wbHVnKGZpbmlzaGVkT3BlbmluZ0J1cy5tYXBUbyh0cnVlKSk7XG5cblx0XHQvKiBjcmVhdGUgYSBwcm9wZXJ0eSB0aGF0IHRlbGxzIGlmIGEgdGlsZSBpcyAnZnVsbHkgb3BlbicsIGkuZS4sIGFsc28gdGhlIGFuaW1hdGlvbiBpcyBkb25lICovXG5cdFx0dGhpcy5uZXdQcm9wZXJ0eSgnZnVsbHlDbG9zZWQnLCB7IHNldHRhYmxlOiBmYWxzZSwgaW5pdGlhbDogIXRoaXMub3BlbiB9KVxuXHRcdFx0LnBsdWcodGhpcy5wKCdvcGVuJykubm90KCkudmFsdWUoZmFsc2UpKVxuXHRcdFx0LnBsdWcoZmluaXNoZWRDbG9zaW5nQnVzLm1hcFRvKHRydWUpKTtcblxuXHR9KTtcblxuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3AtdGlsZS1ncm93LXdoZW4tb3Blbi5qc1xuICoqLyIsImRlZmluZShbJ2pxdWVyeScsICcuL3V0aWwvbWlzYy5qcyddLCBmdW5jdGlvbiAoJCwgVSkge1xuXHQndXNlIHN0cmljdCc7XG5cblxuXHR2YXIgcGx1Z2luID0gJC5jaXJjdWl0Ym9hcmQucGx1Z2luKHtcblx0XHRuYW1lOiAndGlsZS1vcGVuLWFjdGl2ZScsXG5cdFx0cmVzb2x2ZXM6IFsndGlsZS1vcGVuJywgJ3RpbGUtYWN0aXZlJ11cblx0fSkubW9kaWZ5KCdUaWxlLnByb3RvdHlwZScpO1xuXG5cblx0LyogbWFrZXMgYSB0aWxlIGFjdGl2ZSB3aGVuIGl0IGlzIG9wZW4sIGFuZCBjbG9zZXMgdGlsZXMgdGhhdCBhcmUgZGVhY3RpdmF0ZWQgKi9cblx0cGx1Z2luLmluc2VydCgnY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0Lyogb25seSBpbnRlcmVzdGluZyBpZiB0aGUgdGlsZSBoYXMgYW4gYGFjdGl2ZWAgcHJvcGVydHkgKi9cblx0XHRpZiAoVS5pc1VuZGVmaW5lZCh0aGlzLmFjdGl2ZSkpIHsgcmV0dXJuOyB9XG5cblx0XHQvKiB3aGVuIGEgdGlsZSBpcyBvcGVuZWQsIGl0IGJlY29tZXMgYWN0aXZlICovXG5cdFx0dGhpcy5vbignb3BlbicpLnZhbHVlKHRydWUpLm9uVmFsdWUoKCkgPT4geyB0aGlzLmFjdGl2ZSA9IHRydWUgfSk7XG5cblx0XHQvKiB3aGVuIGEgdGlsZSBpcyBkZS1hY3RpdmF0ZWQsIGl0IGJlY29tZXMgY2xvc2VkICovXG5cdFx0dGhpcy5vbignYWN0aXZlJykudmFsdWUoZmFsc2UpLm9uVmFsdWUoKCkgPT4geyB0aGlzLm9wZW4gPSBmYWxzZSB9KTtcblxuXHR9KTtcblxuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3AtdGlsZS1vcGVuLWFjdGl2ZS5qc1xuICoqLyIsImRlZmluZShbJ2pxdWVyeScsICdibHVlYmlyZCcsICcuL3AtdGlsZS1za2luLWdyb3ctd2hlbi1vcGVuLnNjc3MnXSwgZnVuY3Rpb24gKCQsIFApIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIHBsdWdpbiA9ICQuY2lyY3VpdGJvYXJkLnBsdWdpbih7XG5cdFx0bmFtZTogJ3RpbGUtc2tpbi1ncm93LXdoZW4tb3BlbicsXG5cdFx0cmVzb2x2ZXM6IFsndGlsZS1za2luJywgJ3RpbGUtZ3Jvdy13aGVuLW9wZW4nXVxuXHR9KS5tb2RpZnkoJ1RpbGUucHJvdG90eXBlJyk7XG5cblxuXHQvLy8qICByZWFjdCB0byBhIHRpbGUgb3BlbmluZyBvciBjbG9zaW5nIGJ5ICAgICAgKi9cblx0Ly8vKiAgdGltZWx5IHNob3dpbmcvaGlkaW5nIHRoZSBjb250ZW50IHNlY3Rpb24gICovXG5cdC8vLyogIHRvIGVuc3VyZSBzbW9vdGggdHJhbnNpdGlvbiBhbmltYXRpb24gICAgICAqL1xuXHQvL3BsdWdpbi5pbnNlcnQoJ2NvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblx0Ly9cdHZhciBzZWN0aW9uRWxlbWVudCA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbignc2VjdGlvbicpO1xuXHQvL1x0dGhpcy5wKCdvcGVuJykudmFsdWUodHJ1ZSkub25WYWx1ZSgoKSA9PiB7XG5cdC8vXHRcdHNlY3Rpb25FbGVtZW50LmNzcygnb3BhY2l0eScsIDApO1xuXHQvL1x0fSk7XG5cdC8vXHR0aGlzLnAoJ2Z1bGx5T3BlbicpLm9uVmFsdWUoKG9wZW4pID0+IHtcblx0Ly9cdFx0aWYgKG9wZW4pIHtcblx0Ly9cdFx0XHRzZWN0aW9uRWxlbWVudC5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXHQvL1x0XHRcdHNlY3Rpb25FbGVtZW50LmNzcygnb3BhY2l0eScsIDEpO1xuXHQvL1x0XHR9IGVsc2Uge1xuXHQvL1x0XHRcdHNlY3Rpb25FbGVtZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblx0Ly9cdFx0XHRzZWN0aW9uRWxlbWVudC5jc3MoJ29wYWNpdHknLCAwKTtcblx0Ly9cdFx0fVxuXHQvL1x0fSk7XG5cdC8vfSk7XG5cblxuXHRwbHVnaW4uYXBwZW5kKCdjb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGZsZXhHcm93RnJvbSA9IDE7XG5cdFx0dmFyIHJvd0ZsZXhHcm93RnJvbSA9IHRoaXMuZWxlbWVudC5wYXJlbnQoKS5jaGlsZHJlbigpLmxlbmd0aDtcblx0XHR0aGlzLmVsZW1lbnQudmVsb2NpdHkoXG5cdFx0XHR7IGZsZXhHcm93OiBbZmxleEdyb3dGcm9tLCBmbGV4R3Jvd0Zyb21dIH0sXG5cdFx0XHR7IGR1cmF0aW9uOiAxIH1cblx0XHQpO1xuXHRcdHRoaXMuZWxlbWVudC5wYXJlbnQoKS52ZWxvY2l0eShcblx0XHRcdHsgZmxleEdyb3c6IFtyb3dGbGV4R3Jvd0Zyb20sIHJvd0ZsZXhHcm93RnJvbV0gfSxcblx0XHRcdHsgZHVyYXRpb246IDEgfVxuXHRcdCk7XG5cdH0pO1xuXG5cblx0cGx1Z2luLnJlcGxhY2UoJ2dyb3dXaGVuT3BlbicsIGZ1bmN0aW9uIChvcGVuKSB7XG5cdFx0dmFyIG9wZW5DbG9zZVRyYW5zaXRpb24gPSAoKSA9PiB7XG5cdFx0XHR2YXIgZmxleEdyb3dGcm9tID0gcGFyc2VGbG9hdCh0aGlzLmVsZW1lbnQuZGF0YSgnYW15RmxleEdyb3dUYXJnZXQnKSB8fCAxKTtcblx0XHRcdHZhciBmbGV4R3Jvd1RvID0gb3BlbiA/IHRoaXMud2VpZ2h0V2hlbk9wZW4oKSA6IHRoaXMud2VpZ2h0V2hlbkNsb3NlZCgpO1xuXHRcdFx0dGhpcy5lbGVtZW50LmRhdGEoJ2FteUZsZXhHcm93VGFyZ2V0JywgZmxleEdyb3dUbyk7XG5cdFx0XHR2YXIgcm93RmxleEdyb3dUbyA9IDA7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50KCkuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cm93RmxleEdyb3dUbyArPSBwYXJzZUZsb2F0KCQodGhpcykuZGF0YSgnYW15RmxleEdyb3dUYXJnZXQnKSB8fCAxKTtcblx0XHRcdH0pO1xuXHRcdFx0dmFyIHJvd0ZsZXhHcm93RnJvbSA9IHJvd0ZsZXhHcm93VG8gLSBmbGV4R3Jvd1RvICsgZmxleEdyb3dGcm9tO1xuXHRcdFx0cmV0dXJuIFAuYWxsKFtcblx0XHRcdFx0bmV3IFAoKHJlc29sdmUpID0+IHtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQudmVsb2NpdHkoXG5cdFx0XHRcdFx0XHR7IGZsZXhHcm93OiBbZmxleEdyb3dUbywgZmxleEdyb3dGcm9tXSB9LFxuXHRcdFx0XHRcdFx0eyBjb21wbGV0ZTogcmVzb2x2ZSwgZHVyYXRpb246IDMwMCB9XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSksIG5ldyBQKChyZXNvbHZlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50LnBhcmVudCgpLnZlbG9jaXR5KFxuXHRcdFx0XHRcdFx0eyBmbGV4R3JvdzogW3Jvd0ZsZXhHcm93VG8sIHJvd0ZsZXhHcm93RnJvbV0gfSxcblx0XHRcdFx0XHRcdHsgY29tcGxldGU6IHJlc29sdmUsIGR1cmF0aW9uOiAzMDAgfVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pXG5cdFx0XHRdKTtcblx0XHR9O1xuXHRcdC8vIFRPRE86IGdldCB0aGUgYWJvdmUgd2l0aCBkZWx0YSAncmVwbGFjZScgb3BlcmF0aW9uIHRoYXQgcHJvdmlkZXMgcHJldmlvdXMgaW1wbGVtZW50YXRpb25cblxuXHRcdHZhciBzZWN0aW9uRWxlbWVudCA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbignc2VjdGlvbicpO1xuXHRcdGlmIChvcGVuKSB7XG5cdFx0XHRzZWN0aW9uRWxlbWVudC5jc3MoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJywgb3BhY2l0eTogMCB9KTtcblx0XHRcdHJldHVybiBvcGVuQ2xvc2VUcmFuc2l0aW9uKCkudGhlbigoKSA9PiB7XG5cdFx0XHRcdHJldHVybiBuZXcgUCgocmVzb2x2ZSkgPT4ge1xuXHRcdFx0XHRcdHNlY3Rpb25FbGVtZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cdFx0XHRcdFx0c2VjdGlvbkVsZW1lbnQudmVsb2NpdHkoXG5cdFx0XHRcdFx0XHR7IG9wYWNpdHk6ICBbMSwgMF0gIH0sXG5cdFx0XHRcdFx0XHR7IGNvbXBsZXRlOiByZXNvbHZlLCBkdXJhdGlvbjogMjAwIH1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZWN0aW9uRWxlbWVudC5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXHRcdFx0cmV0dXJuIG9wZW5DbG9zZVRyYW5zaXRpb24oKS50aGVuKCgpID0+IHtcblx0XHRcdFx0c2VjdGlvbkVsZW1lbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3AtdGlsZS1za2luLWdyb3ctd2hlbi1vcGVuLmpzXG4gKiovIiwiZGVmaW5lKFsnanF1ZXJ5JywgJy4vdXRpbC9taXNjLmpzJywgJy4vdXRpbC9rZWZpci1hbmQtZWdncy5qcyddLCBmdW5jdGlvbiAoJCwgVSwgS2VmaXIpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIHBsdWdpbiA9ICQuY2lyY3VpdGJvYXJkLnBsdWdpbih7XG5cdFx0bmFtZTogJ3Bvc2l0aW9uLXRyYWNraW5nJyxcblx0XHRleHBlY3RzOiBbJ2NvcmUnLCAndGlsZS1ncm93LXdoZW4tb3BlbicsICd0aWxlLWdyb3ctd2hlbi1tYXhpbWl6ZWQnLCAndGlsZS1zaHJpbmstd2hlbi1oaWRkZW4nXVxuXHR9KTtcblxuXG5cdC8qIGEgc3RyZWFtIGxpbWl0ZXIsIHNldHRpbmcgdXAgYSB3aW5kb3cgZm9yIGNhbGN1bGF0aW5nIGVsZW1lbnQgb2Zmc2V0cyAqL1xuXHRwbHVnaW4uYWRkKCdDaXJjdWl0Ym9hcmQucHJvdG90eXBlLl9wb3NUcmFja2luZ1dpbmRvdycsIGZ1bmN0aW9uICh3aW5kb3cpIHsgd2luZG93KCkgfSk7XG5cdHBsdWdpbi5pbnNlcnQoJ0NpcmN1aXRib2FyZC5wcm90b3R5cGUuY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX3Bvc1RyYWNraW5nTGltaXRlciA9IEtlZmlyLmxpbWl0ZXIoS2VmaXIubWVyZ2UoW1xuXHRcdFx0S2VmaXIub25jZSgpLFxuXHRcdFx0S2VmaXIuaW50ZXJ2YWwoMTAwKVxuXHRcdF0pLCB0aGlzLl9wb3NUcmFja2luZ1dpbmRvdy5iaW5kKHRoaXMpKTtcblx0fSk7XG5cblxuXHRwbHVnaW4uaW5zZXJ0KCdUaWxlLnByb3RvdHlwZS5jb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm5ld1Byb3BlcnR5KCdhbmltYXRpb25JZGxlJywgeyBzZXR0YWJsZTogZmFsc2UsIGluaXRpYWw6IHRydWUgfSlcblx0XHRcdC5wbHVnKEtlZmlyLmFuZChbXG5cdFx0XHRcdHRoaXMucCgnZnVsbHlPcGVuJykub3IodGhpcy5wKCdmdWxseUNsb3NlZCcpKSxcblx0XHRcdFx0dGhpcy5wKCdmdWxseUhpZGRlbicpLm9yKHRoaXMucCgnZnVsbHlWaXNpYmxlJykpLFxuXHRcdFx0XHR0aGlzLnAoJ2Z1bGx5TWF4aW1pemVkJykub3IodGhpcy5wKCdmdWxseU5vdE1heGltaXplZCcpKVxuXHRcdFx0XSkpO1xuXG5cdH0pO1xuXG5cblx0LyogdGhlICdvZmZzZXQnIG9ic2VydmFibGUgKi9cblx0cGx1Z2luLmluc2VydCgnQ2lyY3VpdGJvYXJkLnByb3RvdHlwZS5jb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm5ld1Byb3BlcnR5KCdvZmZzZXQnLCB7XG5cdFx0XHRzZXR0YWJsZTogZmFsc2UsXG5cdFx0XHRpc0VxdWFsOiBVLlBvc2l0aW9uLmVxdWFscyxcblx0XHRcdGluaXRpYWw6IHRoaXMuZWxlbWVudC5vZmZzZXQoKVxuXHRcdH0pLnBsdWcoS2VmaXIubWVyZ2UoW1xuXHRcdFx0S2VmaXIub25jZSgpLFxuXHRcdFx0S2VmaXIuaW50ZXJ2YWwoMTAwMClcblx0XHRcdC8vIFRPRE86IGFsbG93IG91dHNpZGUgc3RyZWFtIHRvIHRyaWdnZXIgdGhpc1xuXHRcdF0pLmxpbWl0ZWRCeSh0aGlzLl9wb3NUcmFja2luZ0xpbWl0ZXIpLm1hcCgoKSA9PiB0aGlzLmVsZW1lbnQub2Zmc2V0KCkpKTtcblxuXHR9KS5pbnNlcnQoJ1RpbGVtYXAucHJvdG90eXBlLmNvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmV3UHJvcGVydHkoJ29mZnNldCcsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuUG9zaXRpb24uZXF1YWxzLFxuXHRcdFx0aW5pdGlhbDogdGhpcy5lbGVtZW50Lm9mZnNldCgpXG5cdFx0fSkucGx1ZyhLZWZpci5tZXJnZShbXG5cdFx0XHRLZWZpci5vbmNlKCksXG5cdFx0XHR0aGlzLnBhcmVudC5wKCdzaXplJykuY2hhbmdlcygpLFxuXHRcdFx0dGhpcy5wYXJlbnQucCgnb2Zmc2V0JykuY2hhbmdlcygpXG5cdFx0XSkubGltaXRlZEJ5KHRoaXMuY2lyY3VpdGJvYXJkLl9wb3NUcmFja2luZ0xpbWl0ZXIpLm1hcCgoKSA9PiB0aGlzLmVsZW1lbnQub2Zmc2V0KCkpKTtcblxuXHR9KS5pbnNlcnQoJ1RpbGUucHJvdG90eXBlLmNvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmV3UHJvcGVydHkoJ29mZnNldCcsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuUG9zaXRpb24uZXF1YWxzLFxuXHRcdFx0aW5pdGlhbDogdGhpcy5lbGVtZW50Lm9mZnNldCgpXG5cdFx0fSkucGx1ZyhLZWZpci5tZXJnZShbXG5cdFx0XHRLZWZpci5vbmNlKCksXG5cdFx0XHR0aGlzLnBhcmVudC5wKCdzaXplJykuY2hhbmdlcygpLFxuXHRcdFx0dGhpcy5wYXJlbnQucCgnb2Zmc2V0JykuY2hhbmdlcygpLFxuXHRcdFx0dGhpcy5wYXJlbnQub24oJ3Jlb3JnYW5pemUnKSxcblx0XHRcdHRoaXMucCgnYW5pbWF0aW9uSWRsZScpLnZhbHVlKHRydWUpLFxuXHRcdFx0S2VmaXIuaW50ZXJ2YWwoMTAwMCkuZmlsdGVyQnkodGhpcy5wKCdhbmltYXRpb25JZGxlJykpIC8vIGJhY2t1cCB0aW1lclxuXHRcdF0pLmZpbHRlcigoKSA9PiAhdGhpcy5fb2Zmc2V0VXBkYXRlZCkubGltaXRlZEJ5KHRoaXMuY2lyY3VpdGJvYXJkLl9wb3NUcmFja2luZ0xpbWl0ZXIpLm1hcCgoKSA9PiB7XG5cdFx0XHR0aGlzLl9vZmZzZXRVcGRhdGVkID0gdHJ1ZTtcblx0XHRcdHJldHVybiB0aGlzLmVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0fSkpO1xuXG5cdFx0LyogbWFraW5nIHN1cmUgc2l6ZSBpcyBvbmx5IHVwZGF0ZWQgb25jZSBldmVyeSAxMDBtcywgdG8ga2VlcCB0aGluZ3MgZmFzdCAqL1xuXHRcdHRoaXMuX29mZnNldFVwZGF0ZWQgPSBmYWxzZTsgLy8gVE9ETzogd3JpdGUgS2VmaXIgbW9kaWZpZXIgdG8gZG8gdGhpcyBtb3JlIGVhc2lseTsgdXNpbmcgLnRocm90dGxlIGRvZXNuJ3Qgd29ya1xuXHRcdEtlZmlyLmludGVydmFsKDEwMCkub25WYWx1ZSgoKSA9PiB7IHRoaXMuX29mZnNldFVwZGF0ZWQgPSBmYWxzZSB9KTtcblxuXHR9KTtcblxuXG5cdC8qIHRoZSAncG9zaXRpb24nIG9ic2VydmFibGUgKi9cblx0cGx1Z2luLmluc2VydCgnQ2lyY3VpdGJvYXJkLnByb3RvdHlwZS5jb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHQvKiBmb3IgY29tcGxldGVuZXNzIHNha2U7IGl0J3MgKDAsIDApIGJ5IGRlZmluaXRpb24gKi9cblx0XHR0aGlzLm5ld1Byb3BlcnR5KCdwb3NpdGlvbicsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGluaXRpYWw6IG5ldyBVLlBvc2l0aW9uKDAsIDApXG5cdFx0fSk7XG5cblx0fSkuaW5zZXJ0KCdUaWxlbWFwLnByb3RvdHlwZS5jb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm5ld1Byb3BlcnR5KCdwb3NpdGlvbicsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuUG9zaXRpb24uZXF1YWxzXG5cdFx0fSkucGx1ZyhLZWZpci5tZXJnZShbXG5cdFx0XHRLZWZpci5vbmNlKCksXG5cdFx0XHR0aGlzLnAoJ29mZnNldCcpLmNoYW5nZXMoKSxcblx0XHRcdHRoaXMuY2lyY3VpdGJvYXJkLnAoJ29mZnNldCcpLmNoYW5nZXMoKVxuXHRcdF0pLm1hcCgoKSA9PiBVLlBvc2l0aW9uLnN1YnRyYWN0KHRoaXMub2Zmc2V0LCB0aGlzLmNpcmN1aXRib2FyZC5vZmZzZXQpKSk7XG5cblx0fSkuaW5zZXJ0KCdUaWxlLnByb3RvdHlwZS5jb25zdHJ1Y3QnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm5ld1Byb3BlcnR5KCdwb3NpdGlvbicsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuUG9zaXRpb24uZXF1YWxzXG5cdFx0fSkucGx1ZyhLZWZpci5tZXJnZShbXG5cdFx0XHRLZWZpci5vbmNlKCksXG5cdFx0XHR0aGlzLnAoJ29mZnNldCcpLmNoYW5nZXMoKSxcblx0XHRcdHRoaXMuY2lyY3VpdGJvYXJkLnAoJ29mZnNldCcpLmNoYW5nZXMoKSxcblx0XHRcdHRoaXMucCgnYW5pbWF0aW9uSWRsZScpLnZhbHVlKHRydWUpLFxuXHRcdFx0S2VmaXIuaW50ZXJ2YWwoMTAwMCkuZmlsdGVyQnkodGhpcy5wKCdhbmltYXRpb25JZGxlJykpIC8vIGJhY2t1cCB0aW1lclxuXHRcdF0pLmZpbHRlcigoKSA9PiAhdGhpcy5fcG9zaXRpb25VcGRhdGVkKS5tYXAoKCkgPT4ge1xuXHRcdFx0dGhpcy5fcG9zaXRpb25VcGRhdGVkID0gdHJ1ZTtcblx0XHRcdHJldHVybiBVLlBvc2l0aW9uLnN1YnRyYWN0KHRoaXMub2Zmc2V0LCB0aGlzLmNpcmN1aXRib2FyZC5vZmZzZXQpO1xuXHRcdH0pKTtcblxuXHRcdC8qIG1ha2luZyBzdXJlIHNpemUgaXMgb25seSB1cGRhdGVkIG9uY2UgZXZlcnkgMTAwbXMsIHRvIGtlZXAgdGhpbmdzIGZhc3QgKi9cblx0XHR0aGlzLl9wb3NpdGlvblVwZGF0ZWQgPSBmYWxzZTsgLy8gVE9ETzogd3JpdGUgS2VmaXIgbW9kaWZpZXIgdG8gZG8gdGhpcyBtb3JlIGVhc2lseTsgdXNpbmcgLnRocm90dGxlIGRvZXNuJ3Qgd29ya1xuXHRcdEtlZmlyLmludGVydmFsKDEwMCkub25WYWx1ZSgoKSA9PiB7IHRoaXMuX3Bvc2l0aW9uVXBkYXRlZCA9IGZhbHNlIH0pO1xuXG5cdH0pO1xuXG5cblx0LyogdGhlICdzaXplJyBvYnNlcnZhYmxlICovXG5cdHBsdWdpbi5pbnNlcnQoJ0NpcmN1aXRib2FyZC5wcm90b3R5cGUuY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5uZXdQcm9wZXJ0eSgnc2l6ZScsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuU2l6ZS5lcXVhbHNcblx0XHR9KS5wbHVnKEtlZmlyLm1lcmdlKFtcblx0XHRcdEtlZmlyLm9uY2UoKSxcblx0XHRcdHRoaXMub3B0aW9ucy5yZXNpemVFdmVudCB8fCAkKHdpbmRvdykuYXNLZWZpclN0cmVhbSgncmVzaXplJylcblx0XHRdKS5tYXAoKCkgPT4gbmV3IFUuU2l6ZSh0aGlzLmVsZW1lbnQuaGVpZ2h0KCksIHRoaXMuZWxlbWVudC53aWR0aCgpKSkpO1xuXG5cdH0pLmluc2VydCgnVGlsZW1hcC5wcm90b3R5cGUuY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5uZXdQcm9wZXJ0eSgnc2l6ZScsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuU2l6ZS5lcXVhbHNcblx0XHR9KS5wbHVnKEtlZmlyLm1lcmdlKFtcblx0XHRcdEtlZmlyLm9uY2UoKSxcblx0XHRcdHRoaXMucGFyZW50LnAoJ3NpemUnKS5jaGFuZ2VzKClcblx0XHRdKS5tYXAoKCkgPT4gbmV3IFUuU2l6ZSh0aGlzLmVsZW1lbnQuaGVpZ2h0KCksIHRoaXMuZWxlbWVudC53aWR0aCgpKSkpO1xuXG5cdH0pLmluc2VydCgnVGlsZS5wcm90b3R5cGUuY29uc3RydWN0JywgZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5uZXdQcm9wZXJ0eSgnc2l6ZScsIHtcblx0XHRcdHNldHRhYmxlOiBmYWxzZSxcblx0XHRcdGlzRXF1YWw6IFUuU2l6ZS5lcXVhbHNcblx0XHR9KS5wbHVnKEtlZmlyLm1lcmdlKFtcblx0XHRcdEtlZmlyLm9uY2UoKSxcblx0XHRcdHRoaXMucGFyZW50LnAoJ3NpemUnKS5jaGFuZ2VzKCksXG5cdFx0XHR0aGlzLnBhcmVudC5vbigncmVvcmdhbml6ZScpLFxuXHRcdFx0dGhpcy5wKCdhbmltYXRpb25JZGxlJykudmFsdWUodHJ1ZSksXG5cdFx0XHRLZWZpci5pbnRlcnZhbCgxMDAwKS5maWx0ZXJCeSh0aGlzLnAoJ2FuaW1hdGlvbklkbGUnKSkgLy8gYmFja3VwIHRpbWVyXG5cdFx0XSkuZmlsdGVyKCgpID0+ICF0aGlzLl9zaXplVXBkYXRlZCkubWFwKCgpID0+IHtcblx0XHRcdHRoaXMuX3NpemVVcGRhdGVkID0gdHJ1ZTtcblx0XHRcdHJldHVybiBuZXcgVS5TaXplKHRoaXMuZWxlbWVudC5oZWlnaHQoKSwgdGhpcy5lbGVtZW50LndpZHRoKCkpO1xuXHRcdH0pKTtcblxuXHRcdC8qIG1ha2luZyBzdXJlIHNpemUgaXMgb25seSB1cGRhdGVkIG9uY2UgZXZlcnkgMTAwbXMsIHRvIGtlZXAgdGhpbmdzIGZhc3QgKi9cblx0XHR0aGlzLl9zaXplVXBkYXRlZCA9IGZhbHNlOyAvLyBUT0RPOiB3cml0ZSBLZWZpciBtb2RpZmllciB0byBkbyB0aGlzIG1vcmUgZWFzaWx5OyB1c2luZyAudGhyb3R0bGUgZG9lc24ndCB3b3JrXG5cdFx0S2VmaXIuaW50ZXJ2YWwoMTAwKS5vblZhbHVlKCgpID0+IHsgdGhpcy5fc2l6ZVVwZGF0ZWQgPSBmYWxzZSB9KTtcblxuXHR9KTtcblxuXG5cdC8qICBpZiB0aGUgc2l6ZSBvZiBhbnkgdGlsZSBjaGFuZ2VzLCB0cmlnZ2VyIHRoZSAncmVvcmdhbml6ZScgICAgICovXG5cdC8qICBldmVudCBvbiB0aGUgcGFyZW50IHRpbGVtYXAsIHNvIHRoYXQgc2libGluZyB0aWxlcyBjYW4gcmVhY3QgICovXG5cdHBsdWdpbi5pbnNlcnQoJ1RpbGVtYXAucHJvdG90eXBlLmNvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmV3RXZlbnQoJ3Jlb3JnYW5pemUnKTtcblxuXHR9KS5pbnNlcnQoJ1RpbGUucHJvdG90eXBlLmNvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMucCgnc2l6ZScpLm9uVmFsdWUoKCkgPT4geyB0aGlzLnBhcmVudC50cmlnZ2VyKCdyZW9yZ2FuaXplJykgfSk7XG5cblx0fSk7XG5cbn0pO1xuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9wLXBvc2l0aW9uLXRyYWNraW5nLmpzXG4gKiovIiwiZGVmaW5lKFtcblx0J2pxdWVyeScsXG5cdCcuL3V0aWwva2VmaXItYW5kLWVnZ3MuanMnLFxuXHQnLi91dGlsL21pc2MuanMnXG5dLCBmdW5jdGlvbiAoJCwgS2VmaXIpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIHBsdWdpbiA9ICQuY2lyY3VpdGJvYXJkLnBsdWdpbih7XG5cdFx0bmFtZTogJ3RyYW5zaXRpb24tcG9zaXRpb24tdHJhY2tpbmcnLFxuXHRcdHJlc29sdmVzOiBbJ3Bvc2l0aW9uLXRyYWNraW5nJywgJ3RpbGUtZ3Jvdy13aGVuLW9wZW4nXVxuXHR9KTtcblxuXG5cdC8qIG1ha2Ugc3VyZSB0aGF0IHBvc2l0aW9uaW5nIGlzIHVwZGF0ZWQgZHVyaW5nIENTUzMgdHJhbnNpdGlvbiBhbmltYXRpb25zICovXG5cdHBsdWdpbi5pbnNlcnQoJ1RpbGUucHJvdG90eXBlLmNvbnN0cnVjdCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIFRPRE86IG1heWJlIGp1c3QgcmVtb3ZlIHRoaXMgd2hvbGUgZGVsdGFcblxuXHRcdC8vdGhpcy5vbignd2VpZ2h0JykuY2hhbmdlcygpLmZsYXRNYXBMYXRlc3QoXG5cdFx0Ly9cdCgpID0+IEtlZmlyLmFuaW1hdGlvbkZyYW1lcygpLnRha2VVbnRpbEJ5KHRoaXMuZWxlbWVudC5hc0tlZmlyU3RyZWFtKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQnKS5tZXJnZShLZWZpci5sYXRlcigzMDApKSlcblx0XHQvLykub25WYWx1ZSgoKSA9PiB7IHRoaXMudHJpZ2dlcigncmVzZXQtcG9zaXRpb25pbmcnKSB9KTtcblxuXHR9KTtcblxuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3AtdHJhbnNpdGlvbi1wb3NpdGlvbi10cmFja2luZy5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wialF1ZXJ5XCJdID0gcmVxdWlyZShcIi0hL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3RyYWNldXItbG9hZGVyL2luZGV4LmpzP3NjcmlwdCEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9ib3dlcl9jb21wb25lbnRzL2pxdWVyeS9kaXN0L2pxdWVyeS5qc1wiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9leHBvc2UtbG9hZGVyP2pRdWVyeSEuL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gMTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4xLjNcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE0LTEyLTE4VDE1OjExWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vXG5cbnZhciBhcnIgPSBbXTtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0Ly8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxuXHRkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcblxuXHR2ZXJzaW9uID0gXCIyLjEuM1wiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXG5cdC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5Lilcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0pKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAob2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKyAxKSA+PSAwO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIGZ1bmN0aW9uIGhhc24ndCByZXR1cm5lZCBhbHJlYWR5LCB3ZSdyZSBjb25maWRlbnQgdGhhdFxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdHZhciBzY3JpcHQsXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XG5cblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcblxuXHRcdGlmICggY29kZSApIHtcblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKFwidXNlIHN0cmljdFwiKSA9PT0gMSApIHtcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXG5cdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5ICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cdHZhciBsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGggKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMi4wLXByZVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE0LTEyLTE2XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIFdoaXRlc3BhY2UgY2hhcmFjdGVycyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC8jY2hhcmFjdGVyc1xuXHRjaGFyYWN0ZXJFbmNvZGluZyA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gTG9vc2VseSBtb2RlbGVkIG9uIENTUyBpZGVudGlmaWVyIGNoYXJhY3RlcnNcblx0Ly8gQW4gdW5xdW90ZWQgdmFsdWUgc2hvdWxkIGJlIGEgQ1NTIGlkZW50aWZpZXIgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0Ly8gUHJvcGVyIHN5bnRheDogaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3I1wiICksXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidypcIiApICsgXCIpXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtYXRjaCwgZWxlbSwgbSwgbm9kZVR5cGUsXG5cdFx0Ly8gUVNBIHZhcnNcblx0XHRpLCBncm91cHMsIG9sZCwgbmlkLCBuZXdDb250ZXh0LCBuZXdTZWxlY3RvcjtcblxuXHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cdG5vZGVUeXBlID0gY29udGV4dC5ub2RlVHlwZTtcblxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdGlmICggIXNlZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIHdoZW4gcG9zc2libGUgKGUuZy4sIG5vdCB1bmRlciBEb2N1bWVudEZyYWdtZW50KVxuXHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiI0lEXCIpXG5cdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICk7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50IChqUXVlcnkgIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSwgT3BlcmEsIGFuZCBXZWJraXQgcmV0dXJuIGl0ZW1zXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQ29udGV4dCBpcyBub3QgYSBkb2N1bWVudFxuXHRcdFx0XHRcdGlmICggY29udGV4dC5vd25lckRvY3VtZW50ICYmIChlbGVtID0gY29udGV4dC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiVEFHXCIpXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIi5DTEFTU1wiKVxuXHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBRU0EgcGF0aFxuXHRcdGlmICggc3VwcG9ydC5xc2EgJiYgKCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblx0XHRcdG5pZCA9IG9sZCA9IGV4cGFuZG87XG5cdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdG5ld1NlbGVjdG9yID0gbm9kZVR5cGUgIT09IDEgJiYgc2VsZWN0b3I7XG5cblx0XHRcdC8vIHFTQSB3b3JrcyBzdHJhbmdlbHkgb24gRWxlbWVudC1yb290ZWQgcXVlcmllc1xuXHRcdFx0Ly8gV2UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgYnkgc3BlY2lmeWluZyBhbiBleHRyYSBJRCBvbiB0aGUgcm9vdFxuXHRcdFx0Ly8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpXG5cdFx0XHQvLyBJRSA4IGRvZXNuJ3Qgd29yayBvbiBvYmplY3QgZWxlbWVudHNcblx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblxuXHRcdFx0XHRpZiAoIChvbGQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKSApIHtcblx0XHRcdFx0XHRuaWQgPSBvbGQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIG5pZCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5pZCA9IFwiW2lkPSdcIiArIG5pZCArIFwiJ10gXCI7XG5cblx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZCArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0O1xuXHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKFwiLFwiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaChxc2FFcnJvcikge1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggIW9sZCApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbihzdHJpbmcsIE9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGF0dHJzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cblx0XHRcdCggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHBhcmVudCxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVyblxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFNldCBvdXIgZG9jdW1lbnRcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRwYXJlbnQgPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0Ly8gU3VwcG9ydDogSUU+OFxuXHQvLyBJZiBpZnJhbWUgZG9jdW1lbnQgaXMgYXNzaWduZWQgdG8gXCJkb2N1bWVudFwiIHZhcmlhYmxlIGFuZCBpZiBpZnJhbWUgaGFzIGJlZW4gcmVsb2FkZWQsXG5cdC8vIElFIHdpbGwgdGhyb3cgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gYWNjZXNzaW5nIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSwgc2VlIGpRdWVyeSAjMTM5MzZcblx0Ly8gSUU2LTggZG8gbm90IHN1cHBvcnQgdGhlIGRlZmF1bHRWaWV3IHByb3BlcnR5IHNvIHBhcmVudCB3aWxsIGJlIHVuZGVmaW5lZFxuXHRpZiAoIHBhcmVudCAmJiBwYXJlbnQgIT09IHBhcmVudC50b3AgKSB7XG5cdFx0Ly8gSUUxMSBkb2VzIG5vdCBoYXZlIGF0dGFjaEV2ZW50LCBzbyBhbGwgbXVzdCBzdWZmZXJcblx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0cGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBTdXBwb3J0IHRlc3RzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvYyApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvYy5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmluZCBhbmQgZmlsdGVyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdHJldHVybiBtICYmIG0ucGFyZW50Tm9kZSA/IFsgbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU2Lzdcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xuXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvYy5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcZl0nIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjIrLCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuNytcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2MuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IGRvZXMgbm90IGltcGxlbWVudCBpbmNsdXNpdmUgZGVzY2VuZGVudFxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2MgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2MgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvYyA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jO1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8IChwYXJlbnRbIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdXNlQ2FjaGUgJiYgKGNhY2hlID0gKGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdKSAmJiBjYWNoZVswXSA9PT0gZGlycnVucyApIHtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzFdO1xuXG5cdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApICYmICsrZGlmZiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdChub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGRpciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCAhPT0gZG9jdW1lbnQgJiYgY29udGV4dDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlIFwiMDBcIiBiZWxvd1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgbm8gc2VlZCBhbmQgb25seSBvbmUgZ3JvdXBcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZGl2LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xualF1ZXJ5LmV4cHJbXCI6XCJdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9KTtcblxuXHR9XG5cblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdFx0fVxuXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+PSAwICkgIT09IG5vdDtcblx0fSk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0pKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pICk7XG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59KTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbMF0gPT09IFwiPFwiICYmIHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmIHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKG1hdGNoWzFdIHx8ICFjb250ZXh0KSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsxXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQmxhY2tiZXJyeSA0LjZcblx0XHRcdFx0XHQvLyBnRUJJRCByZXR1cm5zIG5vZGVzIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKCM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdFx0dGhpc1swXSA9IGVsZW07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290alF1ZXJ5ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1swXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIHJvb3RqUXVlcnkucmVhZHkgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0XHRyb290alF1ZXJ5LnJlYWR5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0ZGlyOiBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fSxcblxuXHRzaWJsaW5nOiBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdFx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1tpXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzW2ldOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHBvcyA/XG5cdFx0XHRcdFx0cG9zLmluZGV4KGN1cikgPiAtMSA6XG5cblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykpICkge1xuXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlKFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoc2VsZWN0b3IpXG5cdFx0KTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoIChjdXIgPSBjdXJbZGlyXSkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goe1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59KTtcbnZhciBybm90d2hpdGUgPSAoL1xcUysvZyk7XG5cblxuXG4vLyBTdHJpbmcgdG8gT2JqZWN0IG9wdGlvbnMgZm9ybWF0IGNhY2hlXG52YXIgb3B0aW9uc0NhY2hlID0ge307XG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzIGFuZCBzdG9yZSBpbiBjYWNoZVxuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9KTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHQoIG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdIHx8IGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpXG5cdFx0bWVtb3J5LFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblx0XHQvLyBGaXJzdCBjYWxsYmFjayB0byBmaXJlICh1c2VkIGludGVybmFsbHkgYnkgYWRkIGFuZCBmaXJlV2l0aClcblx0XHRmaXJpbmdTdGFydCxcblx0XHQvLyBFbmQgb2YgdGhlIGxvb3Agd2hlbiBmaXJpbmdcblx0XHRmaXJpbmdMZW5ndGgsXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgcmVtb3ZlIGlmIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCxcblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblx0XHQvLyBTdGFjayBvZiBmaXJlIGNhbGxzIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0c3RhY2sgPSAhb3B0aW9ucy5vbmNlICYmIFtdLFxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdFx0bWVtb3J5ID0gb3B0aW9ucy5tZW1vcnkgJiYgZGF0YTtcblx0XHRcdGZpcmVkID0gdHJ1ZTtcblx0XHRcdGZpcmluZ0luZGV4ID0gZmlyaW5nU3RhcnQgfHwgMDtcblx0XHRcdGZpcmluZ1N0YXJ0ID0gMDtcblx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0ZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgbGlzdCAmJiBmaXJpbmdJbmRleCA8IGZpcmluZ0xlbmd0aDsgZmlyaW5nSW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBkYXRhWyAwIF0sIGRhdGFbIDEgXSApID09PSBmYWxzZSAmJiBvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlOyAvLyBUbyBwcmV2ZW50IGZ1cnRoZXIgY2FsbHMgdXNpbmcgYWRkXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRpZiAoIHN0YWNrICkge1xuXHRcdFx0XHRcdGlmICggc3RhY2subGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0ZmlyZSggc3RhY2suc2hpZnQoKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdC8vIEZpcnN0LCB3ZSBzYXZlIHRoZSBjdXJyZW50IGxlbmd0aFxuXHRcdFx0XHRcdHZhciBzdGFydCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdChmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggYXJnICk7XG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSkoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdC8vIERvIHdlIG5lZWQgdG8gYWRkIHRoZSBjYWxsYmFja3MgdG8gdGhlXG5cdFx0XHRcdFx0Ly8gY3VycmVudCBmaXJpbmcgYmF0Y2g/XG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQvLyBXaXRoIG1lbW9yeSwgaWYgd2UncmUgbm90IGZpcmluZyB0aGVuXG5cdFx0XHRcdFx0Ly8gd2Ugc2hvdWxkIGNhbGwgcmlnaHQgYXdheVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRcdGZpcmluZ1N0YXJ0ID0gc3RhcnQ7XG5cdFx0XHRcdFx0XHRmaXJlKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0xlbmd0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aC0tO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID8galF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6ICEhKCBsaXN0ICYmIGxpc3QubGVuZ3RoICk7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdGZpcmluZ0xlbmd0aCA9IDA7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIEhhdmUgdGhlIGxpc3QgZG8gbm90aGluZyBhbnltb3JlXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IHN0YWNrID0gbWVtb3J5ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBkaXNhYmxlZD9cblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblx0XHRcdC8vIExvY2sgdGhlIGxpc3QgaW4gaXRzIGN1cnJlbnQgc3RhdGVcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdGFjayA9IHVuZGVmaW5lZDtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIElzIGl0IGxvY2tlZD9cblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhc3RhY2s7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoIGxpc3QgJiYgKCAhZmlyZWQgfHwgc3RhY2sgKSApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0c3RhY2sucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmaXJlKCBhcmdzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVqZWN0ZWRcIiBdLFxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsxXSBdKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcywgZm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0pLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XG5cblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsxXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0pO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcblxuXHRcdFx0Ly8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZC4gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcblxuXHRcdC8vIEFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcblx0XHRcdFx0XHRcdC5mYWlsKCBkZWZlcnJlZC5yZWplY3QgKVxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG5cdH1cbn0pO1xuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdDtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKipcbiAqIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG4gKi9cbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG5qUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cdGlmICggIXJlYWR5TGlzdCApIHtcblxuXHRcdHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5cdFx0Ly8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWQgYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG5cdFx0Ly8gV2Ugb25jZSB0cmllZCB0byB1c2UgcmVhZHlTdGF0ZSBcImludGVyYWN0aXZlXCIgaGVyZSwgYnV0IGl0IGNhdXNlZCBpc3N1ZXMgbGlrZSB0aGUgb25lXG5cdFx0Ly8gZGlzY292ZXJlZCBieSBDaHJpc1MgaGVyZTogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyODIjY29tbWVudDoxNVxuXHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuXHRcdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdFx0XHRzZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlYWR5TGlzdC5wcm9taXNlKCBvYmogKTtcbn07XG5cbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxualF1ZXJ5LnJlYWR5LnByb21pc2UoKTtcblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRqUXVlcnkuYWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVtpXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oIGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbCggZWxlbXNbaV0sIGksIGZuKCBlbGVtc1tpXSwga2V5ICkgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWzBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxuICovXG5qUXVlcnkuYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdC8qIGpzaGludCAtVzAxOCAqL1xuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NCxcblx0Ly8gT2xkIFdlYktpdCBkb2VzIG5vdCBoYXZlIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucy9mcmVlemUgbWV0aG9kLFxuXHQvLyByZXR1cm4gbmV3IGVtcHR5IG9iamVjdCBpbnN0ZWFkIHdpdGggbm8gW1tzZXRdXSBhY2Nlc3NvclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMuY2FjaGUgPSB7fSwgMCwge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcbkRhdGEuYWNjZXB0cyA9IGpRdWVyeS5hY2NlcHREYXRhO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblx0a2V5OiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHQvLyBBbHdheXMgcmV0dXJuIHRoZSBrZXkgZm9yIGEgZnJvemVuIG9iamVjdC5cblx0XHRpZiAoICFEYXRhLmFjY2VwdHMoIG93bmVyICkgKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgZGVzY3JpcHRvciA9IHt9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlIGtleVxuXHRcdFx0dW5sb2NrID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdW5sb2NrICkge1xuXHRcdFx0dW5sb2NrID0gRGF0YS51aWQrKztcblxuXHRcdFx0Ly8gU2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB7IHZhbHVlOiB1bmxvY2sgfTtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIG93bmVyLCBkZXNjcmlwdG9yICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NFxuXHRcdFx0Ly8gRmFsbGJhY2sgdG8gYSBsZXNzIHNlY3VyZSBkZWZpbml0aW9uXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB1bmxvY2s7XG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIG93bmVyLCBkZXNjcmlwdG9yICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRpZiAoICF0aGlzLmNhY2hlWyB1bmxvY2sgXSApIHtcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVubG9jaztcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Ly8gVGhlcmUgbWF5IGJlIGFuIHVubG9jayBhc3NpZ25lZCB0byB0aGlzIG5vZGUsXG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgdGhpcyBcIm93bmVyXCIsIGNyZWF0ZSBvbmUgaW5saW5lXG5cdFx0XHQvLyBhbmQgc2V0IHRoZSB1bmxvY2sgYXMgdGhvdWdoIGFuIG93bmVyIGVudHJ5IGhhZCBhbHdheXMgZXhpc3RlZFxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgZGF0YSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBGcmVzaCBhc3NpZ25tZW50cyBieSBvYmplY3QgYXJlIHNoYWxsb3cgY29waWVkXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLmNhY2hlWyB1bmxvY2sgXSwgZGF0YSApO1xuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdC8vIEVpdGhlciBhIHZhbGlkIGNhY2hlIGlzIGZvdW5kLCBvciB3aWxsIGJlIGNyZWF0ZWQuXG5cdFx0Ly8gTmV3IGNhY2hlcyB3aWxsIGJlIGNyZWF0ZWQgYW5kIHRoZSB1bmxvY2sgcmV0dXJuZWQsXG5cdFx0Ly8gYWxsb3dpbmcgZGlyZWN0IGFjY2VzcyB0byB0aGUgbmV3bHkgY3JlYXRlZFxuXHRcdC8vIGVtcHR5IGRhdGEgb2JqZWN0LiBBIHZhbGlkIG93bmVyIG9iamVjdCBtdXN0IGJlIHByb3ZpZGVkLlxuXHRcdHZhciBjYWNoZSA9IHRoaXMuY2FjaGVbIHRoaXMua2V5KCBvd25lciApIF07XG5cblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0Y2FjaGUgOiBjYWNoZVsga2V5IF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBzdG9yZWQ7XG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KChrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgKSB7XG5cblx0XHRcdHN0b3JlZCA9IHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cblx0XHRcdHJldHVybiBzdG9yZWQgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHN0b3JlZCA6IHRoaXMuZ2V0KCBvd25lciwgalF1ZXJ5LmNhbWVsQ2FzZShrZXkpICk7XG5cdFx0fVxuXG5cdFx0Ly8gWypdV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcblx0XHRcdHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlWyB1bmxvY2sgXTtcblxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLmNhY2hlWyB1bmxvY2sgXSA9IHt9O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcblx0XHRcdFx0Ly8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoXCJrZXlcIiwgXCJ2YWxcIikgc2lnbmF0dXJlLFxuXHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcblx0XHRcdFx0Ly8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NlxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cblx0XHRcdFx0bmFtZSA9IGtleS5jb25jYXQoIGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBrZXkgaW4gY2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRcdG5hbWUgPSBjYW1lbDtcblx0XHRcdFx0XHRuYW1lID0gbmFtZSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0XHRbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBuYW1lWyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KFxuXHRcdFx0dGhpcy5jYWNoZVsgb3duZXJbIHRoaXMuZXhwYW5kbyBdIF0gfHwge31cblx0XHQpO1xuXHR9LFxuXHRkaXNjYXJkOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0aWYgKCBvd25lclsgdGhpcy5leHBhbmRvIF0gKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5jYWNoZVsgb3duZXJbIHRoaXMuZXhwYW5kbyBdIF07XG5cdFx0fVxuXHR9XG59O1xudmFyIGRhdGFfcHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhX3VzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQxXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9IGNhdGNoKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhX3VzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YV91c2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhX3ByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhX3VzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YV91c2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFfcHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoNSkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YSxcblx0XHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBhcy1pc1xuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBjYW1lbEtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBjYW1lbEtleSwgdW5kZWZpbmVkICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxuXHRcdFx0XHQvLyBkYXRhIHRoYXQgbWlnaHQndmUgYmVlbiBzdG9yZSB3aXRoIGEgY2FtZWxDYXNlZCBrZXkuXG5cdFx0XHRcdHZhciBkYXRhID0gZGF0YV91c2VyLmdldCggdGhpcywgY2FtZWxLZXkgKTtcblxuXHRcdFx0XHQvLyBGb3IgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZSBpbnRlcm9wLCB3ZSBoYXZlIHRvXG5cdFx0XHRcdC8vIHN0b3JlIHByb3BlcnR5IG5hbWVzIHdpdGggZGFzaGVzIGluIGEgY2FtZWxDYXNlIGZvcm0uXG5cdFx0XHRcdC8vIFRoaXMgbWlnaHQgbm90IGFwcGx5IHRvIGFsbCBwcm9wZXJ0aWVzLi4uKlxuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcblxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKFwiLVwiKSAhPT0gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YV91c2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHRlbmQoe1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YV9wcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVswXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0pO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YV9wcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSk7XG52YXIgcG51bSA9ICgvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLykuc291cmNlO1xuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblx0XHQvLyBpc0hpZGRlbiBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIiB8fCAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0fTtcblxudmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTtcblxuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59KSgpO1xudmFyIHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQ7XG5cblxuXG5zdXBwb3J0LmZvY3VzaW5CdWJibGVzID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLyxcblx0cmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpJC87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IHN0cnVuZGVmaW5lZCAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0pICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8IHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xuXHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKFwiLlwiKSA+PSAwICkge1xuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoXCIuXCIpO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChjdXIgPSBldmVudFBhdGhbaSsrXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJiBkYXRhX3ByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICghc3BlY2lhbC5fZGVmYXVsdCB8fCBzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UpICYmXG5cdFx0XHRcdGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1swXSA9IGV2ZW50O1xuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50Lm5hbWVzcGFjZV9yZSB8fCBldmVudC5uYW1lc3BhY2VfcmUudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKVxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiYgKCFldmVudC5idXR0b24gfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApIHtcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+PSAwIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XG5cdHByb3BzOiBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxcblxuXHRmaXhIb29rczoge30sXG5cblx0a2V5SG9va3M6IHtcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRtb3VzZUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIuc3BsaXQoXCIgXCIpLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblx0XHRcdHZhciBldmVudERvYywgZG9jLCBib2R5LFxuXHRcdFx0XHRidXR0b24gPSBvcmlnaW5hbC5idXR0b247XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XG5cblx0XHRcdFx0ZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICsgKCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRcdC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XG5cdFx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXG5cdFx0dmFyIGksIHByb3AsIGNvcHksXG5cdFx0XHR0eXBlID0gZXZlbnQudHlwZSxcblx0XHRcdG9yaWdpbmFsRXZlbnQgPSBldmVudCxcblx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XG5cblx0XHRpZiAoICFmaXhIb29rICkge1xuXHRcdFx0dGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XG5cdFx0XHRcdHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XG5cdFx0XHRcdHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcblx0XHRcdFx0e307XG5cdFx0fVxuXHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XG5cblx0XHRldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblxuXHRcdGkgPSBjb3B5Lmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHByb3AgPSBjb3B5WyBpIF07XG5cdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENvcmRvdmEgMi41IChXZWJLaXQpICgjMTMyNTUpXG5cdFx0Ly8gQWxsIGV2ZW50cyBzaG91bGQgaGF2ZSBhIHRhcmdldDsgQ29yZG92YSBkZXZpY2VyZWFkeSBkb2Vzbid0XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCssIENocm9tZTwyOFxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0aWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50LCBidWJibGUgKSB7XG5cdFx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lLlxuXHRcdC8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZVxuXHRcdC8vIHNpbXVsYXRlZCBldmVudCBwcmV2ZW50cyBkZWZhdWx0IHRoZW4gd2UgZG8gdGhlIHNhbWUgb24gdGhlIGRvbm9yLlxuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZSxcblx0XHRcdFx0b3JpZ2luYWxFdmVudDoge31cblx0XHRcdH1cblx0XHQpO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmNhbGwoIGVsZW0sIGUgKTtcblx0XHR9XG5cdFx0aWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlLCBmYWxzZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnN0b3BQcm9wYWdhdGlvbiApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gU3VwcG9ydDogQ2hyb21lIDE1K1xualF1ZXJ5LmVhY2goe1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94LCBDaHJvbWUsIFNhZmFyaVxuLy8gQ3JlYXRlIFwiYnViYmxpbmdcIiBmb2N1cyBhbmQgYmx1ciBldmVudHNcbmlmICggIXN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgKSB7XG5cdGpRdWVyeS5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICksIHRydWUgKTtcblx0XHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHRcdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRcdG9yaWdGbiA9IGZuO1xuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fTtcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0pO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSk7XG5cblxudmFyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcblx0cnRhZ05hbWUgPSAvPChbXFx3Ol0rKS8sXG5cdHJodG1sID0gLzx8JiM/XFx3KzsvLFxuXHRybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxcblxuXHQvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxuXHR3cmFwTWFwID0ge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0XHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdFx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0XHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdFx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdFx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG5cdH07XG5cbi8vIFN1cHBvcnQ6IElFOVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IDEueCBjb21wYXRpYmlsaXR5XG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xuXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdIHx8XG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpICkgOlxuXHRcdGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9IChlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09IG51bGwpICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFfcHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLCBcImdsb2JhbEV2YWxcIiwgIXJlZkVsZW1lbnRzIHx8IGRhdGFfcHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFfcHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFfcHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YV9wcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YV91c2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YV91c2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFfdXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cdHZhciByZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRbXTtcblxuXHRyZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgP1xuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDpcblx0XHRyZXQ7XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0YnVpbGRGcmFnbWVudDogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24gKSB7XG5cdFx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0XHRub2RlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcblxuXHRcdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgZWxlbS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0LCBQaGFudG9tSlNcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGVsZW0gPSBub2Rlc1sgaSsrIF0pICkge1xuXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xuXHRcdFx0Ly8gdGhhdCBlbGVtZW50LCBkbyBub3QgZG8gYW55dGhpbmdcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gdG1wWyBqKysgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZyYWdtZW50O1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLCBrZXksXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1sgaSBdKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGtleSA9IGVsZW1bIGRhdGFfcHJpdi5leHBhbmRvIF07XG5cblx0XHRcdFx0aWYgKCBrZXkgJiYgKGRhdGEgPSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBkYXRhX3ByaXYuY2FjaGVbIGtleSBdICkge1xuXHRcdFx0XHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGBwcml2YXRlYCBkYXRhXG5cdFx0XHRcdFx0XHRkZWxldGUgZGF0YV9wcml2LmNhY2hlWyBrZXkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgdXNlcmAgZGF0YVxuXHRcdFx0ZGVsZXRlIGRhdGFfdXNlci5jYWNoZVsgZWxlbVsgZGF0YV91c2VyLmV4cGFuZG8gXSBdO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9KTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXG5cdFx0XHRpZiAoIGFyZyApIHtcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxuXHRcdHJldHVybiBhcmcgJiYgKGFyZy5sZW5ndGggfHwgYXJnLm5vZGVUeXBlKSA/IHRoaXMgOiB0aGlzLnJlbW92ZSgpO1xuXHR9LFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0XHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNldCA9IHRoaXMsXG5cdFx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0XHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0XHR2YXIgc2VsZiA9IHNldC5lcSggaW5kZXggKTtcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZG9tTWFuaXAoIGFyZ3MsIGNhbGxiYWNrICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIGwgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmaXJzdCApIHtcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbSBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdFx0XHRcdFx0Ly8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggdGhpc1sgaSBdLCBub2RlLCBpICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHRcdCFkYXRhX3ByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCh7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0pO1xuXG5cbnZhciBpZnJhbWUsXG5cdGVsZW1kaXNwbGF5ID0ge307XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XG4gKi9cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG5cdHZhciBzdHlsZSxcblx0XHRlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cblx0XHQvLyBnZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSBtaWdodCBiZSByZWxpYWJseSB1c2VkIG9ubHkgb24gYXR0YWNoZWQgZWxlbWVudFxuXHRcdGRpc3BsYXkgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgJiYgKCBzdHlsZSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSggZWxlbVsgMCBdICkgKSA/XG5cblx0XHRcdC8vIFVzZSBvZiB0aGlzIG1ldGhvZCBpcyBhIHRlbXBvcmFyeSBmaXggKG1vcmUgbGlrZSBvcHRpbWl6YXRpb24pIHVudGlsIHNvbWV0aGluZyBiZXR0ZXIgY29tZXMgYWxvbmcsXG5cdFx0XHQvLyBzaW5jZSBpdCB3YXMgcmVtb3ZlZCBmcm9tIHNwZWNpZmljYXRpb24gYW5kIHN1cHBvcnRlZCBvbmx5IGluIEZGXG5cdFx0XHRzdHlsZS5kaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkpLmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cbnZhciBybWFyZ2luID0gKC9ebWFyZ2luLyk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0aWYgKCBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXHR9XG5cblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDwgNlxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBpT1MgPCA2IChhdCBsZWFzdCkgcmV0dXJucyBwZXJjZW50YWdlIGZvciBhIGxhcmdlciBzZXQgb2YgdmFsdWVzLCBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzXG5cdFx0Ly8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsXG5cdFx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDttYXJnaW4tdG9wOjFweDtcIiArXG5cdFx0XCJwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCkge1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtcIiArXG5cdFx0XHRcImJvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NHB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IG5vZGUuanMganNkb21cblx0Ly8gRG9uJ3QgYXNzdW1lIHRoYXQgZ2V0Q29tcHV0ZWRTdHlsZSBpcyBhIHByb3BlcnR5IG9mIHRoZSBnbG9iYWwgb2JqZWN0XG5cdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gVGhpcyB0ZXN0IGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBidXQgd2Ugc3RpbGwgZG8gbWVtb2l6aW5nXG5cdFx0XHRcdC8vIHNpbmNlIHdlIGNhbiB1c2UgdGhlIGJveFNpemluZ1JlbGlhYmxlIHByZS1jb21wdXRpbmcuXG5cdFx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXG5cdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcblx0XHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0XHR9LFxuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHRcdH0sXG5cdFx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBDaGVjayBpZiBkaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XG5cdFx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gKCMzMzMzKVxuXHRcdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdFx0Ly8gVGhpcyBzdXBwb3J0IGZ1bmN0aW9uIGlzIG9ubHkgZXhlY3V0ZWQgb25jZSBzbyBubyBtZW1vaXppbmcgaXMgbmVlZGVkLlxuXHRcdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gUmVzZXQgQ1NTOiBib3gtc2l6aW5nOyBkaXNwbGF5OyBtYXJnaW47IGJvcmRlcjsgcGFkZGluZ1xuXHRcdFx0XHRtYXJnaW5EaXYuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFx0XCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XG5cdFx0XHRcdG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xuXHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdFx0XHRyZXQgPSAhcGFyc2VGbG9hdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiwgbnVsbCApLm1hcmdpblJpZ2h0ICk7XG5cblx0XHRcdFx0ZG9jRWxlbS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdFx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSkoKTtcblxuXG4vLyBBIG1ldGhvZCBmb3IgcXVpY2tseSBzd2FwcGluZyBpbi9vdXQgQ1NTIHByb3BlcnRpZXMgdG8gZ2V0IGNvcnJlY3QgY2FsY3VsYXRpb25zLlxualF1ZXJ5LnN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXJcblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cm51bXNwbGl0ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXG5cdHJyZWxOdW0gPSBuZXcgUmVnRXhwKCBcIl4oWystXSk9KFwiICsgcG51bSArIFwiKVwiLCBcImlcIiApLFxuXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF07XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBzdHlsZSwgbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSxcblx0XHRvcmlnTmFtZSA9IG5hbWUsXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9yaWdOYW1lO1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXHR2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMSBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMiBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRcdDQgOlxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcblxuXHRcdHZhbCA9IDA7XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KHZhbCkgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgZGVmYXVsdERpc3BsYXkoZWxlbS5ub2RlTmFtZSkgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTtcblxuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xuXHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSBycmVsTnVtLmV4ZWMoIHZhbHVlICkpICkge1xuXHRcdFx0XHR2YWx1ZSA9ICggcmV0WzFdICsgMSApICogcmV0WzJdICsgcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApICk7XG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIsIGFkZCAncHgnIHRvIHRoZSAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xuXHRcdFx0XHR2YWx1ZSArPSBcInB4XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgKHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBlbGVtLnN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGpRdWVyeS5pc051bWVyaWMoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaChbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiYgZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0alF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIGV4dHJhID9cblx0XHRcdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCkgOiAwXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goe1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIgXCIpIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IFwic3dpbmdcIjtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiZcblx0XHRcdFx0KCF0d2Vlbi5lbGVtLnN0eWxlIHx8IHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsKSApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5zdHlsZSAmJiAoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fCBqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fVxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRyZnhudW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLyxcblx0YW5pbWF0aW9uUHJlZmlsdGVycyA9IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXHR0d2VlbmVycyA9IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLFxuXHRcdFx0XHR0YXJnZXQgPSB0d2Vlbi5jdXIoKSxcblx0XHRcdFx0cGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSxcblx0XHRcdFx0dW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHRcdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRcdFx0c3RhcnQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK3RhcmdldCApICYmXG5cdFx0XHRcdFx0cmZ4bnVtLmV4ZWMoIGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHByb3AgKSApLFxuXHRcdFx0XHRzY2FsZSA9IDEsXG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAyMDtcblxuXHRcdFx0aWYgKCBzdGFydCAmJiBzdGFydFsgMyBdICE9PSB1bml0ICkge1xuXHRcdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0XHRcdHVuaXQgPSB1bml0IHx8IHN0YXJ0WyAzIF07XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdFx0XHRwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuXG5cdFx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0XHRcdHN0YXJ0ID0gK3RhcmdldCB8fCAxO1xuXG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0XHRcdHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHByb3AsIHN0YXJ0ICsgdW5pdCApO1xuXG5cdFx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpLFxuXHRcdFx0XHQvLyBicmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoXG5cdFx0XHRcdH0gd2hpbGUgKCBzY2FsZSAhPT0gKHNjYWxlID0gdHdlZW4uY3VyKCkgLyB0YXJnZXQpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgdHdlZW4gcHJvcGVydGllc1xuXHRcdFx0aWYgKCBwYXJ0cyApIHtcblx0XHRcdFx0c3RhcnQgPSB0d2Vlbi5zdGFydCA9ICtzdGFydCB8fCArdGFyZ2V0IHx8IDA7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHQvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb25cblx0XHRcdFx0dHdlZW4uZW5kID0gcGFydHNbIDEgXSA/XG5cdFx0XHRcdFx0c3RhcnQgKyAoIHBhcnRzWyAxIF0gKyAxICkgKiBwYXJ0c1sgMiBdIDpcblx0XHRcdFx0XHQrcGFydHNbIDIgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9O1xuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggdHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggdHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAodHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBIYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIEhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XG5cdFx0Ly8gY2hhbmdlIHRoZSBvdmVyZmxvdyBhdHRyaWJ1dGUgd2hlbiBvdmVyZmxvd1ggYW5kXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcblx0XHRjaGVja0Rpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/XG5cdFx0XHRkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xuXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gc2hvdy9oaWRlIHBhc3Ncblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93IGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlzcGxheSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YVNob3cgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcblx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0fVxuXHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcDtcblxuXHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRcdHR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gXCJ3aWR0aFwiIHx8IHByb3AgPT09IFwiaGVpZ2h0XCIgPyAxIDogMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcblx0fSBlbHNlIGlmICggKGRpc3BsYXkgPT09IFwibm9uZVwiID8gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXkpID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBhbmltYXRpb25QcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0pO1xuXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2Uoe1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwgeyBzcGVjaWFsRWFzaW5nOiB7fSB9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBhbmltYXRpb25QcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSlcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMuc3BsaXQoXCIgXCIpO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdID0gdHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59KTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgPyBvcHQuZHVyYXRpb24gOlxuXHRcdG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID8galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3ByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSkgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFfcHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaChbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCh7XG5cdHNsaWRlRG93bjogZ2VuRngoXCJzaG93XCIpLFxuXHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeChcInRvZ2dsZVwiKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59KTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0aWYgKCB0aW1lcigpICkge1xuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xuXG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0Y2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0pO1xufTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogaU9TPD01LjEsIEFuZHJvaWQ8PTQuMitcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPD0yLjNcblx0Ly8gT3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmUgaW5jb3JyZWN0bHkgbWFya2VkIGFzIGRpc2FibGVkXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSkoKTtcblxuXG52YXIgbm9kZUhvb2ssIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gZG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2Vcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/XG5cdFx0XHRcdHVuZGVmaW5lZCA6XG5cdFx0XHRcdHJldDtcblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKG5hbWUgPSBhdHRyTmFtZXNbaSsrXSkgKSB7XG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0XHQvLyBTZXQgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB0byBmYWxzZVxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH0sXG5cblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLCBub3R4bWwsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRub3R4bWwgPSBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICk7XG5cblx0XHRpZiAoIG5vdHhtbCApIHtcblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cmV0IDpcblx0XHRcdFx0KCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHRlbGVtWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5oYXNBdHRyaWJ1dGUoIFwidGFiaW5kZXhcIiApIHx8IHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8IGVsZW0uaHJlZiA/XG5cdFx0XHRcdFx0ZWxlbS50YWJJbmRleCA6XG5cdFx0XHRcdFx0LTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaChbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSk7XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRwcm9jZWVkID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Ly8gVGhlIGRpc2p1bmN0aW9uIGhlcmUgaXMgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSByZW1vdmVDbGFzcylcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIiBcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID49IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gdmFsdWUgPyBqUXVlcnkudHJpbSggY3VyICkgOiBcIlwiO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSxcblx0XHRcdFx0XHRpID0gMCxcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHQvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gXCJcIiA6IGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIjtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRpZiAoIHRoaXNbaV0ubm9kZVR5cGUgPT09IDEgJiYgKFwiIFwiICsgdGhpc1tpXS5jbGFzc05hbWUgKyBcIiBcIikucmVwbGFjZShyY2xhc3MsIFwiIFwiKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+PSAwICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbMF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0XHRyZXQucmVwbGFjZShycmV0dXJuLCBcIlwiKSA6XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cblx0XHRcdFx0XHRcdG1heCA6XG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBJRTYtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQoIHN1cHBvcnQub3B0RGlzYWJsZWQgPyAhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggKG9wdGlvbi5zZWxlY3RlZCA9IGpRdWVyeS5pbkFycmF5KCBvcHRpb24udmFsdWUsIHZhbHVlcyApID49IDApICkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KGVsZW0pLnZhbCgpLCB2YWx1ZSApID49IDAgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbmpRdWVyeS5lYWNoKCAoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9LFxuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gdGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6IHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59KTtcblxuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoL1xcPy8pO1xuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xufTtcblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgdG1wO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdHRyeSB7XG5cdFx0dG1wID0gbmV3IERPTVBhcnNlcigpO1xuXHRcdHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblx0cnVybCA9IC9eKFtcXHcuKy1dKzopKD86XFwvXFwvKD86W15cXC8/I10qQHwpKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gRG9jdW1lbnQgbG9jYXRpb25cblx0YWpheExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWYsXG5cblx0Ly8gU2VnbWVudCBsb2NhdGlvbiBpbnRvIHBhcnRzXG5cdGFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkge1xuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWzBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKGRlZXAgPSB7fSkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHNbIFwidGhyb3dzXCIgXSApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7IHN0YXRlOiBcInBhcnNlcmVycm9yXCIsIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudCB9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogYWpheExvY2F0aW9uLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggYWpheExvY1BhcnRzWyAxIF0gKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC94bWwvLFxuXHRcdFx0aHRtbDogL2h0bWwvLFxuXHRcdFx0anNvbjogL2pzb24vXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblx0XHRcdC8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFyc1xuXHRcdFx0cGFydHMsXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxuXHRcdFx0c3RhdGUgPSAwLFxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB3ZSBoYXZlIGEgcHJvdG9jb2w6aG9zdDpwb3J0IG1pc21hdGNoXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHRwYXJ0cyA9IHJ1cmwuZXhlYyggcy51cmwudG9Mb3dlckNhc2UoKSApO1xuXHRcdFx0cy5jcm9zc0RvbWFpbiA9ICEhKCBwYXJ0cyAmJlxuXHRcdFx0XHQoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8XG5cdFx0XHRcdFx0KCBwYXJ0c1sgMyBdIHx8ICggcGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgIT09XG5cdFx0XHRcdFx0XHQoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApIClcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIik7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cblxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XG5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICsgKCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiYgKCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydChcInRpbWVvdXRcIik7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzdGF0ZSA9IDE7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcblx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIENhbGxlZCBvbmNlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xuXHRcdFx0c3RhdGUgPSAyO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0pO1xuXHR9O1xufSk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KHtcblx0XHR1cmw6IHVybCxcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdFx0fVxuXHRcdH0pLmVuZCgpO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXG5cdHJldHVybiBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMDtcbn07XG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApO1xufTtcblxuXG5cblxudmFyIHIyMCA9IC8lMjAvZyxcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiID8gaSA6IFwiXCIgKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9KTtcblxuXHR9IGVsc2Uge1xuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSlcblx0XHQubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xuXHRcdFx0XHRudWxsIDpcblx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSkuZ2V0KCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoKCBlICkge31cbn07XG5cbnZhciB4aHJJZCA9IDAsXG5cdHhockNhbGxiYWNrcyA9IHt9LFxuXHR4aHJTdWNjZXNzU3RhdHVzID0ge1xuXHRcdC8vIGZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIE9wZW4gcmVxdWVzdHMgbXVzdCBiZSBtYW51YWxseSBhYm9ydGVkIG9uIHVubG9hZCAoIzUyODApXG4vLyBTZWUgaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20va2IvMjg1Njc0NiBmb3IgbW9yZSBpbmZvXG5pZiAoIHdpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0d2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdGZvciAoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkge1xuXHRcdFx0eGhyQ2FsbGJhY2tzWyBrZXkgXSgpO1xuXHRcdH1cblx0fSk7XG59XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCksXG5cdFx0XHRcdFx0aWQgPSArK3hocklkO1xuXG5cdFx0XHRcdHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0geGhyLm9ubG9hZCA9IHhoci5vbmVycm9yID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiA/IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dDogeGhyLnJlc3BvbnNlVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0fSA6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdHhoci5vbmVycm9yID0gY2FsbGJhY2soXCJlcnJvclwiKTtcblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0geGhyQ2FsbGJhY2tzWyBpZCBdID0gY2FsbGJhY2soXCJhYm9ydFwiKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCh7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogLyg/OmphdmF8ZWNtYSlzY3JpcHQvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59KTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeShcIjxzY3JpcHQ+XCIpLnByb3Aoe1xuXHRcdFx0XHRcdGFzeW5jOiB0cnVlLFxuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0pLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59KTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiAhKCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBmb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LCBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xuXG5cdGlmICggb2ZmID49IDAgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBpZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSkuZG9uZShmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggY2FsbGJhY2ssIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbIFwiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCIgXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSk7XG5cblxuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSkubGVuZ3RoO1xufTtcblxuXG5cblxudmFyIGRvY0VsZW0gPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRpZiAoICFkb2MgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcblx0XHRcdHJldHVybiBib3g7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxuXHRcdC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0fVxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LCBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudCwgXCJodG1sXCIgKSAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblx0XHR9KTtcblx0fVxufSk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW5kb3cucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTtcblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmk8NyssIENocm9tZTwzNytcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0pO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcblx0XHR9O1xuXHR9KTtcbn0pO1xuXG5cbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XG59O1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0pO1xufVxuXG5cblxuXG52YXJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xuXG59KSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzXG4gKiovIiwiLyogQHByZXNlcnZlXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIFxuICogQ29weXJpZ2h0IChjKSAyMDE0IFBldGthIEFudG9ub3ZcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOjwvcD5cbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuLyoqXG4gKiBibHVlYmlyZCBidWlsZCB2ZXJzaW9uIDIuOS4xMlxuICogRmVhdHVyZXMgZW5hYmxlZDogY29yZSwgcmFjZSwgY2FsbF9nZXQsIGdlbmVyYXRvcnMsIG1hcCwgbm9kZWlmeSwgcHJvbWlzaWZ5LCBwcm9wcywgcmVkdWNlLCBzZXR0bGUsIHNvbWUsIHByb2dyZXNzLCBjYW5jZWwsIHVzaW5nLCBmaWx0ZXIsIGFueSwgZWFjaCwgdGltZXJzXG4qL1xuIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgZjtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P2Y9d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Zj1nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJihmPXNlbGYpLGYuUHJvbWlzZT1lKCl9fShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgX2RlcmVxXz09XCJmdW5jdGlvblwiJiZfZGVyZXFfO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiBfZGVyZXFfPT1cImZ1bmN0aW9uXCImJl9kZXJlcV87Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlKSB7XG52YXIgU29tZVByb21pc2VBcnJheSA9IFByb21pc2UuX1NvbWVQcm9taXNlQXJyYXk7XG5mdW5jdGlvbiBhbnkocHJvbWlzZXMpIHtcbiAgICB2YXIgcmV0ID0gbmV3IFNvbWVQcm9taXNlQXJyYXkocHJvbWlzZXMpO1xuICAgIHZhciBwcm9taXNlID0gcmV0LnByb21pc2UoKTtcbiAgICByZXQuc2V0SG93TWFueSgxKTtcbiAgICByZXQuc2V0VW53cmFwKCk7XG4gICAgcmV0LmluaXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuUHJvbWlzZS5hbnkgPSBmdW5jdGlvbiAocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gYW55KHByb21pc2VzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYW55KHRoaXMpO1xufTtcblxufTtcblxufSx7fV0sMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBmaXJzdExpbmVFcnJvcjtcbnRyeSB7dGhyb3cgbmV3IEVycm9yKCk7IH0gY2F0Y2ggKGUpIHtmaXJzdExpbmVFcnJvciA9IGU7fVxudmFyIHNjaGVkdWxlID0gX2RlcmVxXyhcIi4vc2NoZWR1bGUuanNcIik7XG52YXIgUXVldWUgPSBfZGVyZXFfKFwiLi9xdWV1ZS5qc1wiKTtcbnZhciBfcHJvY2VzcyA9IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiID8gcHJvY2VzcyA6IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gQXN5bmMoKSB7XG4gICAgdGhpcy5faXNUaWNrVXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2xhdGVRdWV1ZSA9IG5ldyBRdWV1ZSgxNik7XG4gICAgdGhpcy5fbm9ybWFsUXVldWUgPSBuZXcgUXVldWUoMTYpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmRyYWluUXVldWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLl9kcmFpblF1ZXVlcygpO1xuICAgIH07XG4gICAgdGhpcy5fc2NoZWR1bGUgPVxuICAgICAgICBzY2hlZHVsZS5pc1N0YXRpYyA/IHNjaGVkdWxlKHRoaXMuZHJhaW5RdWV1ZXMpIDogc2NoZWR1bGU7XG59XG5cbkFzeW5jLnByb3RvdHlwZS5oYXZlSXRlbXNRdWV1ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25vcm1hbFF1ZXVlLmxlbmd0aCgpID4gMDtcbn07XG5cbkFzeW5jLnByb3RvdHlwZS5fd2l0aERvbWFpbiA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgaWYgKF9wcm9jZXNzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgX3Byb2Nlc3MuZG9tYWluICE9IG51bGwgJiZcbiAgICAgICAgIWZuLmRvbWFpbikge1xuICAgICAgICBmbiA9IF9wcm9jZXNzLmRvbWFpbi5iaW5kKGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIGZuO1xufTtcblxuQXN5bmMucHJvdG90eXBlLnRocm93TGF0ZXIgPSBmdW5jdGlvbihmbiwgYXJnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgYXJnID0gZm47XG4gICAgICAgIGZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBhcmc7IH07XG4gICAgfVxuICAgIGZuID0gdGhpcy5fd2l0aERvbWFpbihmbik7XG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmbihhcmcpO1xuICAgICAgICB9LCAwKTtcbiAgICB9IGVsc2UgdHJ5IHtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmbihhcmcpO1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGFzeW5jIHNjaGVkdWxlciBhdmFpbGFibGVcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9tM09UWGtcXHUwMDBhXCIpO1xuICAgIH1cbn07XG5cbkFzeW5jLnByb3RvdHlwZS5pbnZva2VMYXRlciA9IGZ1bmN0aW9uIChmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgIGZuID0gdGhpcy5fd2l0aERvbWFpbihmbik7XG4gICAgdGhpcy5fbGF0ZVF1ZXVlLnB1c2goZm4sIHJlY2VpdmVyLCBhcmcpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLmludm9rZUZpcnN0ID0gZnVuY3Rpb24gKGZuLCByZWNlaXZlciwgYXJnKSB7XG4gICAgZm4gPSB0aGlzLl93aXRoRG9tYWluKGZuKTtcbiAgICB0aGlzLl9ub3JtYWxRdWV1ZS51bnNoaWZ0KGZuLCByZWNlaXZlciwgYXJnKTtcbiAgICB0aGlzLl9xdWV1ZVRpY2soKTtcbn07XG5cbkFzeW5jLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAoZm4sIHJlY2VpdmVyLCBhcmcpIHtcbiAgICBmbiA9IHRoaXMuX3dpdGhEb21haW4oZm4pO1xuICAgIHRoaXMuX25vcm1hbFF1ZXVlLnB1c2goZm4sIHJlY2VpdmVyLCBhcmcpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLnNldHRsZVByb21pc2VzID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgIHRoaXMuX25vcm1hbFF1ZXVlLl9wdXNoT25lKHByb21pc2UpO1xuICAgIHRoaXMuX3F1ZXVlVGljaygpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLl9kcmFpblF1ZXVlID0gZnVuY3Rpb24ocXVldWUpIHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgIHZhciBmbiA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgZm4uX3NldHRsZVByb21pc2VzKCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVjZWl2ZXIgPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICB2YXIgYXJnID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgZm4uY2FsbChyZWNlaXZlciwgYXJnKTtcbiAgICB9XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuX2RyYWluUXVldWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2RyYWluUXVldWUodGhpcy5fbm9ybWFsUXVldWUpO1xuICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgdGhpcy5fZHJhaW5RdWV1ZSh0aGlzLl9sYXRlUXVldWUpO1xufTtcblxuQXN5bmMucHJvdG90eXBlLl9xdWV1ZVRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1RpY2tVc2VkKSB7XG4gICAgICAgIHRoaXMuX2lzVGlja1VzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zY2hlZHVsZSh0aGlzLmRyYWluUXVldWVzKTtcbiAgICB9XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lzVGlja1VzZWQgPSBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEFzeW5jKCk7XG5tb2R1bGUuZXhwb3J0cy5maXJzdExpbmVFcnJvciA9IGZpcnN0TGluZUVycm9yO1xuXG59LHtcIi4vcXVldWUuanNcIjoyOCxcIi4vc2NoZWR1bGUuanNcIjozMX1dLDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMLCB0cnlDb252ZXJ0VG9Qcm9taXNlKSB7XG52YXIgcmVqZWN0VGhpcyA9IGZ1bmN0aW9uKF8sIGUpIHtcbiAgICB0aGlzLl9yZWplY3QoZSk7XG59O1xuXG52YXIgdGFyZ2V0UmVqZWN0ZWQgPSBmdW5jdGlvbihlLCBjb250ZXh0KSB7XG4gICAgY29udGV4dC5wcm9taXNlUmVqZWN0aW9uUXVldWVkID0gdHJ1ZTtcbiAgICBjb250ZXh0LmJpbmRpbmdQcm9taXNlLl90aGVuKHJlamVjdFRoaXMsIHJlamVjdFRoaXMsIG51bGwsIHRoaXMsIGUpO1xufTtcblxudmFyIGJpbmRpbmdSZXNvbHZlZCA9IGZ1bmN0aW9uKHRoaXNBcmcsIGNvbnRleHQpIHtcbiAgICB0aGlzLl9zZXRCb3VuZFRvKHRoaXNBcmcpO1xuICAgIGlmICh0aGlzLl9pc1BlbmRpbmcoKSkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlQ2FsbGJhY2soY29udGV4dC50YXJnZXQpO1xuICAgIH1cbn07XG5cbnZhciBiaW5kaW5nUmVqZWN0ZWQgPSBmdW5jdGlvbihlLCBjb250ZXh0KSB7XG4gICAgaWYgKCFjb250ZXh0LnByb21pc2VSZWplY3Rpb25RdWV1ZWQpIHRoaXMuX3JlamVjdChlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAodGhpc0FyZykge1xuICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHRoaXNBcmcpO1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9wcm9wYWdhdGVGcm9tKHRoaXMsIDEpO1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQoKTtcbiAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgICAgICAgIHByb21pc2VSZWplY3Rpb25RdWV1ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcHJvbWlzZTogcmV0LFxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICBiaW5kaW5nUHJvbWlzZTogbWF5YmVQcm9taXNlXG4gICAgICAgIH07XG4gICAgICAgIHRhcmdldC5fdGhlbihJTlRFUk5BTCwgdGFyZ2V0UmVqZWN0ZWQsIHJldC5fcHJvZ3Jlc3MsIHJldCwgY29udGV4dCk7XG4gICAgICAgIG1heWJlUHJvbWlzZS5fdGhlbihcbiAgICAgICAgICAgIGJpbmRpbmdSZXNvbHZlZCwgYmluZGluZ1JlamVjdGVkLCByZXQuX3Byb2dyZXNzLCByZXQsIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldC5fc2V0Qm91bmRUbyh0aGlzQXJnKTtcbiAgICAgICAgcmV0Ll9yZXNvbHZlQ2FsbGJhY2sodGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRCb3VuZFRvID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChvYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMTMxMDcyO1xuICAgICAgICB0aGlzLl9ib3VuZFRvID0gb2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjEzMTA3Mik7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzQm91bmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDEzMTA3MikgPT09IDEzMTA3Mjtcbn07XG5cblByb21pc2UuYmluZCA9IGZ1bmN0aW9uICh0aGlzQXJnLCB2YWx1ZSkge1xuICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHRoaXNBcmcpO1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG5cbiAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBtYXliZVByb21pc2UuX3RoZW4oZnVuY3Rpb24odGhpc0FyZykge1xuICAgICAgICAgICAgcmV0Ll9zZXRCb3VuZFRvKHRoaXNBcmcpO1xuICAgICAgICAgICAgcmV0Ll9yZXNvbHZlQ2FsbGJhY2sodmFsdWUpO1xuICAgICAgICB9LCByZXQuX3JlamVjdCwgcmV0Ll9wcm9ncmVzcywgcmV0LCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXQuX3NldEJvdW5kVG8odGhpc0FyZyk7XG4gICAgICAgIHJldC5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG59O1xuXG59LHt9XSw0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIG9sZDtcbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIikgb2xkID0gUHJvbWlzZTtcbmZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgdHJ5IHsgaWYgKFByb21pc2UgPT09IGJsdWViaXJkKSBQcm9taXNlID0gb2xkOyB9XG4gICAgY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGJsdWViaXJkO1xufVxudmFyIGJsdWViaXJkID0gX2RlcmVxXyhcIi4vcHJvbWlzZS5qc1wiKSgpO1xuYmx1ZWJpcmQubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGJsdWViaXJkO1xuXG59LHtcIi4vcHJvbWlzZS5qc1wiOjIzfV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBjciA9IE9iamVjdC5jcmVhdGU7XG5pZiAoY3IpIHtcbiAgICB2YXIgY2FsbGVyQ2FjaGUgPSBjcihudWxsKTtcbiAgICB2YXIgZ2V0dGVyQ2FjaGUgPSBjcihudWxsKTtcbiAgICBjYWxsZXJDYWNoZVtcIiBzaXplXCJdID0gZ2V0dGVyQ2FjaGVbXCIgc2l6ZVwiXSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGNhbkV2YWx1YXRlID0gdXRpbC5jYW5FdmFsdWF0ZTtcbnZhciBpc0lkZW50aWZpZXIgPSB1dGlsLmlzSWRlbnRpZmllcjtcblxudmFyIGdldE1ldGhvZENhbGxlcjtcbnZhciBnZXRHZXR0ZXI7XG5pZiAoIXRydWUpIHtcbnZhciBtYWtlTWV0aG9kQ2FsbGVyID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZW5zdXJlTWV0aG9kXCIsIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGVuc3VyZU1ldGhvZChvYmosICdtZXRob2ROYW1lJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHN3aXRjaChsZW4pIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBvYmoubWV0aG9kTmFtZSh0aGlzWzBdKTsgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBvYmoubWV0aG9kTmFtZSh0aGlzWzBdLCB0aGlzWzFdKTsgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBvYmoubWV0aG9kTmFtZSh0aGlzWzBdLCB0aGlzWzFdLCB0aGlzWzJdKTsgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBvYmoubWV0aG9kTmFtZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5tZXRob2ROYW1lLmFwcGx5KG9iaiwgdGhpcyk7ICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgXCIucmVwbGFjZSgvbWV0aG9kTmFtZS9nLCBtZXRob2ROYW1lKSkoZW5zdXJlTWV0aG9kKTtcbn07XG5cbnZhciBtYWtlR2V0dGVyID0gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJvYmpcIiwgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAndXNlIHN0cmljdCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICByZXR1cm4gb2JqLnByb3BlcnR5TmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICBcIi5yZXBsYWNlKFwicHJvcGVydHlOYW1lXCIsIHByb3BlcnR5TmFtZSkpO1xufTtcblxudmFyIGdldENvbXBpbGVkID0gZnVuY3Rpb24obmFtZSwgY29tcGlsZXIsIGNhY2hlKSB7XG4gICAgdmFyIHJldCA9IGNhY2hlW25hbWVdO1xuICAgIGlmICh0eXBlb2YgcmV0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKCFpc0lkZW50aWZpZXIobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldCA9IGNvbXBpbGVyKG5hbWUpO1xuICAgICAgICBjYWNoZVtuYW1lXSA9IHJldDtcbiAgICAgICAgY2FjaGVbXCIgc2l6ZVwiXSsrO1xuICAgICAgICBpZiAoY2FjaGVbXCIgc2l6ZVwiXSA+IDUxMikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhjYWNoZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSBkZWxldGUgY2FjaGVba2V5c1tpXV07XG4gICAgICAgICAgICBjYWNoZVtcIiBzaXplXCJdID0ga2V5cy5sZW5ndGggLSAyNTY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cbmdldE1ldGhvZENhbGxlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gZ2V0Q29tcGlsZWQobmFtZSwgbWFrZU1ldGhvZENhbGxlciwgY2FsbGVyQ2FjaGUpO1xufTtcblxuZ2V0R2V0dGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBnZXRDb21waWxlZChuYW1lLCBtYWtlR2V0dGVyLCBnZXR0ZXJDYWNoZSk7XG59O1xufVxuXG5mdW5jdGlvbiBlbnN1cmVNZXRob2Qob2JqLCBtZXRob2ROYW1lKSB7XG4gICAgdmFyIGZuO1xuICAgIGlmIChvYmogIT0gbnVsbCkgZm4gPSBvYmpbbWV0aG9kTmFtZV07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gXCJPYmplY3QgXCIgKyB1dGlsLmNsYXNzU3RyaW5nKG9iaikgKyBcIiBoYXMgbm8gbWV0aG9kICdcIiArXG4gICAgICAgICAgICB1dGlsLnRvU3RyaW5nKG1ldGhvZE5hbWUpICsgXCInXCI7XG4gICAgICAgIHRocm93IG5ldyBQcm9taXNlLlR5cGVFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjYWxsZXIob2JqKSB7XG4gICAgdmFyIG1ldGhvZE5hbWUgPSB0aGlzLnBvcCgpO1xuICAgIHZhciBmbiA9IGVuc3VyZU1ldGhvZChvYmosIG1ldGhvZE5hbWUpO1xuICAgIHJldHVybiBmbi5hcHBseShvYmosIHRoaXMpO1xufVxuUHJvbWlzZS5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgdmFyICRfbGVuID0gYXJndW1lbnRzLmxlbmd0aDt2YXIgYXJncyA9IG5ldyBBcnJheSgkX2xlbiAtIDEpOyBmb3IodmFyICRfaSA9IDE7ICRfaSA8ICRfbGVuOyArKyRfaSkge2FyZ3NbJF9pIC0gMV0gPSBhcmd1bWVudHNbJF9pXTt9XG4gICAgaWYgKCF0cnVlKSB7XG4gICAgICAgIGlmIChjYW5FdmFsdWF0ZSkge1xuICAgICAgICAgICAgdmFyIG1heWJlQ2FsbGVyID0gZ2V0TWV0aG9kQ2FsbGVyKG1ldGhvZE5hbWUpO1xuICAgICAgICAgICAgaWYgKG1heWJlQ2FsbGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICAgICAgICAgIG1heWJlQ2FsbGVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJncywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhcmdzLnB1c2gobWV0aG9kTmFtZSk7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4oY2FsbGVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJncywgdW5kZWZpbmVkKTtcbn07XG5cbmZ1bmN0aW9uIG5hbWVkR2V0dGVyKG9iaikge1xuICAgIHJldHVybiBvYmpbdGhpc107XG59XG5mdW5jdGlvbiBpbmRleGVkR2V0dGVyKG9iaikge1xuICAgIHZhciBpbmRleCA9ICt0aGlzO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gTWF0aC5tYXgoMCwgaW5kZXggKyBvYmoubGVuZ3RoKTtcbiAgICByZXR1cm4gb2JqW2luZGV4XTtcbn1cblByb21pc2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUpIHtcbiAgICB2YXIgaXNJbmRleCA9ICh0eXBlb2YgcHJvcGVydHlOYW1lID09PSBcIm51bWJlclwiKTtcbiAgICB2YXIgZ2V0dGVyO1xuICAgIGlmICghaXNJbmRleCkge1xuICAgICAgICBpZiAoY2FuRXZhbHVhdGUpIHtcbiAgICAgICAgICAgIHZhciBtYXliZUdldHRlciA9IGdldEdldHRlcihwcm9wZXJ0eU5hbWUpO1xuICAgICAgICAgICAgZ2V0dGVyID0gbWF5YmVHZXR0ZXIgIT09IG51bGwgPyBtYXliZUdldHRlciA6IG5hbWVkR2V0dGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0dGVyID0gbmFtZWRHZXR0ZXI7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXR0ZXIgPSBpbmRleGVkR2V0dGVyO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGhlbihnZXR0ZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBwcm9wZXJ0eU5hbWUsIHVuZGVmaW5lZCk7XG59O1xufTtcblxufSx7XCIuL3V0aWwuanNcIjozOH1dLDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIik7XG52YXIgYXN5bmMgPSBfZGVyZXFfKFwiLi9hc3luYy5qc1wiKTtcbnZhciBDYW5jZWxsYXRpb25FcnJvciA9IGVycm9ycy5DYW5jZWxsYXRpb25FcnJvcjtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICBpZiAoIXRoaXMuaXNDYW5jZWxsYWJsZSgpKSByZXR1cm4gdGhpcztcbiAgICB2YXIgcGFyZW50O1xuICAgIHZhciBwcm9taXNlVG9SZWplY3QgPSB0aGlzO1xuICAgIHdoaWxlICgocGFyZW50ID0gcHJvbWlzZVRvUmVqZWN0Ll9jYW5jZWxsYXRpb25QYXJlbnQpICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcGFyZW50LmlzQ2FuY2VsbGFibGUoKSkge1xuICAgICAgICBwcm9taXNlVG9SZWplY3QgPSBwYXJlbnQ7XG4gICAgfVxuICAgIHRoaXMuX3Vuc2V0Q2FuY2VsbGFibGUoKTtcbiAgICBwcm9taXNlVG9SZWplY3QuX3RhcmdldCgpLl9yZWplY3RDYWxsYmFjayhyZWFzb24sIGZhbHNlLCB0cnVlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICBpZiAoIXRoaXMuaXNDYW5jZWxsYWJsZSgpKSByZXR1cm4gdGhpcztcbiAgICBpZiAocmVhc29uID09PSB1bmRlZmluZWQpIHJlYXNvbiA9IG5ldyBDYW5jZWxsYXRpb25FcnJvcigpO1xuICAgIGFzeW5jLmludm9rZUxhdGVyKHRoaXMuX2NhbmNlbCwgdGhpcywgcmVhc29uKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblByb21pc2UucHJvdG90eXBlLmNhbmNlbGxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9jYW5jZWxsYWJsZSgpKSByZXR1cm4gdGhpcztcbiAgICB0aGlzLl9zZXRDYW5jZWxsYWJsZSgpO1xuICAgIHRoaXMuX2NhbmNlbGxhdGlvblBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblByb21pc2UucHJvdG90eXBlLnVuY2FuY2VsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMudGhlbigpO1xuICAgIHJldC5fdW5zZXRDYW5jZWxsYWJsZSgpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5mb3JrID0gZnVuY3Rpb24gKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIGRpZFByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcblxuICAgIHJldC5fc2V0Q2FuY2VsbGFibGUoKTtcbiAgICByZXQuX2NhbmNlbGxhdGlvblBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmV0O1xufTtcbn07XG5cbn0se1wiLi9hc3luYy5qc1wiOjIsXCIuL2Vycm9ycy5qc1wiOjEzfV0sNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG52YXIgYXN5bmMgPSBfZGVyZXFfKFwiLi9hc3luYy5qc1wiKTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBibHVlYmlyZEZyYW1lUGF0dGVybiA9XG4gICAgL1tcXFxcXFwvXWJsdWViaXJkW1xcXFxcXC9danNbXFxcXFxcL10obWFpbnxkZWJ1Z3x6YWxnb3xpbnN0cnVtZW50ZWQpLztcbnZhciBzdGFja0ZyYW1lUGF0dGVybiA9IG51bGw7XG52YXIgZm9ybWF0U3RhY2sgPSBudWxsO1xudmFyIGluZGVudFN0YWNrRnJhbWVzID0gZmFsc2U7XG52YXIgd2FybjtcblxuZnVuY3Rpb24gQ2FwdHVyZWRUcmFjZShwYXJlbnQpIHtcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMuX2xlbmd0aCA9IDEgKyAocGFyZW50ID09PSB1bmRlZmluZWQgPyAwIDogcGFyZW50Ll9sZW5ndGgpO1xuICAgIGNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIENhcHR1cmVkVHJhY2UpO1xuICAgIGlmIChsZW5ndGggPiAzMikgdGhpcy51bmN5Y2xlKCk7XG59XG51dGlsLmluaGVyaXRzKENhcHR1cmVkVHJhY2UsIEVycm9yKTtcblxuQ2FwdHVyZWRUcmFjZS5wcm90b3R5cGUudW5jeWNsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLl9sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA8IDIpIHJldHVybjtcbiAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICB2YXIgc3RhY2tUb0luZGV4ID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbm9kZSA9IHRoaXM7IG5vZGUgIT09IHVuZGVmaW5lZDsgKytpKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIG5vZGUgPSBub2RlLl9wYXJlbnQ7XG4gICAgfVxuICAgIGxlbmd0aCA9IHRoaXMuX2xlbmd0aCA9IGk7XG4gICAgZm9yICh2YXIgaSA9IGxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBzdGFjayA9IG5vZGVzW2ldLnN0YWNrO1xuICAgICAgICBpZiAoc3RhY2tUb0luZGV4W3N0YWNrXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdGFja1RvSW5kZXhbc3RhY2tdID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjdXJyZW50U3RhY2sgPSBub2Rlc1tpXS5zdGFjaztcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhY2tUb0luZGV4W2N1cnJlbnRTdGFja107XG4gICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgbm9kZXNbaW5kZXggLSAxXS5fcGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG5vZGVzW2luZGV4IC0gMV0uX2xlbmd0aCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2Rlc1tpXS5fcGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbm9kZXNbaV0uX2xlbmd0aCA9IDE7XG4gICAgICAgICAgICB2YXIgY3ljbGVFZGdlTm9kZSA9IGkgPiAwID8gbm9kZXNbaSAtIDFdIDogdGhpcztcblxuICAgICAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGN5Y2xlRWRnZU5vZGUuX3BhcmVudCA9IG5vZGVzW2luZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgY3ljbGVFZGdlTm9kZS5fcGFyZW50LnVuY3ljbGUoKTtcbiAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9sZW5ndGggPVxuICAgICAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9wYXJlbnQuX2xlbmd0aCArIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN5Y2xlRWRnZU5vZGUuX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9sZW5ndGggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGN1cnJlbnRDaGlsZExlbmd0aCA9IGN5Y2xlRWRnZU5vZGUuX2xlbmd0aCArIDE7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSAtIDI7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgICAgICAgICAgbm9kZXNbal0uX2xlbmd0aCA9IGN1cnJlbnRDaGlsZExlbmd0aDtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hpbGRMZW5ndGgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkNhcHR1cmVkVHJhY2UucHJvdG90eXBlLnBhcmVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG59O1xuXG5DYXB0dXJlZFRyYWNlLnByb3RvdHlwZS5oYXNQYXJlbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50ICE9PSB1bmRlZmluZWQ7XG59O1xuXG5DYXB0dXJlZFRyYWNlLnByb3RvdHlwZS5hdHRhY2hFeHRyYVRyYWNlID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IuX19zdGFja0NsZWFuZWRfXykgcmV0dXJuO1xuICAgIHRoaXMudW5jeWNsZSgpO1xuICAgIHZhciBwYXJzZWQgPSBDYXB0dXJlZFRyYWNlLnBhcnNlU3RhY2tBbmRNZXNzYWdlKGVycm9yKTtcbiAgICB2YXIgbWVzc2FnZSA9IHBhcnNlZC5tZXNzYWdlO1xuICAgIHZhciBzdGFja3MgPSBbcGFyc2VkLnN0YWNrXTtcblxuICAgIHZhciB0cmFjZSA9IHRoaXM7XG4gICAgd2hpbGUgKHRyYWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3RhY2tzLnB1c2goY2xlYW5TdGFjayh0cmFjZS5zdGFjay5zcGxpdChcIlxcblwiKSkpO1xuICAgICAgICB0cmFjZSA9IHRyYWNlLl9wYXJlbnQ7XG4gICAgfVxuICAgIHJlbW92ZUNvbW1vblJvb3RzKHN0YWNrcyk7XG4gICAgcmVtb3ZlRHVwbGljYXRlT3JFbXB0eUp1bXBzKHN0YWNrcyk7XG4gICAgZXJyb3Iuc3RhY2sgPSByZWNvbnN0cnVjdFN0YWNrKG1lc3NhZ2UsIHN0YWNrcyk7XG4gICAgdXRpbC5ub3RFbnVtZXJhYmxlUHJvcChlcnJvciwgXCJfX3N0YWNrQ2xlYW5lZF9fXCIsIHRydWUpO1xufTtcblxuZnVuY3Rpb24gcmVjb25zdHJ1Y3RTdGFjayhtZXNzYWdlLCBzdGFja3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrcy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgc3RhY2tzW2ldLnB1c2goXCJGcm9tIHByZXZpb3VzIGV2ZW50OlwiKTtcbiAgICAgICAgc3RhY2tzW2ldID0gc3RhY2tzW2ldLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIGlmIChpIDwgc3RhY2tzLmxlbmd0aCkge1xuICAgICAgICBzdGFja3NbaV0gPSBzdGFja3NbaV0uam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2UgKyBcIlxcblwiICsgc3RhY2tzLmpvaW4oXCJcXG5cIik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZU9yRW1wdHlKdW1wcyhzdGFja3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoc3RhY2tzW2ldLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgKChpICsgMSA8IHN0YWNrcy5sZW5ndGgpICYmIHN0YWNrc1tpXVswXSA9PT0gc3RhY2tzW2krMV1bMF0pKSB7XG4gICAgICAgICAgICBzdGFja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVDb21tb25Sb290cyhzdGFja3MpIHtcbiAgICB2YXIgY3VycmVudCA9IHN0YWNrc1swXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHN0YWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgcHJldiA9IHN0YWNrc1tpXTtcbiAgICAgICAgdmFyIGN1cnJlbnRMYXN0SW5kZXggPSBjdXJyZW50Lmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBjdXJyZW50TGFzdExpbmUgPSBjdXJyZW50W2N1cnJlbnRMYXN0SW5kZXhdO1xuICAgICAgICB2YXIgY29tbW9uUm9vdE1lZXRQb2ludCA9IC0xO1xuXG4gICAgICAgIGZvciAodmFyIGogPSBwcmV2Lmxlbmd0aCAtIDE7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgICAgICBpZiAocHJldltqXSA9PT0gY3VycmVudExhc3RMaW5lKSB7XG4gICAgICAgICAgICAgICAgY29tbW9uUm9vdE1lZXRQb2ludCA9IGo7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gY29tbW9uUm9vdE1lZXRQb2ludDsgaiA+PSAwOyAtLWopIHtcbiAgICAgICAgICAgIHZhciBsaW5lID0gcHJldltqXTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50W2N1cnJlbnRMYXN0SW5kZXhdID09PSBsaW5lKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC5wb3AoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50TGFzdEluZGV4LS07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBwcmV2O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5TdGFjayhzdGFjaykge1xuICAgIHZhciByZXQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBsaW5lID0gc3RhY2tbaV07XG4gICAgICAgIHZhciBpc1RyYWNlTGluZSA9IHN0YWNrRnJhbWVQYXR0ZXJuLnRlc3QobGluZSkgfHxcbiAgICAgICAgICAgIFwiICAgIChObyBzdGFjayB0cmFjZSlcIiA9PT0gbGluZTtcbiAgICAgICAgdmFyIGlzSW50ZXJuYWxGcmFtZSA9IGlzVHJhY2VMaW5lICYmIHNob3VsZElnbm9yZShsaW5lKTtcbiAgICAgICAgaWYgKGlzVHJhY2VMaW5lICYmICFpc0ludGVybmFsRnJhbWUpIHtcbiAgICAgICAgICAgIGlmIChpbmRlbnRTdGFja0ZyYW1lcyAmJiBsaW5lLmNoYXJBdCgwKSAhPT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgICBsaW5lID0gXCIgICAgXCIgKyBsaW5lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0LnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc3RhY2tGcmFtZXNBc0FycmF5KGVycm9yKSB7XG4gICAgdmFyIHN0YWNrID0gZXJyb3Iuc3RhY2sucmVwbGFjZSgvXFxzKyQvZywgXCJcIikuc3BsaXQoXCJcXG5cIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgbGluZSA9IHN0YWNrW2ldO1xuICAgICAgICBpZiAoXCIgICAgKE5vIHN0YWNrIHRyYWNlKVwiID09PSBsaW5lIHx8IHN0YWNrRnJhbWVQYXR0ZXJuLnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpID4gMCkge1xuICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2s7XG59XG5cbkNhcHR1cmVkVHJhY2UucGFyc2VTdGFja0FuZE1lc3NhZ2UgPSBmdW5jdGlvbihlcnJvcikge1xuICAgIHZhciBzdGFjayA9IGVycm9yLnN0YWNrO1xuICAgIHZhciBtZXNzYWdlID0gZXJyb3IudG9TdHJpbmcoKTtcbiAgICBzdGFjayA9IHR5cGVvZiBzdGFjayA9PT0gXCJzdHJpbmdcIiAmJiBzdGFjay5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBzdGFja0ZyYW1lc0FzQXJyYXkoZXJyb3IpIDogW1wiICAgIChObyBzdGFjayB0cmFjZSlcIl07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgc3RhY2s6IGNsZWFuU3RhY2soc3RhY2spXG4gICAgfTtcbn07XG5cbkNhcHR1cmVkVHJhY2UuZm9ybWF0QW5kTG9nRXJyb3IgPSBmdW5jdGlvbihlcnJvciwgdGl0bGUpIHtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2U7XG4gICAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBzdGFjayA9IGVycm9yLnN0YWNrO1xuICAgICAgICAgICAgbWVzc2FnZSA9IHRpdGxlICsgZm9ybWF0U3RhY2soc3RhY2ssIGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0aXRsZSArIFN0cmluZyhlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3YXJuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdhcm4obWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbnNvbGUubG9nID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlLmxvZyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5DYXB0dXJlZFRyYWNlLnVuaGFuZGxlZFJlamVjdGlvbiA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICBDYXB0dXJlZFRyYWNlLmZvcm1hdEFuZExvZ0Vycm9yKHJlYXNvbiwgXCJeLS0tIFdpdGggYWRkaXRpb25hbCBzdGFjayB0cmFjZTogXCIpO1xufTtcblxuQ2FwdHVyZWRUcmFjZS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNhcHR1cmVTdGFja1RyYWNlID09PSBcImZ1bmN0aW9uXCI7XG59O1xuXG5DYXB0dXJlZFRyYWNlLmZpcmVSZWplY3Rpb25FdmVudCA9XG5mdW5jdGlvbihuYW1lLCBsb2NhbEhhbmRsZXIsIHJlYXNvbiwgcHJvbWlzZSkge1xuICAgIHZhciBsb2NhbEV2ZW50RmlyZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsSGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBsb2NhbEV2ZW50RmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwicmVqZWN0aW9uSGFuZGxlZFwiKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxIYW5kbGVyKHByb21pc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhbEhhbmRsZXIocmVhc29uLCBwcm9taXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgYXN5bmMudGhyb3dMYXRlcihlKTtcbiAgICB9XG5cbiAgICB2YXIgZ2xvYmFsRXZlbnRGaXJlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbEV2ZW50RmlyZWQgPSBmaXJlR2xvYmFsRXZlbnQobmFtZSwgcmVhc29uLCBwcm9taXNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGdsb2JhbEV2ZW50RmlyZWQgPSB0cnVlO1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKGUpO1xuICAgIH1cblxuICAgIHZhciBkb21FdmVudEZpcmVkID0gZmFsc2U7XG4gICAgaWYgKGZpcmVEb21FdmVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZG9tRXZlbnRGaXJlZCA9IGZpcmVEb21FdmVudChuYW1lLnRvTG93ZXJDYXNlKCksIHtcbiAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbixcbiAgICAgICAgICAgICAgICBwcm9taXNlOiBwcm9taXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZG9tRXZlbnRGaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBhc3luYy50aHJvd0xhdGVyKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFnbG9iYWxFdmVudEZpcmVkICYmICFsb2NhbEV2ZW50RmlyZWQgJiYgIWRvbUV2ZW50RmlyZWQgJiZcbiAgICAgICAgbmFtZSA9PT0gXCJ1bmhhbmRsZWRSZWplY3Rpb25cIikge1xuICAgICAgICBDYXB0dXJlZFRyYWNlLmZvcm1hdEFuZExvZ0Vycm9yKHJlYXNvbiwgXCJVbmhhbmRsZWQgcmVqZWN0aW9uIFwiKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXROb25FcnJvcihvYmopIHtcbiAgICB2YXIgc3RyO1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgc3RyID0gXCJbZnVuY3Rpb24gXCIgK1xuICAgICAgICAgICAgKG9iai5uYW1lIHx8IFwiYW5vbnltb3VzXCIpICtcbiAgICAgICAgICAgIFwiXVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IG9iai50b1N0cmluZygpO1xuICAgICAgICB2YXIgcnVzZWxlc3NUb1N0cmluZyA9IC9cXFtvYmplY3QgW2EtekEtWjAtOSRfXStcXF0vO1xuICAgICAgICBpZiAocnVzZWxlc3NUb1N0cmluZy50ZXN0KHN0cikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1N0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgICAgICAgICAgc3RyID0gbmV3U3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2goZSkge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHN0ciA9IFwiKGVtcHR5IGFycmF5KVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoXCIoPFwiICsgc25pcChzdHIpICsgXCI+LCBubyBzdGFjayB0cmFjZSlcIik7XG59XG5cbmZ1bmN0aW9uIHNuaXAoc3RyKSB7XG4gICAgdmFyIG1heENoYXJzID0gNDE7XG4gICAgaWYgKHN0ci5sZW5ndGggPCBtYXhDaGFycykge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBtYXhDaGFycyAtIDMpICsgXCIuLi5cIjtcbn1cblxudmFyIHNob3VsZElnbm9yZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07XG52YXIgcGFyc2VMaW5lSW5mb1JlZ2V4ID0gL1tcXC88XFwoXShbXjpcXC9dKyk6KFxcZCspOig/OlxcZCspXFwpP1xccyokLztcbmZ1bmN0aW9uIHBhcnNlTGluZUluZm8obGluZSkge1xuICAgIHZhciBtYXRjaGVzID0gbGluZS5tYXRjaChwYXJzZUxpbmVJbmZvUmVnZXgpO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogbWF0Y2hlc1sxXSxcbiAgICAgICAgICAgIGxpbmU6IHBhcnNlSW50KG1hdGNoZXNbMl0sIDEwKVxuICAgICAgICB9O1xuICAgIH1cbn1cbkNhcHR1cmVkVHJhY2Uuc2V0Qm91bmRzID0gZnVuY3Rpb24oZmlyc3RMaW5lRXJyb3IsIGxhc3RMaW5lRXJyb3IpIHtcbiAgICBpZiAoIUNhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQoKSkgcmV0dXJuO1xuICAgIHZhciBmaXJzdFN0YWNrTGluZXMgPSBmaXJzdExpbmVFcnJvci5zdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICB2YXIgbGFzdFN0YWNrTGluZXMgPSBsYXN0TGluZUVycm9yLnN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuICAgIHZhciBmaXJzdEluZGV4ID0gLTE7XG4gICAgdmFyIGxhc3RJbmRleCA9IC0xO1xuICAgIHZhciBmaXJzdEZpbGVOYW1lO1xuICAgIHZhciBsYXN0RmlsZU5hbWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaXJzdFN0YWNrTGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlTGluZUluZm8oZmlyc3RTdGFja0xpbmVzW2ldKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgZmlyc3RGaWxlTmFtZSA9IHJlc3VsdC5maWxlTmFtZTtcbiAgICAgICAgICAgIGZpcnN0SW5kZXggPSByZXN1bHQubGluZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdFN0YWNrTGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlTGluZUluZm8obGFzdFN0YWNrTGluZXNbaV0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBsYXN0RmlsZU5hbWUgPSByZXN1bHQuZmlsZU5hbWU7XG4gICAgICAgICAgICBsYXN0SW5kZXggPSByZXN1bHQubGluZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChmaXJzdEluZGV4IDwgMCB8fCBsYXN0SW5kZXggPCAwIHx8ICFmaXJzdEZpbGVOYW1lIHx8ICFsYXN0RmlsZU5hbWUgfHxcbiAgICAgICAgZmlyc3RGaWxlTmFtZSAhPT0gbGFzdEZpbGVOYW1lIHx8IGZpcnN0SW5kZXggPj0gbGFzdEluZGV4KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzaG91bGRJZ25vcmUgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgIGlmIChibHVlYmlyZEZyYW1lUGF0dGVybi50ZXN0KGxpbmUpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdmFyIGluZm8gPSBwYXJzZUxpbmVJbmZvKGxpbmUpO1xuICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgICAgaWYgKGluZm8uZmlsZU5hbWUgPT09IGZpcnN0RmlsZU5hbWUgJiZcbiAgICAgICAgICAgICAgICAoZmlyc3RJbmRleCA8PSBpbmZvLmxpbmUgJiYgaW5mby5saW5lIDw9IGxhc3RJbmRleCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn07XG5cbnZhciBjYXB0dXJlU3RhY2tUcmFjZSA9IChmdW5jdGlvbiBzdGFja0RldGVjdGlvbigpIHtcbiAgICB2YXIgdjhzdGFja0ZyYW1lUGF0dGVybiA9IC9eXFxzKmF0XFxzKi87XG4gICAgdmFyIHY4c3RhY2tGb3JtYXR0ZXIgPSBmdW5jdGlvbihzdGFjaywgZXJyb3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGFjayA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHN0YWNrO1xuXG4gICAgICAgIGlmIChlcnJvci5uYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE5vbkVycm9yKGVycm9yKTtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBFcnJvci5zdGFja1RyYWNlTGltaXQgPT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgdHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ICsgNjtcbiAgICAgICAgc3RhY2tGcmFtZVBhdHRlcm4gPSB2OHN0YWNrRnJhbWVQYXR0ZXJuO1xuICAgICAgICBmb3JtYXRTdGFjayA9IHY4c3RhY2tGb3JtYXR0ZXI7XG4gICAgICAgIHZhciBjYXB0dXJlU3RhY2tUcmFjZSA9IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlO1xuXG4gICAgICAgIHNob3VsZElnbm9yZSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBibHVlYmlyZEZyYW1lUGF0dGVybi50ZXN0KGxpbmUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVjZWl2ZXIsIGlnbm9yZVVudGlsKSB7XG4gICAgICAgICAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQgKyA2O1xuICAgICAgICAgICAgY2FwdHVyZVN0YWNrVHJhY2UocmVjZWl2ZXIsIGlnbm9yZVVudGlsKTtcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdCAtIDY7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcblxuICAgIGlmICh0eXBlb2YgZXJyLnN0YWNrID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgIGVyci5zdGFjay5zcGxpdChcIlxcblwiKVswXS5pbmRleE9mKFwic3RhY2tEZXRlY3Rpb25AXCIpID49IDApIHtcbiAgICAgICAgc3RhY2tGcmFtZVBhdHRlcm4gPSAvQC87XG4gICAgICAgIGZvcm1hdFN0YWNrID0gdjhzdGFja0Zvcm1hdHRlcjtcbiAgICAgICAgaW5kZW50U3RhY2tGcmFtZXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FwdHVyZVN0YWNrVHJhY2Uobykge1xuICAgICAgICAgICAgby5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBoYXNTdGFja0FmdGVyVGhyb3c7XG4gICAgdHJ5IHsgdGhyb3cgbmV3IEVycm9yKCk7IH1cbiAgICBjYXRjaChlKSB7XG4gICAgICAgIGhhc1N0YWNrQWZ0ZXJUaHJvdyA9IChcInN0YWNrXCIgaW4gZSk7XG4gICAgfVxuICAgIGlmICghKFwic3RhY2tcIiBpbiBlcnIpICYmIGhhc1N0YWNrQWZ0ZXJUaHJvdykge1xuICAgICAgICBzdGFja0ZyYW1lUGF0dGVybiA9IHY4c3RhY2tGcmFtZVBhdHRlcm47XG4gICAgICAgIGZvcm1hdFN0YWNrID0gdjhzdGFja0Zvcm1hdHRlcjtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlKG8pIHtcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdCArIDY7XG4gICAgICAgICAgICB0cnkgeyB0aHJvdyBuZXcgRXJyb3IoKTsgfVxuICAgICAgICAgICAgY2F0Y2goZSkgeyBvLnN0YWNrID0gZS5zdGFjazsgfVxuICAgICAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0IC0gNjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmb3JtYXRTdGFjayA9IGZ1bmN0aW9uKHN0YWNrLCBlcnJvcikge1xuICAgICAgICBpZiAodHlwZW9mIHN0YWNrID09PSBcInN0cmluZ1wiKSByZXR1cm4gc3RhY2s7XG5cbiAgICAgICAgaWYgKCh0eXBlb2YgZXJyb3IgPT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgIHR5cGVvZiBlcnJvciA9PT0gXCJmdW5jdGlvblwiKSAmJlxuICAgICAgICAgICAgZXJyb3IubmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBlcnJvci5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvci50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXROb25FcnJvcihlcnJvcik7XG4gICAgfTtcblxuICAgIHJldHVybiBudWxsO1xuXG59KShbXSk7XG5cbnZhciBmaXJlRG9tRXZlbnQ7XG52YXIgZmlyZUdsb2JhbEV2ZW50ID0gKGZ1bmN0aW9uKCkge1xuICAgIGlmICh1dGlsLmlzTm9kZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24obmFtZSwgcmVhc29uLCBwcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJyZWplY3Rpb25IYW5kbGVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbWl0KG5hbWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbWl0KG5hbWUsIHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGN1c3RvbUV2ZW50V29ya3MgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFueUV2ZW50V29ya3MgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGV2ID0gbmV3IHNlbGYuQ3VzdG9tRXZlbnQoXCJ0ZXN0XCIpO1xuICAgICAgICAgICAgY3VzdG9tRXZlbnRXb3JrcyA9IGV2IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIGlmICghY3VzdG9tRXZlbnRXb3Jrcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChcInRlc3Rpbmd0aGVldmVudFwiLCBmYWxzZSwgdHJ1ZSwge30pO1xuICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgYW55RXZlbnRXb3JrcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbnlFdmVudFdvcmtzKSB7XG4gICAgICAgICAgICBmaXJlRG9tRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBkZXRhaWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKGN1c3RvbUV2ZW50V29ya3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBuZXcgc2VsZi5DdXN0b21FdmVudCh0eXBlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGRldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYuZGlzcGF0Y2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgdHJ1ZSwgZGV0YWlsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQgPyAhc2VsZi5kaXNwYXRjaEV2ZW50KGV2ZW50KSA6IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b1dpbmRvd01ldGhvZE5hbWVNYXAgPSB7fTtcbiAgICAgICAgdG9XaW5kb3dNZXRob2ROYW1lTWFwW1widW5oYW5kbGVkUmVqZWN0aW9uXCJdID0gKFwib25cIiArXG4gICAgICAgICAgICBcInVuaGFuZGxlZFJlamVjdGlvblwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0b1dpbmRvd01ldGhvZE5hbWVNYXBbXCJyZWplY3Rpb25IYW5kbGVkXCJdID0gKFwib25cIiArXG4gICAgICAgICAgICBcInJlamVjdGlvbkhhbmRsZWRcIikudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obmFtZSwgcmVhc29uLCBwcm9taXNlKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IHRvV2luZG93TWV0aG9kTmFtZU1hcFtuYW1lXTtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBzZWxmW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgaWYgKCFtZXRob2QpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBcInJlamVjdGlvbkhhbmRsZWRcIikge1xuICAgICAgICAgICAgICAgIG1ldGhvZC5jYWxsKHNlbGYsIHByb21pc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXRob2QuY2FsbChzZWxmLCByZWFzb24sIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfVxufSkoKTtcblxuaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBjb25zb2xlLndhcm4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3YXJuID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgaWYgKHV0aWwuaXNOb2RlICYmIHByb2Nlc3Muc3RkZXJyLmlzVFRZKSB7XG4gICAgICAgIHdhcm4gPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShcIlxcdTAwMWJbMzFtXCIgKyBtZXNzYWdlICsgXCJcXHUwMDFiWzM5bVxcblwiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCF1dGlsLmlzTm9kZSAmJiB0eXBlb2YgKG5ldyBFcnJvcigpLnN0YWNrKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB3YXJuID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiJWNcIiArIG1lc3NhZ2UsIFwiY29sb3I6IHJlZFwiKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnJldHVybiBDYXB0dXJlZFRyYWNlO1xufTtcblxufSx7XCIuL2FzeW5jLmpzXCI6MixcIi4vdXRpbC5qc1wiOjM4fV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkVYVF9GSUxURVIpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIik7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciBrZXlzID0gX2RlcmVxXyhcIi4vZXM1LmpzXCIpLmtleXM7XG52YXIgVHlwZUVycm9yID0gZXJyb3JzLlR5cGVFcnJvcjtcblxuZnVuY3Rpb24gQ2F0Y2hGaWx0ZXIoaW5zdGFuY2VzLCBjYWxsYmFjaywgcHJvbWlzZSkge1xuICAgIHRoaXMuX2luc3RhbmNlcyA9IGluc3RhbmNlcztcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBzYWZlUHJlZGljYXRlKHByZWRpY2F0ZSwgZSkge1xuICAgIHZhciBzYWZlT2JqZWN0ID0ge307XG4gICAgdmFyIHJldGZpbHRlciA9IHRyeUNhdGNoKHByZWRpY2F0ZSkuY2FsbChzYWZlT2JqZWN0LCBlKTtcblxuICAgIGlmIChyZXRmaWx0ZXIgPT09IGVycm9yT2JqKSByZXR1cm4gcmV0ZmlsdGVyO1xuXG4gICAgdmFyIHNhZmVLZXlzID0ga2V5cyhzYWZlT2JqZWN0KTtcbiAgICBpZiAoc2FmZUtleXMubGVuZ3RoKSB7XG4gICAgICAgIGVycm9yT2JqLmUgPSBuZXcgVHlwZUVycm9yKFwiQ2F0Y2ggZmlsdGVyIG11c3QgaW5oZXJpdCBmcm9tIEVycm9yIG9yIGJlIGEgc2ltcGxlIHByZWRpY2F0ZSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL284NG82OFxcdTAwMGFcIik7XG4gICAgICAgIHJldHVybiBlcnJvck9iajtcbiAgICB9XG4gICAgcmV0dXJuIHJldGZpbHRlcjtcbn1cblxuQ2F0Y2hGaWx0ZXIucHJvdG90eXBlLmRvRmlsdGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgY2IgPSB0aGlzLl9jYWxsYmFjaztcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2U7XG4gICAgdmFyIGJvdW5kVG8gPSBwcm9taXNlLl9ib3VuZFRvO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9pbnN0YW5jZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9pbnN0YW5jZXNbaV07XG4gICAgICAgIHZhciBpdGVtSXNFcnJvclR5cGUgPSBpdGVtID09PSBFcnJvciB8fFxuICAgICAgICAgICAgKGl0ZW0gIT0gbnVsbCAmJiBpdGVtLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yKTtcblxuICAgICAgICBpZiAoaXRlbUlzRXJyb3JUeXBlICYmIGUgaW5zdGFuY2VvZiBpdGVtKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2goY2IpLmNhbGwoYm91bmRUbywgZSk7XG4gICAgICAgICAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgICAgIE5FWFRfRklMVEVSLmUgPSByZXQuZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTkVYVF9GSUxURVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIgJiYgIWl0ZW1Jc0Vycm9yVHlwZSkge1xuICAgICAgICAgICAgdmFyIHNob3VsZEhhbmRsZSA9IHNhZmVQcmVkaWNhdGUoaXRlbSwgZSk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgICAgIGUgPSBlcnJvck9iai5lO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzaG91bGRIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2goY2IpLmNhbGwoYm91bmRUbywgZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgTkVYVF9GSUxURVIuZSA9IHJldC5lO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTkVYVF9GSUxURVI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgTkVYVF9GSUxURVIuZSA9IGU7XG4gICAgcmV0dXJuIE5FWFRfRklMVEVSO1xufTtcblxucmV0dXJuIENhdGNoRmlsdGVyO1xufTtcblxufSx7XCIuL2Vycm9ycy5qc1wiOjEzLFwiLi9lczUuanNcIjoxNCxcIi4vdXRpbC5qc1wiOjM4fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgQ2FwdHVyZWRUcmFjZSwgaXNEZWJ1Z2dpbmcpIHtcbnZhciBjb250ZXh0U3RhY2sgPSBbXTtcbmZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgdGhpcy5fdHJhY2UgPSBuZXcgQ2FwdHVyZWRUcmFjZShwZWVrQ29udGV4dCgpKTtcbn1cbkNvbnRleHQucHJvdG90eXBlLl9wdXNoQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlzRGVidWdnaW5nKCkpIHJldHVybjtcbiAgICBpZiAodGhpcy5fdHJhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0U3RhY2sucHVzaCh0aGlzLl90cmFjZSk7XG4gICAgfVxufTtcblxuQ29udGV4dC5wcm90b3R5cGUuX3BvcENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0RlYnVnZ2luZygpKSByZXR1cm47XG4gICAgaWYgKHRoaXMuX3RyYWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGV4dFN0YWNrLnBvcCgpO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoKSB7XG4gICAgaWYgKGlzRGVidWdnaW5nKCkpIHJldHVybiBuZXcgQ29udGV4dCgpO1xufVxuXG5mdW5jdGlvbiBwZWVrQ29udGV4dCgpIHtcbiAgICB2YXIgbGFzdEluZGV4ID0gY29udGV4dFN0YWNrLmxlbmd0aCAtIDE7XG4gICAgaWYgKGxhc3RJbmRleCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0U3RhY2tbbGFzdEluZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuX3BlZWtDb250ZXh0ID0gcGVla0NvbnRleHQ7XG5Qcm9taXNlLnByb3RvdHlwZS5fcHVzaENvbnRleHQgPSBDb250ZXh0LnByb3RvdHlwZS5fcHVzaENvbnRleHQ7XG5Qcm9taXNlLnByb3RvdHlwZS5fcG9wQ29udGV4dCA9IENvbnRleHQucHJvdG90eXBlLl9wb3BDb250ZXh0O1xuXG5yZXR1cm4gY3JlYXRlQ29udGV4dDtcbn07XG5cbn0se31dLDEwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBDYXB0dXJlZFRyYWNlKSB7XG52YXIgYXN5bmMgPSBfZGVyZXFfKFwiLi9hc3luYy5qc1wiKTtcbnZhciBXYXJuaW5nID0gX2RlcmVxXyhcIi4vZXJyb3JzLmpzXCIpLldhcm5pbmc7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgY2FuQXR0YWNoVHJhY2UgPSB1dGlsLmNhbkF0dGFjaFRyYWNlO1xudmFyIHVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQ7XG52YXIgcG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb247XG52YXIgZGVidWdnaW5nID0gZmFsc2UgfHwgKHV0aWwuaXNOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICghIXByb2Nlc3MuZW52W1wiQkxVRUJJUkRfREVCVUdcIl0gfHxcbiAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52W1wiTk9ERV9FTlZcIl0gPT09IFwiZGV2ZWxvcG1lbnRcIikpO1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZW5zdXJlUG9zc2libGVSZWplY3Rpb25IYW5kbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3NldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgYXN5bmMuaW52b2tlTGF0ZXIodGhpcy5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uLCB0aGlzLCB1bmRlZmluZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBDYXB0dXJlZFRyYWNlLmZpcmVSZWplY3Rpb25FdmVudChcInJlamVjdGlvbkhhbmRsZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkLCB1bmRlZmluZWQsIHRoaXMpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5faXNSZWplY3Rpb25VbmhhbmRsZWQoKSkge1xuICAgICAgICB2YXIgcmVhc29uID0gdGhpcy5fZ2V0Q2FycmllZFN0YWNrVHJhY2UoKSB8fCB0aGlzLl9zZXR0bGVkVmFsdWU7XG4gICAgICAgIHRoaXMuX3NldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQoKTtcbiAgICAgICAgQ2FwdHVyZWRUcmFjZS5maXJlUmVqZWN0aW9uRXZlbnQoXCJ1bmhhbmRsZWRSZWplY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24sIHJlYXNvbiwgdGhpcyk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDUyNDI4ODtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+NTI0Mjg4KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc1VuaGFuZGxlZFJlamVjdGlvbk5vdGlmaWVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA1MjQyODgpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMjA5NzE1Mjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjIwOTcxNTIpO1xuICAgIGlmICh0aGlzLl9pc1VuaGFuZGxlZFJlamVjdGlvbk5vdGlmaWVkKCkpIHtcbiAgICAgICAgdGhpcy5fdW5zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkKCk7XG4gICAgICAgIHRoaXMuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc1JlamVjdGlvblVuaGFuZGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMjA5NzE1MikgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldENhcnJpZWRTdGFja1RyYWNlID0gZnVuY3Rpb24gKGNhcHR1cmVkVHJhY2UpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMTA0ODU3NjtcbiAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwID0gY2FwdHVyZWRUcmFjZTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0NhcnJ5aW5nU3RhY2tUcmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMTA0ODU3NikgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2dldENhcnJpZWRTdGFja1RyYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9pc0NhcnJ5aW5nU3RhY2tUcmFjZSgpXG4gICAgICAgID8gdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMFxuICAgICAgICA6IHVuZGVmaW5lZDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jYXB0dXJlU3RhY2tUcmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGVidWdnaW5nKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlID0gbmV3IENhcHR1cmVkVHJhY2UodGhpcy5fcGVla0NvbnRleHQoKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2F0dGFjaEV4dHJhVHJhY2UgPSBmdW5jdGlvbiAoZXJyb3IsIGlnbm9yZVNlbGYpIHtcbiAgICBpZiAoZGVidWdnaW5nICYmIGNhbkF0dGFjaFRyYWNlKGVycm9yKSkge1xuICAgICAgICB2YXIgdHJhY2UgPSB0aGlzLl90cmFjZTtcbiAgICAgICAgaWYgKHRyYWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChpZ25vcmVTZWxmKSB0cmFjZSA9IHRyYWNlLl9wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRyYWNlLmF0dGFjaEV4dHJhVHJhY2UoZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKCFlcnJvci5fX3N0YWNrQ2xlYW5lZF9fKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkID0gQ2FwdHVyZWRUcmFjZS5wYXJzZVN0YWNrQW5kTWVzc2FnZShlcnJvcik7XG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IHBhcnNlZC5tZXNzYWdlICsgXCJcXG5cIiArIHBhcnNlZC5zdGFjay5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgdXRpbC5ub3RFbnVtZXJhYmxlUHJvcChlcnJvciwgXCJfX3N0YWNrQ2xlYW5lZF9fXCIsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3dhcm4gPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgdmFyIHdhcm5pbmcgPSBuZXcgV2FybmluZyhtZXNzYWdlKTtcbiAgICB2YXIgY3R4ID0gdGhpcy5fcGVla0NvbnRleHQoKTtcbiAgICBpZiAoY3R4KSB7XG4gICAgICAgIGN0eC5hdHRhY2hFeHRyYVRyYWNlKHdhcm5pbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSBDYXB0dXJlZFRyYWNlLnBhcnNlU3RhY2tBbmRNZXNzYWdlKHdhcm5pbmcpO1xuICAgICAgICB3YXJuaW5nLnN0YWNrID0gcGFyc2VkLm1lc3NhZ2UgKyBcIlxcblwiICsgcGFyc2VkLnN0YWNrLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIENhcHR1cmVkVHJhY2UuZm9ybWF0QW5kTG9nRXJyb3Iod2FybmluZywgXCJcIik7XG59O1xuXG5Qcm9taXNlLm9uUG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcbiAgICBwb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiA9IHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiID8gZm4gOiB1bmRlZmluZWQ7XG59O1xuXG5Qcm9taXNlLm9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCA9IGZ1bmN0aW9uIChmbikge1xuICAgIHVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQgPSB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiA/IGZuIDogdW5kZWZpbmVkO1xufTtcblxuUHJvbWlzZS5sb25nU3RhY2tUcmFjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGFzeW5jLmhhdmVJdGVtc1F1ZXVlZCgpICYmXG4gICAgICAgIGRlYnVnZ2luZyA9PT0gZmFsc2VcbiAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZW5hYmxlIGxvbmcgc3RhY2sgdHJhY2VzIGFmdGVyIHByb21pc2VzIGhhdmUgYmVlbiBjcmVhdGVkXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvRFQxcXlHXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgZGVidWdnaW5nID0gQ2FwdHVyZWRUcmFjZS5pc1N1cHBvcnRlZCgpO1xufTtcblxuUHJvbWlzZS5oYXNMb25nU3RhY2tUcmFjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlYnVnZ2luZyAmJiBDYXB0dXJlZFRyYWNlLmlzU3VwcG9ydGVkKCk7XG59O1xuXG5pZiAoIUNhcHR1cmVkVHJhY2UuaXNTdXBwb3J0ZWQoKSkge1xuICAgIFByb21pc2UubG9uZ1N0YWNrVHJhY2VzID0gZnVuY3Rpb24oKXt9O1xuICAgIGRlYnVnZ2luZyA9IGZhbHNlO1xufVxuXG5yZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlYnVnZ2luZztcbn07XG59O1xuXG59LHtcIi4vYXN5bmMuanNcIjoyLFwiLi9lcnJvcnMuanNcIjoxMyxcIi4vdXRpbC5qc1wiOjM4fV0sMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgaXNQcmltaXRpdmUgPSB1dGlsLmlzUHJpbWl0aXZlO1xudmFyIHdyYXBzUHJpbWl0aXZlUmVjZWl2ZXIgPSB1dGlsLndyYXBzUHJpbWl0aXZlUmVjZWl2ZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIHJldHVybmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xufTtcbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IHRoaXM7XG59O1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uICh2YWx1ZSwgYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuXG5cblByb21pc2UucHJvdG90eXBlW1wicmV0dXJuXCJdID1cblByb21pc2UucHJvdG90eXBlLnRoZW5SZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAod3JhcHNQcmltaXRpdmVSZWNlaXZlciAmJiBpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICB3cmFwcGVyKHZhbHVlLCAyKSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZFxuICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90aGVuKHJldHVybmVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdmFsdWUsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZVtcInRocm93XCJdID1cblByb21pc2UucHJvdG90eXBlLnRoZW5UaHJvdyA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICBpZiAod3JhcHNQcmltaXRpdmVSZWNlaXZlciAmJiBpc1ByaW1pdGl2ZShyZWFzb24pKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aGVuKFxuICAgICAgICAgICAgd3JhcHBlcihyZWFzb24sIDEpLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4odGhyb3dlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlYXNvbiwgdW5kZWZpbmVkKTtcbn07XG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgUHJvbWlzZVJlZHVjZSA9IFByb21pc2UucmVkdWNlO1xuXG5Qcm9taXNlLnByb3RvdHlwZS5lYWNoID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIFByb21pc2VSZWR1Y2UodGhpcywgZm4sIG51bGwsIElOVEVSTkFMKTtcbn07XG5cblByb21pc2UuZWFjaCA9IGZ1bmN0aW9uIChwcm9taXNlcywgZm4pIHtcbiAgICByZXR1cm4gUHJvbWlzZVJlZHVjZShwcm9taXNlcywgZm4sIG51bGwsIElOVEVSTkFMKTtcbn07XG59O1xuXG59LHt9XSwxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBlczUgPSBfZGVyZXFfKFwiLi9lczUuanNcIik7XG52YXIgT2JqZWN0ZnJlZXplID0gZXM1LmZyZWV6ZTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBpbmhlcml0cyA9IHV0aWwuaW5oZXJpdHM7XG52YXIgbm90RW51bWVyYWJsZVByb3AgPSB1dGlsLm5vdEVudW1lcmFibGVQcm9wO1xuXG5mdW5jdGlvbiBzdWJFcnJvcihuYW1lUHJvcGVydHksIGRlZmF1bHRNZXNzYWdlKSB7XG4gICAgZnVuY3Rpb24gU3ViRXJyb3IobWVzc2FnZSkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3ViRXJyb3IpKSByZXR1cm4gbmV3IFN1YkVycm9yKG1lc3NhZ2UpO1xuICAgICAgICBub3RFbnVtZXJhYmxlUHJvcCh0aGlzLCBcIm1lc3NhZ2VcIixcbiAgICAgICAgICAgIHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IGRlZmF1bHRNZXNzYWdlKTtcbiAgICAgICAgbm90RW51bWVyYWJsZVByb3AodGhpcywgXCJuYW1lXCIsIG5hbWVQcm9wZXJ0eSk7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaGVyaXRzKFN1YkVycm9yLCBFcnJvcik7XG4gICAgcmV0dXJuIFN1YkVycm9yO1xufVxuXG52YXIgX1R5cGVFcnJvciwgX1JhbmdlRXJyb3I7XG52YXIgV2FybmluZyA9IHN1YkVycm9yKFwiV2FybmluZ1wiLCBcIndhcm5pbmdcIik7XG52YXIgQ2FuY2VsbGF0aW9uRXJyb3IgPSBzdWJFcnJvcihcIkNhbmNlbGxhdGlvbkVycm9yXCIsIFwiY2FuY2VsbGF0aW9uIGVycm9yXCIpO1xudmFyIFRpbWVvdXRFcnJvciA9IHN1YkVycm9yKFwiVGltZW91dEVycm9yXCIsIFwidGltZW91dCBlcnJvclwiKTtcbnZhciBBZ2dyZWdhdGVFcnJvciA9IHN1YkVycm9yKFwiQWdncmVnYXRlRXJyb3JcIiwgXCJhZ2dyZWdhdGUgZXJyb3JcIik7XG50cnkge1xuICAgIF9UeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4gICAgX1JhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xufSBjYXRjaChlKSB7XG4gICAgX1R5cGVFcnJvciA9IHN1YkVycm9yKFwiVHlwZUVycm9yXCIsIFwidHlwZSBlcnJvclwiKTtcbiAgICBfUmFuZ2VFcnJvciA9IHN1YkVycm9yKFwiUmFuZ2VFcnJvclwiLCBcInJhbmdlIGVycm9yXCIpO1xufVxuXG52YXIgbWV0aG9kcyA9IChcImpvaW4gcG9wIHB1c2ggc2hpZnQgdW5zaGlmdCBzbGljZSBmaWx0ZXIgZm9yRWFjaCBzb21lIFwiICtcbiAgICBcImV2ZXJ5IG1hcCBpbmRleE9mIGxhc3RJbmRleE9mIHJlZHVjZSByZWR1Y2VSaWdodCBzb3J0IHJldmVyc2VcIikuc3BsaXQoXCIgXCIpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IG1ldGhvZHMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAodHlwZW9mIEFycmF5LnByb3RvdHlwZVttZXRob2RzW2ldXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIEFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZVttZXRob2RzW2ldXSA9IEFycmF5LnByb3RvdHlwZVttZXRob2RzW2ldXTtcbiAgICB9XG59XG5cbmVzNS5kZWZpbmVQcm9wZXJ0eShBZ2dyZWdhdGVFcnJvci5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcbiAgICB2YWx1ZTogMCxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbn0pO1xuQWdncmVnYXRlRXJyb3IucHJvdG90eXBlW1wiaXNPcGVyYXRpb25hbFwiXSA9IHRydWU7XG52YXIgbGV2ZWwgPSAwO1xuQWdncmVnYXRlRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluZGVudCA9IEFycmF5KGxldmVsICogNCArIDEpLmpvaW4oXCIgXCIpO1xuICAgIHZhciByZXQgPSBcIlxcblwiICsgaW5kZW50ICsgXCJBZ2dyZWdhdGVFcnJvciBvZjpcIiArIFwiXFxuXCI7XG4gICAgbGV2ZWwrKztcbiAgICBpbmRlbnQgPSBBcnJheShsZXZlbCAqIDQgKyAxKS5qb2luKFwiIFwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHN0ciA9IHRoaXNbaV0gPT09IHRoaXMgPyBcIltDaXJjdWxhciBBZ2dyZWdhdGVFcnJvcl1cIiA6IHRoaXNbaV0gKyBcIlwiO1xuICAgICAgICB2YXIgbGluZXMgPSBzdHIuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGluZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGxpbmVzW2pdID0gaW5kZW50ICsgbGluZXNbal07XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gbGluZXMuam9pbihcIlxcblwiKTtcbiAgICAgICAgcmV0ICs9IHN0ciArIFwiXFxuXCI7XG4gICAgfVxuICAgIGxldmVsLS07XG4gICAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIE9wZXJhdGlvbmFsRXJyb3IobWVzc2FnZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPcGVyYXRpb25hbEVycm9yKSlcbiAgICAgICAgcmV0dXJuIG5ldyBPcGVyYXRpb25hbEVycm9yKG1lc3NhZ2UpO1xuICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwibmFtZVwiLCBcIk9wZXJhdGlvbmFsRXJyb3JcIik7XG4gICAgbm90RW51bWVyYWJsZVByb3AodGhpcywgXCJtZXNzYWdlXCIsIG1lc3NhZ2UpO1xuICAgIHRoaXMuY2F1c2UgPSBtZXNzYWdlO1xuICAgIHRoaXNbXCJpc09wZXJhdGlvbmFsXCJdID0gdHJ1ZTtcblxuICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgbm90RW51bWVyYWJsZVByb3AodGhpcywgXCJtZXNzYWdlXCIsIG1lc3NhZ2UubWVzc2FnZSk7XG4gICAgICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwic3RhY2tcIiwgbWVzc2FnZS5zdGFjayk7XG4gICAgfSBlbHNlIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbn1cbmluaGVyaXRzKE9wZXJhdGlvbmFsRXJyb3IsIEVycm9yKTtcblxudmFyIGVycm9yVHlwZXMgPSBFcnJvcltcIl9fQmx1ZWJpcmRFcnJvclR5cGVzX19cIl07XG5pZiAoIWVycm9yVHlwZXMpIHtcbiAgICBlcnJvclR5cGVzID0gT2JqZWN0ZnJlZXplKHtcbiAgICAgICAgQ2FuY2VsbGF0aW9uRXJyb3I6IENhbmNlbGxhdGlvbkVycm9yLFxuICAgICAgICBUaW1lb3V0RXJyb3I6IFRpbWVvdXRFcnJvcixcbiAgICAgICAgT3BlcmF0aW9uYWxFcnJvcjogT3BlcmF0aW9uYWxFcnJvcixcbiAgICAgICAgUmVqZWN0aW9uRXJyb3I6IE9wZXJhdGlvbmFsRXJyb3IsXG4gICAgICAgIEFnZ3JlZ2F0ZUVycm9yOiBBZ2dyZWdhdGVFcnJvclxuICAgIH0pO1xuICAgIG5vdEVudW1lcmFibGVQcm9wKEVycm9yLCBcIl9fQmx1ZWJpcmRFcnJvclR5cGVzX19cIiwgZXJyb3JUeXBlcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEVycm9yOiBFcnJvcixcbiAgICBUeXBlRXJyb3I6IF9UeXBlRXJyb3IsXG4gICAgUmFuZ2VFcnJvcjogX1JhbmdlRXJyb3IsXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3I6IGVycm9yVHlwZXMuQ2FuY2VsbGF0aW9uRXJyb3IsXG4gICAgT3BlcmF0aW9uYWxFcnJvcjogZXJyb3JUeXBlcy5PcGVyYXRpb25hbEVycm9yLFxuICAgIFRpbWVvdXRFcnJvcjogZXJyb3JUeXBlcy5UaW1lb3V0RXJyb3IsXG4gICAgQWdncmVnYXRlRXJyb3I6IGVycm9yVHlwZXMuQWdncmVnYXRlRXJyb3IsXG4gICAgV2FybmluZzogV2FybmluZ1xufTtcblxufSx7XCIuL2VzNS5qc1wiOjE0LFwiLi91dGlsLmpzXCI6Mzh9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNFUzUgPSAoZnVuY3Rpb24oKXtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICByZXR1cm4gdGhpcyA9PT0gdW5kZWZpbmVkO1xufSkoKTtcblxuaWYgKGlzRVM1KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGZyZWV6ZTogT2JqZWN0LmZyZWV6ZSxcbiAgICAgICAgZGVmaW5lUHJvcGVydHk6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICAgICAgZ2V0RGVzY3JpcHRvcjogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICAgICAga2V5czogT2JqZWN0LmtleXMsXG4gICAgICAgIG5hbWVzOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgICAgICAgZ2V0UHJvdG90eXBlT2Y6IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgICAgaXNBcnJheTogQXJyYXkuaXNBcnJheSxcbiAgICAgICAgaXNFUzU6IGlzRVM1LFxuICAgICAgICBwcm9wZXJ0eUlzV3JpdGFibGU6IGZ1bmN0aW9uKG9iaiwgcHJvcCkge1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCk7XG4gICAgICAgICAgICByZXR1cm4gISEoIWRlc2NyaXB0b3IgfHwgZGVzY3JpcHRvci53cml0YWJsZSB8fCBkZXNjcmlwdG9yLnNldCk7XG4gICAgICAgIH1cbiAgICB9O1xufSBlbHNlIHtcbiAgICB2YXIgaGFzID0ge30uaGFzT3duUHJvcGVydHk7XG4gICAgdmFyIHN0ciA9IHt9LnRvU3RyaW5nO1xuICAgIHZhciBwcm90byA9IHt9LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAgIHZhciBPYmplY3RLZXlzID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbykge1xuICAgICAgICAgICAgaWYgKGhhcy5jYWxsKG8sIGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXQucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcblxuICAgIHZhciBPYmplY3RHZXREZXNjcmlwdG9yID0gZnVuY3Rpb24obywga2V5KSB7XG4gICAgICAgIHJldHVybiB7dmFsdWU6IG9ba2V5XX07XG4gICAgfTtcblxuICAgIHZhciBPYmplY3REZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvLCBrZXksIGRlc2MpIHtcbiAgICAgICAgb1trZXldID0gZGVzYy52YWx1ZTtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgfTtcblxuICAgIHZhciBPYmplY3RGcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcblxuICAgIHZhciBPYmplY3RHZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qob2JqKS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgQXJyYXlJc0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGlzQXJyYXk6IEFycmF5SXNBcnJheSxcbiAgICAgICAga2V5czogT2JqZWN0S2V5cyxcbiAgICAgICAgbmFtZXM6IE9iamVjdEtleXMsXG4gICAgICAgIGRlZmluZVByb3BlcnR5OiBPYmplY3REZWZpbmVQcm9wZXJ0eSxcbiAgICAgICAgZ2V0RGVzY3JpcHRvcjogT2JqZWN0R2V0RGVzY3JpcHRvcixcbiAgICAgICAgZnJlZXplOiBPYmplY3RGcmVlemUsXG4gICAgICAgIGdldFByb3RvdHlwZU9mOiBPYmplY3RHZXRQcm90b3R5cGVPZixcbiAgICAgICAgaXNFUzU6IGlzRVM1LFxuICAgICAgICBwcm9wZXJ0eUlzV3JpdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG59LHt9XSwxNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciBQcm9taXNlTWFwID0gUHJvbWlzZS5tYXA7XG5cblByb21pc2UucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChmbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBQcm9taXNlTWFwKHRoaXMsIGZuLCBvcHRpb25zLCBJTlRFUk5BTCk7XG59O1xuXG5Qcm9taXNlLmZpbHRlciA9IGZ1bmN0aW9uIChwcm9taXNlcywgZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUHJvbWlzZU1hcChwcm9taXNlcywgZm4sIG9wdGlvbnMsIElOVEVSTkFMKTtcbn07XG59O1xuXG59LHt9XSwxNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgTkVYVF9GSUxURVIsIHRyeUNvbnZlcnRUb1Byb21pc2UpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciB3cmFwc1ByaW1pdGl2ZVJlY2VpdmVyID0gdXRpbC53cmFwc1ByaW1pdGl2ZVJlY2VpdmVyO1xudmFyIGlzUHJpbWl0aXZlID0gdXRpbC5pc1ByaW1pdGl2ZTtcbnZhciB0aHJvd2VyID0gdXRpbC50aHJvd2VyO1xuXG5mdW5jdGlvbiByZXR1cm5UaGlzKCkge1xuICAgIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gdGhyb3dUaGlzKCkge1xuICAgIHRocm93IHRoaXM7XG59XG5mdW5jdGlvbiByZXR1cm4kKHIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG59XG5mdW5jdGlvbiB0aHJvdyQocikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhyb3cgcjtcbiAgICB9O1xufVxuZnVuY3Rpb24gcHJvbWlzZWRGaW5hbGx5KHJldCwgcmVhc29uT3JWYWx1ZSwgaXNGdWxmaWxsZWQpIHtcbiAgICB2YXIgdGhlbjtcbiAgICBpZiAod3JhcHNQcmltaXRpdmVSZWNlaXZlciAmJiBpc1ByaW1pdGl2ZShyZWFzb25PclZhbHVlKSkge1xuICAgICAgICB0aGVuID0gaXNGdWxmaWxsZWQgPyByZXR1cm4kKHJlYXNvbk9yVmFsdWUpIDogdGhyb3ckKHJlYXNvbk9yVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoZW4gPSBpc0Z1bGZpbGxlZCA/IHJldHVyblRoaXMgOiB0aHJvd1RoaXM7XG4gICAgfVxuICAgIHJldHVybiByZXQuX3RoZW4odGhlbiwgdGhyb3dlciwgdW5kZWZpbmVkLCByZWFzb25PclZhbHVlLCB1bmRlZmluZWQpO1xufVxuXG5mdW5jdGlvbiBmaW5hbGx5SGFuZGxlcihyZWFzb25PclZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG5cbiAgICB2YXIgcmV0ID0gcHJvbWlzZS5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgICAgID8gaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVG8pXG4gICAgICAgICAgICAgICAgICAgIDogaGFuZGxlcigpO1xuXG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJldCwgcHJvbWlzZSk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VkRmluYWxseShtYXliZVByb21pc2UsIHJlYXNvbk9yVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLmlzRnVsZmlsbGVkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UuaXNSZWplY3RlZCgpKSB7XG4gICAgICAgIE5FWFRfRklMVEVSLmUgPSByZWFzb25PclZhbHVlO1xuICAgICAgICByZXR1cm4gTkVYVF9GSUxURVI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlYXNvbk9yVmFsdWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0YXBIYW5kbGVyKHZhbHVlKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG5cbiAgICB2YXIgcmV0ID0gcHJvbWlzZS5faXNCb3VuZCgpXG4gICAgICAgICAgICAgICAgICAgID8gaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVG8sIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IGhhbmRsZXIodmFsdWUpO1xuXG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJldCwgcHJvbWlzZSk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VkRmluYWxseShtYXliZVByb21pc2UsIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cblByb21pc2UucHJvdG90eXBlLl9wYXNzVGhyb3VnaEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlciwgaXNGaW5hbGx5KSB7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0aGlzLnRoZW4oKTtcblxuICAgIHZhciBwcm9taXNlQW5kSGFuZGxlciA9IHtcbiAgICAgICAgcHJvbWlzZTogdGhpcyxcbiAgICAgICAgaGFuZGxlcjogaGFuZGxlclxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgICAgIGlzRmluYWxseSA/IGZpbmFsbHlIYW5kbGVyIDogdGFwSGFuZGxlcixcbiAgICAgICAgICAgIGlzRmluYWxseSA/IGZpbmFsbHlIYW5kbGVyIDogdW5kZWZpbmVkLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBwcm9taXNlQW5kSGFuZGxlciwgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmxhc3RseSA9XG5Qcm9taXNlLnByb3RvdHlwZVtcImZpbmFsbHlcIl0gPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLl9wYXNzVGhyb3VnaEhhbmRsZXIoaGFuZGxlciwgdHJ1ZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50YXAgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLl9wYXNzVGhyb3VnaEhhbmRsZXIoaGFuZGxlciwgZmFsc2UpO1xufTtcbn07XG5cbn0se1wiLi91dGlsLmpzXCI6Mzh9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpUmVqZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBJTlRFUk5BTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Q29udmVydFRvUHJvbWlzZSkge1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9ycy5qc1wiKTtcbnZhciBUeXBlRXJyb3IgPSBlcnJvcnMuVHlwZUVycm9yO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG52YXIgeWllbGRIYW5kbGVycyA9IFtdO1xuXG5mdW5jdGlvbiBwcm9taXNlRnJvbVlpZWxkSGFuZGxlcih2YWx1ZSwgeWllbGRIYW5kbGVycywgdHJhY2VQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHlpZWxkSGFuZGxlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdHJhY2VQYXJlbnQuX3B1c2hDb250ZXh0KCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaCh5aWVsZEhhbmRsZXJzW2ldKSh2YWx1ZSk7XG4gICAgICAgIHRyYWNlUGFyZW50Ll9wb3BDb250ZXh0KCk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICB0cmFjZVBhcmVudC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgICAgIHZhciByZXQgPSBQcm9taXNlLnJlamVjdChlcnJvck9iai5lKTtcbiAgICAgICAgICAgIHRyYWNlUGFyZW50Ll9wb3BDb250ZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJlc3VsdCwgdHJhY2VQYXJlbnQpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIFByb21pc2VTcGF3bihnZW5lcmF0b3JGdW5jdGlvbiwgcmVjZWl2ZXIsIHlpZWxkSGFuZGxlciwgc3RhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcHJvbWlzZS5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB0aGlzLl9zdGFjayA9IHN0YWNrO1xuICAgIHRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yRnVuY3Rpb247XG4gICAgdGhpcy5fcmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICB0aGlzLl9nZW5lcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5feWllbGRIYW5kbGVycyA9IHR5cGVvZiB5aWVsZEhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IFt5aWVsZEhhbmRsZXJdLmNvbmNhdCh5aWVsZEhhbmRsZXJzKVxuICAgICAgICA6IHlpZWxkSGFuZGxlcnM7XG59XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUucHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX3J1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9nZW5lcmF0b3IgPSB0aGlzLl9nZW5lcmF0b3JGdW5jdGlvbi5jYWxsKHRoaXMuX3JlY2VpdmVyKTtcbiAgICB0aGlzLl9yZWNlaXZlciA9XG4gICAgICAgIHRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX25leHQodW5kZWZpbmVkKTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX2NvbnRpbnVlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlLl9yZWplY3RDYWxsYmFjayhyZXN1bHQuZSwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICBpZiAocmVzdWx0LmRvbmUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZSh2YWx1ZSwgdGhpcy5fcHJvbWlzZSk7XG4gICAgICAgIGlmICghKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPVxuICAgICAgICAgICAgICAgIHByb21pc2VGcm9tWWllbGRIYW5kbGVyKG1heWJlUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl95aWVsZEhhbmRsZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb21pc2UpO1xuICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93KFxuICAgICAgICAgICAgICAgICAgICBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBIHZhbHVlICVzIHdhcyB5aWVsZGVkIHRoYXQgY291bGQgbm90IGJlIHRyZWF0ZWQgYXMgYSBwcm9taXNlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvNFk0cERrXFx1MDAwYVxcdTAwMGFcIi5yZXBsYWNlKFwiJXNcIiwgdmFsdWUpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRnJvbSBjb3JvdXRpbmU6XFx1MDAwYVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrLnNwbGl0KFwiXFxuXCIpLnNsaWNlKDEsIC03KS5qb2luKFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXliZVByb21pc2UuX3RoZW4oXG4gICAgICAgICAgICB0aGlzLl9uZXh0LFxuICAgICAgICAgICAgdGhpcy5fdGhyb3csXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICk7XG4gICAgfVxufTtcblxuUHJvbWlzZVNwYXduLnByb3RvdHlwZS5fdGhyb3cgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5fcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZShyZWFzb24pO1xuICAgIHRoaXMuX3Byb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoKHRoaXMuX2dlbmVyYXRvcltcInRocm93XCJdKVxuICAgICAgICAuY2FsbCh0aGlzLl9nZW5lcmF0b3IsIHJlYXNvbik7XG4gICAgdGhpcy5fcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuICAgIHRoaXMuX2NvbnRpbnVlKHJlc3VsdCk7XG59O1xuXG5Qcm9taXNlU3Bhd24ucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5fcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2godGhpcy5fZ2VuZXJhdG9yLm5leHQpLmNhbGwodGhpcy5fZ2VuZXJhdG9yLCB2YWx1ZSk7XG4gICAgdGhpcy5fcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuICAgIHRoaXMuX2NvbnRpbnVlKHJlc3VsdCk7XG59O1xuXG5Qcm9taXNlLmNvcm91dGluZSA9IGZ1bmN0aW9uIChnZW5lcmF0b3JGdW5jdGlvbiwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZ2VuZXJhdG9yRnVuY3Rpb24gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZ2VuZXJhdG9yRnVuY3Rpb24gbXVzdCBiZSBhIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvNlZxaG0wXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgdmFyIHlpZWxkSGFuZGxlciA9IE9iamVjdChvcHRpb25zKS55aWVsZEhhbmRsZXI7XG4gICAgdmFyIFByb21pc2VTcGF3biQgPSBQcm9taXNlU3Bhd247XG4gICAgdmFyIHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdlbmVyYXRvciA9IGdlbmVyYXRvckZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBzcGF3biA9IG5ldyBQcm9taXNlU3Bhd24kKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB5aWVsZEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrKTtcbiAgICAgICAgc3Bhd24uX2dlbmVyYXRvciA9IGdlbmVyYXRvcjtcbiAgICAgICAgc3Bhd24uX25leHQodW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHNwYXduLnByb21pc2UoKTtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5jb3JvdXRpbmUuYWRkWWllbGRIYW5kbGVyID0gZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIHlpZWxkSGFuZGxlcnMucHVzaChmbik7XG59O1xuXG5Qcm9taXNlLnNwYXduID0gZnVuY3Rpb24gKGdlbmVyYXRvckZ1bmN0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBnZW5lcmF0b3JGdW5jdGlvbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJnZW5lcmF0b3JGdW5jdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC82VnFobTBcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB2YXIgc3Bhd24gPSBuZXcgUHJvbWlzZVNwYXduKGdlbmVyYXRvckZ1bmN0aW9uLCB0aGlzKTtcbiAgICB2YXIgcmV0ID0gc3Bhd24ucHJvbWlzZSgpO1xuICAgIHNwYXduLl9ydW4oUHJvbWlzZS5zcGF3bik7XG4gICAgcmV0dXJuIHJldDtcbn07XG59O1xuXG59LHtcIi4vZXJyb3JzLmpzXCI6MTMsXCIuL3V0aWwuanNcIjozOH1dLDE4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPVxuZnVuY3Rpb24oUHJvbWlzZSwgUHJvbWlzZUFycmF5LCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBJTlRFUk5BTCkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGNhbkV2YWx1YXRlID0gdXRpbC5jYW5FdmFsdWF0ZTtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIHJlamVjdDtcblxuaWYgKCF0cnVlKSB7XG5pZiAoY2FuRXZhbHVhdGUpIHtcbiAgICB2YXIgdGhlbkNhbGxiYWNrID0gZnVuY3Rpb24oaSkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwidmFsdWVcIiwgXCJob2xkZXJcIiwgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAndXNlIHN0cmljdCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBob2xkZXIucEluZGV4ID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBob2xkZXIuY2hlY2tGdWxmaWxsbWVudCh0aGlzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBcIi5yZXBsYWNlKC9JbmRleC9nLCBpKSk7XG4gICAgfTtcblxuICAgIHZhciBjYWxsZXIgPSBmdW5jdGlvbihjb3VudCkge1xuICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGNvdW50OyArK2kpIHZhbHVlcy5wdXNoKFwiaG9sZGVyLnBcIiArIGkpO1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiaG9sZGVyXCIsIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgJ3VzZSBzdHJpY3QnOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gaG9sZGVyLmZuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHZhbHVlcyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgXCIucmVwbGFjZSgvdmFsdWVzL2csIHZhbHVlcy5qb2luKFwiLCBcIikpKTtcbiAgICB9O1xuICAgIHZhciB0aGVuQ2FsbGJhY2tzID0gW107XG4gICAgdmFyIGNhbGxlcnMgPSBbdW5kZWZpbmVkXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSA1OyArK2kpIHtcbiAgICAgICAgdGhlbkNhbGxiYWNrcy5wdXNoKHRoZW5DYWxsYmFjayhpKSk7XG4gICAgICAgIGNhbGxlcnMucHVzaChjYWxsZXIoaSkpO1xuICAgIH1cblxuICAgIHZhciBIb2xkZXIgPSBmdW5jdGlvbih0b3RhbCwgZm4pIHtcbiAgICAgICAgdGhpcy5wMSA9IHRoaXMucDIgPSB0aGlzLnAzID0gdGhpcy5wNCA9IHRoaXMucDUgPSBudWxsO1xuICAgICAgICB0aGlzLmZuID0gZm47XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgdGhpcy5ub3cgPSAwO1xuICAgIH07XG5cbiAgICBIb2xkZXIucHJvdG90eXBlLmNhbGxlcnMgPSBjYWxsZXJzO1xuICAgIEhvbGRlci5wcm90b3R5cGUuY2hlY2tGdWxmaWxsbWVudCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgdmFyIG5vdyA9IHRoaXMubm93O1xuICAgICAgICBub3crKztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy50b3RhbDtcbiAgICAgICAgaWYgKG5vdyA+PSB0b3RhbCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLmNhbGxlcnNbdG90YWxdO1xuICAgICAgICAgICAgcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgICAgIHZhciByZXQgPSB0cnlDYXRjaChoYW5kbGVyKSh0aGlzKTtcbiAgICAgICAgICAgIHByb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICAgICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2socmV0LmUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHJldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5vdyA9IG5vdztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICB0aGlzLl9yZWplY3QocmVhc29uKTtcbiAgICB9O1xufVxufVxuXG5Qcm9taXNlLmpvaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3QgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB2YXIgZm47XG4gICAgaWYgKGxhc3QgPiAwICYmIHR5cGVvZiBhcmd1bWVudHNbbGFzdF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBmbiA9IGFyZ3VtZW50c1tsYXN0XTtcbiAgICAgICAgaWYgKCF0cnVlKSB7XG4gICAgICAgICAgICBpZiAobGFzdCA8IDYgJiYgY2FuRXZhbHVhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgICAgICAgICAgICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICB2YXIgaG9sZGVyID0gbmV3IEhvbGRlcihsYXN0LCBmbik7XG4gICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoZW5DYWxsYmFja3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UoYXJndW1lbnRzW2ldLCByZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UuX2lzUGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl90aGVuKGNhbGxiYWNrc1tpXSwgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsIHJldCwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF5YmVQcm9taXNlLl9pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwocmV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fdmFsdWUoKSwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0Ll9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChyZXQsIG1heWJlUHJvbWlzZSwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciAkX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7dmFyIGFyZ3MgPSBuZXcgQXJyYXkoJF9sZW4pOyBmb3IodmFyICRfaSA9IDA7ICRfaSA8ICRfbGVuOyArKyRfaSkge2FyZ3NbJF9pXSA9IGFyZ3VtZW50c1skX2ldO31cbiAgICBpZiAoZm4pIGFyZ3MucG9wKCk7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlQXJyYXkoYXJncykucHJvbWlzZSgpO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gcmV0LnNwcmVhZChmbikgOiByZXQ7XG59O1xuXG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2VBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpUmVqZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnlDb252ZXJ0VG9Qcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBJTlRFUk5BTCkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG52YXIgUEVORElORyA9IHt9O1xudmFyIEVNUFRZX0FSUkFZID0gW107XG5cbmZ1bmN0aW9uIE1hcHBpbmdQcm9taXNlQXJyYXkocHJvbWlzZXMsIGZuLCBsaW1pdCwgX2ZpbHRlcikge1xuICAgIHRoaXMuY29uc3RydWN0b3IkKHByb21pc2VzKTtcbiAgICB0aGlzLl9wcm9taXNlLl9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgIHRoaXMuX2NhbGxiYWNrID0gZm47XG4gICAgdGhpcy5fcHJlc2VydmVkVmFsdWVzID0gX2ZpbHRlciA9PT0gSU5URVJOQUxcbiAgICAgICAgPyBuZXcgQXJyYXkodGhpcy5sZW5ndGgoKSlcbiAgICAgICAgOiBudWxsO1xuICAgIHRoaXMuX2xpbWl0ID0gbGltaXQ7XG4gICAgdGhpcy5faW5GbGlnaHQgPSAwO1xuICAgIHRoaXMuX3F1ZXVlID0gbGltaXQgPj0gMSA/IFtdIDogRU1QVFlfQVJSQVk7XG4gICAgdGhpcy5faW5pdCQodW5kZWZpbmVkLCAtMik7XG59XG51dGlsLmluaGVyaXRzKE1hcHBpbmdQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKCkge307XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLl92YWx1ZXM7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG4gICAgdmFyIHByZXNlcnZlZFZhbHVlcyA9IHRoaXMuX3ByZXNlcnZlZFZhbHVlcztcbiAgICB2YXIgbGltaXQgPSB0aGlzLl9saW1pdDtcbiAgICBpZiAodmFsdWVzW2luZGV4XSA9PT0gUEVORElORykge1xuICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIGlmIChsaW1pdCA+PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9pbkZsaWdodC0tO1xuICAgICAgICAgICAgdGhpcy5fZHJhaW5RdWV1ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxpbWl0ID49IDEgJiYgdGhpcy5faW5GbGlnaHQgPj0gbGltaXQpIHtcbiAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVzZXJ2ZWRWYWx1ZXMgIT09IG51bGwpIHByZXNlcnZlZFZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcblxuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLl9jYWxsYmFjaztcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gdGhpcy5fcHJvbWlzZS5fYm91bmRUbztcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHJldCA9IHRyeUNhdGNoKGNhbGxiYWNrKS5jYWxsKHJlY2VpdmVyLCB2YWx1ZSwgaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIHRoaXMuX3Byb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICAgICAgaWYgKHJldCA9PT0gZXJyb3JPYmopIHJldHVybiB0aGlzLl9yZWplY3QocmV0LmUpO1xuXG4gICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJldCwgdGhpcy5fcHJvbWlzZSk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZS5faXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAobGltaXQgPj0gMSkgdGhpcy5faW5GbGlnaHQrKztcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gUEVORElORztcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlLl9wcm94eVByb21pc2VBcnJheSh0aGlzLCBpbmRleCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1heWJlUHJvbWlzZS5faXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldCA9IG1heWJlUHJvbWlzZS5fdmFsdWUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlamVjdChtYXliZVByb21pc2UuX3JlYXNvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaW5kZXhdID0gcmV0O1xuICAgIH1cbiAgICB2YXIgdG90YWxSZXNvbHZlZCA9ICsrdGhpcy5fdG90YWxSZXNvbHZlZDtcbiAgICBpZiAodG90YWxSZXNvbHZlZCA+PSBsZW5ndGgpIHtcbiAgICAgICAgaWYgKHByZXNlcnZlZFZhbHVlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fZmlsdGVyKHZhbHVlcywgcHJlc2VydmVkVmFsdWVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgfVxufTtcblxuTWFwcGluZ1Byb21pc2VBcnJheS5wcm90b3R5cGUuX2RyYWluUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5fcXVldWU7XG4gICAgdmFyIGxpbWl0ID0gdGhpcy5fbGltaXQ7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuX3ZhbHVlcztcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCAmJiB0aGlzLl9pbkZsaWdodCA8IGxpbWl0KSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHJldHVybjtcbiAgICAgICAgdmFyIGluZGV4ID0gcXVldWUucG9wKCk7XG4gICAgICAgIHRoaXMuX3Byb21pc2VGdWxmaWxsZWQodmFsdWVzW2luZGV4XSwgaW5kZXgpO1xuICAgIH1cbn07XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLl9maWx0ZXIgPSBmdW5jdGlvbiAoYm9vbGVhbnMsIHZhbHVlcykge1xuICAgIHZhciBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHZhciByZXQgPSBuZXcgQXJyYXkobGVuKTtcbiAgICB2YXIgaiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBpZiAoYm9vbGVhbnNbaV0pIHJldFtqKytdID0gdmFsdWVzW2ldO1xuICAgIH1cbiAgICByZXQubGVuZ3RoID0gajtcbiAgICB0aGlzLl9yZXNvbHZlKHJldCk7XG59O1xuXG5NYXBwaW5nUHJvbWlzZUFycmF5LnByb3RvdHlwZS5wcmVzZXJ2ZWRWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXNlcnZlZFZhbHVlcztcbn07XG5cbmZ1bmN0aW9uIG1hcChwcm9taXNlcywgZm4sIG9wdGlvbnMsIF9maWx0ZXIpIHtcbiAgICB2YXIgbGltaXQgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zICE9PSBudWxsXG4gICAgICAgID8gb3B0aW9ucy5jb25jdXJyZW5jeVxuICAgICAgICA6IDA7XG4gICAgbGltaXQgPSB0eXBlb2YgbGltaXQgPT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgaXNGaW5pdGUobGltaXQpICYmIGxpbWl0ID49IDEgPyBsaW1pdCA6IDA7XG4gICAgcmV0dXJuIG5ldyBNYXBwaW5nUHJvbWlzZUFycmF5KHByb21pc2VzLCBmbiwgbGltaXQsIF9maWx0ZXIpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBhcGlSZWplY3Rpb24oXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuXG4gICAgcmV0dXJuIG1hcCh0aGlzLCBmbiwgb3B0aW9ucywgbnVsbCkucHJvbWlzZSgpO1xufTtcblxuUHJvbWlzZS5tYXAgPSBmdW5jdGlvbiAocHJvbWlzZXMsIGZuLCBvcHRpb25zLCBfZmlsdGVyKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZm4gbXVzdCBiZSBhIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvOTE2bEpKXFx1MDAwYVwiKTtcbiAgICByZXR1cm4gbWFwKHByb21pc2VzLCBmbiwgb3B0aW9ucywgX2ZpbHRlcikucHJvbWlzZSgpO1xufTtcblxuXG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9XG5mdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xuXG5Qcm9taXNlLm1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgUHJvbWlzZS5UeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgICAgICByZXQuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgICAgIHJldC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHZhbHVlID0gdHJ5Q2F0Y2goZm4pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldC5fcG9wQ29udGV4dCgpO1xuICAgICAgICByZXQuX3Jlc29sdmVGcm9tU3luY1ZhbHVlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5hdHRlbXB0ID0gUHJvbWlzZVtcInRyeVwiXSA9IGZ1bmN0aW9uIChmbiwgYXJncywgY3R4KSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICByZXQuX3B1c2hDb250ZXh0KCk7XG4gICAgdmFyIHZhbHVlID0gdXRpbC5pc0FycmF5KGFyZ3MpXG4gICAgICAgID8gdHJ5Q2F0Y2goZm4pLmFwcGx5KGN0eCwgYXJncylcbiAgICAgICAgOiB0cnlDYXRjaChmbikuY2FsbChjdHgsIGFyZ3MpO1xuICAgIHJldC5fcG9wQ29udGV4dCgpO1xuICAgIHJldC5fcmVzb2x2ZUZyb21TeW5jVmFsdWUodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVzb2x2ZUZyb21TeW5jVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHV0aWwuZXJyb3JPYmopIHtcbiAgICAgICAgdGhpcy5fcmVqZWN0Q2FsbGJhY2sodmFsdWUuZSwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxufTtcbn07XG5cbn0se1wiLi91dGlsLmpzXCI6Mzh9XSwyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIGFzeW5jID0gX2RlcmVxXyhcIi4vYXN5bmMuanNcIik7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcblxuZnVuY3Rpb24gc3ByZWFkQWRhcHRlcih2YWwsIG5vZGViYWNrKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIGlmICghdXRpbC5pc0FycmF5KHZhbCkpIHJldHVybiBzdWNjZXNzQWRhcHRlci5jYWxsKHByb21pc2UsIHZhbCwgbm9kZWJhY2spO1xuICAgIHZhciByZXQgPSB0cnlDYXRjaChub2RlYmFjaykuYXBwbHkocHJvbWlzZS5fYm91bmRUbywgW251bGxdLmNvbmNhdCh2YWwpKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKHJldC5lKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN1Y2Nlc3NBZGFwdGVyKHZhbCwgbm9kZWJhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdmFyIHJlY2VpdmVyID0gcHJvbWlzZS5fYm91bmRUbztcbiAgICB2YXIgcmV0ID0gdmFsID09PSB1bmRlZmluZWRcbiAgICAgICAgPyB0cnlDYXRjaChub2RlYmFjaykuY2FsbChyZWNlaXZlciwgbnVsbClcbiAgICAgICAgOiB0cnlDYXRjaChub2RlYmFjaykuY2FsbChyZWNlaXZlciwgbnVsbCwgdmFsKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKHJldC5lKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlcnJvckFkYXB0ZXIocmVhc29uLCBub2RlYmFjaykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gcHJvbWlzZS5fdGFyZ2V0KCk7XG4gICAgICAgIHZhciBuZXdSZWFzb24gPSB0YXJnZXQuX2dldENhcnJpZWRTdGFja1RyYWNlKCk7XG4gICAgICAgIG5ld1JlYXNvbi5jYXVzZSA9IHJlYXNvbjtcbiAgICAgICAgcmVhc29uID0gbmV3UmVhc29uO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2gobm9kZWJhY2spLmNhbGwocHJvbWlzZS5fYm91bmRUbywgcmVhc29uKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKHJldC5lKTtcbiAgICB9XG59XG5cblByb21pc2UucHJvdG90eXBlLm5vZGVpZnkgPSBmdW5jdGlvbiAobm9kZWJhY2ssIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG5vZGViYWNrID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB2YXIgYWRhcHRlciA9IHN1Y2Nlc3NBZGFwdGVyO1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIE9iamVjdChvcHRpb25zKS5zcHJlYWQpIHtcbiAgICAgICAgICAgIGFkYXB0ZXIgPSBzcHJlYWRBZGFwdGVyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICBhZGFwdGVyLFxuICAgICAgICAgICAgZXJyb3JBZGFwdGVyLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5vZGViYWNrXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcbn07XG5cbn0se1wiLi9hc3luYy5qc1wiOjIsXCIuL3V0aWwuanNcIjozOH1dLDIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXkpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBhc3luYyA9IF9kZXJlcV8oXCIuL2FzeW5jLmpzXCIpO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG5cblByb21pc2UucHJvdG90eXBlLnByb2dyZXNzZWQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLl90aGVuKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoYW5kbGVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHJvZ3Jlc3MgPSBmdW5jdGlvbiAocHJvZ3Jlc3NWYWx1ZSkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fdGFyZ2V0KCkuX3Byb2dyZXNzVW5jaGVja2VkKHByb2dyZXNzVmFsdWUpO1xuXG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHJvZ3Jlc3NIYW5kbGVyQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IDBcbiAgICAgICAgPyB0aGlzLl9wcm9ncmVzc0hhbmRsZXIwXG4gICAgICAgIDogdGhpc1soaW5kZXggPDwgMikgKyBpbmRleCAtIDUgKyAyXTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9kb1Byb2dyZXNzV2l0aCA9IGZ1bmN0aW9uIChwcm9ncmVzc2lvbikge1xuICAgIHZhciBwcm9ncmVzc1ZhbHVlID0gcHJvZ3Jlc3Npb24udmFsdWU7XG4gICAgdmFyIGhhbmRsZXIgPSBwcm9ncmVzc2lvbi5oYW5kbGVyO1xuICAgIHZhciBwcm9taXNlID0gcHJvZ3Jlc3Npb24ucHJvbWlzZTtcbiAgICB2YXIgcmVjZWl2ZXIgPSBwcm9ncmVzc2lvbi5yZWNlaXZlcjtcblxuICAgIHZhciByZXQgPSB0cnlDYXRjaChoYW5kbGVyKS5jYWxsKHJlY2VpdmVyLCBwcm9ncmVzc1ZhbHVlKTtcbiAgICBpZiAocmV0ID09PSBlcnJvck9iaikge1xuICAgICAgICBpZiAocmV0LmUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgcmV0LmUubmFtZSAhPT0gXCJTdG9wUHJvZ3Jlc3NQcm9wYWdhdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgdHJhY2UgPSB1dGlsLmNhbkF0dGFjaFRyYWNlKHJldC5lKVxuICAgICAgICAgICAgICAgID8gcmV0LmUgOiBuZXcgRXJyb3IodXRpbC50b1N0cmluZyhyZXQuZSkpO1xuICAgICAgICAgICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZSh0cmFjZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9wcm9ncmVzcyhyZXQuZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJldCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0Ll90aGVuKHByb21pc2UuX3Byb2dyZXNzLCBudWxsLCBudWxsLCBwcm9taXNlLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2UuX3Byb2dyZXNzKHJldCk7XG4gICAgfVxufTtcblxuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHJvZ3Jlc3NVbmNoZWNrZWQgPSBmdW5jdGlvbiAocHJvZ3Jlc3NWYWx1ZSkge1xuICAgIHZhciBsZW4gPSB0aGlzLl9sZW5ndGgoKTtcbiAgICB2YXIgcHJvZ3Jlc3MgPSB0aGlzLl9wcm9ncmVzcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gdGhpcy5fcHJvZ3Jlc3NIYW5kbGVyQXQoaSk7XG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZUF0KGkpO1xuICAgICAgICBpZiAoIShwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3JlY2VpdmVyQXQoaSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbChyZWNlaXZlciwgcHJvZ3Jlc3NWYWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgUHJvbWlzZUFycmF5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICFyZWNlaXZlci5faXNSZXNvbHZlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIuX3Byb21pc2VQcm9ncmVzc2VkKHByb2dyZXNzVmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgYXN5bmMuaW52b2tlKHRoaXMuX2RvUHJvZ3Jlc3NXaXRoLCB0aGlzLCB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgICAgICAgICBwcm9taXNlOiBwcm9taXNlLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLl9yZWNlaXZlckF0KGkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9ncmVzc1ZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFzeW5jLmludm9rZShwcm9ncmVzcywgcHJvbWlzZSwgcHJvZ3Jlc3NWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xufTtcblxufSx7XCIuL2FzeW5jLmpzXCI6MixcIi4vdXRpbC5qc1wiOjM4fV0sMjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xudmFyIG1ha2VTZWxmUmVzb2x1dGlvbkVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiY2lyY3VsYXIgcHJvbWlzZSByZXNvbHV0aW9uIGNoYWluXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvTGhGcG8wXFx1MDAwYVwiKTtcbn07XG52YXIgcmVmbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbih0aGlzLl90YXJnZXQoKSk7XG59O1xudmFyIGFwaVJlamVjdGlvbiA9IGZ1bmN0aW9uKG1zZykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKG1zZykpO1xufTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBhc3luYyA9IF9kZXJlcV8oXCIuL2FzeW5jLmpzXCIpO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9ycy5qc1wiKTtcbnZhciBUeXBlRXJyb3IgPSBQcm9taXNlLlR5cGVFcnJvciA9IGVycm9ycy5UeXBlRXJyb3I7XG5Qcm9taXNlLlJhbmdlRXJyb3IgPSBlcnJvcnMuUmFuZ2VFcnJvcjtcblByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3IgPSBlcnJvcnMuQ2FuY2VsbGF0aW9uRXJyb3I7XG5Qcm9taXNlLlRpbWVvdXRFcnJvciA9IGVycm9ycy5UaW1lb3V0RXJyb3I7XG5Qcm9taXNlLk9wZXJhdGlvbmFsRXJyb3IgPSBlcnJvcnMuT3BlcmF0aW9uYWxFcnJvcjtcblByb21pc2UuUmVqZWN0aW9uRXJyb3IgPSBlcnJvcnMuT3BlcmF0aW9uYWxFcnJvcjtcblByb21pc2UuQWdncmVnYXRlRXJyb3IgPSBlcnJvcnMuQWdncmVnYXRlRXJyb3I7XG52YXIgSU5URVJOQUwgPSBmdW5jdGlvbigpe307XG52YXIgQVBQTFkgPSB7fTtcbnZhciBORVhUX0ZJTFRFUiA9IHtlOiBudWxsfTtcbnZhciB0cnlDb252ZXJ0VG9Qcm9taXNlID0gX2RlcmVxXyhcIi4vdGhlbmFibGVzLmpzXCIpKFByb21pc2UsIElOVEVSTkFMKTtcbnZhciBQcm9taXNlQXJyYXkgPVxuICAgIF9kZXJlcV8oXCIuL3Byb21pc2VfYXJyYXkuanNcIikoUHJvbWlzZSwgSU5URVJOQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnlDb252ZXJ0VG9Qcm9taXNlLCBhcGlSZWplY3Rpb24pO1xudmFyIENhcHR1cmVkVHJhY2UgPSBfZGVyZXFfKFwiLi9jYXB0dXJlZF90cmFjZS5qc1wiKSgpO1xudmFyIGlzRGVidWdnaW5nID0gX2RlcmVxXyhcIi4vZGVidWdnYWJpbGl0eS5qc1wiKShQcm9taXNlLCBDYXB0dXJlZFRyYWNlKTtcbiAvKmpzaGludCB1bnVzZWQ6ZmFsc2UqL1xudmFyIGNyZWF0ZUNvbnRleHQgPVxuICAgIF9kZXJlcV8oXCIuL2NvbnRleHQuanNcIikoUHJvbWlzZSwgQ2FwdHVyZWRUcmFjZSwgaXNEZWJ1Z2dpbmcpO1xudmFyIENhdGNoRmlsdGVyID0gX2RlcmVxXyhcIi4vY2F0Y2hfZmlsdGVyLmpzXCIpKE5FWFRfRklMVEVSKTtcbnZhciBQcm9taXNlUmVzb2x2ZXIgPSBfZGVyZXFfKFwiLi9wcm9taXNlX3Jlc29sdmVyLmpzXCIpO1xudmFyIG5vZGViYWNrRm9yUHJvbWlzZSA9IFByb21pc2VSZXNvbHZlci5fbm9kZWJhY2tGb3JQcm9taXNlO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gICAgaWYgKHR5cGVvZiByZXNvbHZlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJ0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvciByZXF1aXJlcyBhIHJlc29sdmVyIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvRUMyMlluXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgIT09IFByb21pc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBpbnZva2VkIGRpcmVjdGx5XFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvS3NJbGdlXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgdGhpcy5fYml0RmllbGQgPSAwO1xuICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcHJvZ3Jlc3NIYW5kbGVyMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wcm9taXNlMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZWNlaXZlcjAgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGlmIChyZXNvbHZlciAhPT0gSU5URVJOQUwpIHRoaXMuX3Jlc29sdmVGcm9tUmVzb2x2ZXIocmVzb2x2ZXIpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IFByb21pc2VdXCI7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5jYXVnaHQgPSBQcm9taXNlLnByb3RvdHlwZVtcImNhdGNoXCJdID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGxlbiA+IDEpIHtcbiAgICAgICAgdmFyIGNhdGNoSW5zdGFuY2VzID0gbmV3IEFycmF5KGxlbiAtIDEpLFxuICAgICAgICAgICAgaiA9IDAsIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW4gLSAxOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjYXRjaEluc3RhbmNlc1tqKytdID0gaXRlbTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgICAgICAgICAgICBuZXcgVHlwZUVycm9yKFwiQ2F0Y2ggZmlsdGVyIG11c3QgaW5oZXJpdCBmcm9tIEVycm9yIG9yIGJlIGEgc2ltcGxlIHByZWRpY2F0ZSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL284NG82OFxcdTAwMGFcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoSW5zdGFuY2VzLmxlbmd0aCA9IGo7XG4gICAgICAgIGZuID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB2YXIgY2F0Y2hGaWx0ZXIgPSBuZXcgQ2F0Y2hGaWx0ZXIoY2F0Y2hJbnN0YW5jZXMsIGZuLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW4odW5kZWZpbmVkLCBjYXRjaEZpbHRlci5kb0ZpbHRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2F0Y2hGaWx0ZXIsIHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90aGVuKHVuZGVmaW5lZCwgZm4sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUucmVmbGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGhlbihyZWZsZWN0LCByZWZsZWN0LCB1bmRlZmluZWQsIHRoaXMsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MpIHtcbiAgICBpZiAoaXNEZWJ1Z2dpbmcoKSAmJiBhcmd1bWVudHMubGVuZ3RoID4gMCAmJlxuICAgICAgICB0eXBlb2YgZGlkRnVsZmlsbCAhPT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHR5cGVvZiBkaWRSZWplY3QgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB2YXIgbXNnID0gXCIudGhlbigpIG9ubHkgYWNjZXB0cyBmdW5jdGlvbnMgYnV0IHdhcyBwYXNzZWQ6IFwiICtcbiAgICAgICAgICAgICAgICB1dGlsLmNsYXNzU3RyaW5nKGRpZEZ1bGZpbGwpO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIG1zZyArPSBcIiwgXCIgKyB1dGlsLmNsYXNzU3RyaW5nKGRpZFJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd2Fybihtc2cpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIGRpZFByb2dyZXNzLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5kb25lID0gZnVuY3Rpb24gKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgZGlkUHJvZ3Jlc3MpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3RoZW4oZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcyxcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgIHByb21pc2UuX3NldElzRmluYWwoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNwcmVhZCA9IGZ1bmN0aW9uIChkaWRGdWxmaWxsLCBkaWRSZWplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5hbGwoKS5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIHVuZGVmaW5lZCwgQVBQTFksIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5pc0NhbmNlbGxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhdGhpcy5pc1Jlc29sdmVkKCkgJiZcbiAgICAgICAgdGhpcy5fY2FuY2VsbGFibGUoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmV0ID0ge1xuICAgICAgICBpc0Z1bGZpbGxlZDogZmFsc2UsXG4gICAgICAgIGlzUmVqZWN0ZWQ6IGZhbHNlLFxuICAgICAgICBmdWxmaWxsbWVudFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIHJlamVjdGlvblJlYXNvbjogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBpZiAodGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgIHJldC5mdWxmaWxsbWVudFZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICByZXQuaXNGdWxmaWxsZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc1JlamVjdGVkKCkpIHtcbiAgICAgICAgcmV0LnJlamVjdGlvblJlYXNvbiA9IHRoaXMucmVhc29uKCk7XG4gICAgICAgIHJldC5pc1JlamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2VBcnJheSh0aGlzKS5wcm9taXNlKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiB0aGlzLmNhdWdodCh1dGlsLm9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uLCBmbik7XG59O1xuXG5Qcm9taXNlLmlzID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB2YWwgaW5zdGFuY2VvZiBQcm9taXNlO1xufTtcblxuUHJvbWlzZS5mcm9tTm9kZSA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2goZm4pKG5vZGViYWNrRm9yUHJvbWlzZShyZXQpKTtcbiAgICBpZiAocmVzdWx0ID09PSBlcnJvck9iaikge1xuICAgICAgICByZXQuX3JlamVjdENhbGxiYWNrKHJlc3VsdC5lLCB0cnVlLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UuYWxsID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlQXJyYXkocHJvbWlzZXMpLnByb21pc2UoKTtcbn07XG5cblByb21pc2UuZGVmZXIgPSBQcm9taXNlLnBlbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlUmVzb2x2ZXIocHJvbWlzZSk7XG59O1xuXG5Qcm9taXNlLmNhc3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHJldCA9IHRyeUNvbnZlcnRUb1Byb21pc2Uob2JqKTtcbiAgICBpZiAoIShyZXQgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgICB2YXIgdmFsID0gcmV0O1xuICAgICAgICByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgICAgIHJldC5fZnVsZmlsbFVuY2hlY2tlZCh2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5yZXNvbHZlID0gUHJvbWlzZS5mdWxmaWxsZWQgPSBQcm9taXNlLmNhc3Q7XG5cblByb21pc2UucmVqZWN0ID0gUHJvbWlzZS5yZWplY3RlZCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICByZXQuX3JlamVjdENhbGxiYWNrKHJlYXNvbiwgdHJ1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2Uuc2V0U2NoZWR1bGVyID0gZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIHZhciBwcmV2ID0gYXN5bmMuX3NjaGVkdWxlO1xuICAgIGFzeW5jLl9zY2hlZHVsZSA9IGZuO1xuICAgIHJldHVybiBwcmV2O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3RoZW4gPSBmdW5jdGlvbiAoXG4gICAgZGlkRnVsZmlsbCxcbiAgICBkaWRSZWplY3QsXG4gICAgZGlkUHJvZ3Jlc3MsXG4gICAgcmVjZWl2ZXIsXG4gICAgaW50ZXJuYWxEYXRhXG4pIHtcbiAgICB2YXIgaGF2ZUludGVybmFsRGF0YSA9IGludGVybmFsRGF0YSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciByZXQgPSBoYXZlSW50ZXJuYWxEYXRhID8gaW50ZXJuYWxEYXRhIDogbmV3IFByb21pc2UoSU5URVJOQUwpO1xuXG4gICAgaWYgKCFoYXZlSW50ZXJuYWxEYXRhKSB7XG4gICAgICAgIHJldC5fcHJvcGFnYXRlRnJvbSh0aGlzLCA0IHwgMSk7XG4gICAgICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0KCk7XG4gICAgaWYgKHRhcmdldCAhPT0gdGhpcykge1xuICAgICAgICBpZiAocmVjZWl2ZXIgPT09IHVuZGVmaW5lZCkgcmVjZWl2ZXIgPSB0aGlzLl9ib3VuZFRvO1xuICAgICAgICBpZiAoIWhhdmVJbnRlcm5hbERhdGEpIHJldC5fc2V0SXNNaWdyYXRlZCgpO1xuICAgIH1cblxuICAgIHZhciBjYWxsYmFja0luZGV4ID1cbiAgICAgICAgdGFyZ2V0Ll9hZGRDYWxsYmFja3MoZGlkRnVsZmlsbCwgZGlkUmVqZWN0LCBkaWRQcm9ncmVzcywgcmV0LCByZWNlaXZlcik7XG5cbiAgICBpZiAodGFyZ2V0Ll9pc1Jlc29sdmVkKCkgJiYgIXRhcmdldC5faXNTZXR0bGVQcm9taXNlc1F1ZXVlZCgpKSB7XG4gICAgICAgIGFzeW5jLmludm9rZShcbiAgICAgICAgICAgIHRhcmdldC5fc2V0dGxlUHJvbWlzZUF0UG9zdFJlc29sdXRpb24sIHRhcmdldCwgY2FsbGJhY2tJbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXR0bGVQcm9taXNlQXRQb3N0UmVzb2x1dGlvbiA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIGlmICh0aGlzLl9pc1JlamVjdGlvblVuaGFuZGxlZCgpKSB0aGlzLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgdGhpcy5fc2V0dGxlUHJvbWlzZUF0KGluZGV4KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JpdEZpZWxkICYgMTMxMDcxO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRm9sbG93aW5nT3JGdWxmaWxsZWRPclJlamVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA5Mzk1MjQwOTYpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0ZvbGxvd2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgNTM2ODcwOTEyKSA9PT0gNTM2ODcwOTEyO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldExlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9ICh0aGlzLl9iaXRGaWVsZCAmIC0xMzEwNzIpIHxcbiAgICAgICAgKGxlbiAmIDEzMTA3MSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0RnVsZmlsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAyNjg0MzU0NTY7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0UmVqZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDEzNDIxNzcyODtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRGb2xsb3dpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDUzNjg3MDkxMjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRJc0ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAzMzU1NDQzMjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAzMzU1NDQzMikgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhbmNlbGxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA2NzEwODg2NCkgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldENhbmNlbGxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCA2NzEwODg2NDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldENhbmNlbGxhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjY3MTA4ODY0KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRJc01pZ3JhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCA0MTk0MzA0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0SXNNaWdyYXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH40MTk0MzA0KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc01pZ3JhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA0MTk0MzA0KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVjZWl2ZXJBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciByZXQgPSBpbmRleCA9PT0gMFxuICAgICAgICA/IHRoaXMuX3JlY2VpdmVyMFxuICAgICAgICA6IHRoaXNbXG4gICAgICAgICAgICBpbmRleCAqIDUgLSA1ICsgNF07XG4gICAgaWYgKHJldCA9PT0gdW5kZWZpbmVkICYmIHRoaXMuX2lzQm91bmQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYm91bmRUbztcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm9taXNlQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IDBcbiAgICAgICAgPyB0aGlzLl9wcm9taXNlMFxuICAgICAgICA6IHRoaXNbaW5kZXggKiA1IC0gNSArIDNdO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2Z1bGZpbGxtZW50SGFuZGxlckF0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4ID09PSAwXG4gICAgICAgID8gdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMFxuICAgICAgICA6IHRoaXNbaW5kZXggKiA1IC0gNSArIDBdO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdGlvbkhhbmRsZXJBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gMFxuICAgICAgICA/IHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwXG4gICAgICAgIDogdGhpc1tpbmRleCAqIDUgLSA1ICsgMV07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbWlncmF0ZUNhbGxiYWNrcyA9IGZ1bmN0aW9uIChmb2xsb3dlciwgaW5kZXgpIHtcbiAgICB2YXIgZnVsZmlsbCA9IGZvbGxvd2VyLl9mdWxmaWxsbWVudEhhbmRsZXJBdChpbmRleCk7XG4gICAgdmFyIHJlamVjdCA9IGZvbGxvd2VyLl9yZWplY3Rpb25IYW5kbGVyQXQoaW5kZXgpO1xuICAgIHZhciBwcm9ncmVzcyA9IGZvbGxvd2VyLl9wcm9ncmVzc0hhbmRsZXJBdChpbmRleCk7XG4gICAgdmFyIHByb21pc2UgPSBmb2xsb3dlci5fcHJvbWlzZUF0KGluZGV4KTtcbiAgICB2YXIgcmVjZWl2ZXIgPSBmb2xsb3dlci5fcmVjZWl2ZXJBdChpbmRleCk7XG4gICAgaWYgKHByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSBwcm9taXNlLl9zZXRJc01pZ3JhdGVkKCk7XG4gICAgdGhpcy5fYWRkQ2FsbGJhY2tzKGZ1bGZpbGwsIHJlamVjdCwgcHJvZ3Jlc3MsIHByb21pc2UsIHJlY2VpdmVyKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9hZGRDYWxsYmFja3MgPSBmdW5jdGlvbiAoXG4gICAgZnVsZmlsbCxcbiAgICByZWplY3QsXG4gICAgcHJvZ3Jlc3MsXG4gICAgcHJvbWlzZSxcbiAgICByZWNlaXZlclxuKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5fbGVuZ3RoKCk7XG5cbiAgICBpZiAoaW5kZXggPj0gMTMxMDcxIC0gNSkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3NldExlbmd0aCgwKTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZTAgPSBwcm9taXNlO1xuICAgICAgICBpZiAocmVjZWl2ZXIgIT09IHVuZGVmaW5lZCkgdGhpcy5fcmVjZWl2ZXIwID0gcmVjZWl2ZXI7XG4gICAgICAgIGlmICh0eXBlb2YgZnVsZmlsbCA9PT0gXCJmdW5jdGlvblwiICYmICF0aGlzLl9pc0NhcnJ5aW5nU3RhY2tUcmFjZSgpKVxuICAgICAgICAgICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IGZ1bGZpbGw7XG4gICAgICAgIGlmICh0eXBlb2YgcmVqZWN0ID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwID0gcmVqZWN0O1xuICAgICAgICBpZiAodHlwZW9mIHByb2dyZXNzID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuX3Byb2dyZXNzSGFuZGxlcjAgPSBwcm9ncmVzcztcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYmFzZSA9IGluZGV4ICogNSAtIDU7XG4gICAgICAgIHRoaXNbYmFzZSArIDNdID0gcHJvbWlzZTtcbiAgICAgICAgdGhpc1tiYXNlICsgNF0gPSByZWNlaXZlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBmdWxmaWxsID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICB0aGlzW2Jhc2UgKyAwXSA9IGZ1bGZpbGw7XG4gICAgICAgIGlmICh0eXBlb2YgcmVqZWN0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICB0aGlzW2Jhc2UgKyAxXSA9IHJlamVjdDtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9ncmVzcyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgdGhpc1tiYXNlICsgMl0gPSBwcm9ncmVzcztcbiAgICB9XG4gICAgdGhpcy5fc2V0TGVuZ3RoKGluZGV4ICsgMSk7XG4gICAgcmV0dXJuIGluZGV4O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldFByb3h5SGFuZGxlcnMgPSBmdW5jdGlvbiAocmVjZWl2ZXIsIHByb21pc2VTbG90VmFsdWUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLl9sZW5ndGgoKTtcblxuICAgIGlmIChpbmRleCA+PSAxMzEwNzEgLSA1KSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fc2V0TGVuZ3RoKDApO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZTAgPSBwcm9taXNlU2xvdFZhbHVlO1xuICAgICAgICB0aGlzLl9yZWNlaXZlcjAgPSByZWNlaXZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYmFzZSA9IGluZGV4ICogNSAtIDU7XG4gICAgICAgIHRoaXNbYmFzZSArIDNdID0gcHJvbWlzZVNsb3RWYWx1ZTtcbiAgICAgICAgdGhpc1tiYXNlICsgNF0gPSByZWNlaXZlcjtcbiAgICB9XG4gICAgdGhpcy5fc2V0TGVuZ3RoKGluZGV4ICsgMSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcHJveHlQcm9taXNlQXJyYXkgPSBmdW5jdGlvbiAocHJvbWlzZUFycmF5LCBpbmRleCkge1xuICAgIHRoaXMuX3NldFByb3h5SGFuZGxlcnMocHJvbWlzZUFycmF5LCBpbmRleCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVzb2x2ZUNhbGxiYWNrID0gZnVuY3Rpb24odmFsdWUsIHNob3VsZEJpbmQpIHtcbiAgICBpZiAodGhpcy5faXNGb2xsb3dpbmdPckZ1bGZpbGxlZE9yUmVqZWN0ZWQoKSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSA9PT0gdGhpcylcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlamVjdENhbGxiYWNrKG1ha2VTZWxmUmVzb2x1dGlvbkVycm9yKCksIGZhbHNlLCB0cnVlKTtcbiAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZSh2YWx1ZSwgdGhpcyk7XG4gICAgaWYgKCEobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHJldHVybiB0aGlzLl9mdWxmaWxsKHZhbHVlKTtcblxuICAgIHZhciBwcm9wYWdhdGlvbkZsYWdzID0gMSB8IChzaG91bGRCaW5kID8gNCA6IDApO1xuICAgIHRoaXMuX3Byb3BhZ2F0ZUZyb20obWF5YmVQcm9taXNlLCBwcm9wYWdhdGlvbkZsYWdzKTtcbiAgICB2YXIgcHJvbWlzZSA9IG1heWJlUHJvbWlzZS5fdGFyZ2V0KCk7XG4gICAgaWYgKHByb21pc2UuX2lzUGVuZGluZygpKSB7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLl9sZW5ndGgoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgcHJvbWlzZS5fbWlncmF0ZUNhbGxiYWNrcyh0aGlzLCBpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRGb2xsb3dpbmcoKTtcbiAgICAgICAgdGhpcy5fc2V0TGVuZ3RoKDApO1xuICAgICAgICB0aGlzLl9zZXRGb2xsb3dlZShwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKHByb21pc2UuX2lzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgdGhpcy5fZnVsZmlsbFVuY2hlY2tlZChwcm9taXNlLl92YWx1ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yZWplY3RVbmNoZWNrZWQocHJvbWlzZS5fcmVhc29uKCksXG4gICAgICAgICAgICBwcm9taXNlLl9nZXRDYXJyaWVkU3RhY2tUcmFjZSgpKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVqZWN0Q2FsbGJhY2sgPVxuZnVuY3Rpb24ocmVhc29uLCBzeW5jaHJvbm91cywgc2hvdWxkTm90TWFya09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbikge1xuICAgIGlmICghc2hvdWxkTm90TWFya09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbikge1xuICAgICAgICB1dGlsLm1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihyZWFzb24pO1xuICAgIH1cbiAgICB2YXIgdHJhY2UgPSB1dGlsLmVuc3VyZUVycm9yT2JqZWN0KHJlYXNvbik7XG4gICAgdmFyIGhhc1N0YWNrID0gdHJhY2UgPT09IHJlYXNvbjtcbiAgICB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlLCBzeW5jaHJvbm91cyA/IGhhc1N0YWNrIDogZmFsc2UpO1xuICAgIHRoaXMuX3JlamVjdChyZWFzb24sIGhhc1N0YWNrID8gdW5kZWZpbmVkIDogdHJhY2UpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Jlc29sdmVGcm9tUmVzb2x2ZXIgPSBmdW5jdGlvbiAocmVzb2x2ZXIpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdGhpcy5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB0aGlzLl9wdXNoQ29udGV4dCgpO1xuICAgIHZhciBzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgdmFyIHIgPSB0cnlDYXRjaChyZXNvbHZlcikoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHByb21pc2UgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbiAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBpZiAocHJvbWlzZSA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhyZWFzb24sIHN5bmNocm9ub3VzKTtcbiAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfSk7XG4gICAgc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICB0aGlzLl9wb3BDb250ZXh0KCk7XG5cbiAgICBpZiAociAhPT0gdW5kZWZpbmVkICYmIHIgPT09IGVycm9yT2JqICYmIHByb21pc2UgIT09IG51bGwpIHtcbiAgICAgICAgcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2soci5lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VGcm9tSGFuZGxlciA9IGZ1bmN0aW9uIChcbiAgICBoYW5kbGVyLCByZWNlaXZlciwgdmFsdWUsIHByb21pc2Vcbikge1xuICAgIGlmIChwcm9taXNlLl9pc1JlamVjdGVkKCkpIHJldHVybjtcbiAgICBwcm9taXNlLl9wdXNoQ29udGV4dCgpO1xuICAgIHZhciB4O1xuICAgIGlmIChyZWNlaXZlciA9PT0gQVBQTFkgJiYgIXRoaXMuX2lzUmVqZWN0ZWQoKSkge1xuICAgICAgICB4ID0gdHJ5Q2F0Y2goaGFuZGxlcikuYXBwbHkodGhpcy5fYm91bmRUbywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB0cnlDYXRjaChoYW5kbGVyKS5jYWxsKHJlY2VpdmVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIHByb21pc2UuX3BvcENvbnRleHQoKTtcblxuICAgIGlmICh4ID09PSBlcnJvck9iaiB8fCB4ID09PSBwcm9taXNlIHx8IHggPT09IE5FWFRfRklMVEVSKSB7XG4gICAgICAgIHZhciBlcnIgPSB4ID09PSBwcm9taXNlID8gbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKSA6IHguZTtcbiAgICAgICAgcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2soZXJyLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl90YXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmV0ID0gdGhpcztcbiAgICB3aGlsZSAocmV0Ll9pc0ZvbGxvd2luZygpKSByZXQgPSByZXQuX2ZvbGxvd2VlKCk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mb2xsb3dlZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRGb2xsb3dlZSA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMCA9IHByb21pc2U7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fY2xlYW5WYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsbGF0aW9uUGFyZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm9wYWdhdGVGcm9tID0gZnVuY3Rpb24gKHBhcmVudCwgZmxhZ3MpIHtcbiAgICBpZiAoKGZsYWdzICYgMSkgPiAwICYmIHBhcmVudC5fY2FuY2VsbGFibGUoKSkge1xuICAgICAgICB0aGlzLl9zZXRDYW5jZWxsYWJsZSgpO1xuICAgICAgICB0aGlzLl9jYW5jZWxsYXRpb25QYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuICAgIGlmICgoZmxhZ3MgJiA0KSA+IDAgJiYgcGFyZW50Ll9pc0JvdW5kKCkpIHtcbiAgICAgICAgdGhpcy5fc2V0Qm91bmRUbyhwYXJlbnQuX2JvdW5kVG8pO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mdWxmaWxsID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2lzRm9sbG93aW5nT3JGdWxmaWxsZWRPclJlamVjdGVkKCkpIHJldHVybjtcbiAgICB0aGlzLl9mdWxmaWxsVW5jaGVja2VkKHZhbHVlKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uLCBjYXJyaWVkU3RhY2tUcmFjZSkge1xuICAgIGlmICh0aGlzLl9pc0ZvbGxvd2luZ09yRnVsZmlsbGVkT3JSZWplY3RlZCgpKSByZXR1cm47XG4gICAgdGhpcy5fcmVqZWN0VW5jaGVja2VkKHJlYXNvbiwgY2FycmllZFN0YWNrVHJhY2UpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZUF0KGluZGV4KTtcbiAgICB2YXIgaXNQcm9taXNlID0gcHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2U7XG5cbiAgICBpZiAoaXNQcm9taXNlICYmIHByb21pc2UuX2lzTWlncmF0ZWQoKSkge1xuICAgICAgICBwcm9taXNlLl91bnNldElzTWlncmF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIGFzeW5jLmludm9rZSh0aGlzLl9zZXR0bGVQcm9taXNlQXQsIHRoaXMsIGluZGV4KTtcbiAgICB9XG4gICAgdmFyIGhhbmRsZXIgPSB0aGlzLl9pc0Z1bGZpbGxlZCgpXG4gICAgICAgID8gdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyQXQoaW5kZXgpXG4gICAgICAgIDogdGhpcy5fcmVqZWN0aW9uSGFuZGxlckF0KGluZGV4KTtcblxuICAgIHZhciBjYXJyaWVkU3RhY2tUcmFjZSA9XG4gICAgICAgIHRoaXMuX2lzQ2FycnlpbmdTdGFja1RyYWNlKCkgPyB0aGlzLl9nZXRDYXJyaWVkU3RhY2tUcmFjZSgpIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuX3NldHRsZWRWYWx1ZTtcbiAgICB2YXIgcmVjZWl2ZXIgPSB0aGlzLl9yZWNlaXZlckF0KGluZGV4KTtcblxuXG4gICAgdGhpcy5fY2xlYXJDYWxsYmFja0RhdGFBdEluZGV4KGluZGV4KTtcblxuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmICghaXNQcm9taXNlKSB7XG4gICAgICAgICAgICBoYW5kbGVyLmNhbGwocmVjZWl2ZXIsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHRsZVByb21pc2VGcm9tSGFuZGxlcihoYW5kbGVyLCByZWNlaXZlciwgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChyZWNlaXZlciBpbnN0YW5jZW9mIFByb21pc2VBcnJheSkge1xuICAgICAgICBpZiAoIXJlY2VpdmVyLl9pc1Jlc29sdmVkKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIuX3Byb21pc2VGdWxmaWxsZWQodmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIuX3Byb21pc2VSZWplY3RlZCh2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZSkge1xuICAgICAgICBpZiAodGhpcy5faXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgcHJvbWlzZS5fZnVsZmlsbCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLl9yZWplY3QodmFsdWUsIGNhcnJpZWRTdGFja1RyYWNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbmRleCA+PSA0ICYmIChpbmRleCAmIDMxKSA9PT0gNClcbiAgICAgICAgYXN5bmMuaW52b2tlTGF0ZXIodGhpcy5fc2V0TGVuZ3RoLCB0aGlzLCAwKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jbGVhckNhbGxiYWNrRGF0YUF0SW5kZXggPSBmdW5jdGlvbihpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzQ2FycnlpbmdTdGFja1RyYWNlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAgPVxuICAgICAgICB0aGlzLl9wcm9ncmVzc0hhbmRsZXIwID1cbiAgICAgICAgdGhpcy5fcmVjZWl2ZXIwID1cbiAgICAgICAgdGhpcy5fcHJvbWlzZTAgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJhc2UgPSBpbmRleCAqIDUgLSA1O1xuICAgICAgICB0aGlzW2Jhc2UgKyAzXSA9XG4gICAgICAgIHRoaXNbYmFzZSArIDRdID1cbiAgICAgICAgdGhpc1tiYXNlICsgMF0gPVxuICAgICAgICB0aGlzW2Jhc2UgKyAxXSA9XG4gICAgICAgIHRoaXNbYmFzZSArIDJdID0gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc1NldHRsZVByb21pc2VzUXVldWVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJlxuICAgICAgICAgICAgLTEwNzM3NDE4MjQpID09PSAtMTA3Mzc0MTgyNDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRTZXR0bGVQcm9taXNlc1F1ZXVlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgLTEwNzM3NDE4MjQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRTZXR0bGVQcm9taXNlc1F1ZXVlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH4tMTA3Mzc0MTgyNCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcXVldWVTZXR0bGVQcm9taXNlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGFzeW5jLnNldHRsZVByb21pc2VzKHRoaXMpO1xuICAgIHRoaXMuX3NldFNldHRsZVByb21pc2VzUXVldWVkKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZnVsZmlsbFVuY2hlY2tlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdGhpcykge1xuICAgICAgICB2YXIgZXJyID0gbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKTtcbiAgICAgICAgdGhpcy5fYXR0YWNoRXh0cmFUcmFjZShlcnIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0VW5jaGVja2VkKGVyciwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgdGhpcy5fc2V0RnVsZmlsbGVkKCk7XG4gICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fY2xlYW5WYWx1ZXMoKTtcblxuICAgIGlmICh0aGlzLl9sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgdGhpcy5fcXVldWVTZXR0bGVQcm9taXNlcygpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWplY3RVbmNoZWNrZWRDaGVja0Vycm9yID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHZhciB0cmFjZSA9IHV0aWwuZW5zdXJlRXJyb3JPYmplY3QocmVhc29uKTtcbiAgICB0aGlzLl9yZWplY3RVbmNoZWNrZWQocmVhc29uLCB0cmFjZSA9PT0gcmVhc29uID8gdW5kZWZpbmVkIDogdHJhY2UpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdFVuY2hlY2tlZCA9IGZ1bmN0aW9uIChyZWFzb24sIHRyYWNlKSB7XG4gICAgaWYgKHJlYXNvbiA9PT0gdGhpcykge1xuICAgICAgICB2YXIgZXJyID0gbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKTtcbiAgICAgICAgdGhpcy5fYXR0YWNoRXh0cmFUcmFjZShlcnIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0VW5jaGVja2VkKGVycik7XG4gICAgfVxuICAgIHRoaXMuX3NldFJlamVjdGVkKCk7XG4gICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gcmVhc29uO1xuICAgIHRoaXMuX2NsZWFuVmFsdWVzKCk7XG5cbiAgICBpZiAodGhpcy5faXNGaW5hbCgpKSB7XG4gICAgICAgIGFzeW5jLnRocm93TGF0ZXIoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKFwic3RhY2tcIiBpbiBlKSB7XG4gICAgICAgICAgICAgICAgYXN5bmMuaW52b2tlRmlyc3QoXG4gICAgICAgICAgICAgICAgICAgIENhcHR1cmVkVHJhY2UudW5oYW5kbGVkUmVqZWN0aW9uLCB1bmRlZmluZWQsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSwgdHJhY2UgPT09IHVuZGVmaW5lZCA/IHJlYXNvbiA6IHRyYWNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0cmFjZSAhPT0gdW5kZWZpbmVkICYmIHRyYWNlICE9PSByZWFzb24pIHtcbiAgICAgICAgdGhpcy5fc2V0Q2FycmllZFN0YWNrVHJhY2UodHJhY2UpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgdGhpcy5fcXVldWVTZXR0bGVQcm9taXNlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZCgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXR0bGVQcm9taXNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl91bnNldFNldHRsZVByb21pc2VzUXVldWVkKCk7XG4gICAgdmFyIGxlbiA9IHRoaXMuX2xlbmd0aCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGhpcy5fc2V0dGxlUHJvbWlzZUF0KGkpO1xuICAgIH1cbn07XG5cblByb21pc2UuX21ha2VTZWxmUmVzb2x1dGlvbkVycm9yID0gbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3I7XG5fZGVyZXFfKFwiLi9tZXRob2QuanNcIikoUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbik7XG5fZGVyZXFfKFwiLi9iaW5kLmpzXCIpKFByb21pc2UsIElOVEVSTkFMLCB0cnlDb252ZXJ0VG9Qcm9taXNlKTtcbl9kZXJlcV8oXCIuL2ZpbmFsbHkuanNcIikoUHJvbWlzZSwgTkVYVF9GSUxURVIsIHRyeUNvbnZlcnRUb1Byb21pc2UpO1xuX2RlcmVxXyhcIi4vZGlyZWN0X3Jlc29sdmUuanNcIikoUHJvbWlzZSk7XG5fZGVyZXFfKFwiLi9zeW5jaHJvbm91c19pbnNwZWN0aW9uLmpzXCIpKFByb21pc2UpO1xuX2RlcmVxXyhcIi4vam9pbi5qc1wiKShQcm9taXNlLCBQcm9taXNlQXJyYXksIHRyeUNvbnZlcnRUb1Byb21pc2UsIElOVEVSTkFMKTtcblByb21pc2UuUHJvbWlzZSA9IFByb21pc2U7XG5fZGVyZXFfKCcuL21hcC5qcycpKFByb21pc2UsIFByb21pc2VBcnJheSwgYXBpUmVqZWN0aW9uLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL3VzaW5nLmpzJykoUHJvbWlzZSwgYXBpUmVqZWN0aW9uLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBjcmVhdGVDb250ZXh0KTtcbl9kZXJlcV8oJy4vZ2VuZXJhdG9ycy5qcycpKFByb21pc2UsIGFwaVJlamVjdGlvbiwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UpO1xuX2RlcmVxXygnLi9ub2RlaWZ5LmpzJykoUHJvbWlzZSk7XG5fZGVyZXFfKCcuL2NhbmNlbC5qcycpKFByb21pc2UpO1xuX2RlcmVxXygnLi9wcm9taXNpZnkuanMnKShQcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL3Byb3BzLmpzJykoUHJvbWlzZSwgUHJvbWlzZUFycmF5LCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBhcGlSZWplY3Rpb24pO1xuX2RlcmVxXygnLi9yYWNlLmpzJykoUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbik7XG5fZGVyZXFfKCcuL3JlZHVjZS5qcycpKFByb21pc2UsIFByb21pc2VBcnJheSwgYXBpUmVqZWN0aW9uLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL3NldHRsZS5qcycpKFByb21pc2UsIFByb21pc2VBcnJheSk7XG5fZGVyZXFfKCcuL2NhbGxfZ2V0LmpzJykoUHJvbWlzZSk7XG5fZGVyZXFfKCcuL3NvbWUuanMnKShQcm9taXNlLCBQcm9taXNlQXJyYXksIGFwaVJlamVjdGlvbik7XG5fZGVyZXFfKCcuL3Byb2dyZXNzLmpzJykoUHJvbWlzZSwgUHJvbWlzZUFycmF5KTtcbl9kZXJlcV8oJy4vYW55LmpzJykoUHJvbWlzZSk7XG5fZGVyZXFfKCcuL2VhY2guanMnKShQcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL3RpbWVycy5qcycpKFByb21pc2UsIElOVEVSTkFMKTtcbl9kZXJlcV8oJy4vZmlsdGVyLmpzJykoUHJvbWlzZSwgSU5URVJOQUwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgdXRpbC50b0Zhc3RQcm9wZXJ0aWVzKFByb21pc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIHV0aWwudG9GYXN0UHJvcGVydGllcyhQcm9taXNlLnByb3RvdHlwZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmdW5jdGlvbiBmaWxsVHlwZXModmFsdWUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciBwID0gbmV3IFByb21pc2UoSU5URVJOQUwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBwLl9mdWxmaWxsbWVudEhhbmRsZXIwID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgcC5fcmVqZWN0aW9uSGFuZGxlcjAgPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHAuX3Byb2dyZXNzSGFuZGxlcjAgPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBwLl9wcm9taXNlMCA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgcC5fcmVjZWl2ZXIwID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHAuX3NldHRsZWRWYWx1ZSA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAvLyBDb21wbGV0ZSBzbGFjayB0cmFja2luZywgb3B0IG91dCBvZiBmaWVsZC10eXBlIHRyYWNraW5nIGFuZCAgICAgICAgICAgXG4gICAgLy8gc3RhYmlsaXplIG1hcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcyh7YTogMX0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXMoe2I6IDJ9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKHtjOiAzfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcygxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXMoZnVuY3Rpb24oKXt9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKHVuZGVmaW5lZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcyhmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXMobmV3IFByb21pc2UoSU5URVJOQUwpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgQ2FwdHVyZWRUcmFjZS5zZXRCb3VuZHMoYXN5bmMuZmlyc3RMaW5lRXJyb3IsIHV0aWwubGFzdExpbmVFcnJvcik7ICAgICAgIFxuICAgIHJldHVybiBQcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxufTtcblxufSx7XCIuL2FueS5qc1wiOjEsXCIuL2FzeW5jLmpzXCI6MixcIi4vYmluZC5qc1wiOjMsXCIuL2NhbGxfZ2V0LmpzXCI6NSxcIi4vY2FuY2VsLmpzXCI6NixcIi4vY2FwdHVyZWRfdHJhY2UuanNcIjo3LFwiLi9jYXRjaF9maWx0ZXIuanNcIjo4LFwiLi9jb250ZXh0LmpzXCI6OSxcIi4vZGVidWdnYWJpbGl0eS5qc1wiOjEwLFwiLi9kaXJlY3RfcmVzb2x2ZS5qc1wiOjExLFwiLi9lYWNoLmpzXCI6MTIsXCIuL2Vycm9ycy5qc1wiOjEzLFwiLi9maWx0ZXIuanNcIjoxNSxcIi4vZmluYWxseS5qc1wiOjE2LFwiLi9nZW5lcmF0b3JzLmpzXCI6MTcsXCIuL2pvaW4uanNcIjoxOCxcIi4vbWFwLmpzXCI6MTksXCIuL21ldGhvZC5qc1wiOjIwLFwiLi9ub2RlaWZ5LmpzXCI6MjEsXCIuL3Byb2dyZXNzLmpzXCI6MjIsXCIuL3Byb21pc2VfYXJyYXkuanNcIjoyNCxcIi4vcHJvbWlzZV9yZXNvbHZlci5qc1wiOjI1LFwiLi9wcm9taXNpZnkuanNcIjoyNixcIi4vcHJvcHMuanNcIjoyNyxcIi4vcmFjZS5qc1wiOjI5LFwiLi9yZWR1Y2UuanNcIjozMCxcIi4vc2V0dGxlLmpzXCI6MzIsXCIuL3NvbWUuanNcIjozMyxcIi4vc3luY2hyb25vdXNfaW5zcGVjdGlvbi5qc1wiOjM0LFwiLi90aGVuYWJsZXMuanNcIjozNSxcIi4vdGltZXJzLmpzXCI6MzYsXCIuL3VzaW5nLmpzXCI6MzcsXCIuL3V0aWwuanNcIjozOH1dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCwgdHJ5Q29udmVydFRvUHJvbWlzZSxcbiAgICBhcGlSZWplY3Rpb24pIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBpc0FycmF5ID0gdXRpbC5pc0FycmF5O1xuXG5mdW5jdGlvbiB0b1Jlc29sdXRpb25WYWx1ZSh2YWwpIHtcbiAgICBzd2l0Y2godmFsKSB7XG4gICAgY2FzZSAtMjogcmV0dXJuIFtdO1xuICAgIGNhc2UgLTM6IHJldHVybiB7fTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFByb21pc2VBcnJheSh2YWx1ZXMpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgdmFyIHBhcmVudDtcbiAgICBpZiAodmFsdWVzIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBwYXJlbnQgPSB2YWx1ZXM7XG4gICAgICAgIHByb21pc2UuX3Byb3BhZ2F0ZUZyb20ocGFyZW50LCAxIHwgNCk7XG4gICAgfVxuICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlcztcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIHRoaXMuX3RvdGFsUmVzb2x2ZWQgPSAwO1xuICAgIHRoaXMuX2luaXQodW5kZWZpbmVkLCAtMik7XG59XG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5wcm9taXNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoXywgcmVzb2x2ZVZhbHVlSWZFbXB0eSkge1xuICAgIHZhciB2YWx1ZXMgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHRoaXMuX3ZhbHVlcywgdGhpcy5fcHJvbWlzZSk7XG4gICAgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgdmFsdWVzID0gdmFsdWVzLl90YXJnZXQoKTtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xuICAgICAgICBpZiAodmFsdWVzLl9pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuX3ZhbHVlKCk7XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgUHJvbWlzZS5UeXBlRXJyb3IoXCJleHBlY3RpbmcgYW4gYXJyYXksIGEgcHJvbWlzZSBvciBhIHRoZW5hYmxlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvczhNTWhjXFx1MDAwYVwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9faGFyZFJlamVjdF9fKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlcy5faXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgIHZhbHVlcy5fdGhlbihcbiAgICAgICAgICAgICAgICBpbml0LFxuICAgICAgICAgICAgICAgIHRoaXMuX3JlamVjdCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICByZXNvbHZlVmFsdWVJZkVtcHR5XG4gICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3QodmFsdWVzLl9yZWFzb24oKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcmVqZWN0KGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhbiBhcnJheSwgYSBwcm9taXNlIG9yIGEgdGhlbmFibGVcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9zOE1NaGNcXHUwMDBhXCIpLl9yZWFzb24oKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAocmVzb2x2ZVZhbHVlSWZFbXB0eSA9PT0gLTUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVFbXB0eUFycmF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRvUmVzb2x1dGlvblZhbHVlKHJlc29sdmVWYWx1ZUlmRW1wdHkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBsZW4gPSB0aGlzLmdldEFjdHVhbExlbmd0aCh2YWx1ZXMubGVuZ3RoKTtcbiAgICB0aGlzLl9sZW5ndGggPSBsZW47XG4gICAgdGhpcy5fdmFsdWVzID0gdGhpcy5zaG91bGRDb3B5VmFsdWVzKCkgPyBuZXcgQXJyYXkobGVuKSA6IHRoaXMuX3ZhbHVlcztcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Byb21pc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICB2YXIgaXNSZXNvbHZlZCA9IHRoaXMuX2lzUmVzb2x2ZWQoKTtcbiAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodmFsdWVzW2ldLCBwcm9taXNlKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZSA9IG1heWJlUHJvbWlzZS5fdGFyZ2V0KCk7XG4gICAgICAgICAgICBpZiAoaXNSZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXliZVByb21pc2UuX2lzUGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl9wcm94eVByb21pc2VBcnJheSh0aGlzLCBpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF5YmVQcm9taXNlLl9pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbWlzZUZ1bGZpbGxlZChtYXliZVByb21pc2UuX3ZhbHVlKCksIGkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9taXNlUmVqZWN0ZWQobWF5YmVQcm9taXNlLl9yZWFzb24oKSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb21pc2VGdWxmaWxsZWQobWF5YmVQcm9taXNlLCBpKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX2lzUmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcyA9PT0gbnVsbDtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX3Jlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLl92YWx1ZXMgPSBudWxsO1xuICAgIHRoaXMuX3Byb21pc2UuX2Z1bGZpbGwodmFsdWUpO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fX2hhcmRSZWplY3RfXyA9XG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhpcy5fdmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wcm9taXNlLl9yZWplY3RDYWxsYmFjayhyZWFzb24sIGZhbHNlLCB0cnVlKTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VQcm9ncmVzc2VkID0gZnVuY3Rpb24gKHByb2dyZXNzVmFsdWUsIGluZGV4KSB7XG4gICAgdGhpcy5fcHJvbWlzZS5fcHJvZ3Jlc3Moe1xuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIHZhbHVlOiBwcm9ncmVzc1ZhbHVlXG4gICAgfSk7XG59O1xuXG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgIHZhciB0b3RhbFJlc29sdmVkID0gKyt0aGlzLl90b3RhbFJlc29sdmVkO1xuICAgIGlmICh0b3RhbFJlc29sdmVkID49IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlKHRoaXMuX3ZhbHVlcyk7XG4gICAgfVxufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID0gZnVuY3Rpb24gKHJlYXNvbiwgaW5kZXgpIHtcbiAgICB0aGlzLl90b3RhbFJlc29sdmVkKys7XG4gICAgdGhpcy5fcmVqZWN0KHJlYXNvbik7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLnNob3VsZENvcHlWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLmdldEFjdHVhbExlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgICByZXR1cm4gbGVuO1xufTtcblxucmV0dXJuIFByb21pc2VBcnJheTtcbn07XG5cbn0se1wiLi91dGlsLmpzXCI6Mzh9XSwyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBtYXliZVdyYXBBc0Vycm9yID0gdXRpbC5tYXliZVdyYXBBc0Vycm9yO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9ycy5qc1wiKTtcbnZhciBUaW1lb3V0RXJyb3IgPSBlcnJvcnMuVGltZW91dEVycm9yO1xudmFyIE9wZXJhdGlvbmFsRXJyb3IgPSBlcnJvcnMuT3BlcmF0aW9uYWxFcnJvcjtcbnZhciBoYXZlR2V0dGVycyA9IHV0aWwuaGF2ZUdldHRlcnM7XG52YXIgZXM1ID0gX2RlcmVxXyhcIi4vZXM1LmpzXCIpO1xuXG5mdW5jdGlvbiBpc1VudHlwZWRFcnJvcihvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRXJyb3IgJiZcbiAgICAgICAgZXM1LmdldFByb3RvdHlwZU9mKG9iaikgPT09IEVycm9yLnByb3RvdHlwZTtcbn1cblxudmFyIHJFcnJvcktleSA9IC9eKD86bmFtZXxtZXNzYWdlfHN0YWNrfGNhdXNlKSQvO1xuZnVuY3Rpb24gd3JhcEFzT3BlcmF0aW9uYWxFcnJvcihvYmopIHtcbiAgICB2YXIgcmV0O1xuICAgIGlmIChpc1VudHlwZWRFcnJvcihvYmopKSB7XG4gICAgICAgIHJldCA9IG5ldyBPcGVyYXRpb25hbEVycm9yKG9iaik7XG4gICAgICAgIHJldC5uYW1lID0gb2JqLm5hbWU7XG4gICAgICAgIHJldC5tZXNzYWdlID0gb2JqLm1lc3NhZ2U7XG4gICAgICAgIHJldC5zdGFjayA9IG9iai5zdGFjaztcbiAgICAgICAgdmFyIGtleXMgPSBlczUua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFyRXJyb3JLZXkudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICB1dGlsLm1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihvYmopO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVyciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHByb21pc2UgPT09IG51bGwpIHJldHVybjtcblxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlZCA9IHdyYXBBc09wZXJhdGlvbmFsRXJyb3IobWF5YmVXcmFwQXNFcnJvcihlcnIpKTtcbiAgICAgICAgICAgIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2Uod3JhcHBlZCk7XG4gICAgICAgICAgICBwcm9taXNlLl9yZWplY3Qod3JhcHBlZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHZhciAkX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7dmFyIGFyZ3MgPSBuZXcgQXJyYXkoJF9sZW4gLSAxKTsgZm9yKHZhciAkX2kgPSAxOyAkX2kgPCAkX2xlbjsgKyskX2kpIHthcmdzWyRfaSAtIDFdID0gYXJndW1lbnRzWyRfaV07fVxuICAgICAgICAgICAgcHJvbWlzZS5fZnVsZmlsbChhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UuX2Z1bGZpbGwodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfTtcbn1cblxuXG52YXIgUHJvbWlzZVJlc29sdmVyO1xuaWYgKCFoYXZlR2V0dGVycykge1xuICAgIFByb21pc2VSZXNvbHZlciA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgICAgIHRoaXMuYXNDYWxsYmFjayA9IG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlKTtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IHRoaXMuYXNDYWxsYmFjaztcbiAgICB9O1xufVxuZWxzZSB7XG4gICAgUHJvbWlzZVJlc29sdmVyID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB9O1xufVxuaWYgKGhhdmVHZXR0ZXJzKSB7XG4gICAgdmFyIHByb3AgPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZWJhY2tGb3JQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShQcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLCBcImFzQ2FsbGJhY2tcIiwgcHJvcCk7XG4gICAgZXM1LmRlZmluZVByb3BlcnR5KFByb21pc2VSZXNvbHZlci5wcm90b3R5cGUsIFwiY2FsbGJhY2tcIiwgcHJvcCk7XG59XG5cblByb21pc2VSZXNvbHZlci5fbm9kZWJhY2tGb3JQcm9taXNlID0gbm9kZWJhY2tGb3JQcm9taXNlO1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgUHJvbWlzZVJlc29sdmVyXVwiO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS5yZXNvbHZlID1cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUuZnVsZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlUmVzb2x2ZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGludm9jYXRpb24sIHJlc29sdmVyIHJlc29sdmUvcmVqZWN0IG11c3QgYmUgY2FsbGVkIHdpdGhpbiBhIHJlc29sdmVyIGNvbnRleHQuIENvbnNpZGVyIHVzaW5nIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIGluc3RlYWQuXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvc2RrWEw5XFx1MDAwYVwiKTtcbiAgICB9XG4gICAgdGhpcy5wcm9taXNlLl9yZXNvbHZlQ2FsbGJhY2sodmFsdWUpO1xufTtcblxuUHJvbWlzZVJlc29sdmVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb21pc2VSZXNvbHZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgaW52b2NhdGlvbiwgcmVzb2x2ZXIgcmVzb2x2ZS9yZWplY3QgbXVzdCBiZSBjYWxsZWQgd2l0aGluIGEgcmVzb2x2ZXIgY29udGV4dC4gQ29uc2lkZXIgdXNpbmcgdGhlIHByb21pc2UgY29uc3RydWN0b3IgaW5zdGVhZC5cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9zZGtYTDlcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB0aGlzLnByb21pc2UuX3JlamVjdENhbGxiYWNrKHJlYXNvbik7XG59O1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb21pc2VSZXNvbHZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgaW52b2NhdGlvbiwgcmVzb2x2ZXIgcmVzb2x2ZS9yZWplY3QgbXVzdCBiZSBjYWxsZWQgd2l0aGluIGEgcmVzb2x2ZXIgY29udGV4dC4gQ29uc2lkZXIgdXNpbmcgdGhlIHByb21pc2UgY29uc3RydWN0b3IgaW5zdGVhZC5cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9zZGtYTDlcXHUwMDBhXCIpO1xuICAgIH1cbiAgICB0aGlzLnByb21pc2UuX3Byb2dyZXNzKHZhbHVlKTtcbn07XG5cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGVycikge1xuICAgIHRoaXMucHJvbWlzZS5jYW5jZWwoZXJyKTtcbn07XG5cblByb21pc2VSZXNvbHZlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlamVjdChuZXcgVGltZW91dEVycm9yKFwidGltZW91dFwiKSk7XG59O1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLmlzUmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZS5pc1Jlc29sdmVkKCk7XG59O1xuXG5Qcm9taXNlUmVzb2x2ZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9taXNlLnRvSlNPTigpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlUmVzb2x2ZXI7XG5cbn0se1wiLi9lcnJvcnMuanNcIjoxMyxcIi4vZXM1LmpzXCI6MTQsXCIuL3V0aWwuanNcIjozOH1dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCkge1xudmFyIFRISVMgPSB7fTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciBub2RlYmFja0ZvclByb21pc2UgPSBfZGVyZXFfKFwiLi9wcm9taXNlX3Jlc29sdmVyLmpzXCIpXG4gICAgLl9ub2RlYmFja0ZvclByb21pc2U7XG52YXIgd2l0aEFwcGVuZGVkID0gdXRpbC53aXRoQXBwZW5kZWQ7XG52YXIgbWF5YmVXcmFwQXNFcnJvciA9IHV0aWwubWF5YmVXcmFwQXNFcnJvcjtcbnZhciBjYW5FdmFsdWF0ZSA9IHV0aWwuY2FuRXZhbHVhdGU7XG52YXIgVHlwZUVycm9yID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpLlR5cGVFcnJvcjtcbnZhciBkZWZhdWx0U3VmZml4ID0gXCJBc3luY1wiO1xudmFyIGRlZmF1bHRQcm9taXNpZmllZCA9IHtfX2lzUHJvbWlzaWZpZWRfXzogdHJ1ZX07XG52YXIgbm9Db3B5UHJvcHNQYXR0ZXJuID1cbiAgICAvXig/Omxlbmd0aHxuYW1lfGFyZ3VtZW50c3xjYWxsZXJ8cHJvdG90eXBlfF9faXNQcm9taXNpZmllZF9fKSQvO1xudmFyIGRlZmF1bHRGaWx0ZXIgPSBmdW5jdGlvbihuYW1lLCBmdW5jKSB7XG4gICAgcmV0dXJuIHV0aWwuaXNJZGVudGlmaWVyKG5hbWUpICYmXG4gICAgICAgIG5hbWUuY2hhckF0KDApICE9PSBcIl9cIiAmJlxuICAgICAgICAhdXRpbC5pc0NsYXNzKGZ1bmMpO1xufTtcblxuZnVuY3Rpb24gcHJvcHNGaWx0ZXIoa2V5KSB7XG4gICAgcmV0dXJuICFub0NvcHlQcm9wc1BhdHRlcm4udGVzdChrZXkpO1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2lmaWVkKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuLl9faXNQcm9taXNpZmllZF9fID09PSB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNQcm9taXNpZmllZChvYmosIGtleSwgc3VmZml4KSB7XG4gICAgdmFyIHZhbCA9IHV0aWwuZ2V0RGF0YVByb3BlcnR5T3JEZWZhdWx0KG9iaiwga2V5ICsgc3VmZml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UHJvbWlzaWZpZWQpO1xuICAgIHJldHVybiB2YWwgPyBpc1Byb21pc2lmaWVkKHZhbCkgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNoZWNrVmFsaWQocmV0LCBzdWZmaXgsIHN1ZmZpeFJlZ2V4cCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXRbaV07XG4gICAgICAgIGlmIChzdWZmaXhSZWdleHAudGVzdChrZXkpKSB7XG4gICAgICAgICAgICB2YXIga2V5V2l0aG91dEFzeW5jU3VmZml4ID0ga2V5LnJlcGxhY2Uoc3VmZml4UmVnZXhwLCBcIlwiKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmV0Lmxlbmd0aDsgaiArPSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldFtqXSA9PT0ga2V5V2l0aG91dEFzeW5jU3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcHJvbWlzaWZ5IGFuIEFQSSB0aGF0IGhhcyBub3JtYWwgbWV0aG9kcyB3aXRoICclcyctc3VmZml4XFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvaVdyWmJ3XFx1MDAwYVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShcIiVzXCIsIHN1ZmZpeCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvbWlzaWZpYWJsZU1ldGhvZHMob2JqLCBzdWZmaXgsIHN1ZmZpeFJlZ2V4cCwgZmlsdGVyKSB7XG4gICAgdmFyIGtleXMgPSB1dGlsLmluaGVyaXRlZERhdGFLZXlzKG9iaik7XG4gICAgdmFyIHJldCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIHZhciBwYXNzZXNEZWZhdWx0RmlsdGVyID0gZmlsdGVyID09PSBkZWZhdWx0RmlsdGVyXG4gICAgICAgICAgICA/IHRydWUgOiBkZWZhdWx0RmlsdGVyKGtleSwgdmFsdWUsIG9iaik7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgIWlzUHJvbWlzaWZpZWQodmFsdWUpICYmXG4gICAgICAgICAgICAhaGFzUHJvbWlzaWZpZWQob2JqLCBrZXksIHN1ZmZpeCkgJiZcbiAgICAgICAgICAgIGZpbHRlcihrZXksIHZhbHVlLCBvYmosIHBhc3Nlc0RlZmF1bHRGaWx0ZXIpKSB7XG4gICAgICAgICAgICByZXQucHVzaChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja1ZhbGlkKHJldCwgc3VmZml4LCBzdWZmaXhSZWdleHApO1xuICAgIHJldHVybiByZXQ7XG59XG5cbnZhciBlc2NhcGVJZGVudFJlZ2V4ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWyRdKS8sIFwiXFxcXCRcIik7XG59O1xuXG52YXIgbWFrZU5vZGVQcm9taXNpZmllZEV2YWw7XG5pZiAoIXRydWUpIHtcbnZhciBzd2l0Y2hDYXNlQXJndW1lbnRPcmRlciA9IGZ1bmN0aW9uKGxpa2VseUFyZ3VtZW50Q291bnQpIHtcbiAgICB2YXIgcmV0ID0gW2xpa2VseUFyZ3VtZW50Q291bnRdO1xuICAgIHZhciBtaW4gPSBNYXRoLm1heCgwLCBsaWtlbHlBcmd1bWVudENvdW50IC0gMSAtIDMpO1xuICAgIGZvcih2YXIgaSA9IGxpa2VseUFyZ3VtZW50Q291bnQgLSAxOyBpID49IG1pbjsgLS1pKSB7XG4gICAgICAgIHJldC5wdXNoKGkpO1xuICAgIH1cbiAgICBmb3IodmFyIGkgPSBsaWtlbHlBcmd1bWVudENvdW50ICsgMTsgaSA8PSAzOyArK2kpIHtcbiAgICAgICAgcmV0LnB1c2goaSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG52YXIgYXJndW1lbnRTZXF1ZW5jZSA9IGZ1bmN0aW9uKGFyZ3VtZW50Q291bnQpIHtcbiAgICByZXR1cm4gdXRpbC5maWxsZWRSYW5nZShhcmd1bWVudENvdW50LCBcIl9hcmdcIiwgXCJcIik7XG59O1xuXG52YXIgcGFyYW1ldGVyRGVjbGFyYXRpb24gPSBmdW5jdGlvbihwYXJhbWV0ZXJDb3VudCkge1xuICAgIHJldHVybiB1dGlsLmZpbGxlZFJhbmdlKFxuICAgICAgICBNYXRoLm1heChwYXJhbWV0ZXJDb3VudCwgMyksIFwiX2FyZ1wiLCBcIlwiKTtcbn07XG5cbnZhciBwYXJhbWV0ZXJDb3VudCA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbi5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKGZuLmxlbmd0aCwgMTAyMyArIDEpLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59O1xuXG5tYWtlTm9kZVByb21pc2lmaWVkRXZhbCA9XG5mdW5jdGlvbihjYWxsYmFjaywgcmVjZWl2ZXIsIG9yaWdpbmFsTmFtZSwgZm4pIHtcbiAgICB2YXIgbmV3UGFyYW1ldGVyQ291bnQgPSBNYXRoLm1heCgwLCBwYXJhbWV0ZXJDb3VudChmbikgLSAxKTtcbiAgICB2YXIgYXJndW1lbnRPcmRlciA9IHN3aXRjaENhc2VBcmd1bWVudE9yZGVyKG5ld1BhcmFtZXRlckNvdW50KTtcbiAgICB2YXIgc2hvdWxkUHJveHlUaGlzID0gdHlwZW9mIGNhbGxiYWNrID09PSBcInN0cmluZ1wiIHx8IHJlY2VpdmVyID09PSBUSElTO1xuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVDYWxsRm9yQXJndW1lbnRDb3VudChjb3VudCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50U2VxdWVuY2UoY291bnQpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgdmFyIGNvbW1hID0gY291bnQgPiAwID8gXCIsIFwiIDogXCJcIjtcbiAgICAgICAgdmFyIHJldDtcbiAgICAgICAgaWYgKHNob3VsZFByb3h5VGhpcykge1xuICAgICAgICAgICAgcmV0ID0gXCJyZXQgPSBjYWxsYmFjay5jYWxsKHRoaXMsIHt7YXJnc319LCBub2RlYmFjayk7IGJyZWFrO1xcblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0ID0gcmVjZWl2ZXIgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gXCJyZXQgPSBjYWxsYmFjayh7e2FyZ3N9fSwgbm9kZWJhY2spOyBicmVhaztcXG5cIlxuICAgICAgICAgICAgICAgIDogXCJyZXQgPSBjYWxsYmFjay5jYWxsKHJlY2VpdmVyLCB7e2FyZ3N9fSwgbm9kZWJhY2spOyBicmVhaztcXG5cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0LnJlcGxhY2UoXCJ7e2FyZ3N9fVwiLCBhcmdzKS5yZXBsYWNlKFwiLCBcIiwgY29tbWEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQXJndW1lbnRTd2l0Y2hDYXNlKCkge1xuICAgICAgICB2YXIgcmV0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudE9yZGVyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXQgKz0gXCJjYXNlIFwiICsgYXJndW1lbnRPcmRlcltpXSArXCI6XCIgK1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlQ2FsbEZvckFyZ3VtZW50Q291bnQoYXJndW1lbnRPcmRlcltpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgKz0gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgZGVmYXVsdDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGxlbiArIDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBpID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBub2RlYmFjazsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIFtDb2RlRm9yQ2FsbF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgXCIucmVwbGFjZShcIltDb2RlRm9yQ2FsbF1cIiwgKHNob3VsZFByb3h5VGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwicmV0ID0gY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XFxuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcInJldCA9IGNhbGxiYWNrLmFwcGx5KHJlY2VpdmVyLCBhcmdzKTtcXG5cIikpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHZhciBnZXRGdW5jdGlvbkNvZGUgPSB0eXBlb2YgY2FsbGJhY2sgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoXCJ0aGlzICE9IG51bGwgPyB0aGlzWydcIitjYWxsYmFjaytcIiddIDogZm5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImZuXCI7XG5cbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiUHJvbWlzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aXRoQXBwZW5kZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWF5YmVXcmFwQXNFcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlYmFja0ZvclByb21pc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHJ5Q2F0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXJyb3JPYmpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSU5URVJOQUxcIixcIid1c2Ugc3RyaWN0JzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgdmFyIHJldCA9IGZ1bmN0aW9uIChQYXJhbWV0ZXJzKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoSU5URVJOQUwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHByb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBub2RlYmFjayA9IG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlKTsgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciByZXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IHRyeUNhdGNoKFtHZXRGdW5jdGlvbkNvZGVdKTsgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHN3aXRjaChsZW4pIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBbQ29kZUZvclN3aXRjaENhc2VdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhtYXliZVdyYXBBc0Vycm9yKHJldC5lKSwgdHJ1ZSwgdHJ1ZSk7XFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgcmV0Ll9faXNQcm9taXNpZmllZF9fID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgcmV0dXJuIHJldDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgXCJcbiAgICAgICAgLnJlcGxhY2UoXCJQYXJhbWV0ZXJzXCIsIHBhcmFtZXRlckRlY2xhcmF0aW9uKG5ld1BhcmFtZXRlckNvdW50KSlcbiAgICAgICAgLnJlcGxhY2UoXCJbQ29kZUZvclN3aXRjaENhc2VdXCIsIGdlbmVyYXRlQXJndW1lbnRTd2l0Y2hDYXNlKCkpXG4gICAgICAgIC5yZXBsYWNlKFwiW0dldEZ1bmN0aW9uQ29kZV1cIiwgZ2V0RnVuY3Rpb25Db2RlKSkoXG4gICAgICAgICAgICBQcm9taXNlLFxuICAgICAgICAgICAgZm4sXG4gICAgICAgICAgICByZWNlaXZlcixcbiAgICAgICAgICAgIHdpdGhBcHBlbmRlZCxcbiAgICAgICAgICAgIG1heWJlV3JhcEFzRXJyb3IsXG4gICAgICAgICAgICBub2RlYmFja0ZvclByb21pc2UsXG4gICAgICAgICAgICB1dGlsLnRyeUNhdGNoLFxuICAgICAgICAgICAgdXRpbC5lcnJvck9iaixcbiAgICAgICAgICAgIElOVEVSTkFMXG4gICAgICAgICk7XG59O1xufVxuXG5mdW5jdGlvbiBtYWtlTm9kZVByb21pc2lmaWVkQ2xvc3VyZShjYWxsYmFjaywgcmVjZWl2ZXIsIF8sIGZuKSB7XG4gICAgdmFyIGRlZmF1bHRUaGlzID0gKGZ1bmN0aW9uKCkge3JldHVybiB0aGlzO30pKCk7XG4gICAgdmFyIG1ldGhvZCA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb21pc2lmaWVkKCkge1xuICAgICAgICB2YXIgX3JlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgIGlmIChyZWNlaXZlciA9PT0gVEhJUykgX3JlY2VpdmVyID0gdGhpcztcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgICAgIHByb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgICAgIHZhciBjYiA9IHR5cGVvZiBtZXRob2QgPT09IFwic3RyaW5nXCIgJiYgdGhpcyAhPT0gZGVmYXVsdFRoaXNcbiAgICAgICAgICAgID8gdGhpc1ttZXRob2RdIDogY2FsbGJhY2s7XG4gICAgICAgIHZhciBmbiA9IG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNiLmFwcGx5KF9yZWNlaXZlciwgd2l0aEFwcGVuZGVkKGFyZ3VtZW50cywgZm4pKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhtYXliZVdyYXBBc0Vycm9yKGUpLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgcHJvbWlzaWZpZWQuX19pc1Byb21pc2lmaWVkX18gPSB0cnVlO1xuICAgIHJldHVybiBwcm9taXNpZmllZDtcbn1cblxudmFyIG1ha2VOb2RlUHJvbWlzaWZpZWQgPSBjYW5FdmFsdWF0ZVxuICAgID8gbWFrZU5vZGVQcm9taXNpZmllZEV2YWxcbiAgICA6IG1ha2VOb2RlUHJvbWlzaWZpZWRDbG9zdXJlO1xuXG5mdW5jdGlvbiBwcm9taXNpZnlBbGwob2JqLCBzdWZmaXgsIGZpbHRlciwgcHJvbWlzaWZpZXIpIHtcbiAgICB2YXIgc3VmZml4UmVnZXhwID0gbmV3IFJlZ0V4cChlc2NhcGVJZGVudFJlZ2V4KHN1ZmZpeCkgKyBcIiRcIik7XG4gICAgdmFyIG1ldGhvZHMgPVxuICAgICAgICBwcm9taXNpZmlhYmxlTWV0aG9kcyhvYmosIHN1ZmZpeCwgc3VmZml4UmVnZXhwLCBmaWx0ZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuOyBpKz0gMikge1xuICAgICAgICB2YXIga2V5ID0gbWV0aG9kc1tpXTtcbiAgICAgICAgdmFyIGZuID0gbWV0aG9kc1tpKzFdO1xuICAgICAgICB2YXIgcHJvbWlzaWZpZWRLZXkgPSBrZXkgKyBzdWZmaXg7XG4gICAgICAgIG9ialtwcm9taXNpZmllZEtleV0gPSBwcm9taXNpZmllciA9PT0gbWFrZU5vZGVQcm9taXNpZmllZFxuICAgICAgICAgICAgICAgID8gbWFrZU5vZGVQcm9taXNpZmllZChrZXksIFRISVMsIGtleSwgZm4sIHN1ZmZpeClcbiAgICAgICAgICAgICAgICA6IHByb21pc2lmaWVyKGZuLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VOb2RlUHJvbWlzaWZpZWQoa2V5LCBUSElTLCBrZXksIGZuLCBzdWZmaXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICB1dGlsLnRvRmFzdFByb3BlcnRpZXMob2JqKTtcbiAgICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBwcm9taXNpZnkoY2FsbGJhY2ssIHJlY2VpdmVyKSB7XG4gICAgcmV0dXJuIG1ha2VOb2RlUHJvbWlzaWZpZWQoY2FsbGJhY2ssIHJlY2VpdmVyLCB1bmRlZmluZWQsIGNhbGxiYWNrKTtcbn1cblxuUHJvbWlzZS5wcm9taXNpZnkgPSBmdW5jdGlvbiAoZm4sIHJlY2VpdmVyKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmbiBtdXN0IGJlIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85MTZsSkpcXHUwMDBhXCIpO1xuICAgIH1cbiAgICBpZiAoaXNQcm9taXNpZmllZChmbikpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gcHJvbWlzaWZ5KGZuLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFRISVMgOiByZWNlaXZlcik7XG4gICAgdXRpbC5jb3B5RGVzY3JpcHRvcnMoZm4sIHJldCwgcHJvcHNGaWx0ZXIpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb21pc2lmeUFsbCA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInRoZSB0YXJnZXQgb2YgcHJvbWlzaWZ5QWxsIG11c3QgYmUgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb25cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC85SVRsVjBcXHUwMDBhXCIpO1xuICAgIH1cbiAgICBvcHRpb25zID0gT2JqZWN0KG9wdGlvbnMpO1xuICAgIHZhciBzdWZmaXggPSBvcHRpb25zLnN1ZmZpeDtcbiAgICBpZiAodHlwZW9mIHN1ZmZpeCAhPT0gXCJzdHJpbmdcIikgc3VmZml4ID0gZGVmYXVsdFN1ZmZpeDtcbiAgICB2YXIgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZGVmYXVsdEZpbHRlcjtcbiAgICB2YXIgcHJvbWlzaWZpZXIgPSBvcHRpb25zLnByb21pc2lmaWVyO1xuICAgIGlmICh0eXBlb2YgcHJvbWlzaWZpZXIgIT09IFwiZnVuY3Rpb25cIikgcHJvbWlzaWZpZXIgPSBtYWtlTm9kZVByb21pc2lmaWVkO1xuXG4gICAgaWYgKCF1dGlsLmlzSWRlbnRpZmllcihzdWZmaXgpKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwic3VmZml4IG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvOEZabzVWXFx1MDAwYVwiKTtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IHV0aWwuaW5oZXJpdGVkRGF0YUtleXModGFyZ2V0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGFyZ2V0W2tleXNbaV1dO1xuICAgICAgICBpZiAoa2V5c1tpXSAhPT0gXCJjb25zdHJ1Y3RvclwiICYmXG4gICAgICAgICAgICB1dGlsLmlzQ2xhc3ModmFsdWUpKSB7XG4gICAgICAgICAgICBwcm9taXNpZnlBbGwodmFsdWUucHJvdG90eXBlLCBzdWZmaXgsIGZpbHRlciwgcHJvbWlzaWZpZXIpO1xuICAgICAgICAgICAgcHJvbWlzaWZ5QWxsKHZhbHVlLCBzdWZmaXgsIGZpbHRlciwgcHJvbWlzaWZpZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2lmeUFsbCh0YXJnZXQsIHN1ZmZpeCwgZmlsdGVyLCBwcm9taXNpZmllcik7XG59O1xufTtcblxuXG59LHtcIi4vZXJyb3JzXCI6MTMsXCIuL3Byb21pc2VfcmVzb2x2ZXIuanNcIjoyNSxcIi4vdXRpbC5qc1wiOjM4fV0sMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFxuICAgIFByb21pc2UsIFByb21pc2VBcnJheSwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgaXNPYmplY3QgPSB1dGlsLmlzT2JqZWN0O1xudmFyIGVzNSA9IF9kZXJlcV8oXCIuL2VzNS5qc1wiKTtcblxuZnVuY3Rpb24gUHJvcGVydGllc1Byb21pc2VBcnJheShvYmopIHtcbiAgICB2YXIga2V5cyA9IGVzNS5rZXlzKG9iaik7XG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuICogMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFsdWVzW2ldID0gb2JqW2tleV07XG4gICAgICAgIHZhbHVlc1tpICsgbGVuXSA9IGtleTtcbiAgICB9XG4gICAgdGhpcy5jb25zdHJ1Y3RvciQodmFsdWVzKTtcbn1cbnV0aWwuaW5oZXJpdHMoUHJvcGVydGllc1Byb21pc2VBcnJheSwgUHJvbWlzZUFycmF5KTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faW5pdCQodW5kZWZpbmVkLCAtMykgO1xufTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgIHZhciB0b3RhbFJlc29sdmVkID0gKyt0aGlzLl90b3RhbFJlc29sdmVkO1xuICAgIGlmICh0b3RhbFJlc29sdmVkID49IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICB2YXIgdmFsID0ge307XG4gICAgICAgIHZhciBrZXlPZmZzZXQgPSB0aGlzLmxlbmd0aCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5sZW5ndGgoKTsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICB2YWxbdGhpcy5fdmFsdWVzW2kgKyBrZXlPZmZzZXRdXSA9IHRoaXMuX3ZhbHVlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHZlKHZhbCk7XG4gICAgfVxufTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VQcm9ncmVzc2VkID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHRoaXMuX3Byb21pc2UuX3Byb2dyZXNzKHtcbiAgICAgICAga2V5OiB0aGlzLl92YWx1ZXNbaW5kZXggKyB0aGlzLmxlbmd0aCgpXSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG59O1xuXG5Qcm9wZXJ0aWVzUHJvbWlzZUFycmF5LnByb3RvdHlwZS5zaG91bGRDb3B5VmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblByb3BlcnRpZXNQcm9taXNlQXJyYXkucHJvdG90eXBlLmdldEFjdHVhbExlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgICByZXR1cm4gbGVuID4+IDE7XG59O1xuXG5mdW5jdGlvbiBwcm9wcyhwcm9taXNlcykge1xuICAgIHZhciByZXQ7XG4gICAgdmFyIGNhc3RWYWx1ZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocHJvbWlzZXMpO1xuXG4gICAgaWYgKCFpc09iamVjdChjYXN0VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJjYW5ub3QgYXdhaXQgcHJvcGVydGllcyBvZiBhIG5vbi1vYmplY3RcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9Pc0ZLQzhcXHUwMDBhXCIpO1xuICAgIH0gZWxzZSBpZiAoY2FzdFZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXQgPSBjYXN0VmFsdWUuX3RoZW4oXG4gICAgICAgICAgICBQcm9taXNlLnByb3BzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IG5ldyBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5KGNhc3RWYWx1ZSkucHJvbWlzZSgpO1xuICAgIH1cblxuICAgIGlmIChjYXN0VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldC5fcHJvcGFnYXRlRnJvbShjYXN0VmFsdWUsIDQpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5wcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvcHModGhpcyk7XG59O1xuXG5Qcm9taXNlLnByb3BzID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIHByb3BzKHByb21pc2VzKTtcbn07XG59O1xuXG59LHtcIi4vZXM1LmpzXCI6MTQsXCIuL3V0aWwuanNcIjozOH1dLDI4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gYXJyYXlNb3ZlKHNyYywgc3JjSW5kZXgsIGRzdCwgZHN0SW5kZXgsIGxlbikge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyArK2opIHtcbiAgICAgICAgZHN0W2ogKyBkc3RJbmRleF0gPSBzcmNbaiArIHNyY0luZGV4XTtcbiAgICAgICAgc3JjW2ogKyBzcmNJbmRleF0gPSB2b2lkIDA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBRdWV1ZShjYXBhY2l0eSkge1xuICAgIHRoaXMuX2NhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9mcm9udCA9IDA7XG59XG5cblF1ZXVlLnByb3RvdHlwZS5fd2lsbEJlT3ZlckNhcGFjaXR5ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FwYWNpdHkgPCBzaXplO1xufTtcblxuUXVldWUucHJvdG90eXBlLl9wdXNoT25lID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuICAgIHRoaXMuX2NoZWNrQ2FwYWNpdHkobGVuZ3RoICsgMSk7XG4gICAgdmFyIGkgPSAodGhpcy5fZnJvbnQgKyBsZW5ndGgpICYgKHRoaXMuX2NhcGFjaXR5IC0gMSk7XG4gICAgdGhpc1tpXSA9IGFyZztcbiAgICB0aGlzLl9sZW5ndGggPSBsZW5ndGggKyAxO1xufTtcblxuUXVldWUucHJvdG90eXBlLl91bnNoaWZ0T25lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgY2FwYWNpdHkgPSB0aGlzLl9jYXBhY2l0eTtcbiAgICB0aGlzLl9jaGVja0NhcGFjaXR5KHRoaXMubGVuZ3RoKCkgKyAxKTtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udDtcbiAgICB2YXIgaSA9ICgoKCggZnJvbnQgLSAxICkgJlxuICAgICAgICAgICAgICAgICAgICAoIGNhcGFjaXR5IC0gMSkgKSBeIGNhcGFjaXR5ICkgLSBjYXBhY2l0eSApO1xuICAgIHRoaXNbaV0gPSB2YWx1ZTtcbiAgICB0aGlzLl9mcm9udCA9IGk7XG4gICAgdGhpcy5fbGVuZ3RoID0gdGhpcy5sZW5ndGgoKSArIDE7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKGZuLCByZWNlaXZlciwgYXJnKSB7XG4gICAgdGhpcy5fdW5zaGlmdE9uZShhcmcpO1xuICAgIHRoaXMuX3Vuc2hpZnRPbmUocmVjZWl2ZXIpO1xuICAgIHRoaXMuX3Vuc2hpZnRPbmUoZm4pO1xufTtcblxuUXVldWUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZm4sIHJlY2VpdmVyLCBhcmcpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKSArIDM7XG4gICAgaWYgKHRoaXMuX3dpbGxCZU92ZXJDYXBhY2l0eShsZW5ndGgpKSB7XG4gICAgICAgIHRoaXMuX3B1c2hPbmUoZm4pO1xuICAgICAgICB0aGlzLl9wdXNoT25lKHJlY2VpdmVyKTtcbiAgICAgICAgdGhpcy5fcHVzaE9uZShhcmcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBqID0gdGhpcy5fZnJvbnQgKyBsZW5ndGggLSAzO1xuICAgIHRoaXMuX2NoZWNrQ2FwYWNpdHkobGVuZ3RoKTtcbiAgICB2YXIgd3JhcE1hc2sgPSB0aGlzLl9jYXBhY2l0eSAtIDE7XG4gICAgdGhpc1soaiArIDApICYgd3JhcE1hc2tdID0gZm47XG4gICAgdGhpc1soaiArIDEpICYgd3JhcE1hc2tdID0gcmVjZWl2ZXI7XG4gICAgdGhpc1soaiArIDIpICYgd3JhcE1hc2tdID0gYXJnO1xuICAgIHRoaXMuX2xlbmd0aCA9IGxlbmd0aDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udCxcbiAgICAgICAgcmV0ID0gdGhpc1tmcm9udF07XG5cbiAgICB0aGlzW2Zyb250XSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mcm9udCA9IChmcm9udCArIDEpICYgKHRoaXMuX2NhcGFjaXR5IC0gMSk7XG4gICAgdGhpcy5fbGVuZ3RoLS07XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5fY2hlY2tDYXBhY2l0eSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgaWYgKHRoaXMuX2NhcGFjaXR5IDwgc2l6ZSkge1xuICAgICAgICB0aGlzLl9yZXNpemVUbyh0aGlzLl9jYXBhY2l0eSA8PCAxKTtcbiAgICB9XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUuX3Jlc2l6ZVRvID0gZnVuY3Rpb24gKGNhcGFjaXR5KSB7XG4gICAgdmFyIG9sZENhcGFjaXR5ID0gdGhpcy5fY2FwYWNpdHk7XG4gICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udDtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5fbGVuZ3RoO1xuICAgIHZhciBtb3ZlSXRlbXNDb3VudCA9IChmcm9udCArIGxlbmd0aCkgJiAob2xkQ2FwYWNpdHkgLSAxKTtcbiAgICBhcnJheU1vdmUodGhpcywgMCwgdGhpcywgb2xkQ2FwYWNpdHksIG1vdmVJdGVtc0NvdW50KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG5cbn0se31dLDI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgICBQcm9taXNlLCBJTlRFUk5BTCwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgaXNBcnJheSA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIikuaXNBcnJheTtcblxudmFyIHJhY2VMYXRlciA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbihhcnJheSkge1xuICAgICAgICByZXR1cm4gcmFjZShhcnJheSwgcHJvbWlzZSk7XG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiByYWNlKHByb21pc2VzLCBwYXJlbnQpIHtcbiAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShwcm9taXNlcyk7XG5cbiAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gcmFjZUxhdGVyKG1heWJlUHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmICghaXNBcnJheShwcm9taXNlcykpIHtcbiAgICAgICAgcmV0dXJuIGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhbiBhcnJheSwgYSBwcm9taXNlIG9yIGEgdGhlbmFibGVcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9zOE1NaGNcXHUwMDBhXCIpO1xuICAgIH1cblxuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgaWYgKHBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldC5fcHJvcGFnYXRlRnJvbShwYXJlbnQsIDQgfCAxKTtcbiAgICB9XG4gICAgdmFyIGZ1bGZpbGwgPSByZXQuX2Z1bGZpbGw7XG4gICAgdmFyIHJlamVjdCA9IHJldC5fcmVqZWN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwcm9taXNlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICB2YXIgdmFsID0gcHJvbWlzZXNbaV07XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkICYmICEoaSBpbiBwcm9taXNlcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5jYXN0KHZhbCkuX3RoZW4oZnVsZmlsbCwgcmVqZWN0LCB1bmRlZmluZWQsIHJldCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cblByb21pc2UucmFjZSA9IGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgIHJldHVybiByYWNlKHByb21pc2VzLCB1bmRlZmluZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUucmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmFjZSh0aGlzLCB1bmRlZmluZWQpO1xufTtcblxufTtcblxufSx7XCIuL3V0aWwuanNcIjozOH1dLDMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlQXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFwaVJlamVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Q29udmVydFRvUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgSU5URVJOQUwpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbC5qc1wiKTtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xuZnVuY3Rpb24gUmVkdWN0aW9uUHJvbWlzZUFycmF5KHByb21pc2VzLCBmbiwgYWNjdW0sIF9lYWNoKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RvciQocHJvbWlzZXMpO1xuICAgIHRoaXMuX3Byb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgdGhpcy5fcHJlc2VydmVkVmFsdWVzID0gX2VhY2ggPT09IElOVEVSTkFMID8gW10gOiBudWxsO1xuICAgIHRoaXMuX3plcm90aElzQWNjdW0gPSAoYWNjdW0gPT09IHVuZGVmaW5lZCk7XG4gICAgdGhpcy5fZ290QWNjdW0gPSBmYWxzZTtcbiAgICB0aGlzLl9yZWR1Y2luZ0luZGV4ID0gKHRoaXMuX3plcm90aElzQWNjdW0gPyAxIDogMCk7XG4gICAgdGhpcy5fdmFsdWVzUGhhc2UgPSB1bmRlZmluZWQ7XG4gICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UoYWNjdW0sIHRoaXMuX3Byb21pc2UpO1xuICAgIHZhciByZWplY3RlZCA9IGZhbHNlO1xuICAgIHZhciBpc1Byb21pc2UgPSBtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlO1xuICAgIGlmIChpc1Byb21pc2UpIHtcbiAgICAgICAgbWF5YmVQcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZS5faXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fcHJveHlQcm9taXNlQXJyYXkodGhpcywgLTEpO1xuICAgICAgICB9IGVsc2UgaWYgKG1heWJlUHJvbWlzZS5faXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgYWNjdW0gPSBtYXliZVByb21pc2UuX3ZhbHVlKCk7XG4gICAgICAgICAgICB0aGlzLl9nb3RBY2N1bSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICByZWplY3RlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEoaXNQcm9taXNlIHx8IHRoaXMuX3plcm90aElzQWNjdW0pKSB0aGlzLl9nb3RBY2N1bSA9IHRydWU7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBmbjtcbiAgICB0aGlzLl9hY2N1bSA9IGFjY3VtO1xuICAgIGlmICghcmVqZWN0ZWQpIHRoaXMuX2luaXQkKHVuZGVmaW5lZCwgLTUpO1xufVxudXRpbC5pbmhlcml0cyhSZWR1Y3Rpb25Qcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cblJlZHVjdGlvblByb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVzb2x2ZUVtcHR5QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2dvdEFjY3VtIHx8IHRoaXMuX3plcm90aElzQWNjdW0pIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl9wcmVzZXJ2ZWRWYWx1ZXMgIT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW10gOiB0aGlzLl9hY2N1bSk7XG4gICAgfVxufTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5fdmFsdWVzO1xuICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcbiAgICB2YXIgcHJlc2VydmVkVmFsdWVzID0gdGhpcy5fcHJlc2VydmVkVmFsdWVzO1xuICAgIHZhciBpc0VhY2ggPSBwcmVzZXJ2ZWRWYWx1ZXMgIT09IG51bGw7XG4gICAgdmFyIGdvdEFjY3VtID0gdGhpcy5fZ290QWNjdW07XG4gICAgdmFyIHZhbHVlc1BoYXNlID0gdGhpcy5fdmFsdWVzUGhhc2U7XG4gICAgdmFyIHZhbHVlc1BoYXNlSW5kZXg7XG4gICAgaWYgKCF2YWx1ZXNQaGFzZSkge1xuICAgICAgICB2YWx1ZXNQaGFzZSA9IHRoaXMuX3ZhbHVlc1BoYXNlID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvciAodmFsdWVzUGhhc2VJbmRleD0wOyB2YWx1ZXNQaGFzZUluZGV4PGxlbmd0aDsgKyt2YWx1ZXNQaGFzZUluZGV4KSB7XG4gICAgICAgICAgICB2YWx1ZXNQaGFzZVt2YWx1ZXNQaGFzZUluZGV4XSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsdWVzUGhhc2VJbmRleCA9IHZhbHVlc1BoYXNlW2luZGV4XTtcblxuICAgIGlmIChpbmRleCA9PT0gMCAmJiB0aGlzLl96ZXJvdGhJc0FjY3VtKSB7XG4gICAgICAgIHRoaXMuX2FjY3VtID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2dvdEFjY3VtID0gZ290QWNjdW0gPSB0cnVlO1xuICAgICAgICB2YWx1ZXNQaGFzZVtpbmRleF0gPSAoKHZhbHVlc1BoYXNlSW5kZXggPT09IDApXG4gICAgICAgICAgICA/IDEgOiAyKTtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aGlzLl9hY2N1bSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9nb3RBY2N1bSA9IGdvdEFjY3VtID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsdWVzUGhhc2VJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgdmFsdWVzUGhhc2VbaW5kZXhdID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlc1BoYXNlW2luZGV4XSA9IDI7XG4gICAgICAgICAgICB0aGlzLl9hY2N1bSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZ290QWNjdW0pIHJldHVybjtcblxuICAgIHZhciBjYWxsYmFjayA9IHRoaXMuX2NhbGxiYWNrO1xuICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3Byb21pc2UuX2JvdW5kVG87XG4gICAgdmFyIHJldDtcblxuICAgIGZvciAodmFyIGkgPSB0aGlzLl9yZWR1Y2luZ0luZGV4OyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFsdWVzUGhhc2VJbmRleCA9IHZhbHVlc1BoYXNlW2ldO1xuICAgICAgICBpZiAodmFsdWVzUGhhc2VJbmRleCA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5fcmVkdWNpbmdJbmRleCA9IGkgKyAxO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlc1BoYXNlSW5kZXggIT09IDEpIHJldHVybjtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIHRoaXMuX3Byb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgICAgIGlmIChpc0VhY2gpIHtcbiAgICAgICAgICAgIHByZXNlcnZlZFZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIHJldCA9IHRyeUNhdGNoKGNhbGxiYWNrKS5jYWxsKHJlY2VpdmVyLCB2YWx1ZSwgaSwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCA9IHRyeUNhdGNoKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIC5jYWxsKHJlY2VpdmVyLCB0aGlzLl9hY2N1bSwgdmFsdWUsIGksIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcG9wQ29udGV4dCgpO1xuXG4gICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSByZXR1cm4gdGhpcy5fcmVqZWN0KHJldC5lKTtcblxuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShyZXQsIHRoaXMuX3Byb21pc2UpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UuX2lzUGVuZGluZygpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzUGhhc2VbaV0gPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXliZVByb21pc2UuX3Byb3h5UHJvbWlzZUFycmF5KHRoaXMsIGkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXliZVByb21pc2UuX2lzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBtYXliZVByb21pc2UuX3ZhbHVlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWR1Y2luZ0luZGV4ID0gaSArIDE7XG4gICAgICAgIHRoaXMuX2FjY3VtID0gcmV0O1xuICAgIH1cblxuICAgIHRoaXMuX3Jlc29sdmUoaXNFYWNoID8gcHJlc2VydmVkVmFsdWVzIDogdGhpcy5fYWNjdW0pO1xufTtcblxuZnVuY3Rpb24gcmVkdWNlKHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCBfZWFjaCkge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGFwaVJlamVjdGlvbihcImZuIG11c3QgYmUgYSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsLzkxNmxKSlxcdTAwMGFcIik7XG4gICAgdmFyIGFycmF5ID0gbmV3IFJlZHVjdGlvblByb21pc2VBcnJheShwcm9taXNlcywgZm4sIGluaXRpYWxWYWx1ZSwgX2VhY2gpO1xuICAgIHJldHVybiBhcnJheS5wcm9taXNlKCk7XG59XG5cblByb21pc2UucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChmbiwgaW5pdGlhbFZhbHVlKSB7XG4gICAgcmV0dXJuIHJlZHVjZSh0aGlzLCBmbiwgaW5pdGlhbFZhbHVlLCBudWxsKTtcbn07XG5cblByb21pc2UucmVkdWNlID0gZnVuY3Rpb24gKHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCBfZWFjaCkge1xuICAgIHJldHVybiByZWR1Y2UocHJvbWlzZXMsIGZuLCBpbml0aWFsVmFsdWUsIF9lYWNoKTtcbn07XG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgc2NoZWR1bGU7XG5pZiAoX2RlcmVxXyhcIi4vdXRpbC5qc1wiKS5pc05vZGUpIHtcbiAgICB2YXIgdmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdChcIi5cIikubWFwKE51bWJlcik7XG4gICAgc2NoZWR1bGUgPSAodmVyc2lvblswXSA9PT0gMCAmJiB2ZXJzaW9uWzFdID4gMTApIHx8ICh2ZXJzaW9uWzBdID4gMClcbiAgICAgICAgPyBnbG9iYWwuc2V0SW1tZWRpYXRlIDogcHJvY2Vzcy5uZXh0VGljaztcbn1cbmVsc2UgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgc2NoZWR1bGUgPSBmdW5jdGlvbihmbikge1xuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZm4pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRpdiwge2F0dHJpYnV0ZXM6IHRydWV9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyBkaXYuY2xhc3NMaXN0LnRvZ2dsZShcImZvb1wiKTsgfTtcbiAgICB9O1xuICAgIHNjaGVkdWxlLmlzU3RhdGljID0gdHJ1ZTtcbn1cbmVsc2UgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgc2NoZWR1bGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn1cbmVsc2Uge1xuICAgIHNjaGVkdWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGFzeW5jIHNjaGVkdWxlciBhdmFpbGFibGVcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9tM09UWGtcXHUwMDBhXCIpO1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNjaGVkdWxlO1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9XG4gICAgZnVuY3Rpb24oUHJvbWlzZSwgUHJvbWlzZUFycmF5KSB7XG52YXIgUHJvbWlzZUluc3BlY3Rpb24gPSBQcm9taXNlLlByb21pc2VJbnNwZWN0aW9uO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xuXG5mdW5jdGlvbiBTZXR0bGVkUHJvbWlzZUFycmF5KHZhbHVlcykge1xuICAgIHRoaXMuY29uc3RydWN0b3IkKHZhbHVlcyk7XG59XG51dGlsLmluaGVyaXRzKFNldHRsZWRQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cblNldHRsZWRQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlUmVzb2x2ZWQgPSBmdW5jdGlvbiAoaW5kZXgsIGluc3BlY3Rpb24pIHtcbiAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gaW5zcGVjdGlvbjtcbiAgICB2YXIgdG90YWxSZXNvbHZlZCA9ICsrdGhpcy5fdG90YWxSZXNvbHZlZDtcbiAgICBpZiAodG90YWxSZXNvbHZlZCA+PSB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpO1xuICAgIH1cbn07XG5cblNldHRsZWRQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZUluc3BlY3Rpb24oKTtcbiAgICByZXQuX2JpdEZpZWxkID0gMjY4NDM1NDU2O1xuICAgIHJldC5fc2V0dGxlZFZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fcHJvbWlzZVJlc29sdmVkKGluZGV4LCByZXQpO1xufTtcblNldHRsZWRQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlUmVqZWN0ZWQgPSBmdW5jdGlvbiAocmVhc29uLCBpbmRleCkge1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZUluc3BlY3Rpb24oKTtcbiAgICByZXQuX2JpdEZpZWxkID0gMTM0MjE3NzI4O1xuICAgIHJldC5fc2V0dGxlZFZhbHVlID0gcmVhc29uO1xuICAgIHRoaXMuX3Byb21pc2VSZXNvbHZlZChpbmRleCwgcmV0KTtcbn07XG5cblByb21pc2Uuc2V0dGxlID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIG5ldyBTZXR0bGVkUHJvbWlzZUFycmF5KHByb21pc2VzKS5wcm9taXNlKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5zZXR0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTZXR0bGVkUHJvbWlzZUFycmF5KHRoaXMpLnByb21pc2UoKTtcbn07XG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9XG5mdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXksIGFwaVJlamVjdGlvbikge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsLmpzXCIpO1xudmFyIFJhbmdlRXJyb3IgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIikuUmFuZ2VFcnJvcjtcbnZhciBBZ2dyZWdhdGVFcnJvciA9IF9kZXJlcV8oXCIuL2Vycm9ycy5qc1wiKS5BZ2dyZWdhdGVFcnJvcjtcbnZhciBpc0FycmF5ID0gdXRpbC5pc0FycmF5O1xuXG5cbmZ1bmN0aW9uIFNvbWVQcm9taXNlQXJyYXkodmFsdWVzKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RvciQodmFsdWVzKTtcbiAgICB0aGlzLl9ob3dNYW55ID0gMDtcbiAgICB0aGlzLl91bndyYXAgPSBmYWxzZTtcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xufVxudXRpbC5pbmhlcml0cyhTb21lUHJvbWlzZUFycmF5LCBQcm9taXNlQXJyYXkpO1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2hvd01hbnkgPT09IDApIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZShbXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5faW5pdCQodW5kZWZpbmVkLCAtNSk7XG4gICAgdmFyIGlzQXJyYXlSZXNvbHZlZCA9IGlzQXJyYXkodGhpcy5fdmFsdWVzKTtcbiAgICBpZiAoIXRoaXMuX2lzUmVzb2x2ZWQoKSAmJlxuICAgICAgICBpc0FycmF5UmVzb2x2ZWQgJiZcbiAgICAgICAgdGhpcy5faG93TWFueSA+IHRoaXMuX2NhblBvc3NpYmx5RnVsZmlsbCgpKSB7XG4gICAgICAgIHRoaXMuX3JlamVjdCh0aGlzLl9nZXRSYW5nZUVycm9yKHRoaXMubGVuZ3RoKCkpKTtcbiAgICB9XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLl9pbml0KCk7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5zZXRVbndyYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdW53cmFwID0gdHJ1ZTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLmhvd01hbnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hvd01hbnk7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5zZXRIb3dNYW55ID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgdGhpcy5faG93TWFueSA9IGNvdW50O1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLl9hZGRGdWxmaWxsZWQodmFsdWUpO1xuICAgIGlmICh0aGlzLl9mdWxmaWxsZWQoKSA9PT0gdGhpcy5ob3dNYW55KCkpIHtcbiAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aCA9IHRoaXMuaG93TWFueSgpO1xuICAgICAgICBpZiAodGhpcy5ob3dNYW55KCkgPT09IDEgJiYgdGhpcy5fdW53cmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRoaXMuX3ZhbHVlc1swXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRoaXMuX3ZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRoaXMuX2FkZFJlamVjdGVkKHJlYXNvbik7XG4gICAgaWYgKHRoaXMuaG93TWFueSgpID4gdGhpcy5fY2FuUG9zc2libHlGdWxmaWxsKCkpIHtcbiAgICAgICAgdmFyIGUgPSBuZXcgQWdncmVnYXRlRXJyb3IoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoKCk7IGkgPCB0aGlzLl92YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGUucHVzaCh0aGlzLl92YWx1ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlamVjdChlKTtcbiAgICB9XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fZnVsZmlsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl90b3RhbFJlc29sdmVkO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3JlamVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXMubGVuZ3RoIC0gdGhpcy5sZW5ndGgoKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9hZGRSZWplY3RlZCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB0aGlzLl92YWx1ZXMucHVzaChyZWFzb24pO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX2FkZEZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlc1t0aGlzLl90b3RhbFJlc29sdmVkKytdID0gdmFsdWU7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fY2FuUG9zc2libHlGdWxmaWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCgpIC0gdGhpcy5fcmVqZWN0ZWQoKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9nZXRSYW5nZUVycm9yID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBcIklucHV0IGFycmF5IG11c3QgY29udGFpbiBhdCBsZWFzdCBcIiArXG4gICAgICAgICAgICB0aGlzLl9ob3dNYW55ICsgXCIgaXRlbXMgYnV0IGNvbnRhaW5zIG9ubHkgXCIgKyBjb3VudCArIFwiIGl0ZW1zXCI7XG4gICAgcmV0dXJuIG5ldyBSYW5nZUVycm9yKG1lc3NhZ2UpO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3Jlc29sdmVFbXB0eUFycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3JlamVjdCh0aGlzLl9nZXRSYW5nZUVycm9yKDApKTtcbn07XG5cbmZ1bmN0aW9uIHNvbWUocHJvbWlzZXMsIGhvd01hbnkpIHtcbiAgICBpZiAoKGhvd01hbnkgfCAwKSAhPT0gaG93TWFueSB8fCBob3dNYW55IDwgMCkge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZXhwZWN0aW5nIGEgcG9zaXRpdmUgaW50ZWdlclxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsLzF3QW1IeFxcdTAwMGFcIik7XG4gICAgfVxuICAgIHZhciByZXQgPSBuZXcgU29tZVByb21pc2VBcnJheShwcm9taXNlcyk7XG4gICAgdmFyIHByb21pc2UgPSByZXQucHJvbWlzZSgpO1xuICAgIHJldC5zZXRIb3dNYW55KGhvd01hbnkpO1xuICAgIHJldC5pbml0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cblByb21pc2Uuc29tZSA9IGZ1bmN0aW9uIChwcm9taXNlcywgaG93TWFueSkge1xuICAgIHJldHVybiBzb21lKHByb21pc2VzLCBob3dNYW55KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNvbWUgPSBmdW5jdGlvbiAoaG93TWFueSkge1xuICAgIHJldHVybiBzb21lKHRoaXMsIGhvd01hbnkpO1xufTtcblxuUHJvbWlzZS5fU29tZVByb21pc2VBcnJheSA9IFNvbWVQcm9taXNlQXJyYXk7XG59O1xuXG59LHtcIi4vZXJyb3JzLmpzXCI6MTMsXCIuL3V0aWwuanNcIjozOH1dLDM0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlKSB7XG5mdW5jdGlvbiBQcm9taXNlSW5zcGVjdGlvbihwcm9taXNlKSB7XG4gICAgaWYgKHByb21pc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS5fdGFyZ2V0KCk7XG4gICAgICAgIHRoaXMuX2JpdEZpZWxkID0gcHJvbWlzZS5fYml0RmllbGQ7XG4gICAgICAgIHRoaXMuX3NldHRsZWRWYWx1ZSA9IHByb21pc2UuX3NldHRsZWRWYWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX2JpdEZpZWxkID0gMDtcbiAgICAgICAgdGhpcy5fc2V0dGxlZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgZ2V0IGZ1bGZpbGxtZW50IHZhbHVlIG9mIGEgbm9uLWZ1bGZpbGxlZCBwcm9taXNlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvaGMxRExqXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZTtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5lcnJvciA9XG5Qcm9taXNlSW5zcGVjdGlvbi5wcm90b3R5cGUucmVhc29uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pc1JlamVjdGVkKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCBnZXQgcmVqZWN0aW9uIHJlYXNvbiBvZiBhIG5vbi1yZWplY3RlZCBwcm9taXNlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvaFB1aXdCXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZTtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9XG5Qcm9taXNlLnByb3RvdHlwZS5faXNGdWxmaWxsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDI2ODQzNTQ1NikgPiAwO1xufTtcblxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLmlzUmVqZWN0ZWQgPVxuUHJvbWlzZS5wcm90b3R5cGUuX2lzUmVqZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDEzNDIxNzcyOCkgPiAwO1xufTtcblxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLmlzUGVuZGluZyA9XG5Qcm9taXNlLnByb3RvdHlwZS5faXNQZW5kaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA0MDI2NTMxODQpID09PSAwO1xufTtcblxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLmlzUmVzb2x2ZWQgPVxuUHJvbWlzZS5wcm90b3R5cGUuX2lzUmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDQwMjY1MzE4NCkgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuaXNQZW5kaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldCgpLl9pc1BlbmRpbmcoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmlzUmVqZWN0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0KCkuX2lzUmVqZWN0ZWQoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmlzRnVsZmlsbGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldCgpLl9pc0Z1bGZpbGxlZCgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuaXNSZXNvbHZlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXQoKS5faXNSZXNvbHZlZCgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWFzb24gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldCgpO1xuICAgIGlmICghdGFyZ2V0LmlzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCBnZXQgZnVsZmlsbG1lbnQgdmFsdWUgb2YgYSBub24tZnVsZmlsbGVkIHByb21pc2VcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9oYzFETGpcXHUwMDBhXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0Ll9zZXR0bGVkVmFsdWU7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5yZWFzb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0KCk7XG4gICAgaWYgKCF0YXJnZXQuaXNSZWplY3RlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgZ2V0IHJlamVjdGlvbiByZWFzb24gb2YgYSBub24tcmVqZWN0ZWQgcHJvbWlzZVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL2hQdWl3QlxcdTAwMGFcIik7XG4gICAgfVxuICAgIHRhcmdldC5fdW5zZXRSZWplY3Rpb25Jc1VuaGFuZGxlZCgpO1xuICAgIHJldHVybiB0YXJnZXQuX3NldHRsZWRWYWx1ZTtcbn07XG5cblxuUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbiA9IFByb21pc2VJbnNwZWN0aW9uO1xufTtcblxufSx7fV0sMzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIGlzT2JqZWN0ID0gdXRpbC5pc09iamVjdDtcblxuZnVuY3Rpb24gdHJ5Q29udmVydFRvUHJvbWlzZShvYmosIGNvbnRleHQpIHtcbiAgICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0FueUJsdWViaXJkUHJvbWlzZShvYmopKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgICAgICAgICAgb2JqLl90aGVuKFxuICAgICAgICAgICAgICAgIHJldC5fZnVsZmlsbFVuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICByZXQuX3JlamVjdFVuY2hlY2tlZENoZWNrRXJyb3IsXG4gICAgICAgICAgICAgICAgcmV0Ll9wcm9ncmVzc1VuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICByZXQsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoZW4gPSB1dGlsLnRyeUNhdGNoKGdldFRoZW4pKG9iaik7XG4gICAgICAgIGlmICh0aGVuID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQpIGNvbnRleHQuX3B1c2hDb250ZXh0KCk7XG4gICAgICAgICAgICB2YXIgcmV0ID0gUHJvbWlzZS5yZWplY3QodGhlbi5lKTtcbiAgICAgICAgICAgIGlmIChjb250ZXh0KSBjb250ZXh0Ll9wb3BDb250ZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBkb1RoZW5hYmxlKG9iaiwgdGhlbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gZ2V0VGhlbihvYmopIHtcbiAgICByZXR1cm4gb2JqLnRoZW47XG59XG5cbnZhciBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBpc0FueUJsdWViaXJkUHJvbWlzZShvYmopIHtcbiAgICByZXR1cm4gaGFzUHJvcC5jYWxsKG9iaiwgXCJfcHJvbWlzZTBcIik7XG59XG5cbmZ1bmN0aW9uIGRvVGhlbmFibGUoeCwgdGhlbiwgY29udGV4dCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHZhciByZXQgPSBwcm9taXNlO1xuICAgIGlmIChjb250ZXh0KSBjb250ZXh0Ll9wdXNoQ29udGV4dCgpO1xuICAgIHByb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgaWYgKGNvbnRleHQpIGNvbnRleHQuX3BvcENvbnRleHQoKTtcbiAgICB2YXIgc3luY2hyb25vdXMgPSB0cnVlO1xuICAgIHZhciByZXN1bHQgPSB1dGlsLnRyeUNhdGNoKHRoZW4pLmNhbGwoeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlRnJvbVRoZW5hYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdEZyb21UaGVuYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0Zyb21UaGVuYWJsZSk7XG4gICAgc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICBpZiAocHJvbWlzZSAmJiByZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKHJlc3VsdC5lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZUZyb21UaGVuYWJsZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXByb21pc2UpIHJldHVybjtcbiAgICAgICAgaWYgKHggPT09IHZhbHVlKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhcbiAgICAgICAgICAgICAgICBQcm9taXNlLl9tYWtlU2VsZlJlc29sdXRpb25FcnJvcigpLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLl9yZXNvbHZlQ2FsbGJhY2sodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdEZyb21UaGVuYWJsZShyZWFzb24pIHtcbiAgICAgICAgaWYgKCFwcm9taXNlKSByZXR1cm47XG4gICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKHJlYXNvbiwgc3luY2hyb25vdXMsIHRydWUpO1xuICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9ncmVzc0Zyb21UaGVuYWJsZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXByb21pc2UpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9taXNlLl9wcm9ncmVzcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9wcm9ncmVzcyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxucmV0dXJuIHRyeUNvbnZlcnRUb1Byb21pc2U7XG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIik7XG52YXIgVGltZW91dEVycm9yID0gUHJvbWlzZS5UaW1lb3V0RXJyb3I7XG5cbnZhciBhZnRlclRpbWVvdXQgPSBmdW5jdGlvbiAocHJvbWlzZSwgbWVzc2FnZSkge1xuICAgIGlmICghcHJvbWlzZS5pc1BlbmRpbmcoKSkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBtZXNzYWdlID0gXCJvcGVyYXRpb24gdGltZWQgb3V0XCI7XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgVGltZW91dEVycm9yKG1lc3NhZ2UpO1xuICAgIHV0aWwubWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uKGVycik7XG4gICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZShlcnIpO1xuICAgIHByb21pc2UuX2NhbmNlbChlcnIpO1xufTtcblxudmFyIGFmdGVyVmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gZGVsYXkoK3RoaXMpLnRoZW5SZXR1cm4odmFsdWUpOyB9O1xudmFyIGRlbGF5ID0gUHJvbWlzZS5kZWxheSA9IGZ1bmN0aW9uICh2YWx1ZSwgbXMpIHtcbiAgICBpZiAobXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtcyA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgcmV0Ll9mdWxmaWxsKCk7IH0sIG1zKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgbXMgPSArbXM7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkuX3RoZW4oYWZ0ZXJWYWx1ZSwgbnVsbCwgbnVsbCwgbXMsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uIChtcykge1xuICAgIHJldHVybiBkZWxheSh0aGlzLCBtcyk7XG59O1xuXG5mdW5jdGlvbiBzdWNjZXNzQ2xlYXIodmFsdWUpIHtcbiAgICB2YXIgaGFuZGxlID0gdGhpcztcbiAgICBpZiAoaGFuZGxlIGluc3RhbmNlb2YgTnVtYmVyKSBoYW5kbGUgPSAraGFuZGxlO1xuICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZmFpbHVyZUNsZWFyKHJlYXNvbikge1xuICAgIHZhciBoYW5kbGUgPSB0aGlzO1xuICAgIGlmIChoYW5kbGUgaW5zdGFuY2VvZiBOdW1iZXIpIGhhbmRsZSA9ICtoYW5kbGU7XG4gICAgY2xlYXJUaW1lb3V0KGhhbmRsZSk7XG4gICAgdGhyb3cgcmVhc29uO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gKG1zLCBtZXNzYWdlKSB7XG4gICAgbXMgPSArbXM7XG4gICAgdmFyIHJldCA9IHRoaXMudGhlbigpLmNhbmNlbGxhYmxlKCk7XG4gICAgcmV0Ll9jYW5jZWxsYXRpb25QYXJlbnQgPSB0aGlzO1xuICAgIHZhciBoYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIHRpbWVvdXRUaW1lb3V0KCkge1xuICAgICAgICBhZnRlclRpbWVvdXQocmV0LCBtZXNzYWdlKTtcbiAgICB9LCBtcyk7XG4gICAgcmV0dXJuIHJldC5fdGhlbihzdWNjZXNzQ2xlYXIsIGZhaWx1cmVDbGVhciwgdW5kZWZpbmVkLCBoYW5kbGUsIHVuZGVmaW5lZCk7XG59O1xuXG59O1xuXG59LHtcIi4vdXRpbC5qc1wiOjM4fV0sMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChQcm9taXNlLCBhcGlSZWplY3Rpb24sIHRyeUNvbnZlcnRUb1Byb21pc2UsXG4gICAgY3JlYXRlQ29udGV4dCkge1xuICAgIHZhciBUeXBlRXJyb3IgPSBfZGVyZXFfKFwiLi9lcnJvcnMuanNcIikuVHlwZUVycm9yO1xuICAgIHZhciBpbmhlcml0cyA9IF9kZXJlcV8oXCIuL3V0aWwuanNcIikuaW5oZXJpdHM7XG4gICAgdmFyIFByb21pc2VJbnNwZWN0aW9uID0gUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbjtcblxuICAgIGZ1bmN0aW9uIGluc3BlY3Rpb25NYXBwZXIoaW5zcGVjdGlvbnMpIHtcbiAgICAgICAgdmFyIGxlbiA9IGluc3BlY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgdmFyIGluc3BlY3Rpb24gPSBpbnNwZWN0aW9uc1tpXTtcbiAgICAgICAgICAgIGlmIChpbnNwZWN0aW9uLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChpbnNwZWN0aW9uLmVycm9yKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zcGVjdGlvbnNbaV0gPSBpbnNwZWN0aW9uLl9zZXR0bGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3BlY3Rpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRocm93ZXIoZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9LCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYXN0UHJlc2VydmluZ0Rpc3Bvc2FibGUodGhlbmFibGUpIHtcbiAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodGhlbmFibGUpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlICE9PSB0aGVuYWJsZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoZW5hYmxlLl9pc0Rpc3Bvc2FibGUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoZW5hYmxlLl9nZXREaXNwb3NlciA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICB0aGVuYWJsZS5faXNEaXNwb3NhYmxlKCkpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fc2V0RGlzcG9zYWJsZSh0aGVuYWJsZS5fZ2V0RGlzcG9zZXIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlzcG9zZShyZXNvdXJjZXMsIGluc3BlY3Rpb24pIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gcmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldCA9IFByb21pc2UuZGVmZXIoKTtcbiAgICAgICAgZnVuY3Rpb24gaXRlcmF0b3IoKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBsZW4pIHJldHVybiByZXQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IGNhc3RQcmVzZXJ2aW5nRGlzcG9zYWJsZShyZXNvdXJjZXNbaSsrXSk7XG4gICAgICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSAmJlxuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5faXNEaXNwb3NhYmxlKCkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl9nZXREaXNwb3NlcigpLnRyeURpc3Bvc2UoaW5zcGVjdGlvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMucHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dlcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZS5fdGhlbihpdGVyYXRvciwgdGhyb3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVyYXRvcigpO1xuICAgICAgICB9XG4gICAgICAgIGl0ZXJhdG9yKCk7XG4gICAgICAgIHJldHVybiByZXQucHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwb3NlclN1Y2Nlc3ModmFsdWUpIHtcbiAgICAgICAgdmFyIGluc3BlY3Rpb24gPSBuZXcgUHJvbWlzZUluc3BlY3Rpb24oKTtcbiAgICAgICAgaW5zcGVjdGlvbi5fc2V0dGxlZFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGluc3BlY3Rpb24uX2JpdEZpZWxkID0gMjY4NDM1NDU2O1xuICAgICAgICByZXR1cm4gZGlzcG9zZSh0aGlzLCBpbnNwZWN0aW9uKS50aGVuUmV0dXJuKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwb3NlckZhaWwocmVhc29uKSB7XG4gICAgICAgIHZhciBpbnNwZWN0aW9uID0gbmV3IFByb21pc2VJbnNwZWN0aW9uKCk7XG4gICAgICAgIGluc3BlY3Rpb24uX3NldHRsZWRWYWx1ZSA9IHJlYXNvbjtcbiAgICAgICAgaW5zcGVjdGlvbi5fYml0RmllbGQgPSAxMzQyMTc3Mjg7XG4gICAgICAgIHJldHVybiBkaXNwb3NlKHRoaXMsIGluc3BlY3Rpb24pLnRoZW5UaHJvdyhyZWFzb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIERpc3Bvc2VyKGRhdGEsIHByb21pc2UsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG5cbiAgICBEaXNwb3Nlci5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfTtcblxuICAgIERpc3Bvc2VyLnByb3RvdHlwZS5wcm9taXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgRGlzcG9zZXIucHJvdG90eXBlLnJlc291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9taXNlKCkuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZSgpLnZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIERpc3Bvc2VyLnByb3RvdHlwZS50cnlEaXNwb3NlID0gZnVuY3Rpb24oaW5zcGVjdGlvbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSB0aGlzLnJlc291cmNlKCk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fY29udGV4dDtcbiAgICAgICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkgY29udGV4dC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHJldCA9IHJlc291cmNlICE9PSBudWxsXG4gICAgICAgICAgICA/IHRoaXMuZG9EaXNwb3NlKHJlc291cmNlLCBpbnNwZWN0aW9uKSA6IG51bGw7XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIGNvbnRleHQuX3BvcENvbnRleHQoKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fdW5zZXREaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG5cbiAgICBEaXNwb3Nlci5pc0Rpc3Bvc2VyID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIChkICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZC5yZXNvdXJjZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGQudHJ5RGlzcG9zZSA9PT0gXCJmdW5jdGlvblwiKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gRnVuY3Rpb25EaXNwb3NlcihmbiwgcHJvbWlzZSwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yJChmbiwgcHJvbWlzZSwgY29udGV4dCk7XG4gICAgfVxuICAgIGluaGVyaXRzKEZ1bmN0aW9uRGlzcG9zZXIsIERpc3Bvc2VyKTtcblxuICAgIEZ1bmN0aW9uRGlzcG9zZXIucHJvdG90eXBlLmRvRGlzcG9zZSA9IGZ1bmN0aW9uIChyZXNvdXJjZSwgaW5zcGVjdGlvbikge1xuICAgICAgICB2YXIgZm4gPSB0aGlzLmRhdGEoKTtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwocmVzb3VyY2UsIHJlc291cmNlLCBpbnNwZWN0aW9uKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWF5YmVVbndyYXBEaXNwb3Nlcih2YWx1ZSkge1xuICAgICAgICBpZiAoRGlzcG9zZXIuaXNEaXNwb3Nlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzW3RoaXMuaW5kZXhdLl9zZXREaXNwb3NhYmxlKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5wcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIFByb21pc2UudXNpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuIDwgMikgcmV0dXJuIGFwaVJlamVjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieW91IG11c3QgcGFzcyBhdCBsZWFzdCAyIGFyZ3VtZW50cyB0byBQcm9taXNlLnVzaW5nXCIpO1xuICAgICAgICB2YXIgZm4gPSBhcmd1bWVudHNbbGVuIC0gMV07XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGFwaVJlamVjdGlvbihcImZuIG11c3QgYmUgYSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsLzkxNmxKSlxcdTAwMGFcIik7XG4gICAgICAgIGxlbi0tO1xuICAgICAgICB2YXIgcmVzb3VyY2VzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChEaXNwb3Nlci5pc0Rpc3Bvc2VyKHJlc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHZhciBkaXNwb3NlciA9IHJlc291cmNlO1xuICAgICAgICAgICAgICAgIHJlc291cmNlID0gcmVzb3VyY2UucHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgIHJlc291cmNlLl9zZXREaXNwb3NhYmxlKGRpc3Bvc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fdGhlbihtYXliZVVud3JhcERpc3Bvc2VyLCBudWxsLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgfSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvdXJjZXNbaV0gPSByZXNvdXJjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5zZXR0bGUocmVzb3VyY2VzKVxuICAgICAgICAgICAgLnRoZW4oaW5zcGVjdGlvbk1hcHBlcilcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHZhbHMpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9wdXNoQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIHZhciByZXQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gZm4uYXBwbHkodW5kZWZpbmVkLCB2YWxzKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLl9wb3BDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLl90aGVuKFxuICAgICAgICAgICAgICAgIGRpc3Bvc2VyU3VjY2VzcywgZGlzcG9zZXJGYWlsLCB1bmRlZmluZWQsIHJlc291cmNlcywgdW5kZWZpbmVkKTtcbiAgICAgICAgcmVzb3VyY2VzLnByb21pc2UgPSBwcm9taXNlO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX3NldERpc3Bvc2FibGUgPSBmdW5jdGlvbiAoZGlzcG9zZXIpIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDI2MjE0NDtcbiAgICAgICAgdGhpcy5fZGlzcG9zZXIgPSBkaXNwb3NlcjtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX2lzRGlzcG9zYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDI2MjE0NCkgPiAwO1xuICAgIH07XG5cbiAgICBQcm9taXNlLnByb3RvdHlwZS5fZ2V0RGlzcG9zZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwb3NlcjtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0RGlzcG9zYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MjYyMTQ0KTtcbiAgICAgICAgdGhpcy5fZGlzcG9zZXIgPSB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIFByb21pc2UucHJvdG90eXBlLmRpc3Bvc2VyID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbkRpc3Bvc2VyKGZuLCB0aGlzLCBjcmVhdGVDb250ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICB9O1xuXG59O1xuXG59LHtcIi4vZXJyb3JzLmpzXCI6MTMsXCIuL3V0aWwuanNcIjozOH1dLDM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIGVzNSA9IF9kZXJlcV8oXCIuL2VzNS5qc1wiKTtcbnZhciBjYW5FdmFsdWF0ZSA9IHR5cGVvZiBuYXZpZ2F0b3IgPT0gXCJ1bmRlZmluZWRcIjtcbnZhciBoYXZlR2V0dGVycyA9IChmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBvID0ge307XG4gICAgICAgIGVzNS5kZWZpbmVQcm9wZXJ0eShvLCBcImZcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gby5mID09PSAzO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG59KSgpO1xuXG52YXIgZXJyb3JPYmogPSB7ZToge319O1xudmFyIHRyeUNhdGNoVGFyZ2V0O1xuZnVuY3Rpb24gdHJ5Q2F0Y2hlcigpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHJ5Q2F0Y2hUYXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yT2JqLmUgPSBlO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmo7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJ5Q2F0Y2goZm4pIHtcbiAgICB0cnlDYXRjaFRhcmdldCA9IGZuO1xuICAgIHJldHVybiB0cnlDYXRjaGVyO1xufVxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbihDaGlsZCwgUGFyZW50KSB7XG4gICAgdmFyIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIGZ1bmN0aW9uIFQoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBDaGlsZDtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciQgPSBQYXJlbnQ7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBQYXJlbnQucHJvdG90eXBlKSB7XG4gICAgICAgICAgICBpZiAoaGFzUHJvcC5jYWxsKFBhcmVudC5wcm90b3R5cGUsIHByb3BlcnR5TmFtZSkgJiZcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUuY2hhckF0KHByb3BlcnR5TmFtZS5sZW5ndGgtMSkgIT09IFwiJFwiXG4gICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJvcGVydHlOYW1lICsgXCIkXCJdID0gUGFyZW50LnByb3RvdHlwZVtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFQucHJvdG90eXBlID0gUGFyZW50LnByb3RvdHlwZTtcbiAgICBDaGlsZC5wcm90b3R5cGUgPSBuZXcgVCgpO1xuICAgIHJldHVybiBDaGlsZC5wcm90b3R5cGU7XG59O1xuXG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbCkge1xuICAgIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZSB8fFxuICAgICAgICB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCI7XG5cbn1cblxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gIWlzUHJpbWl0aXZlKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gbWF5YmVXcmFwQXNFcnJvcihtYXliZUVycm9yKSB7XG4gICAgaWYgKCFpc1ByaW1pdGl2ZShtYXliZUVycm9yKSkgcmV0dXJuIG1heWJlRXJyb3I7XG5cbiAgICByZXR1cm4gbmV3IEVycm9yKHNhZmVUb1N0cmluZyhtYXliZUVycm9yKSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhBcHBlbmRlZCh0YXJnZXQsIGFwcGVuZGVlKSB7XG4gICAgdmFyIGxlbiA9IHRhcmdldC5sZW5ndGg7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShsZW4gKyAxKTtcbiAgICB2YXIgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgcmV0W2ldID0gdGFyZ2V0W2ldO1xuICAgIH1cbiAgICByZXRbaV0gPSBhcHBlbmRlZTtcbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBnZXREYXRhUHJvcGVydHlPckRlZmF1bHQob2JqLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChlczUuaXNFUzUpIHtcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgICAgICAgaWYgKGRlc2MgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc2MuZ2V0ID09IG51bGwgJiYgZGVzYy5zZXQgPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IGRlc2MudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge30uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgPyBvYmpba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vdEVudW1lcmFibGVQcm9wKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNQcmltaXRpdmUob2JqKSkgcmV0dXJuIG9iajtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH07XG4gICAgZXM1LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwgZGVzY3JpcHRvcik7XG4gICAgcmV0dXJuIG9iajtcbn1cblxuXG52YXIgd3JhcHNQcmltaXRpdmVSZWNlaXZlciA9IChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcyAhPT0gXCJzdHJpbmdcIjtcbn0pLmNhbGwoXCJzdHJpbmdcIik7XG5cbmZ1bmN0aW9uIHRocm93ZXIocikge1xuICAgIHRocm93IHI7XG59XG5cbnZhciBpbmhlcml0ZWREYXRhS2V5cyA9IChmdW5jdGlvbigpIHtcbiAgICBpZiAoZXM1LmlzRVM1KSB7XG4gICAgICAgIHZhciBvUHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuICAgICAgICB2YXIgZ2V0S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgICAgICB2YXIgdmlzaXRlZEtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgd2hpbGUgKG9iaiAhPSBudWxsICYmIG9iaiAhPT0gb1Byb3RvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleXM7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAga2V5cyA9IGdldEtleXMob2JqKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpc2l0ZWRLZXlzW2tleV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB2aXNpdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2MgIT0gbnVsbCAmJiBkZXNjLmdldCA9PSBudWxsICYmIGRlc2Muc2V0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqID0gZXM1LmdldFByb3RvdHlwZU9mKG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgICAgIC8qanNoaW50IGZvcmluOmZhbHNlICovXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG59KSgpO1xuXG5mdW5jdGlvbiBpc0NsYXNzKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IGVzNS5uYW1lcyhmbi5wcm90b3R5cGUpO1xuICAgICAgICAgICAgaWYgKGVzNS5pc0VTNSkgcmV0dXJuIGtleXMubGVuZ3RoID4gMTtcbiAgICAgICAgICAgIHJldHVybiBrZXlzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAhKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09IFwiY29uc3RydWN0b3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9GYXN0UHJvcGVydGllcyhvYmopIHtcbiAgICAvKmpzaGludCAtVzAyNyovXG4gICAgZnVuY3Rpb24gZigpIHt9XG4gICAgZi5wcm90b3R5cGUgPSBvYmo7XG4gICAgcmV0dXJuIGY7XG4gICAgZXZhbChvYmopO1xufVxuXG52YXIgcmlkZW50ID0gL15bYS16JF9dW2EteiRfMC05XSokL2k7XG5mdW5jdGlvbiBpc0lkZW50aWZpZXIoc3RyKSB7XG4gICAgcmV0dXJuIHJpZGVudC50ZXN0KHN0cik7XG59XG5cbmZ1bmN0aW9uIGZpbGxlZFJhbmdlKGNvdW50LCBwcmVmaXgsIHN1ZmZpeCkge1xuICAgIHZhciByZXQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgIHJldFtpXSA9IHByZWZpeCArIGkgKyBzdWZmaXg7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNhZmVUb1N0cmluZyhvYmopIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gb2JqICsgXCJcIjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBcIltubyBzdHJpbmcgcmVwcmVzZW50YXRpb25dXCI7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24oZSkge1xuICAgIHRyeSB7XG4gICAgICAgIG5vdEVudW1lcmFibGVQcm9wKGUsIFwiaXNPcGVyYXRpb25hbFwiLCB0cnVlKTtcbiAgICB9XG4gICAgY2F0Y2goaWdub3JlKSB7fVxufVxuXG5mdW5jdGlvbiBvcmlnaW5hdGVzRnJvbVJlamVjdGlvbihlKSB7XG4gICAgaWYgKGUgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAoKGUgaW5zdGFuY2VvZiBFcnJvcltcIl9fQmx1ZWJpcmRFcnJvclR5cGVzX19cIl0uT3BlcmF0aW9uYWxFcnJvcikgfHxcbiAgICAgICAgZVtcImlzT3BlcmF0aW9uYWxcIl0gPT09IHRydWUpO1xufVxuXG5mdW5jdGlvbiBjYW5BdHRhY2hUcmFjZShvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRXJyb3IgJiYgZXM1LnByb3BlcnR5SXNXcml0YWJsZShvYmosIFwic3RhY2tcIik7XG59XG5cbnZhciBlbnN1cmVFcnJvck9iamVjdCA9IChmdW5jdGlvbigpIHtcbiAgICBpZiAoIShcInN0YWNrXCIgaW4gbmV3IEVycm9yKCkpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGNhbkF0dGFjaFRyYWNlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgdHJ5IHt0aHJvdyBuZXcgRXJyb3Ioc2FmZVRvU3RyaW5nKHZhbHVlKSk7fVxuICAgICAgICAgICAgY2F0Y2goZXJyKSB7cmV0dXJuIGVycjt9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoY2FuQXR0YWNoVHJhY2UodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKHNhZmVUb1N0cmluZyh2YWx1ZSkpO1xuICAgICAgICB9O1xuICAgIH1cbn0pKCk7XG5cbmZ1bmN0aW9uIGNsYXNzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIGNvcHlEZXNjcmlwdG9ycyhmcm9tLCB0bywgZmlsdGVyKSB7XG4gICAgdmFyIGtleXMgPSBlczUubmFtZXMoZnJvbSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoZmlsdGVyKGtleSkpIHtcbiAgICAgICAgICAgIGVzNS5kZWZpbmVQcm9wZXJ0eSh0bywga2V5LCBlczUuZ2V0RGVzY3JpcHRvcihmcm9tLCBrZXkpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHJldCA9IHtcbiAgICBpc0NsYXNzOiBpc0NsYXNzLFxuICAgIGlzSWRlbnRpZmllcjogaXNJZGVudGlmaWVyLFxuICAgIGluaGVyaXRlZERhdGFLZXlzOiBpbmhlcml0ZWREYXRhS2V5cyxcbiAgICBnZXREYXRhUHJvcGVydHlPckRlZmF1bHQ6IGdldERhdGFQcm9wZXJ0eU9yRGVmYXVsdCxcbiAgICB0aHJvd2VyOiB0aHJvd2VyLFxuICAgIGlzQXJyYXk6IGVzNS5pc0FycmF5LFxuICAgIGhhdmVHZXR0ZXJzOiBoYXZlR2V0dGVycyxcbiAgICBub3RFbnVtZXJhYmxlUHJvcDogbm90RW51bWVyYWJsZVByb3AsXG4gICAgaXNQcmltaXRpdmU6IGlzUHJpbWl0aXZlLFxuICAgIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgICBjYW5FdmFsdWF0ZTogY2FuRXZhbHVhdGUsXG4gICAgZXJyb3JPYmo6IGVycm9yT2JqLFxuICAgIHRyeUNhdGNoOiB0cnlDYXRjaCxcbiAgICBpbmhlcml0czogaW5oZXJpdHMsXG4gICAgd2l0aEFwcGVuZGVkOiB3aXRoQXBwZW5kZWQsXG4gICAgbWF5YmVXcmFwQXNFcnJvcjogbWF5YmVXcmFwQXNFcnJvcixcbiAgICB3cmFwc1ByaW1pdGl2ZVJlY2VpdmVyOiB3cmFwc1ByaW1pdGl2ZVJlY2VpdmVyLFxuICAgIHRvRmFzdFByb3BlcnRpZXM6IHRvRmFzdFByb3BlcnRpZXMsXG4gICAgZmlsbGVkUmFuZ2U6IGZpbGxlZFJhbmdlLFxuICAgIHRvU3RyaW5nOiBzYWZlVG9TdHJpbmcsXG4gICAgY2FuQXR0YWNoVHJhY2U6IGNhbkF0dGFjaFRyYWNlLFxuICAgIGVuc3VyZUVycm9yT2JqZWN0OiBlbnN1cmVFcnJvck9iamVjdCxcbiAgICBvcmlnaW5hdGVzRnJvbVJlamVjdGlvbjogb3JpZ2luYXRlc0Zyb21SZWplY3Rpb24sXG4gICAgbWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uOiBtYXJrQXNPcmlnaW5hdGluZ0Zyb21SZWplY3Rpb24sXG4gICAgY2xhc3NTdHJpbmc6IGNsYXNzU3RyaW5nLFxuICAgIGNvcHlEZXNjcmlwdG9yczogY29weURlc2NyaXB0b3JzLFxuICAgIGlzTm9kZTogdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgY2xhc3NTdHJpbmcocHJvY2VzcykudG9Mb3dlckNhc2UoKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCJcbn07XG50cnkge3Rocm93IG5ldyBFcnJvcigpOyB9IGNhdGNoIChlKSB7cmV0Lmxhc3RMaW5lRXJyb3IgPSBlO31cbm1vZHVsZS5leHBvcnRzID0gcmV0O1xuXG59LHtcIi4vZXM1LmpzXCI6MTR9XX0se30sWzRdKSg0KVxufSk7ICAgICAgICAgICAgICAgICAgICA7aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdyAhPT0gbnVsbCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuUCA9IHdpbmRvdy5Qcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZiAhPT0gbnVsbCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5QID0gc2VsZi5Qcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vYmx1ZWJpcmQvanMvYnJvd3Nlci9ibHVlYmlyZC5qc1xuICoqLyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWxvYWRlci9pbmRleC5qcyEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvc3JjL2V4YW1wbGUyL2V4YW1wbGUyLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9zcmMvZXhhbXBsZTIvZXhhbXBsZTIuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9zcmMvZXhhbXBsZTIvZXhhbXBsZTIuc2Nzc1wiKTtcblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvZXhhbXBsZTIvZXhhbXBsZTIuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDE3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvY3NzVG9TdHJpbmcuanNcIikoKTtcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsYm9keXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO21hcmdpbjowO3BhZGRpbmc6MDt9Ym9keXtwb3NpdGlvbjphYnNvbHV0ZTtvdmVyZmxvdzpoaWRkZW47fSNjaXJjdWl0Ym9hcmR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjIwcHg7bGVmdDoyMHB4O3JpZ2h0OjIwcHg7Ym90dG9tOjIwcHg7ei1pbmRleDoxO30jdGhyZWUtZC1jYW52YXN7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7bWFyZ2luOjA7cGFkZGluZzowO3otaW5kZXg6MDt9LnRpbGV7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2N1cnNvcjpwb2ludGVyO3RleHQtYWxpZ246Y2VudGVyO292ZXJmbG93OmhpZGRlbjtib3JkZXI6c29saWQgMXB4O30udGlsZT5oZWFkZXJ7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1hbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstd2Via2l0LWp1c3RpZnktY29udGVudDpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtmb250LXdlaWdodDpib2xkO2JvcmRlci13aWR0aDoxcHg7fS50aWxlLm9wZW4+aGVhZGVye2hlaWdodDoyNnB4O2JvcmRlci1zdHlsZTpub25lIG5vbmUgc29saWQgbm9uZTtsaW5lLWhlaWdodDoyNnB4O2ZvbnQtc2l6ZToyMC44cHg7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt9LnRpbGU6bm90KC5vcGVuKT5oZWFkZXJ7Ym9yZGVyLXN0eWxlOm5vbmU7fS50aWxlOm5vdCguYWN0aXZlKXtib3JkZXItc3R5bGU6ZG90dGVkICFpbXBvcnRhbnQ7fS50aWxlPnNlY3Rpb257LXdlYmtpdC11c2VyLXNlbGVjdDp0ZXh0Oy1tb3otdXNlci1zZWxlY3Q6dGV4dDstbXMtdXNlci1zZWxlY3Q6dGV4dDt1c2VyLXNlbGVjdDp0ZXh0O30udGlsZTpub3QoLm9wZW4pPnNlY3Rpb257ZGlzcGxheTpub25lO31cIiwgXCJcIl0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L2F1dG9wcmVmaXhlci1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyIS4vc3JjL2V4YW1wbGUyL2V4YW1wbGUyLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZGVmaW5lKFsnanF1ZXJ5JywgJ2JsdWViaXJkJywgJy4vbWlzYy5qcycsICcuLi9BcnRlZmFjdC5qcycsICcuL2tlZmlyLWFuZC1lZ2dzLmpzJ10sIGZ1bmN0aW9uICgkLCBQLCBVLCBBcnRlZmFjdFApIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0LyogIGEgZnVuY3Rpb24gdG8gY3JlYXRlIGFuIGFwaW5hdG9teSBjb21wb25lbnQgKHdpZGdldCkgICAgICAgICAgKi9cblx0LyogIGFzIGEgalF1ZXJ5IGVsZW1lbnQgcGx1Z2luOyB0aGlzIGlzIHJldHVybmVkIGZyb20gdGhlIG1vZHVsZSAgKi9cblx0ZnVuY3Rpb24gbmV3V2lkZ2V0VHlwZSh0eXBlTmFtZSwgb3B0aW9uRGVmYXVsdHMgPSB7fSkge1xuXG5cdFx0LyogdGhlIHNwZWNpZmljIHdpZGdldCBjbGFzcyAqL1xuXHRcdHZhciBXaWRnZXRQID0gQXJ0ZWZhY3RQLnRoZW4oKEFydGVmYWN0KSA9PiBBcnRlZmFjdC5uZXdTdWJjbGFzcyh0eXBlTmFtZSwgZnVuY3Rpb24gKHtjc3NDbGFzc30pIHtcblxuXHRcdFx0Lyogc2V0IHRoZSBlbGVtZW50IENTUyBjbGFzcyAqL1xuXHRcdFx0aWYgKFUuaXNEZWZpbmVkKGNzc0NsYXNzKSkgeyB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoY3NzQ2xhc3MpIH1cblxuXHRcdFx0LyogaWYgdGhlIGpxdWVyeSBlbGVtZW50IGlzIHJlbW92ZWQsIGRlc3Ryb3kgdGhlIGFydGVmYWN0ICovXG5cdFx0XHR0aGlzLmVsZW1lbnQuYXNLZWZpclN0cmVhbSgncmVtb3ZlJykub25WYWx1ZSgoKSA9PiB7IHRoaXMuZGVzdHJveSgpIH0pO1xuXG5cdFx0fSwge1xuXG5cdFx0XHRnZXQgbW9kZWwoKSB7IHJldHVybiB0aGlzLm9wdGlvbnMubW9kZWwgfSxcblxuXHRcdFx0Z2V0IGVsZW1lbnQoKSB7IHJldHVybiB0aGlzLm9wdGlvbnMuZWxlbWVudCB9XG5cblx0XHR9LCBVLmV4dGVuZCh7XG5cblx0XHRcdGJlZm9yZUNvbnN0cnVjdGlvbjogUC5yZXNvbHZlKCkgLy8gZ3VhcmFudGVlIGFsbCB3aWRnZXQgY29uc3RydWN0aW9uIHRvIGJlIGFzeW5jaHJvbm91c1xuXG5cdFx0fSwgb3B0aW9uRGVmYXVsdHMpKSk7XG5cblx0XHQvKiBjcmVhdGUgYSBsb3dlcmNhc2UgbmFtZSBmb3IgdGhpcyB3aWRnZXQgdHlwZSAqL1xuXHRcdHZhciBsb3dlcmNhc2VOYW1lID0gdHlwZU5hbWVbMF0udG9Mb3dlckNhc2UoKSArIHR5cGVOYW1lLnNsaWNlKDEpO1xuXG5cdFx0LyogalF1ZXJ5IHBsdWdpbjogdGhlIHdpZGdldCBjcmVhdGlvbiAmIHJldHJpZXZhbCBmdW5jdGlvbiAgKi9cblx0XHQkLmZuW2xvd2VyY2FzZU5hbWVdID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuXHRcdFx0LyogaWYgdGhlIHdvcmQgJ2luc3RhbmNlJyBpcyBwYXNzZWQsIHJldHVybiB0aGUgKGFscmVhZHkgY3JlYXRlZCkgd2lkZ2V0IHByb21pc2UgKi9cblx0XHRcdGlmIChvcHRpb25zID09PSAnaW5zdGFuY2UnKSB7IHJldHVybiB0aGlzLmRhdGEoYC1hbXktJHtsb3dlcmNhc2VOYW1lfWApIH1cblxuXHRcdFx0LyogZWxzZSwgY3JlYXRlIGEgbmV3IHdpZGdldCBhbmQgc2V0IGEgcHJvbWlzZSB0byBpdCAqL1xuXHRcdFx0dGhpcy5kYXRhKGAtYW15LSR7bG93ZXJjYXNlTmFtZX1gLCBXaWRnZXRQXG5cdFx0XHRcdFx0LnRoZW4oKFdpZGdldCkgPT4gbmV3IFdpZGdldChVLmV4dGVuZChvcHRpb25zLCB7IGVsZW1lbnQ6IHRoaXMgfSkpLmNvbnN0cnVjdGVkKSk7XG5cblx0XHRcdC8qIHJldHVybiB0aGUgalF1ZXJ5IGVsZW1lbnQgaW5zdGFuY2UsIGJ5IGpRdWVyeSBjb252ZW50aW9uICovXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0XHQvKiByZXR1cm4gYSBwcm9taXNlIHRvIHRoZSB3aWRnZXQgYXJ0ZWZhY3QgY2xhc3MgKi9cblx0XHRyZXR1cm4gV2lkZ2V0UDtcblxuXHR9XG5cblxuXHQvKiBleHBvc2UgdGhlIHdpZGdldCBjbGFzcyBjcmVhdG9yIGZ1bmN0aW9uICovXG5cdHJldHVybiBuZXdXaWRnZXRUeXBlO1xuXG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbC9uZXdXaWRnZXRUeXBlLmpzXG4gKiovIiwiZGVmaW5lKFtcblx0J2pxdWVyeScsXG5cdCdibHVlYmlyZCcsXG5cdCcuL21pc2MuanMnLFxuXHQnLi9rZWZpci1zaWduYWwtaGFuZGxlci5qcycsXG5cdCcuL2RlZmVyLmpzJyxcblx0Jy4vbWFpbi1kZWx0YS1tb2RlbC5qcydcbl0sIGZ1bmN0aW9uICgkLCBQLCBVLCBTaWduYWxIYW5kbGVyLCBkZWZlciwgZG0pIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0aWYgKCF3aW5kb3cuX2FteVBsdWdpbikge1xuXHRcdHdpbmRvdy5fYW15UGx1Z2luID0gZnVuY3Rpb24gKHBsdWdpbk9yU2VsZWN0aW9uKSB7XG5cdFx0XHRpZiAoJC5pc1BsYWluT2JqZWN0KHBsdWdpbk9yU2VsZWN0aW9uKSkge1xuXG5cdFx0XHRcdC8qIHRoZSBmdW5jdGlvbiBpcyB1c2VkIHRvIHJlZ2lzdGVyIGEgbmV3IHBsdWdpbiAqL1xuXHRcdFx0XHRyZXR1cm4gbmV3IGRtLkRlbHRhKHBsdWdpbk9yU2VsZWN0aW9uLm5hbWUsIHBsdWdpbk9yU2VsZWN0aW9uKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRVLmFzc2VydCghX3NlbGVjdGVkRGVmZXJyZWQuZG9uZSxcblx0XHRcdFx0XHRcdGBBcGlOQVRPTVkgcGx1Z2lucyBjYW4gb25seSBiZSBzZWxlY3RlZCBvbmNlLCBhZnRlciB3aGljaCB0aGV5IGFyZSBmaXhlZC5gKTtcblx0XHRcdFx0X3NlbGVjdGVkRGVmZXJyZWQuZG9uZSA9IHRydWU7XG5cblx0XHRcdFx0LyogdGhlIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc2VsZWN0IHBsdWdpbnMgdG8gYmUgYXBwbGllZCAqL1xuXHRcdFx0XHRkbS5zZWxlY3QuYXBwbHkoZG0sIHBsdWdpbk9yU2VsZWN0aW9uKTtcblx0XHRcdFx0X3NlbGVjdGVkRGVmZXJyZWQucmVzb2x2ZSh0aGlzKTtcblxuXHRcdFx0XHRyZXR1cm4gd2luZG93Ll9hbXlQbHVnaW4uc2VsZWN0ZWQ7XG5cblx0XHRcdH1cblx0XHR9O1xuXHRcdHZhciBfc2VsZWN0ZWREZWZlcnJlZCA9IGRlZmVyKCk7XG5cdFx0d2luZG93Ll9hbXlQbHVnaW4uc2VsZWN0ZWQgPSBfc2VsZWN0ZWREZWZlcnJlZC5wcm9taXNlO1xuXHRcdHdpbmRvdy5fYW15UGx1Z2luLmdyYXBoID0gKCkgPT4gZG0uZ3JhcGgoKTtcblx0XHR3aW5kb3cuX2FteVBsdWdpbi5kbSA9IGRtO1xuXHR9XG5cblxuXHRyZXR1cm4gd2luZG93Ll9hbXlQbHVnaW47XG5cblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlsL3BsdWdpbi5qc1xuICoqLyIsImRlZmluZShbJ2JsdWViaXJkJ10sIChQKSA9PiB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgVSA9IHtcblxuXHRcdC8vIGNyZWF0ZSBhIG5ldyBjbGFzcywgZ2l2ZW4gYSBjb25zdHJ1Y3RvciBhbmQgcG9zc2libGUgcHJvdG90eXBlXG5cdFx0bmV3Q2xhc3MoY29uc3RydWN0b3IsIHByb3RvdHlwZSA9IHt9KSB7XG5cdFx0XHRjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG5cdFx0XHRjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcblx0XHRcdHJldHVybiBjb25zdHJ1Y3Rvcjtcblx0XHR9LFxuXG5cdFx0Ly8gY3JlYXRlIGEgbmV3IHN1YmNsYXNzLCBnaXZlbiBhIHN1cGVyY2xhc3MsIGNvbnN0cnVjdG9yIGFuZCBwb3NzaWJsZSBwcm90b3R5cGVcblx0XHRuZXdTdWJjbGFzcyhzdXBlckNsYXNzLCBjb25zdHJ1Y3Rvck1ha2VyLCBwcm90b3R5cGUgPSB7fSkge1xuXHRcdFx0dmFyIGNvbnN0cnVjdG9yID0gY29uc3RydWN0b3JNYWtlcihzdXBlckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcik7XG5cdFx0XHRjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcblx0XHRcdFUuZXh0ZW5kKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG90eXBlKTtcblx0XHRcdGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuXHRcdFx0cmV0dXJuIGNvbnN0cnVjdG9yO1xuXHRcdH0sXG5cblx0XHQvLyBleHRlbmQgdGhlIGZpcnN0IHBhc3NlZCBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllc1xuXHRcdC8vIG9mIHRoZSBvdGhlciBvYmplY3RzLCBmcm9tIGxlZnQgdG8gcmlnaHQsIGFuZCByZXR1cm5zXG5cdFx0Ly8gdGhlIGZpcnN0IHBhc3NlZCBvYmplY3Rcblx0XHRleHRlbmQob2JqMSwgLi4ucmVzdCkge1xuXHRcdFx0cmVzdC5mb3JFYWNoKChvYmopID0+IHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdFx0XHRcdGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iajEsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gb2JqMTtcblx0XHR9LFxuXG5cdFx0Ly8gY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBvZlxuXHRcdC8vIGEgc3BlY2lmaWMgZmllbGQgZnJvbSBhIGdpdmVuIG9iamVjdFxuXHRcdGZpZWxkKG5hbWUpIHsgcmV0dXJuIChvYmopID0+IHsgcmV0dXJuIG9ialtuYW1lXSB9IH0sXG5cblx0XHQvLyBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIG9mXG5cdFx0Ly8gYSBzcGVjaWZpYyBmaWVsZCBmcm9tIGEgZ2l2ZW4gb2JqZWN0XG5cdFx0Y2FsbChmbiwgLi4uYXJncykgeyByZXR1cm4gZm4uYXBwbHkodW5kZWZpbmVkLCBhcmdzKSB9LFxuXG5cdFx0Ly8gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50XG5cdFx0aWQodikgeyByZXR1cm4gdiB9LFxuXG5cdFx0Ly8gZ2V0IHRoZSBvYmplY3QgYG9ialtuYW1lXWA7IGlmIGBvYmpbbmFtZV1gIGlzIG5vdFxuXHRcdC8vIGRlZmluZWQsIGdpdmUgaXQgYSBkZWZhdWx0IHZhbHVlIGZpcnN0OyBpZiB0aGUgZ2l2ZW4gdmFsdWVcblx0XHQvLyBpcyBhIGZ1bmN0aW9uLCBpdCBpcyBjYWxsZWQsIGFuZCBpdHMgcmVzdWx0IGlzIHVzZWRcblx0XHRnZXREZWYob2JqLCBuYW1lLCB2YWx1ZSkge1xuXHRcdFx0aWYgKFUuaXNVbmRlZmluZWQob2JqW25hbWVdKSkge1xuXHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7IHZhbHVlID0gdmFsdWUoKSB9XG5cdFx0XHRcdG9ialtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG9ialtuYW1lXTtcblx0XHR9LFxuXG5cdFx0Ly8gZ2V0IHRoZSBvYmplY3QgYG9ialtuYW1lXWA7IGlmIGBvYmpbbmFtZV1gIGlzIG5vdFxuXHRcdC8vIGEgKHBsYWluKSBvYmplY3QsIG1ha2UgaXQgYW4gZW1wdHkgb2JqZWN0IGZpcnN0XG5cdFx0b2JqZWN0KG9iaiwgbmFtZSkgeyByZXR1cm4gVS5nZXREZWYob2JqLCBuYW1lLCB7fSkgfSxcblxuXHRcdC8vIGdldCB0aGUgYXJyYXkgYG9ialtuYW1lXWA7IGlmIGBvYmpbbmFtZV1gIGlzIG5vdFxuXHRcdC8vIGFuIGFycmF5LCBtYWtlIGl0IGFuIGVtcHR5IGFycmF5IGZpcnN0XG5cdFx0YXJyYXkob2JqLCBuYW1lKSB7IHJldHVybiBVLmdldERlZihvYmosIG5hbWUsIFtdKSB9LFxuXG5cdFx0Ly8gcHVsbCBhIHZhbHVlIGZyb20gYW4gYXJyYXlcblx0XHRwdWxsKGFyciwgdmFsKSB7XG5cdFx0XHR2YXIgaSA9IGFyci5pbmRleE9mKHZhbCk7XG5cdFx0XHRpZiAoaSAhPT0gLTEpIHsgYXJyLnNwbGljZShpKSB9XG5cdFx0fSxcblxuXHRcdC8vIGVtcHR5IG91dCBhbiBhcnJheVxuXHRcdG1ha2VFbXB0eShhcnIpIHtcblx0XHRcdHdoaWxlIChhcnIubGVuZ3RoID4gMCkgeyBhcnIucG9wKCkgfVxuXHRcdH0sXG5cblx0XHQvLyBgRnVuY3Rpb24uYmluZGAsIGJ1dCB0YWtpbmcgYW4gYXJyYXkgbGlrZSBgRnVuY3Rpb24uYXBwbHlgIGRvZXNcblx0XHRiaW5kQShmbiwgY3R4LCBhcmdzKSB7IHJldHVybiBmbi5iaW5kLmFwcGx5KGZuLCBbY3R4XS5jb25jYXQoYXJncykpIH0sXG5cblx0XHQvLyBgRnVuY3Rpb24uYmluZGAsIGJ1dCBvbmx5IGhhdmluZyB0byBzcGVjaWZ5IHRoZSBjb250ZXh0LW9iamVjdCBvbmNlXG5cdFx0YmluZChvYmosIG0sIC4uLmFyZ3MpIHsgcmV0dXJuIFUuYmluZEEob2JqW21dLCBvYmosIGFyZ3MpIH0sXG5cblx0XHQvLyBhbGxvd3MgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIHRvIGJlIHVzZWRcblx0XHQvLyB3aXRoIGFuIGFycmF5IG9mIGZvcm1hbCBwYXJhbWV0ZXJzXG5cdFx0YXBwbHlDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvckZuLCBhcmdzKSB7XG5cdFx0XHR2YXIgTmV3Q29uc3RydWN0b3JGbiA9IENvbnN0cnVjdG9yRm4uYmluZC5hcHBseShDb25zdHJ1Y3RvckZuLCBbbnVsbF0uY29uY2F0KGFyZ3MpKTtcblx0XHRcdHJldHVybiBuZXcgTmV3Q29uc3RydWN0b3JGbigpO1xuXHRcdH0sXG5cblx0XHQvLyBhIHNpbXBsZSBgYXNzZXJ0YCBmdW5jdGlvbiwgdG8gZXhwcmVzcyBhXG5cdFx0Ly8gY29uZGl0aW9uIHRoYXQgaXMgZXhwZWN0ZWQgdG8gYmUgdHJ1ZVxuXHRcdGFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcblx0XHRcdGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8IFwiQXNzZXJ0aW9uIGZhaWxlZFwiKSB9XG5cdFx0fSxcblxuXHRcdC8vIHRlc3QgaWYgYSB2YWx1ZSBpcyBgdW5kZWZpbmVkYFxuXHRcdGlzVW5kZWZpbmVkKHZhbCkgeyByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcgfSxcblxuXHRcdC8vIHRlc3QgaWYgYSB2YWx1ZSBpcyBkZWZpbmVkIChub3QgYHVuZGVmaW5lZGApXG5cdFx0aXNEZWZpbmVkKHZhbCkgeyByZXR1cm4gdHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcgfSxcblxuXHRcdC8vIHRlc3QgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdFxuXHRcdGlzUGxhaW5PYmplY3QodmFsKSB7IHJldHVybiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwuY29uc3RydWN0b3IgPT09IE9iamVjdCB9LFxuXG5cdFx0Ly8gdGVzdCBpZiBhIHZhbHVlIGlzIGEgZnVuY3Rpb25cblx0XHRpc0Z1bmN0aW9uKHZhbCkgeyByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG5cdFx0Ly8gZXh0cmFjdCBhbiBhcnJheSBvZiB2YWx1ZXMgZnJvbSBhbiBvYmplY3Rcblx0XHRvYmpWYWx1ZXMob2JqKSB7IHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrZXkgPT4gb2JqW2tleV0pIH0sXG5cblx0XHQvLyBlbmFibGUgYW4gSFRNTCBlbGVtZW50IHRvIHNlcnZlIGFzIGFuY2hvciBmb3IgYWJzb2x1dGVseSBwb3NpdGlvbmVkIGNoaWxkcmVuXG5cdFx0bWFrZVBvc2l0aW9uZWQoZWxlbWVudCkge1xuXHRcdFx0aWYgKGVsZW1lbnQuY3NzKCdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuXHRcdFx0XHRlbGVtZW50LmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gcmV0dXJuIHRoZSBmaXJzdCBwYXJhbWV0ZXIgdGhhdCBpcyBub3QgJ3VuZGVmaW5lZCdcblx0XHRkZWZPciguLi52YWx1ZXMpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRcdGlmIChVLmlzRGVmaW5lZCh2YWx1ZXNbaV0pKSB7IHJldHVybiB2YWx1ZXNbaV0gfVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG5cdFx0Ly8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuXHRcdC8vIE4gbWlsbGlzZWNvbmRzLlxuXHRcdGRlYm91bmNlKGZ1bmMsIHdhaXQsIGNvbnRleHQpIHtcblx0XHRcdHZhciB0aW1lb3V0O1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRcdHZhciBsYXRlckZuID0gKCkgPT4ge1xuXHRcdFx0XHRcdHRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHRcdGZ1bmMuYXBwbHkoY29udGV4dCB8fCB0aGlzLCBhcmdzKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlckZuLCB3YWl0KTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIG9uY2UgcGVyIHN5bmNocm9ub3VzICdzdGFjaycuXG5cdFx0b25jZVBlclN0YWNrKGZ1bmMsIGNvbnRleHQpIHtcblx0XHRcdHZhciBub3RSdW5ZZXQgPSB0cnVlO1xuXHRcdFx0dmFyIHJlc3VsdCA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRcdGlmIChub3RSdW5ZZXQpIHtcblx0XHRcdFx0XHRub3RSdW5ZZXQgPSBmYWxzZTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHsgbm90UnVuWWV0ID0gdHJ1ZSB9LCAwKTtcblx0XHRcdFx0XHRmdW5jLmFwcGx5KGNvbnRleHQgfHwgdGhpcywgYXJncyk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXN1bHQuYWxsb3dBZGRpdGlvbmFsQ2FsbCA9ICgpID0+IHtcblx0XHRcdFx0bm90UnVuWWV0ID0gdHJ1ZTtcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0sXG5cblx0XHQvKiAgQ3JlYXRlIGEgbmV3IGNhY2hlIHRvIG1hbmFnZSBhIHNwZWNpZmljIHZhbHVlIHRoYXQgaXMgY29zdGx5IHRvIGNvbXB1dGUgb3IgcmV0cmlldmUuICAgICovXG5cdFx0LyogIEl0IGVuc3VyZXMgdGhhdCB0aGUgcmV0cmlldmFsIGZ1bmN0aW9uIGlzIG5vdCBjYWxsZWQgb25seSBvbmNlIHBlciBzdGFjaywgYW5kIHVzZXMgYSAgICAqL1xuXHRcdC8qICBjYWNoZSB0byByZXR1cm4gYSBrbm93biB2YWx1ZSBpbiBiZXR3ZWVuLiBJdCBpcyBhbHNvIGFibGUgdG8gbm90aWZ5IHlvdSB3aGVuIHRoZSB2YWx1ZSAgKi9cblx0XHQvKiAgaGFzIGFjdHVhbGx5IGNoYW5nZWQuIEl0IGRvZXMgc28gdXNpbmcgYD09PWAgY29tcGFyaXNvbiwgYnV0IHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biAgICovXG5cdFx0LyogIGNvbXBhcmlzb24gZnVuY3Rpb24uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXHRcdGNhY2hlZCh7cmV0cmlldmUsIGlzRXF1YWx9KSB7XG5cblx0XHRcdC8qIG5vcm1hbGl6ZSBwYXJhbWV0ZXJzICovXG5cdFx0XHRpc0VxdWFsID0gaXNFcXVhbCB8fCAoKGEsIGIpID0+IChhID09PSBiKSk7XG5cblx0XHRcdC8qIGtlZXAgYSBjYWNoZSBhbmQgZ2l2ZSBpdCBhbiBpbml0aWFsIHZhbHVlICovXG5cdFx0XHR2YXIgY2FjaGU7XG5cblx0XHRcdC8qIGhvdyB0byByZXRyaWV2ZSBhIG5ldyB2YWx1ZSwgYW5kIHByb2Nlc3MgaXQgaWYgaXQgaXMgbmV3ICovXG5cdFx0XHRmdW5jdGlvbiByZXRyaWV2ZVZhbHVlKCkge1xuXHRcdFx0XHR2YXIgbmV3VmFsdWUgPSByZXRyaWV2ZSgpO1xuXHRcdFx0XHR2YXIgb2xkVmFsdWUgPSBjYWNoZTtcblx0XHRcdFx0aWYgKCFpc0VxdWFsKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHtcblx0XHRcdFx0XHRjYWNoZSA9IG5ld1ZhbHVlO1xuXHRcdFx0XHRcdG9uQ2hhbmdlLmZvckVhY2goKGZuKSA9PiBmbihuZXdWYWx1ZSwgb2xkVmFsdWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvKiByZXRyaWV2ZSBhIHZhbHVlIGF0IG1vc3Qgb25jZSBwZXIgc3RhY2sgKi9cblx0XHRcdHZhciBvbmNlUGVyU3RhY2tTZXRWYWx1ZSA9IFUub25jZVBlclN0YWNrKHJldHJpZXZlVmFsdWUpO1xuXG5cdFx0XHQvKiAgdGhlIHJlc3VsdGluZyBmdW5jdGlvbiBwb3NzaWJseSBwZXJmb3JtcyByZXRyaWV2YWwsICAgICAgICAgICAgICovXG5cdFx0XHQvKiAgYW5kIGFsd2F5cyByZXR1cm5zIHRoZSBjYWNoZSAod2hpY2ggbWF5IGNvbnRhaW4gdGhlIG5ldyB2YWx1ZSkgICovXG5cdFx0XHR2YXIgcmVzdWx0Rm4gPSAoKSA9PiB7XG5cdFx0XHRcdG9uY2VQZXJTdGFja1NldFZhbHVlKCk7XG5cdFx0XHRcdHJldHVybiBjYWNoZTtcblx0XHRcdH07XG5cblx0XHRcdC8qIGFsbG93IGFuIG9uQ2hhbmdlIGNhbGxiYWNrIHRvIGJlIHNldCAqL1xuXHRcdFx0dmFyIG9uQ2hhbmdlID0gW107XG5cdFx0XHRyZXN1bHRGbi5vbkNoYW5nZSA9IChjYikgPT4ge1xuXHRcdFx0XHRvbkNoYW5nZS5wdXNoKGNiKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdEZuO1xuXHRcdFx0fTtcblxuXHRcdFx0LyogYWxsb3cgYnJlYWtpbmcgb2YgdGhlIGNhY2hlLCBhbGxvd2luZyBtdWx0aXBsZSBjYWxscyBwZXIgc3RhY2sgKi9cblx0XHRcdHJlc3VsdEZuLmFsbG93QWRkaXRpb25hbENhbGwgPSAoKSA9PiB7XG5cdFx0XHRcdG9uY2VQZXJTdGFja1NldFZhbHVlLmFsbG93QWRkaXRpb25hbENhbGwoKTtcblx0XHRcdH07XG5cblx0XHRcdC8qIHJldHJpZXZlIHRoZSBmaXJzdCB2YWx1ZSByaWdodCBub3cgKi9cblx0XHRcdG9uY2VQZXJTdGFja1NldFZhbHVlKCk7XG5cblx0XHRcdHJldHVybiByZXN1bHRGbjtcblx0XHR9LFxuXG5cdFx0cHJvbWlzaWZ5KG9iaiwgbWV0aG9kKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBQKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0b2JqW21ldGhvZF0uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChyZXNvbHZlKSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGZpbmRJbmRleChhcnJheSwgcHJlZCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRpZiAocHJlZChhcnJheVtpXSwgaSwgYXJyYXkpKSB7IHJldHVybiBpIH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAtMTtcblx0XHR9LFxuXG5cdFx0Ly8gdGhpcyBgbWVtb2l6ZWAgZnVuY3Rpb24gaXMgU0xPVywgYXMgaXQgdXNlcyBsaW5lYXIgc2VhcmNoXG5cdFx0bWVtb2l6ZShmbikge1xuXHRcdFx0dmFyIGtleXMgPSBbXTtcblx0XHRcdHZhciBjYWNoZSA9IFtdO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRcdC8qIGNoZWNrIHRoZSBjYWNoZSAqL1xuXHRcdFx0XHR2YXIgaW5kZXggPSBVLmZpbmRJbmRleChrZXlzLCAoa2V5KSA9PiBrZXkuZXZlcnkoKHYsIGkpID0+IHYgPT09IGFyZ3NbaV0pKTtcblx0XHRcdFx0aWYgKGluZGV4ID49IDApIHsgcmV0dXJuIGNhY2hlW2luZGV4XSB9XG5cblx0XHRcdFx0Lyogbm8gY2FjaGUgaGl0OyBjb21wdXRlIHZhbHVlLCBzdG9yZSBhbmQgcmV0dXJuICovXG5cdFx0XHRcdHZhciByZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHRcdFx0a2V5cy5wdXNoKGFyZ3MpO1xuXHRcdFx0XHRjYWNoZS5wdXNoKHJlc3VsdCk7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHR9O1xuXG5cblx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXHR2YXIgc29ydE9mRXF1YWwgPSAoYSwgYikgPT4gKGIgLSBFUFMgPCBhICYmIGEgPCBiICsgRVBTKTtcblxuXHQvKiBIVE1MIGVsZW1lbnQgcG9zaXRpb24gKi9cblx0VS5Qb3NpdGlvbiA9IFUubmV3Q2xhc3MoZnVuY3Rpb24gKHRvcCwgbGVmdCkge1xuXHRcdHRoaXMudG9wID0gdG9wO1xuXHRcdHRoaXMubGVmdCA9IGxlZnQ7XG5cdH0pO1xuXHRVLlBvc2l0aW9uLnN1YnRyYWN0ID0gKGEsIGIpID0+IHtcblx0XHRyZXR1cm4gbmV3IFUuUG9zaXRpb24oYS50b3AgLSBiLnRvcCwgYS5sZWZ0IC0gYi5sZWZ0KTtcblx0fTtcblx0VS5Qb3NpdGlvbi5lcXVhbHMgPSAoYSwgYikgPT4ge1xuXHRcdHJldHVybiBVLmlzRGVmaW5lZChhKSAmJiBVLmlzRGVmaW5lZChiKSAmJiBzb3J0T2ZFcXVhbChhLnRvcCwgYi50b3ApICYmIHNvcnRPZkVxdWFsKGEubGVmdCwgYi5sZWZ0KTtcblx0fTtcblxuXG5cdC8qIEhUTUwgZWxlbWVudCBzaXplICovXG5cdFUuU2l6ZSA9IFUubmV3Q2xhc3MoZnVuY3Rpb24gKGhlaWdodCwgd2lkdGgpIHtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdH0pO1xuXHRVLlNpemUuZXF1YWxzID0gKGEsIGIpID0+IHtcblx0XHRyZXR1cm4gVS5pc0RlZmluZWQoYSkgJiYgVS5pc0RlZmluZWQoYikgJiYgc29ydE9mRXF1YWwoYS5oZWlnaHQsIGIuaGVpZ2h0KSAmJiBzb3J0T2ZFcXVhbChhLndpZHRoLCBiLndpZHRoKTtcblx0fTtcblxuXG5cdHJldHVybiBVO1xuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWwvbWlzYy5qc1xuICoqLyIsIm51bGxcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMFxuICoqLyIsIm51bGxcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMVxuICoqLyIsImRlZmluZShbJ2JsdWViaXJkJ10sIGZ1bmN0aW9uIChQKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRyZXR1cm4gZnVuY3Rpb24gZGVmZXIoKSB7XG5cdFx0dmFyIHJlc29sdmUsIHJlamVjdDtcblx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzb2x2ZSA9IGFyZ3VtZW50c1swXTtcblx0XHRcdHJlamVjdCA9IGFyZ3VtZW50c1sxXTtcblx0XHR9KTtcblx0XHQvL25vaW5zcGVjdGlvbiBKU1VudXNlZEFzc2lnbm1lbnRcblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcblx0XHRcdHJlamVjdDogcmVqZWN0LFxuXHRcdFx0cHJvbWlzZTogcHJvbWlzZVxuXHRcdH07XG5cdH07XG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbC9kZWZlci5qc1xuICoqLyIsImRlZmluZShbJ2pxdWVyeScsICcuL2tlZmlyLWFuZC1lZ2dzLmpzJ10sIGZ1bmN0aW9uICgkLCBLZWZpcikge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyogIFRoaXMgZnVuY3Rpb24gcGxheXMgd2l0aCB0aGUgYGZsZXgtZ3Jvd2AgYW5kIGBkaXNwbGF5YCBwcm9wZXJ0aWVzICAqL1xuXHQvKiAgb2YgYSBqUXVlcnkgZWxlbWVudCBpbiBzdWNoIGEgd2F5IHRoYXQgQ1NTMyB0cmFuc2l0aW9uIGFuaW1hdGlvbnMgICovXG5cdC8qICBhcmUgcHJvcGVybHkgY2FycmllZCBvdXQsIGFuZCBzdWNoIHRoYXQgZWxlbWVudHMgdGhhdCBnZXQgYW4gICAgICAgKi9cblx0LyogIGVmZmVjdGl2ZSBgZmxleC1ncm93YCBvZiAwIGFyZSBhY3R1YWxseSBoaWRkZW4gZnJvbSB2aWV3LiAgICAgICAgICAqL1xuXHRmdW5jdGlvbiBzZXREaXNwbGF5KGVsZW1lbnQsIG5ld0dyb3cpIHtcblxuXHRcdHZhciBvbGRHcm93ID0gZWxlbWVudC5kYXRhKCdhbXlGbGV4R3Jvd1RhcmdldCcpO1xuXHRcdGVsZW1lbnQuZGF0YSgnYW15RmxleEdyb3dUYXJnZXQnLCBuZXdHcm93KTtcblxuXHRcdGlmIChvbGRHcm93ID4gMCAmJiBuZXdHcm93ID09PSAwKSB7XG5cblx0XHRcdGVsZW1lbnQuZGF0YSgnYW15RmxleEdyb3dQcmV2RGlzcGxheScsIGVsZW1lbnQuY3NzKCdkaXNwbGF5JykpO1xuXHRcdFx0ZWxlbWVudC5jc3MoJ2ZsZXhHcm93JywgMWUtNSk7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0ZWxlbWVudC5hc0tlZmlyU3RyZWFtKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQnKVxuXHRcdFx0XHRcdFx0Lm1lcmdlKEtlZmlyLmxhdGVyKDMwMCkpXG5cdFx0XHRcdFx0XHQudGFrZSgxKVxuXHRcdFx0XHRcdFx0LmZpbHRlcigoKSA9PiBlbGVtZW50LmRhdGEoJ2FteUZsZXhHcm93VGFyZ2V0JykgPT09IDApXG5cdFx0XHRcdFx0XHQub25WYWx1ZSgoKSA9PiB7IGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJ25vbmUnKSB9KTtcblx0XHRcdH0pO1xuXG5cdFx0fSBlbHNlIGlmIChvbGRHcm93ID09PSAwICYmIG5ld0dyb3cgPiAwKSB7XG5cblx0XHRcdGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgZWxlbWVudC5kYXRhKCdhbXlGbGV4R3Jvd1ByZXZEaXNwbGF5JykpO1xuXHRcdFx0ZWxlbWVudC5kYXRhKCdhbXlGbGV4R3Jvd0Nzc1NjaGVkdWxlZCcsIHRydWUpO1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGVsZW1lbnQucmVtb3ZlRGF0YSgnYW15RmxleEdyb3dDc3NTY2hlZHVsZWQnKTtcblx0XHRcdFx0ZWxlbWVudC5jc3MoJ2ZsZXhHcm93JywgZWxlbWVudC5kYXRhKCdhbXlGbGV4R3Jvd1RhcmdldCcpKTtcblx0XHRcdH0pO1xuXG5cdFx0fSBlbHNlIGlmICghZWxlbWVudC5kYXRhKCdhbXlGbGV4R3Jvd0Nzc1NjaGVkdWxlZCcpKSB7XG5cblx0XHRcdGVsZW1lbnQuY3NzKCdmbGV4R3JvdycsIG5ld0dyb3cpO1xuXG5cdFx0fVxuXHR9XG5cblx0LyogIHRvIHNldCB0aGUgY3NzIHByb3BlcnR5ICdmbGV4LWdyb3cnIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQgYW5kICAgKi9cblx0LyogIGNvcnJlc3BvbmRpbmdseSBpbmNyZWFzZXMvZGVjcmVhc2VzIHRoYXQgb2YgaXRzIGRpcmVjdCBwYXJlbnQgICAgKi9cblx0JC5mbi5hbXlOZXN0ZWRGbGV4R3JvdyA9IGZ1bmN0aW9uIChncm93KSB7XG5cdFx0c2V0RGlzcGxheSh0aGlzLCBncm93KTtcblx0XHR2YXIgZ3Jvd1N1bSA9IDA7XG5cdFx0dGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0Z3Jvd1N1bSArPSBwYXJzZUZsb2F0KCQodGhpcykuZGF0YSgnYW15RmxleEdyb3dUYXJnZXQnKSk7XG5cdFx0fSk7XG5cdFx0c2V0RGlzcGxheSh0aGlzLnBhcmVudCgpLCBncm93U3VtKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlsL25lc3RlZC1mbGV4LWdyb3cuanNcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL3NyYy9wLWNvcmUuc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL3NyYy9wLWNvcmUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9zcmMvcC1jb3JlLnNjc3NcIik7XG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3AtY29yZS5zY3NzXG4gKiogbW9kdWxlIGlkID0gMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9jc3NUb1N0cmluZy5qc1wiKSgpO1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNpcmN1aXRib2FyZHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOnN0cmV0Y2g7LXdlYmtpdC1hbGlnbi1pdGVtczpzdHJldGNoOy1tcy1mbGV4LWFsaWduOnN0cmV0Y2g7YWxpZ24taXRlbXM6c3RyZXRjaDtwYWRkaW5nOjA7fS5jaXJjdWl0Ym9hcmQgLnRpbGVtYXB7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstd2Via2l0LWZsZXgtZGlyZWN0aW9uOmNvbHVtbjstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47fS5jaXJjdWl0Ym9hcmQgLnRpbGVtYXA+LnRpbGVyb3d7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy13ZWJraXQtZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstd2Via2l0LWp1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuOy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW46MDtwYWRkaW5nOjA7aGVpZ2h0OjA7fS5jaXJjdWl0Ym9hcmQgLnRpbGVtYXA+LnRpbGVyb3c+LnRpbGV7d2lkdGg6MDttYXJnaW46MDtwYWRkaW5nOjA7fS5jaXJjdWl0Ym9hcmQgLnRpbGVtYXA+LnRpbGVyb3c+LnRpbGU6bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MCAhaW1wb3J0YW50O30uY2lyY3VpdGJvYXJkIC50aWxlbWFwPi50aWxlcm93Omxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowICFpbXBvcnRhbnQ7fVwiLCBcIlwiXSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL34vYXV0b3ByZWZpeGVyLWxvYWRlciEuL34vc2Fzcy1sb2FkZXIhLi9zcmMvcC1jb3JlLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAyNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5kZWZpbmUoWydqcXVlcnknLCAnLi9taXNjLmpzJywgJ2tlZmlyJywgJ3R3ZWVuanMnXSwgZnVuY3Rpb24gKCQsIFUsIEtlZmlyLCBUV0VFTikge1xuXG5cdC8qIEtlZmlyIGpRdWVyeSBwbHVnaW4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0XHRyZXF1aXJlKCdrZWZpci1qcXVlcnknKS5pbml0KEtlZmlyLCAkKTtcblxuXG5cdC8qIEV2ZW50U3RyZWFtIGdlbmVyYXRvcnMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0Ly8gVGhpcyBtZXRob2Qgd29ya3Mgd2l0aCBldmVudHMgdGhhdCBjYW4gaGF2ZSBvbmx5IG9uZSBzdWJzY3JpYmVyLFxuXHQvLyB0aGF0IGNhbiBiZSB1bi1zdWJzY3JpYmVkIGJ5IHNldHRpbmcgdGhlIHN1YnNjcmliZXIgdG8gYG51bGxgLlxuXHQvLyBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9pemVkLCBzbyBvbmx5IG9uZSBzdWJzY3JpcHRpb24gaXMgdGFrZW4sXG5cdC8vIGFuZCB0aGUgc2FtZSBzdHJlYW0gZm9yIGl0IHJldHVybmVkIGZvciBlYWNoIHJlcXVlc3QuXG5cdEtlZmlyLmZyb21Pbk51bGwgPSBVLm1lbW9pemUoZnVuY3Rpb24gZnJvbU9uTnVsbChvYmosIGV2ZW50TmFtZSkge1xuXHRcdHJldHVybiBLZWZpci5mcm9tQmluZGVyKChlbWl0dGVyKSA9PiB7XG5cdFx0XHRvYmoub24oZXZlbnROYW1lLCBlbWl0dGVyLmVtaXQpO1xuXHRcdFx0cmV0dXJuICgpID0+IHsgb2JqLm9uKGV2ZW50TmFtZSwgbnVsbCkgfTtcblx0XHR9KTtcblx0fSk7XG5cblxuXHR2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lRm4gPVxuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgICB8fFxuXHRcdFx0d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSAgICB8fFxuXHRcdFx0d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICB8fFxuXHRcdFx0d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICB8fFxuXHRcdFx0KChmKSA9PiB7IHdpbmRvdy5zZXRUaW1lb3V0KGYsIDEwMDAgLyA2MCkgfSk7XG5cdEtlZmlyLmFuaW1hdGlvbkZyYW1lcyA9IGZ1bmN0aW9uIGFuaW1hdGlvbkZyYW1lcygpIHtcblx0XHRyZXR1cm4gS2VmaXIuZnJvbUJpbmRlcigoZW1pdHRlcikgPT4ge1xuXG5cdFx0XHQvKiBzZWxmLWNhbGxpbmcgYW5pbWF0aW9uLWZyYW1lIGxvb3AgKi9cblx0XHRcdHZhciBzdWJzY3JpYmVkID0gdHJ1ZTtcblx0XHRcdChmdW5jdGlvbiBpdGVyYXRpb25GbigpIHtcblx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lRm4oKCkgPT4ge1xuXHRcdFx0XHRcdGVtaXR0ZXIuZW1pdCgpO1xuXHRcdFx0XHRcdGlmIChzdWJzY3JpYmVkKSB7IGl0ZXJhdGlvbkZuKCkgfVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pKCk7XG5cblx0XHRcdC8qIHVuc3Vic2NyaWJlIGZ1bmN0aW9uICovXG5cdFx0XHRyZXR1cm4gKCkgPT4geyBzdWJzY3JpYmVkID0gZmFsc2UgfTtcblxuXHRcdH0pO1xuXHR9O1xuXG5cblx0S2VmaXIudHdlZW4gPSBmdW5jdGlvbiB0d2VlbihvYmpTdGFydCwgb2JqRW5kLCB7ZHVyYXRpb24sIGRlbGF5LCBlYXNpbmd9KSB7XG5cblx0XHQvKiB0aGUgdHdlZW4gKi9cblx0XHR2YXIgdHcgPSBuZXcgVFdFRU4uVHdlZW4ob2JqU3RhcnQpLnRvKG9iakVuZCwgZHVyYXRpb24pO1xuXG5cdFx0LyogdGhlIHJldHVybmVkIGJ1cyAqL1xuXHRcdHZhciBidXMgPSBLZWZpci5idXMoKTtcblxuXHRcdC8qIGEgbG9jYWwgZnVuY3Rpb24gdG8gcGx1ZyBpbiBvdGhlciBzdHJlYW1zLCBrZWVwaW5nIHRyYWNrIGluIG9yZGVyIHRvICdlbmQnIHRoZSBidXMgKi9cblx0XHR2YXIgYWRkU3RyZWFtID0gKCgpID0+IHtcblx0XHRcdHZhciBjaGFpbmVkU3RyZWFtcyA9IDA7XG5cdFx0XHRyZXR1cm4gKHN0cmVhbSkgPT4ge1xuXHRcdFx0XHRjaGFpbmVkU3RyZWFtcyArPSAxO1xuXHRcdFx0XHRidXMucGx1ZyhzdHJlYW0pO1xuXHRcdFx0XHRzdHJlYW0ub25FbmQoKCkgPT4ge1xuXHRcdFx0XHRcdGNoYWluZWRTdHJlYW1zIC09IDE7XG5cdFx0XHRcdFx0aWYgKGNoYWluZWRTdHJlYW1zID09PSAwKSB7IGJ1cy5lbmQoKSB9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fTtcblx0XHR9KSgpO1xuXG5cdFx0LyogbWFpbiBzdHJlYW0gKi9cblx0XHRhZGRTdHJlYW0oS2VmaXIuZnJvbUJpbmRlcigoZW1pdHRlcikgPT4ge1xuXHRcdFx0aWYgKGVhc2luZykgeyB0dy5lYXNpbmcoZWFzaW5nKSB9XG5cdFx0XHRpZiAoZGVsYXkpICB7IHR3LmRlbGF5KGRlbGF5KSB9XG5cdFx0XHR0dy5vblVwZGF0ZShmdW5jdGlvbiAoKSB7IGVtaXR0ZXIuZW1pdCh0aGlzKSB9KTtcblx0XHRcdHR3Lm9uQ29tcGxldGUoZW1pdHRlci5lbmQpO1xuXHRcdH0pKTtcblxuXHRcdC8qIGFkZGluZyB0d2Vlbi1zcGVjaWZpYyBwcm9wZXJ0aWVzIHRvIHRoZSByZXR1cm5lZCBidXMgKi9cblx0XHRidXMudHdlZW4gPSB0dztcblx0XHRidXMuc3RhcnQgPSAoKSA9PiB7XG5cdFx0XHR0dy5zdGFydCgpO1xuXHRcdFx0cmV0dXJuIGJ1cztcblx0XHR9O1xuXHRcdGJ1cy5jaGFpbiA9IChvdGhlcikgPT4ge1xuXHRcdFx0YWRkU3RyZWFtKG90aGVyKTtcblx0XHRcdHR3LmNoYWluKG90aGVyLnR3ZWVuKTtcblx0XHRcdHJldHVybiBidXM7XG5cdFx0fTtcblxuXHRcdC8qIHJldHVybmluZyB0aGUgYnVzICovXG5cdFx0cmV0dXJuIGJ1cztcblxuXHR9O1xuXG5cblx0S2VmaXIua2V5UHJlc3MgPSBmdW5jdGlvbiBrZXlQcmVzcyhrZXlDb2RlKSB7XG5cdFx0cmV0dXJuICQod2luZG93KS5hc0tlZmlyU3RyZWFtKCdrZXlwcmVzcycpLmZpbHRlcigoZSkgPT4gZS5rZXlDb2RlID09PSBrZXlDb2RlKTtcblx0fTtcblxuXG5cdEtlZmlyLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIEtlZmlyLmZyb21CaW5kZXIoKGVtaXR0ZXIpID0+IHtcblx0XHRcdGVtaXR0ZXIuZW1pdCh2YWx1ZSk7XG5cdFx0XHRlbWl0dGVyLmVuZCgpO1xuXHRcdH0pO1xuXHRcdC8vcmV0dXJuIEtlZmlyLmNvbnN0YW50KHZhbHVlKTsgLy8gVE9ETzogcmVwbGFjZSBhbGwgJ29uY2UnIGNhbGxzIHdpdGggJ2NvbnN0YW50JyBjYWxsczsgdGhlbiByZW1vdmUgJ29uY2UnXG5cdH07XG5cblxuXHRLZWZpci5mcm9tQXJyYXkgPSBmdW5jdGlvbiBmcm9tQXJyYXkoYXJyYXkpIHtcblx0XHRyZXR1cm4gS2VmaXIuZnJvbUJpbmRlcigoZW1pdHRlcikgPT4ge1xuXHRcdFx0YXJyYXkuZm9yRWFjaChlbWl0dGVyLmVtaXQpO1xuXHRcdFx0ZW1pdHRlci5lbmQoKTtcblx0XHR9KTtcblx0fTtcblxuXG5cdC8qIEV2ZW50U3RyZWFtIGNvbnZlcnRlcnMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuXHQvLyBUaGlzIGNyZWF0ZXMgYSAnd2luZG93IG9mIG9wcG9ydHVuaXR5JyB0byBsaW1pdCBvdGhlciBzdHJlYW1zIGJ5LlxuXHQvLyBUaGlzIHdpbmRvdyBpcyBwcm92aWRlZCBieSB0aGUgYHBhY2luZ2Agb2JzZXJ2YWJsZS4gQW4gb3B0aW9uYWwgYGhhbmRsZXJgXG5cdC8vIHBhcmFtZXRlciBjYW4gYmUgZ2l2ZW4gdG8gZG8gc29tZSBzZXR1cCBhbmQgc29tZSBicmVha2Rvd24uIEl0IGlzIHBhc3NlZCBhIGZ1bmN0aW9uIGFzIGFuIGFyZ3VtZW50XG5cdC8vIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCAqb25jZSogaW4gdGhlIHBsYWNlIHdoZXJlIG90aGVyIHN0cmVhbXMgY2FuIGRvIHRoZWlyXG5cdC8vIHRoaW5nLiBJdCByZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCB0byB3cmFwIG90aGVyIHN0cmVhbXMuIEl0IGRvZXMgbm90XG5cdC8vIHJldHVybiBhIHN0cmVhbS5cblx0S2VmaXIubGltaXRlciA9IGZ1bmN0aW9uIGxpbWl0ZXIocGFjaW5nLCBoYW5kbGVyID0gVS5jYWxsKSB7XG5cdFx0dmFyIHdhbnRlZEJ1cyA9IEtlZmlyLmJ1cygpO1xuXHRcdHZhciBvcGVuID0gICAgICBLZWZpci5idXMoKTtcblx0XHR2YXIgY2xvc2UgPSAgICAgS2VmaXIuYnVzKCk7XG5cblx0XHQvKiB0YWtlcyAndGhpcycgc3RyZWFtIGFzIHBhY2luZyBmb3IgYSB3aW5kb3cgb2Ygb3Bwb3J0dW5pdHkgZm9yIG90aGVyIHN0cmVhbXMgKi9cblx0XHRwYWNpbmcuZmlsdGVyQnkod2FudGVkQnVzLnRvUHJvcGVydHkoZmFsc2UpKS5vblZhbHVlKCgpID0+IHtcblx0XHRcdGhhbmRsZXIoKCkgPT4ge1xuXHRcdFx0XHRvcGVuLmVtaXQoKTtcblx0XHRcdFx0d2FudGVkQnVzLmVtaXQoZmFsc2UpO1xuXHRcdFx0XHRjbG9zZS5lbWl0KCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdC8qIHJldHVybnMgYSBmdW5jdGlvbiB0byB3cmFwIGEgc3RyZWFtIGluIHRoaXMgd3JhcHBlciAqL1xuXHRcdHJldHVybiBmdW5jdGlvbiAoc3RyZWFtLCB7YnVmZmVyfSA9IHt9KSB7XG5cdFx0XHR3YW50ZWRCdXMucGx1ZyhzdHJlYW0ubWFwVG8odHJ1ZSkpO1xuXHRcdFx0cmV0dXJuIEtlZmlyLmNvbnN0YW50KHRydWUpLnRha2UoMSkuY29uY2F0KGNsb3NlKS5mbGF0TWFwTGF0ZXN0KCgpID0+IHtcblx0XHRcdFx0dmFyIGFjY3VtdWxhdG9yID0gKGFyciwgdmFsKSA9PiAoYnVmZmVyID8gYXJyLmNvbmNhdChbdmFsXSkgOiBbdmFsXSk7XG5cdFx0XHRcdHJldHVybiBzdHJlYW0udGFrZVVudGlsQnkob3BlbikucmVkdWNlKGFjY3VtdWxhdG9yLCBbXSkuZmxhdE1hcChLZWZpci5mcm9tQXJyYXkpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0fTtcblxuXHQvLyBUaGlzIHJlc3RyaWN0cyBhIGdpdmVuIHN0cmVhbSB0byBhIHdyYXBwZXIgc3RyZWFtIGNyZWF0ZWQgd2l0aCB0aGUgbWV0aG9kIGFib3ZlLlxuXHQvLyBBbGwgaXRzIG9yaWdpbmFsIGV2ZW50cyBhcmUgbm93IGZpcmVkIGluc2lkZSB0aGUgcHJvdmlkZWQgd2luZG93LiBTZXQgYG9wdGlvbnMuYnVmZmVyYFxuXHQvLyB0byBgdHJ1ZWAgaWYgYWxsIGl0cyBldmVudHMgc2hvdWxkIGJlIGJ1ZmZlcmVkIGFuZCByZWxlYXNlZCBpbnNpZGUgdGhlIG5leHQgd2luZG93LlxuXHQvLyBPdGhlcndpc2UsIG9ubHkgdGhlIGxhc3QgZXZlbnQgaXMgcmV0YWluZWQuXG5cdEtlZmlyLk9ic2VydmFibGUucHJvdG90eXBlLmxpbWl0ZWRCeSA9IGZ1bmN0aW9uIGxpbWl0ZWRCeSh3cmFwcGVyLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIHdyYXBwZXIodGhpcywgb3B0aW9ucyk7XG5cdH07XG5cblxuXHQvLyBUaGlzIGlzIGEgY2hlYXAgdmVyc2lvbiBvZiB0aGUgbGltaXRlciBkZWZpbmVkIGFib3ZlLiBUT0RPOiB1c2UgdGhlIGxpbWl0ZXIgd2hlcmUgdGhpcyBpcyBub3cgdXNlZFxuXHRLZWZpci5TdHJlYW0ucHJvdG90eXBlLmhvbGRVbnRpbCA9IGZ1bmN0aW9uIGhvbGRVbnRpbChwYWNpbmcpIHtcblx0XHRyZXR1cm4gS2VmaXIuZnJvbUJpbmRlcigoZW1pdHRlcikgPT4ge1xuXHRcdFx0dmFyIGJ1ZmZlciA9IFtdO1xuXHRcdFx0dmFyIHVuc3Vic2NyaWJlVG9UaGlzID0gdGhpcy5vblZhbHVlKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRidWZmZXIucHVzaCh2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHRcdHZhciB1bnN1YnNjcmliZVRvUGFjaW5nID0gcGFjaW5nLm9uVmFsdWUoKCkgPT4ge1xuXHRcdFx0XHRpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgb2xkQnVmZmVyID0gYnVmZmVyO1xuXHRcdFx0XHRcdGJ1ZmZlciA9IFtdO1xuXHRcdFx0XHRcdG9sZEJ1ZmZlci5mb3JFYWNoKGVtaXR0ZXIuZW1pdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdFx0dW5zdWJzY3JpYmVUb1RoaXMoKTtcblx0XHRcdFx0dW5zdWJzY3JpYmVUb1BhY2luZygpO1xuXHRcdFx0XHRidWZmZXIgPSBudWxsO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0fTtcblxuXHQvLyBUaGlzIGZpbHRlcnMgYW4gb2JzZXJ2YWJsZSB0byBvbmx5IGxldCB0aHJvdWdoIHZhbHVlcyBlcXVhbCB0byB0aGUgZ2l2ZW4gdmFsdWUuXG5cdEtlZmlyLk9ic2VydmFibGUucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBjb21wYXJhdG9yKSB7XG5cdFx0Y29tcGFyYXRvciA9IGNvbXBhcmF0b3IgfHwgKChlKSA9PiBlID09PSB2YWx1ZSk7XG5cdFx0cmV0dXJuIHRoaXMuc2tpcER1cGxpY2F0ZXMoKS5maWx0ZXIoY29tcGFyYXRvcik7XG5cdH07XG5cblx0Ly8gVGhpcyBtYWtlcyBhIHN1YnNjcmlwdGlvbiB0byBhbiBvYnNlcnZhYmxlIHRoYXQgZG9lc24ndCBkbyBhbnl0aGluZ1xuXHRLZWZpci5PYnNlcnZhYmxlLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGRvTm90aGluZyA9ICgpPT57fTtcblx0XHR0aGlzLm9uVmFsdWUoZG9Ob3RoaW5nKTtcblx0XHRyZXR1cm4gKCkgPT4geyB0aGlzLm9mZlZhbHVlKGRvTm90aGluZykgfTtcblx0fTtcblxuXHQvLyBUaGlzIGlzIGEgJ3NtYXJ0JyAuc3RvcFByb3BhZ2F0aW9uLCBtYXJraW5nIGV2ZW50cyB3aXRoIGEgbGFiZWxcblx0Ly8gYW5kIHNraXBwaW5nIHRob3NlIHRoYXQgYWxyZWFkeSBoYXZlIHRoYXQgbGFiZWwuXG5cdEtlZmlyLlN0cmVhbS5wcm90b3R5cGUuc2tpcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKGxhYmVsKSB7XG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKChldmVudCkgPT4ge1xuXHRcdFx0cmV0dXJuICFVLmFycmF5KGV2ZW50Lm9yaWdpbmFsRXZlbnQsICdfb25seU9uY2VGb3InKVtsYWJlbF07XG5cdFx0fSkubWFwKChldmVudCkgPT4ge1xuXHRcdFx0VS5hcnJheShldmVudC5vcmlnaW5hbEV2ZW50LCAnX29ubHlPbmNlRm9yJylbbGFiZWxdID0gdHJ1ZTtcblx0XHR9KTtcblx0fTtcblxuXHQvLyBGaWx0ZXIgZXZlbnRzIHRvIG9ubHkgY2VydGFpbiBrZXlzIC8gYnV0dG9ucy4gQ2FuIGJlIGEgcHJlZGljYXRlIGZ1bmN0aW9uIG9yIHNpbmdsZSBudW1iZXIuXG5cdEtlZmlyLlN0cmVhbS5wcm90b3R5cGUud2hpY2ggPSBmdW5jdGlvbiAoYnV0dG9uSWQpIHtcblx0XHR2YXIgcHJlZCA9ICh0eXBlb2YgYnV0dG9uSWQgPT09ICdmdW5jdGlvbicpID8gKGJ1dHRvbklkKSA6IChiID0+IGIgPT09IGJ1dHRvbklkKTtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoKGUpID0+IHByZWQoZS53aGljaCkpO1xuXHR9O1xuXG5cblx0LyogRXZlbnRTdHJlYW0gZ2VuZXJhdG9ycyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQkLmZuLm1vdXNlRHJhZyA9IGZ1bmN0aW9uIG1vdXNlRHJhZyh7dGhyZXNob2xkfSA9IHt9KSB7XG5cdFx0cmV0dXJuICQodGhpcykuYXNLZWZpclN0cmVhbSgnbW91c2Vkb3duJykuZmxhdE1hcCgobW91c2VEb3duRXZlbnQpID0+IHtcblx0XHRcdHZhciBzdHJlYW0gPSAkKGRvY3VtZW50KS5hc0tlZmlyU3RyZWFtKCdtb3VzZW1vdmUnKTtcblx0XHRcdGlmICh0aHJlc2hvbGQpIHtcblx0XHRcdFx0dmFyIGNyb3NzZWQgPSBmYWxzZTtcblx0XHRcdFx0c3RyZWFtID0gc3RyZWFtLmZpbHRlcigobW91c2VNb3ZlRXZlbnQpID0+IHsgLy8gVE9ETzogZG9uJ3QgdXNlICdmaWx0ZXInLCBidXQgc29tZXRoaW5nIGxpa2UgJ3NraXBVbnRpbCcgb3IgJ2ZsYXRNYXAnXG5cdFx0XHRcdFx0aWYgKGNyb3NzZWQpIHsgcmV0dXJuIHRydWUgfVxuXHRcdFx0XHRcdHZhciBkeCA9IG1vdXNlRG93bkV2ZW50LnBhZ2VYIC0gbW91c2VNb3ZlRXZlbnQucGFnZVg7XG5cdFx0XHRcdFx0dmFyIGR5ID0gbW91c2VEb3duRXZlbnQucGFnZVkgLSBtb3VzZU1vdmVFdmVudC5wYWdlWTtcblx0XHRcdFx0XHRpZiAoZHggKiBkeCArIGR5ICogZHkgPiB0aHJlc2hvbGQgKiB0aHJlc2hvbGQpIHsgcmV0dXJuIGNyb3NzZWQgPSB0cnVlIH1cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHN0cmVhbVxuXHRcdFx0XHRcdC50YWtlVW50aWxCeSgkKGRvY3VtZW50KS5hc0tlZmlyU3RyZWFtKCdtb3VzZXVwJykpXG5cdFx0XHRcdFx0Lm1hcCgobW91c2VNb3ZlRXZlbnQpID0+ICh7IG1vdXNlRG93bkV2ZW50LCBtb3VzZU1vdmVFdmVudCB9KSk7XG5cdFx0fSk7XG5cdH07XG5cblx0JC5mbi5tb3VzZUNsaWNrID0gZnVuY3Rpb24gbW91c2VDbGljayh7dGhyZXNob2xkfSA9IHt9KSB7XG5cdFx0cmV0dXJuICQodGhpcykuYXNLZWZpclN0cmVhbSgnbW91c2Vkb3duJykuZmxhdE1hcCgobW91c2VEb3duRXZlbnQpID0+IHtcblx0XHRcdHZhciB1bnRpbFN0cmVhbSA9ICQoZG9jdW1lbnQpLmFzS2VmaXJTdHJlYW0oJ21vdXNlbW92ZScpO1xuXHRcdFx0aWYgKHRocmVzaG9sZCkge1xuXHRcdFx0XHR2YXIgY3Jvc3NlZCA9IGZhbHNlO1xuXHRcdFx0XHR1bnRpbFN0cmVhbSA9IHVudGlsU3RyZWFtLmZpbHRlcigobW91c2VNb3ZlRXZlbnQpID0+IHtcblx0XHRcdFx0XHRpZiAoY3Jvc3NlZCkgeyByZXR1cm4gdHJ1ZSB9XG5cdFx0XHRcdFx0dmFyIGR4ID0gbW91c2VEb3duRXZlbnQucGFnZVggLSBtb3VzZU1vdmVFdmVudC5wYWdlWDtcblx0XHRcdFx0XHR2YXIgZHkgPSBtb3VzZURvd25FdmVudC5wYWdlWSAtIG1vdXNlTW92ZUV2ZW50LnBhZ2VZO1xuXHRcdFx0XHRcdGlmIChkeCAqIGR4ICsgZHkgKiBkeSA+IHRocmVzaG9sZCAqIHRocmVzaG9sZCkgeyByZXR1cm4gY3Jvc3NlZCA9IHRydWUgfVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJChkb2N1bWVudCkuYXNLZWZpclN0cmVhbSgnbW91c2V1cCcpLnRha2UoMSkudGFrZVVudGlsQnkodW50aWxTdHJlYW0pO1xuXHRcdH0pO1xuXHR9O1xuXG5cblx0JC5mbi5tb3VzZVdoZWVsID0gZnVuY3Rpb24gbW91c2VXaGVlbCgpIHtcblx0XHRyZXR1cm4gJCh0aGlzKS5hc0tlZmlyU3RyZWFtKCdtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsJyk7XG5cdH07XG5cblxuXHRyZXR1cm4gS2VmaXI7XG5cblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlsL2tlZmlyLWFuZC1lZ2dzLmpzXG4gKiovIiwiZGVmaW5lKFsnanF1ZXJ5JywgJy4vbWlzYy5qcyddLCBmdW5jdGlvbiAoJCwgVSkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZnVuY3Rpb24gZGVlcFRyYW5zZm9ybSh2YWwsIGZuKSB7XG5cdFx0aWYgKCQuaXNQbGFpbk9iamVjdCh2YWwpIHx8ICQuaXNBcnJheSh2YWwpKSB7XG5cdFx0XHQkLmVhY2godmFsLCAoa2V5LCBzdWJWYWwpID0+IHtcblx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4oc3ViVmFsKTtcblx0XHRcdFx0aWYgKFUuaXNVbmRlZmluZWQocmV0dXJuZWQpKSB7XG5cdFx0XHRcdFx0ZGVlcFRyYW5zZm9ybShzdWJWYWwsIGZuKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWxba2V5XSA9IHJldHVybmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgUkVGX1BBVFRFUk4gPSAvYChbXFxbXFwuXS4rPylgL2c7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGRlZmF1bHRzKHNwZWMsIGNvbnRleHQpIHtcblxuXHRcdGRlZXBUcmFuc2Zvcm0oc3BlYywgKHZhbCkgPT4ge1xuXHRcdFx0aWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHZhciByZWZzID0gKHZhbC5tYXRjaChSRUZfUEFUVEVSTikgfHwgW10pLm1hcCgocmVmKSA9PiB7XG5cdFx0XHRcdFx0dmFyIHN0cmlwcGVkUmVmID0gcmVmLnN1YnN0cmluZygxLHJlZi5sZW5ndGgtMSk7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBGdW5jdGlvbigncmVmcycsIGByZXR1cm4gcmVmcyR7c3RyaXBwZWRSZWZ9YCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR2YXIgZXhwciA9IHZhbC5yZXBsYWNlKFJFRl9QQVRURVJOLCBcIihyZWZzJDEpXCIpO1xuXHRcdFx0XHR2YXIgdGVtcGxhdGVGbiA9IChmb3JtYWxQYXJhbXMpID0+IHtcblx0XHRcdFx0XHR2YXIgbmV3Rm9ybWFsUGFyYW1zID0gZm9ybWFsUGFyYW1zLmNvbmNhdChbYHJldHVybiAke2V4cHJ9YF0pO1xuXHRcdFx0XHRcdHJldHVybiBVLmFwcGx5Q29uc3RydWN0b3IoRnVuY3Rpb24sIG5ld0Zvcm1hbFBhcmFtcyk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRlbXBsYXRlRm4ucmVmcyA9IHJlZnM7XG5cdFx0XHRcdHJldHVybiB0ZW1wbGF0ZUZuO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cblx0XHQvLy8vIHJlY3Vyc2l2ZSBhdXhpbGlhcnkgZnVuY3Rpb247IHJldHVybnMgdHJ1ZSBpZiBhIGNoYW5nZSB0byBvYmogd2FzIG1hZGVcblx0XHRmdW5jdGlvbiB3aXRoRGVmYXVsdHNBdXgoZGVmU3BlYywgb2JqLCByZWZzLCBwYXJhbXMpIHtcblx0XHRcdHZhciBjaGFuZ2UgPSBmYWxzZTtcblx0XHRcdE9iamVjdC5rZXlzKGRlZlNwZWMpLmZvckVhY2goKGtleSkgPT4ge1xuXG5cdFx0XHRcdGlmIChrZXkgaW4gb2JqKSB7XG5cdFx0XHRcdFx0aWYgKCQuaXNQbGFpbk9iamVjdChkZWZTcGVjW2tleV0pICYmICQuaXNQbGFpbk9iamVjdChvYmpba2V5XSkpIHtcblx0XHRcdFx0XHRcdGNoYW5nZSA9IHdpdGhEZWZhdWx0c0F1eChkZWZTcGVjW2tleV0sIG9ialtrZXldLCByZWZzLCBwYXJhbXMpIHx8IGNoYW5nZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoJC5pc1BsYWluT2JqZWN0KGRlZlNwZWNba2V5XSkpIHtcblx0XHRcdFx0XHRvYmpba2V5XSA9IHt9O1xuXHRcdFx0XHRcdGNoYW5nZSA9IHdpdGhEZWZhdWx0c0F1eChkZWZTcGVjW2tleV0sIG9ialtrZXldLCByZWZzLCBwYXJhbXMpIHx8IGNoYW5nZTtcblx0XHRcdFx0fSBlbHNlIGlmICgkLmlzRnVuY3Rpb24oZGVmU3BlY1trZXldKSkge1xuXHRcdFx0XHRcdGlmIChkZWZTcGVjW2tleV0ucmVmcy5ldmVyeSgocmVmKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gIVUuaXNVbmRlZmluZWQocmVmKHJlZnMpKTtcblx0XHRcdFx0XHR9KSkgeyAvLyBpZiBub25lIG9mIHRoZSByZWZlcmVuY2VzIGFyZSB1bmRlZmluZWQsIGFzc2lnbiB0aGlzICdkZWZhdWx0J1xuXHRcdFx0XHRcdFx0dmFyIGFsbHBhcmFtcyA9ICQuZXh0ZW5kKHsgcmVmczogcmVmcyB9LCBjb250ZXh0LCBwYXJhbXMpO1xuXHRcdFx0XHRcdFx0dmFyIGZvcm1hbFBhcmFtcyA9IE9iamVjdC5rZXlzKGFsbHBhcmFtcyk7XG5cdFx0XHRcdFx0XHR2YXIgYWN0dWFsUGFyYW1zID0gZm9ybWFsUGFyYW1zLm1hcCgoZnBhcikgPT4gYWxscGFyYW1zW2ZwYXJdKTtcblx0XHRcdFx0XHRcdHZhciBmaW5hbEZuID0gZGVmU3BlY1trZXldKGZvcm1hbFBhcmFtcyk7XG5cdFx0XHRcdFx0XHRvYmpba2V5XSA9IGZpbmFsRm4uYXBwbHkobnVsbCwgYWN0dWFsUGFyYW1zKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gY2hhbmdlO1xuXHRcdH1cblxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHdpdGhEZWZhdWx0cyhvYmosIHBhcmFtcykge1xuXHRcdFx0dmFyIHJlc3VsdCA9IChVLmlzVW5kZWZpbmVkKG9iaikgPyB7fSA6ICQuZXh0ZW5kKHRydWUsIHt9LCBvYmopKTtcblxuXHRcdFx0dmFyIGNoYW5nZSA9IHRydWU7XG5cdFx0XHR3aGlsZSAoY2hhbmdlKSB7XG5cdFx0XHRcdGNoYW5nZSA9IHdpdGhEZWZhdWx0c0F1eChzcGVjLCByZXN1bHQsIHJlc3VsdCwgcGFyYW1zIHx8IHt9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9O1xuXHR9O1xuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWwvZGVmYXVsdHMuanNcbiAqKi8iLCJkZWZpbmUoWydqcXVlcnknXSwgZnVuY3Rpb24gKCQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8vXG5cdC8vIHRha2VzIGFuIG9iamVjdCBtYXBwaW5nICdzZWxlY3Rvcicg4oaSICdwcm9wZXJ0eScg4oaSICd2YWx1ZScgYW5kXG5cdC8vIGFwcGxpZXMgaXQgYXMgYSBzZXQgb2YgQ1NTIHJ1bGVzIHRvIHRoZSBkZXNjZW5kYW50cyBvZiB0aGUgY3VycmVudCBlbGVtZW50XG5cdC8vXG5cdCQuZm4uZXh0ZW5kKHtcblx0XHRhbXlQdXRDc3NSdWxlczogZnVuY3Rpb24gKHJ1bGVzKSB7XG5cdFx0XHQkLmVhY2gocnVsZXMsIChzZWxlY3RvciwgY3NzKSA9PiB7XG5cdFx0XHRcdHZhciBjb250ZXh0O1xuXHRcdFx0XHRpZiAoc2VsZWN0b3IudHJpbSgpID09PSAnJicpIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gdGhpcztcblx0XHRcdFx0fSBlbHNlIGlmIChzZWxlY3Rvci50cmltKCkuY2hhckF0KDApID09PSAnJicpIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gdGhpcy5maW5kKHNlbGVjdG9yLnRyaW0oKS5zdWJzdHIoMSkudHJpbSgpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gdGhpcy5maW5kKHNlbGVjdG9yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250ZXh0LmNzcyhjc3MpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbC9wdXQtY3NzLXJ1bGVzLmpzXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9zcmMvcC10aWxlLXNraW4uc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL3NyYy9wLXRpbGUtc2tpbi5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL3NyYy9wLXRpbGUtc2tpbi5zY3NzXCIpO1xuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9wLXRpbGUtc2tpbi5zY3NzXG4gKiogbW9kdWxlIGlkID0gMjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9jc3NUb1N0cmluZy5qc1wiKSgpO1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNraW5uZWQtdGlsZXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstd2Via2l0LWZsZXgtZGlyZWN0aW9uOmNvbHVtbjstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjt9LnNraW5uZWQtdGlsZT5oZWFkZXJ7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1hbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstd2Via2l0LWp1c3RpZnktY29udGVudDpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtmb250LXdlaWdodDpib2xkO2JvcmRlci13aWR0aDoxcHg7b3ZlcmZsb3c6aGlkZGVuO30uc2tpbm5lZC10aWxlLm9wZW4+aGVhZGVye2hlaWdodDoyNnB4O2JvcmRlci1zdHlsZTpub25lIG5vbmUgc29saWQgbm9uZTtsaW5lLWhlaWdodDoyNnB4O2ZvbnQtc2l6ZToxOS41cHggIWltcG9ydGFudDt3aGl0ZS1zcGFjZTpub3dyYXA7fS5za2lubmVkLXRpbGU6bm90KC5vcGVuKT5oZWFkZXJ7LXdlYmtpdC1ib3gtZmxleDoxOy13ZWJraXQtZmxleC1ncm93OjE7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTtwYWRkaW5nOjAgNXB4O30uc2tpbm5lZC10aWxlPnNlY3Rpb257LXdlYmtpdC11c2VyLXNlbGVjdDp0ZXh0Oy1tb3otdXNlci1zZWxlY3Q6dGV4dDstbXMtdXNlci1zZWxlY3Q6dGV4dDt1c2VyLXNlbGVjdDp0ZXh0O30uc2tpbm5lZC10aWxlLm9wZW4+c2VjdGlvbnstd2Via2l0LWJveC1mbGV4OjE7LXdlYmtpdC1mbGV4LWdyb3c6MTstbXMtZmxleC1wb3NpdGl2ZToxO2ZsZXgtZ3JvdzoxO29wYWNpdHk6MTt9LnNraW5uZWQtdGlsZTpub3QoLm9wZW4pPnNlY3Rpb257b3BhY2l0eTowO31cIiwgXCJcIl0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L2F1dG9wcmVmaXhlci1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyIS4vc3JjL3AtdGlsZS1za2luLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAzMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZGVmaW5lKHtcblxuXHRidXR0b246IHtcblx0XHRMRUZUOiAgIDEsXG5cdFx0TUlERExFOiAyLFxuXHRcdFJJR0hUOiAgM1xuXHR9LFxuXG5cdGtleToge1xuXHRcdEJBQ0tTUEFDRTogICAgICAgOCxcblx0XHRUQUI6ICAgICAgICAgICAgIDksXG5cdFx0RU5URVI6ICAgICAgICAgIDEzLFxuXHRcdFNISUZUOiAgICAgICAgICAxNixcblx0XHRDVFJMOiAgICAgICAgICAgMTcsXG5cdFx0QUxUOiAgICAgICAgICAgIDE4LFxuXHRcdFBBVVNFOiAgICAgICAgICAxOSxcblx0XHRDQVBTX0xPQ0s6ICAgICAgMjAsXG5cdFx0RVNDQVBFOiAgICAgICAgIDI3LFxuXHRcdFNQQUNFOiAgICAgICAgICAzMixcblx0XHRQQUdFX1VQOiAgICAgICAgMzMsXG5cdFx0UEFHRV9ET1dOOiAgICAgIDM0LFxuXHRcdEVORDogICAgICAgICAgICAzNSxcblx0XHRIT01FOiAgICAgICAgICAgMzYsXG5cdFx0TEVGVF9BUlJPVzogICAgIDM3LFxuXHRcdFVQX0FSUk9XOiAgICAgICAzOCxcblx0XHRSSUdIVF9BUlJPVzogICAgMzksXG5cdFx0RE9XTl9BUlJPVzogICAgIDQwLFxuXHRcdElOU0VSVDogICAgICAgICA0NSxcblx0XHRERUxFVEU6ICAgICAgICAgNDYsXG5cdFx0MDogICAgICAgICAgICAgIDQ4LFxuXHRcdDE6ICAgICAgICAgICAgICA0OSxcblx0XHQyOiAgICAgICAgICAgICAgNTAsXG5cdFx0MzogICAgICAgICAgICAgIDUxLFxuXHRcdDQ6ICAgICAgICAgICAgICA1Mixcblx0XHQ1OiAgICAgICAgICAgICAgNTMsXG5cdFx0NjogICAgICAgICAgICAgIDU0LFxuXHRcdDc6ICAgICAgICAgICAgICA1NSxcblx0XHQ4OiAgICAgICAgICAgICAgNTYsXG5cdFx0OTogICAgICAgICAgICAgIDU3LFxuXHRcdEE6ICAgICAgICAgICAgICA2NSxcblx0XHRCOiAgICAgICAgICAgICAgNjYsXG5cdFx0QzogICAgICAgICAgICAgIDY3LFxuXHRcdEQ6ICAgICAgICAgICAgICA2OCxcblx0XHRFOiAgICAgICAgICAgICAgNjksXG5cdFx0RjogICAgICAgICAgICAgIDcwLFxuXHRcdEc6ICAgICAgICAgICAgICA3MSxcblx0XHRIOiAgICAgICAgICAgICAgNzIsXG5cdFx0STogICAgICAgICAgICAgIDczLFxuXHRcdEo6ICAgICAgICAgICAgICA3NCxcblx0XHRLOiAgICAgICAgICAgICAgNzUsXG5cdFx0TDogICAgICAgICAgICAgIDc2LFxuXHRcdE06ICAgICAgICAgICAgICA3Nyxcblx0XHROOiAgICAgICAgICAgICAgNzgsXG5cdFx0TzogICAgICAgICAgICAgIDc5LFxuXHRcdFA6ICAgICAgICAgICAgICA4MCxcblx0XHRROiAgICAgICAgICAgICAgODEsXG5cdFx0UjogICAgICAgICAgICAgIDgyLFxuXHRcdFM6ICAgICAgICAgICAgICA4Myxcblx0XHRUOiAgICAgICAgICAgICAgODQsXG5cdFx0VTogICAgICAgICAgICAgIDg1LFxuXHRcdFY6ICAgICAgICAgICAgICA4Nixcblx0XHRXOiAgICAgICAgICAgICAgODcsXG5cdFx0WDogICAgICAgICAgICAgIDg4LFxuXHRcdFk6ICAgICAgICAgICAgICA4OSxcblx0XHRaOiAgICAgICAgICAgICAgOTAsXG5cdFx0TEVGVF9NRVRBOiAgICAgIDkxLFxuXHRcdFJJR0hUX01FVEE6ICAgICA5Mixcblx0XHRTRUxFQ1Q6ICAgICAgICAgOTMsXG5cdFx0TlVNUEFEXzA6ICAgICAgIDk2LFxuXHRcdE5VTVBBRF8xOiAgICAgICA5Nyxcblx0XHROVU1QQURfMjogICAgICAgOTgsXG5cdFx0TlVNUEFEXzM6ICAgICAgIDk5LFxuXHRcdE5VTVBBRF80OiAgICAgIDEwMCxcblx0XHROVU1QQURfNTogICAgICAxMDEsXG5cdFx0TlVNUEFEXzY6ICAgICAgMTAyLFxuXHRcdE5VTVBBRF83OiAgICAgIDEwMyxcblx0XHROVU1QQURfODogICAgICAxMDQsXG5cdFx0TlVNUEFEXzk6ICAgICAgMTA1LFxuXHRcdE1VTFRJUExZOiAgICAgIDEwNixcblx0XHRBREQ6ICAgICAgICAgICAxMDcsXG5cdFx0U1VCVFJBQ1Q6ICAgICAgMTA5LFxuXHRcdERFQ0lNQUw6ICAgICAgIDExMCxcblx0XHRESVZJREU6ICAgICAgICAxMTEsXG5cdFx0RjE6ICAgICAgICAgICAgMTEyLFxuXHRcdEYyOiAgICAgICAgICAgIDExMyxcblx0XHRGMzogICAgICAgICAgICAxMTQsXG5cdFx0RjQ6ICAgICAgICAgICAgMTE1LFxuXHRcdEY1OiAgICAgICAgICAgIDExNixcblx0XHRGNjogICAgICAgICAgICAxMTcsXG5cdFx0Rjc6ICAgICAgICAgICAgMTE4LFxuXHRcdEY4OiAgICAgICAgICAgIDExOSxcblx0XHRGOTogICAgICAgICAgICAxMjAsXG5cdFx0RjEwOiAgICAgICAgICAgMTIxLFxuXHRcdEYxMTogICAgICAgICAgIDEyMixcblx0XHRGMTI6ICAgICAgICAgICAxMjMsXG5cdFx0TlVNX0xPQ0s6ICAgICAgMTQ0LFxuXHRcdFNDUk9MTF9MT0NLOiAgIDE0NSxcblx0XHRTRU1JQ09MT046ICAgICAxODYsXG5cdFx0RVFVQUxTOiAgICAgICAgMTg3LFxuXHRcdENPTU1BOiAgICAgICAgIDE4OCxcblx0XHREQVNIOiAgICAgICAgICAxODksXG5cdFx0UEVSSU9EOiAgICAgICAgMTkwLFxuXHRcdEZPUldBUkRfU0xBU0g6IDE5MSxcblx0XHRHUkFWRV9BQ0NFTlQ6ICAxOTIsXG5cdFx0T1BFTl9CUkFDS0VUOiAgMjE5LFxuXHRcdEJBQ0tfU0xBU0g6ICAgIDIyMCxcblx0XHRDTE9TRV9CUkFDS0VUOiAyMjEsXG5cdFx0U0lOR0xFX1FVT1RFOiAgMjIyXG5cdH1cblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlsL2NvZGVzLmpzXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9zcmMvcC10aWxlLXNraW4tZ3Jvdy13aGVuLW9wZW4uc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL3NyYy9wLXRpbGUtc2tpbi1ncm93LXdoZW4tb3Blbi5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanMhL2hvbWUvbWhlbHZlbnMvUHJvamVjdHMvYXBpbmF0b215LWNvcmUvbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS9ob21lL21oZWx2ZW5zL1Byb2plY3RzL2FwaW5hdG9teS1jb3JlL3NyYy9wLXRpbGUtc2tpbi1ncm93LXdoZW4tb3Blbi5zY3NzXCIpO1xuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9wLXRpbGUtc2tpbi1ncm93LXdoZW4tb3Blbi5zY3NzXG4gKiogbW9kdWxlIGlkID0gMzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIvaG9tZS9taGVsdmVucy9Qcm9qZWN0cy9hcGluYXRvbXktY29yZS9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9jc3NUb1N0cmluZy5qc1wiKSgpO1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRpbGVtYXAgLnRpbGU+c2VjdGlvbntvcGFjaXR5OjA7dmlzaWJpbGl0eTpoaWRkZW47fVwiLCBcIlwiXSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL34vYXV0b3ByZWZpeGVyLWxvYWRlciEuL34vc2Fzcy1sb2FkZXIhLi9zcmMvcC10aWxlLXNraW4tZ3Jvdy13aGVuLW9wZW4uc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDMzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKlxyXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG52YXIgc3R5bGVzSW5Eb20gPSB7fSxcclxuXHRtZW1vaXplID0gZnVuY3Rpb24oZm4pIHtcclxuXHRcdHZhciBtZW1vO1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0cmV0dXJuIG1lbW87XHJcblx0XHR9O1xyXG5cdH0sXHJcblx0aXNJRTkgPSBtZW1vaXplKGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIC9tc2llIDlcXGIvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XHJcblx0fSksXHJcblx0Z2V0SGVhZEVsZW1lbnQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcclxuXHR9KSxcclxuXHRzaW5nbGV0b25FbGVtZW50ID0gbnVsbCxcclxuXHRzaW5nbGV0b25Db3VudGVyID0gMDtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xyXG5cdGlmKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xyXG5cdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XHJcblx0fVxyXG5cclxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNJRTkoKTtcclxuXHJcblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0KTtcclxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcclxuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XHJcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcclxuXHRcdH1cclxuXHRcdGlmKG5ld0xpc3QpIHtcclxuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0KTtcclxuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdH1cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XHJcblx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKVxyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdGlmKGRvbVN0eWxlKSB7XHJcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIHBhcnRzID0gW107XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCkge1xyXG5cdHZhciBzdHlsZXMgPSBbXTtcclxuXHR2YXIgbmV3U3R5bGVzID0ge307XHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdHZhciBpZCA9IGl0ZW1bMF07XHJcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcclxuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcclxuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcclxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0fVxyXG5cdHJldHVybiBzdHlsZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCgpIHtcclxuXHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdHZhciBoZWFkID0gZ2V0SGVhZEVsZW1lbnQoKTtcclxuXHRzdHlsZUVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuXHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0cmV0dXJuIHN0eWxlRWxlbWVudDtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCwgdXBkYXRlLCByZW1vdmU7XHJcblxyXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xyXG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpO1xyXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xyXG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpO1xyXG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0dXBkYXRlKG9iaik7XHJcblxyXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcclxuXHRcdGlmKG5ld09iaikge1xyXG5cdFx0XHRpZihuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlcGxhY2VUZXh0KHNvdXJjZSwgaWQsIHJlcGxhY2VtZW50KSB7XHJcblx0dmFyIGJvdW5kYXJpZXMgPSBbXCIvKiogPj5cIiArIGlkICsgXCIgKiovXCIsIFwiLyoqIFwiICsgaWQgKyBcIjw8ICoqL1wiXTtcclxuXHR2YXIgc3RhcnQgPSBzb3VyY2UubGFzdEluZGV4T2YoYm91bmRhcmllc1swXSk7XHJcblx0dmFyIHdyYXBwZWRSZXBsYWNlbWVudCA9IHJlcGxhY2VtZW50XHJcblx0XHQ/IChib3VuZGFyaWVzWzBdICsgcmVwbGFjZW1lbnQgKyBib3VuZGFyaWVzWzFdKVxyXG5cdFx0OiBcIlwiO1xyXG5cdGlmIChzb3VyY2UubGFzdEluZGV4T2YoYm91bmRhcmllc1swXSkgPj0gMCkge1xyXG5cdFx0dmFyIGVuZCA9IHNvdXJjZS5sYXN0SW5kZXhPZihib3VuZGFyaWVzWzFdKSArIGJvdW5kYXJpZXNbMV0ubGVuZ3RoO1xyXG5cdFx0cmV0dXJuIHNvdXJjZS5zbGljZSgwLCBzdGFydCkgKyB3cmFwcGVkUmVwbGFjZW1lbnQgKyBzb3VyY2Uuc2xpY2UoZW5kKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIHNvdXJjZSArIHdyYXBwZWRSZXBsYWNlbWVudDtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcclxuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XHJcblxyXG5cdGlmKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCwgaW5kZXgsIGNzcyk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcclxuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXM7XHJcblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XHJcblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlRWxlbWVudCwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xyXG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cclxuXHRpZihzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkgKyBcIiAqL1wiO1xyXG5cdFx0XHRjc3MgPSBcIkBpbXBvcnQgdXJsKFxcXCJkYXRhOnRleHQvY3NzO2Jhc2U2NCxcIiArIGJ0b2EoY3NzKSArIFwiXFxcIilcIjtcclxuXHRcdH0gY2F0Y2goZSkge31cclxuXHR9XHJcblxyXG5cdGlmKG1lZGlhKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXHJcblx0fVxyXG5cclxuXHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHR9IGVsc2Uge1xyXG5cdFx0d2hpbGUoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdH1cclxuXHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuXHR9XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKiEgVmVsb2NpdHlKUy5vcmcgKDEuMi4yKS4gKEMpIDIwMTQgSnVsaWFuIFNoYXBpcm8uIE1JVCBAbGljZW5zZTogZW4ud2lraXBlZGlhLm9yZy93aWtpL01JVF9MaWNlbnNlICovXG4vKiEgVmVsb2NpdHlKUy5vcmcgalF1ZXJ5IFNoaW0gKDEuMC4xKS4gKEMpIDIwMTQgVGhlIGpRdWVyeSBGb3VuZGF0aW9uLiBNSVQgQGxpY2Vuc2U6IGVuLndpa2lwZWRpYS5vcmcvd2lraS9NSVRfTGljZW5zZS4gKi9cbiFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3ZhciB0PWUubGVuZ3RoLHI9JC50eXBlKGUpO3JldHVyblwiZnVuY3Rpb25cIj09PXJ8fCQuaXNXaW5kb3coZSk/ITE6MT09PWUubm9kZVR5cGUmJnQ/ITA6XCJhcnJheVwiPT09cnx8MD09PXR8fFwibnVtYmVyXCI9PXR5cGVvZiB0JiZ0PjAmJnQtMSBpbiBlfWlmKCFlLmpRdWVyeSl7dmFyICQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3ICQuZm4uaW5pdChlLHQpfTskLmlzV2luZG93PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lJiZlPT1lLndpbmRvd30sJC50eXBlPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP2UrXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZT9hW28uY2FsbChlKV18fFwib2JqZWN0XCI6dHlwZW9mIGV9LCQuaXNBcnJheT1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cImFycmF5XCI9PT0kLnR5cGUoZSl9LCQuaXNQbGFpbk9iamVjdD1mdW5jdGlvbihlKXt2YXIgdDtpZighZXx8XCJvYmplY3RcIiE9PSQudHlwZShlKXx8ZS5ub2RlVHlwZXx8JC5pc1dpbmRvdyhlKSlyZXR1cm4hMTt0cnl7aWYoZS5jb25zdHJ1Y3RvciYmIW4uY2FsbChlLFwiY29uc3RydWN0b3JcIikmJiFuLmNhbGwoZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXCJpc1Byb3RvdHlwZU9mXCIpKXJldHVybiExfWNhdGNoKHIpe3JldHVybiExfWZvcih0IGluIGUpO3JldHVybiB2b2lkIDA9PT10fHxuLmNhbGwoZSx0KX0sJC5lYWNoPWZ1bmN0aW9uKGUscixhKXt2YXIgbixvPTAsaT1lLmxlbmd0aCxzPXQoZSk7aWYoYSl7aWYocylmb3IoO2k+byYmKG49ci5hcHBseShlW29dLGEpLG4hPT0hMSk7bysrKTtlbHNlIGZvcihvIGluIGUpaWYobj1yLmFwcGx5KGVbb10sYSksbj09PSExKWJyZWFrfWVsc2UgaWYocylmb3IoO2k+byYmKG49ci5jYWxsKGVbb10sbyxlW29dKSxuIT09ITEpO28rKyk7ZWxzZSBmb3IobyBpbiBlKWlmKG49ci5jYWxsKGVbb10sbyxlW29dKSxuPT09ITEpYnJlYWs7cmV0dXJuIGV9LCQuZGF0YT1mdW5jdGlvbihlLHQsYSl7aWYodm9pZCAwPT09YSl7dmFyIG49ZVskLmV4cGFuZG9dLG89biYmcltuXTtpZih2b2lkIDA9PT10KXJldHVybiBvO2lmKG8mJnQgaW4gbylyZXR1cm4gb1t0XX1lbHNlIGlmKHZvaWQgMCE9PXQpe3ZhciBuPWVbJC5leHBhbmRvXXx8KGVbJC5leHBhbmRvXT0rKyQudXVpZCk7cmV0dXJuIHJbbl09cltuXXx8e30scltuXVt0XT1hLGF9fSwkLnJlbW92ZURhdGE9ZnVuY3Rpb24oZSx0KXt2YXIgYT1lWyQuZXhwYW5kb10sbj1hJiZyW2FdO24mJiQuZWFjaCh0LGZ1bmN0aW9uKGUsdCl7ZGVsZXRlIG5bdF19KX0sJC5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgZSx0LHIsYSxuLG8saT1hcmd1bWVudHNbMF18fHt9LHM9MSxsPWFyZ3VtZW50cy5sZW5ndGgsdT0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiBpJiYodT1pLGk9YXJndW1lbnRzW3NdfHx7fSxzKyspLFwib2JqZWN0XCIhPXR5cGVvZiBpJiZcImZ1bmN0aW9uXCIhPT0kLnR5cGUoaSkmJihpPXt9KSxzPT09bCYmKGk9dGhpcyxzLS0pO2w+cztzKyspaWYobnVsbCE9KG49YXJndW1lbnRzW3NdKSlmb3IoYSBpbiBuKWU9aVthXSxyPW5bYV0saSE9PXImJih1JiZyJiYoJC5pc1BsYWluT2JqZWN0KHIpfHwodD0kLmlzQXJyYXkocikpKT8odD8odD0hMSxvPWUmJiQuaXNBcnJheShlKT9lOltdKTpvPWUmJiQuaXNQbGFpbk9iamVjdChlKT9lOnt9LGlbYV09JC5leHRlbmQodSxvLHIpKTp2b2lkIDAhPT1yJiYoaVthXT1yKSk7cmV0dXJuIGl9LCQucXVldWU9ZnVuY3Rpb24oZSxyLGEpe2Z1bmN0aW9uIG4oZSxyKXt2YXIgYT1yfHxbXTtyZXR1cm4gbnVsbCE9ZSYmKHQoT2JqZWN0KGUpKT8hZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9K3QubGVuZ3RoLGE9MCxuPWUubGVuZ3RoO3I+YTspZVtuKytdPXRbYSsrXTtpZihyIT09cilmb3IoO3ZvaWQgMCE9PXRbYV07KWVbbisrXT10W2ErK107cmV0dXJuIGUubGVuZ3RoPW4sZX0oYSxcInN0cmluZ1wiPT10eXBlb2YgZT9bZV06ZSk6W10ucHVzaC5jYWxsKGEsZSkpLGF9aWYoZSl7cj0ocnx8XCJmeFwiKStcInF1ZXVlXCI7dmFyIG89JC5kYXRhKGUscik7cmV0dXJuIGE/KCFvfHwkLmlzQXJyYXkoYSk/bz0kLmRhdGEoZSxyLG4oYSkpOm8ucHVzaChhKSxvKTpvfHxbXX19LCQuZGVxdWV1ZT1mdW5jdGlvbihlLHQpeyQuZWFjaChlLm5vZGVUeXBlP1tlXTplLGZ1bmN0aW9uKGUscil7dD10fHxcImZ4XCI7dmFyIGE9JC5xdWV1ZShyLHQpLG49YS5zaGlmdCgpO1wiaW5wcm9ncmVzc1wiPT09biYmKG49YS5zaGlmdCgpKSxuJiYoXCJmeFwiPT09dCYmYS51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKSxuLmNhbGwocixmdW5jdGlvbigpeyQuZGVxdWV1ZShyLHQpfSkpfSl9LCQuZm49JC5wcm90b3R5cGU9e2luaXQ6ZnVuY3Rpb24oZSl7aWYoZS5ub2RlVHlwZSlyZXR1cm4gdGhpc1swXT1lLHRoaXM7dGhyb3cgbmV3IEVycm9yKFwiTm90IGEgRE9NIG5vZGUuXCIpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdD90aGlzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOnt0b3A6MCxsZWZ0OjB9O3JldHVybnt0b3A6dC50b3ArKGUucGFnZVlPZmZzZXR8fGRvY3VtZW50LnNjcm9sbFRvcHx8MCktKGRvY3VtZW50LmNsaWVudFRvcHx8MCksbGVmdDp0LmxlZnQrKGUucGFnZVhPZmZzZXR8fGRvY3VtZW50LnNjcm9sbExlZnR8fDApLShkb2N1bWVudC5jbGllbnRMZWZ0fHwwKX19LHBvc2l0aW9uOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe2Zvcih2YXIgZT10aGlzLm9mZnNldFBhcmVudHx8ZG9jdW1lbnQ7ZSYmXCJodG1sXCI9PT0hZS5ub2RlVHlwZS50b0xvd2VyQ2FzZSYmXCJzdGF0aWNcIj09PWUuc3R5bGUucG9zaXRpb247KWU9ZS5vZmZzZXRQYXJlbnQ7cmV0dXJuIGV8fGRvY3VtZW50fXZhciB0PXRoaXNbMF0sZT1lLmFwcGx5KHQpLHI9dGhpcy5vZmZzZXQoKSxhPS9eKD86Ym9keXxodG1sKSQvaS50ZXN0KGUubm9kZU5hbWUpP3t0b3A6MCxsZWZ0OjB9OiQoZSkub2Zmc2V0KCk7cmV0dXJuIHIudG9wLT1wYXJzZUZsb2F0KHQuc3R5bGUubWFyZ2luVG9wKXx8MCxyLmxlZnQtPXBhcnNlRmxvYXQodC5zdHlsZS5tYXJnaW5MZWZ0KXx8MCxlLnN0eWxlJiYoYS50b3ArPXBhcnNlRmxvYXQoZS5zdHlsZS5ib3JkZXJUb3BXaWR0aCl8fDAsYS5sZWZ0Kz1wYXJzZUZsb2F0KGUuc3R5bGUuYm9yZGVyTGVmdFdpZHRoKXx8MCkse3RvcDpyLnRvcC1hLnRvcCxsZWZ0OnIubGVmdC1hLmxlZnR9fX07dmFyIHI9e307JC5leHBhbmRvPVwidmVsb2NpdHlcIisobmV3IERhdGUpLmdldFRpbWUoKSwkLnV1aWQ9MDtmb3IodmFyIGE9e30sbj1hLmhhc093blByb3BlcnR5LG89YS50b1N0cmluZyxpPVwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSxzPTA7czxpLmxlbmd0aDtzKyspYVtcIltvYmplY3QgXCIraVtzXStcIl1cIl09aVtzXS50b0xvd2VyQ2FzZSgpOyQuZm4uaW5pdC5wcm90b3R5cGU9JC5mbixlLlZlbG9jaXR5PXtVdGlsaXRpZXM6JH19fSh3aW5kb3cpLGZ1bmN0aW9uKGUpe1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTplKCl9KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxyLGEpe2Z1bmN0aW9uIG4oZSl7Zm9yKHZhciB0PS0xLHI9ZT9lLmxlbmd0aDowLGE9W107Kyt0PHI7KXt2YXIgbj1lW3RdO24mJmEucHVzaChuKX1yZXR1cm4gYX1mdW5jdGlvbiBvKGUpe3JldHVybiBnLmlzV3JhcHBlZChlKT9lPVtdLnNsaWNlLmNhbGwoZSk6Zy5pc05vZGUoZSkmJihlPVtlXSksZX1mdW5jdGlvbiBpKGUpe3ZhciB0PSQuZGF0YShlLFwidmVsb2NpdHlcIik7cmV0dXJuIG51bGw9PT10P2E6dH1mdW5jdGlvbiBzKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5yb3VuZCh0KmUpKigxL2UpfX1mdW5jdGlvbiBsKGUscixhLG4pe2Z1bmN0aW9uIG8oZSx0KXtyZXR1cm4gMS0zKnQrMyplfWZ1bmN0aW9uIGkoZSx0KXtyZXR1cm4gMyp0LTYqZX1mdW5jdGlvbiBzKGUpe3JldHVybiAzKmV9ZnVuY3Rpb24gbChlLHQscil7cmV0dXJuKChvKHQscikqZStpKHQscikpKmUrcyh0KSkqZX1mdW5jdGlvbiB1KGUsdCxyKXtyZXR1cm4gMypvKHQscikqZSplKzIqaSh0LHIpKmUrcyh0KX1mdW5jdGlvbiBjKHQscil7Zm9yKHZhciBuPTA7bT5uOysrbil7dmFyIG89dShyLGUsYSk7aWYoMD09PW8pcmV0dXJuIHI7dmFyIGk9bChyLGUsYSktdDtyLT1pL299cmV0dXJuIHJ9ZnVuY3Rpb24gcCgpe2Zvcih2YXIgdD0wO2I+dDsrK3Qpd1t0XT1sKHQqeCxlLGEpfWZ1bmN0aW9uIGYodCxyLG4pe3ZhciBvLGkscz0wO2RvIGk9cisobi1yKS8yLG89bChpLGUsYSktdCxvPjA/bj1pOnI9aTt3aGlsZShNYXRoLmFicyhvKT5oJiYrK3M8dik7cmV0dXJuIGl9ZnVuY3Rpb24gZCh0KXtmb3IodmFyIHI9MCxuPTEsbz1iLTE7biE9byYmd1tuXTw9dDsrK24pcis9eDstLW47dmFyIGk9KHQtd1tuXSkvKHdbbisxXS13W25dKSxzPXIraSp4LGw9dShzLGUsYSk7cmV0dXJuIGw+PXk/Yyh0LHMpOjA9PWw/czpmKHQscixyK3gpfWZ1bmN0aW9uIGcoKXtWPSEwLChlIT1yfHxhIT1uKSYmcCgpfXZhciBtPTQseT0uMDAxLGg9MWUtNyx2PTEwLGI9MTEseD0xLyhiLTEpLFM9XCJGbG9hdDMyQXJyYXlcImluIHQ7aWYoNCE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBQPTA7ND5QOysrUClpZihcIm51bWJlclwiIT10eXBlb2YgYXJndW1lbnRzW1BdfHxpc05hTihhcmd1bWVudHNbUF0pfHwhaXNGaW5pdGUoYXJndW1lbnRzW1BdKSlyZXR1cm4hMTtlPU1hdGgubWluKGUsMSksYT1NYXRoLm1pbihhLDEpLGU9TWF0aC5tYXgoZSwwKSxhPU1hdGgubWF4KGEsMCk7dmFyIHc9Uz9uZXcgRmxvYXQzMkFycmF5KGIpOm5ldyBBcnJheShiKSxWPSExLEM9ZnVuY3Rpb24odCl7cmV0dXJuIFZ8fGcoKSxlPT09ciYmYT09PW4/dDowPT09dD8wOjE9PT10PzE6bChkKHQpLHIsbil9O0MuZ2V0Q29udHJvbFBvaW50cz1mdW5jdGlvbigpe3JldHVyblt7eDplLHk6cn0se3g6YSx5Om59XX07dmFyIFQ9XCJnZW5lcmF0ZUJlemllcihcIitbZSxyLGEsbl0rXCIpXCI7cmV0dXJuIEMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gVH0sQ31mdW5jdGlvbiB1KGUsdCl7dmFyIHI9ZTtyZXR1cm4gZy5pc1N0cmluZyhlKT92LkVhc2luZ3NbZV18fChyPSExKTpyPWcuaXNBcnJheShlKSYmMT09PWUubGVuZ3RoP3MuYXBwbHkobnVsbCxlKTpnLmlzQXJyYXkoZSkmJjI9PT1lLmxlbmd0aD9iLmFwcGx5KG51bGwsZS5jb25jYXQoW3RdKSk6Zy5pc0FycmF5KGUpJiY0PT09ZS5sZW5ndGg/bC5hcHBseShudWxsLGUpOiExLHI9PT0hMSYmKHI9di5FYXNpbmdzW3YuZGVmYXVsdHMuZWFzaW5nXT92LmRlZmF1bHRzLmVhc2luZzpoKSxyfWZ1bmN0aW9uIGMoZSl7aWYoZSl7dmFyIHQ9KG5ldyBEYXRlKS5nZXRUaW1lKCkscj12LlN0YXRlLmNhbGxzLmxlbmd0aDtyPjFlNCYmKHYuU3RhdGUuY2FsbHM9bih2LlN0YXRlLmNhbGxzKSk7Zm9yKHZhciBvPTA7cj5vO28rKylpZih2LlN0YXRlLmNhbGxzW29dKXt2YXIgcz12LlN0YXRlLmNhbGxzW29dLGw9c1swXSx1PXNbMl0sZj1zWzNdLGQ9ISFmLG09bnVsbDtmfHwoZj12LlN0YXRlLmNhbGxzW29dWzNdPXQtMTYpO2Zvcih2YXIgeT1NYXRoLm1pbigodC1mKS91LmR1cmF0aW9uLDEpLGg9MCxiPWwubGVuZ3RoO2I+aDtoKyspe3ZhciBTPWxbaF0sdz1TLmVsZW1lbnQ7aWYoaSh3KSl7dmFyIFY9ITE7aWYodS5kaXNwbGF5IT09YSYmbnVsbCE9PXUuZGlzcGxheSYmXCJub25lXCIhPT11LmRpc3BsYXkpe2lmKFwiZmxleFwiPT09dS5kaXNwbGF5KXt2YXIgQz1bXCItd2Via2l0LWJveFwiLFwiLW1vei1ib3hcIixcIi1tcy1mbGV4Ym94XCIsXCItd2Via2l0LWZsZXhcIl07JC5lYWNoKEMsZnVuY3Rpb24oZSx0KXt4LnNldFByb3BlcnR5VmFsdWUodyxcImRpc3BsYXlcIix0KX0pfXguc2V0UHJvcGVydHlWYWx1ZSh3LFwiZGlzcGxheVwiLHUuZGlzcGxheSl9dS52aXNpYmlsaXR5IT09YSYmXCJoaWRkZW5cIiE9PXUudmlzaWJpbGl0eSYmeC5zZXRQcm9wZXJ0eVZhbHVlKHcsXCJ2aXNpYmlsaXR5XCIsdS52aXNpYmlsaXR5KTtmb3IodmFyIFQgaW4gUylpZihcImVsZW1lbnRcIiE9PVQpe3ZhciBrPVNbVF0sQSxGPWcuaXNTdHJpbmcoay5lYXNpbmcpP3YuRWFzaW5nc1trLmVhc2luZ106ay5lYXNpbmc7aWYoMT09PXkpQT1rLmVuZFZhbHVlO2Vsc2V7dmFyIEU9ay5lbmRWYWx1ZS1rLnN0YXJ0VmFsdWU7aWYoQT1rLnN0YXJ0VmFsdWUrRSpGKHksdSxFKSwhZCYmQT09PWsuY3VycmVudFZhbHVlKWNvbnRpbnVlfWlmKGsuY3VycmVudFZhbHVlPUEsXCJ0d2VlblwiPT09VCltPUE7ZWxzZXtpZih4Lkhvb2tzLnJlZ2lzdGVyZWRbVF0pe3ZhciBqPXguSG9va3MuZ2V0Um9vdChUKSxIPWkodykucm9vdFByb3BlcnR5VmFsdWVDYWNoZVtqXTtIJiYoay5yb290UHJvcGVydHlWYWx1ZT1IKX12YXIgTj14LnNldFByb3BlcnR5VmFsdWUodyxULGsuY3VycmVudFZhbHVlKygwPT09cGFyc2VGbG9hdChBKT9cIlwiOmsudW5pdFR5cGUpLGsucm9vdFByb3BlcnR5VmFsdWUsay5zY3JvbGxEYXRhKTt4Lkhvb2tzLnJlZ2lzdGVyZWRbVF0mJihpKHcpLnJvb3RQcm9wZXJ0eVZhbHVlQ2FjaGVbal09eC5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW2pdP3guTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtqXShcImV4dHJhY3RcIixudWxsLE5bMV0pOk5bMV0pLFwidHJhbnNmb3JtXCI9PT1OWzBdJiYoVj0hMCl9fXUubW9iaWxlSEEmJmkodykudHJhbnNmb3JtQ2FjaGUudHJhbnNsYXRlM2Q9PT1hJiYoaSh3KS50cmFuc2Zvcm1DYWNoZS50cmFuc2xhdGUzZD1cIigwcHgsIDBweCwgMHB4KVwiLFY9ITApLFYmJnguZmx1c2hUcmFuc2Zvcm1DYWNoZSh3KX19dS5kaXNwbGF5IT09YSYmXCJub25lXCIhPT11LmRpc3BsYXkmJih2LlN0YXRlLmNhbGxzW29dWzJdLmRpc3BsYXk9ITEpLHUudmlzaWJpbGl0eSE9PWEmJlwiaGlkZGVuXCIhPT11LnZpc2liaWxpdHkmJih2LlN0YXRlLmNhbGxzW29dWzJdLnZpc2liaWxpdHk9ITEpLHUucHJvZ3Jlc3MmJnUucHJvZ3Jlc3MuY2FsbChzWzFdLHNbMV0seSxNYXRoLm1heCgwLGYrdS5kdXJhdGlvbi10KSxmLG0pLDE9PT15JiZwKG8pfX12LlN0YXRlLmlzVGlja2luZyYmUChjKX1mdW5jdGlvbiBwKGUsdCl7aWYoIXYuU3RhdGUuY2FsbHNbZV0pcmV0dXJuITE7Zm9yKHZhciByPXYuU3RhdGUuY2FsbHNbZV1bMF0sbj12LlN0YXRlLmNhbGxzW2VdWzFdLG89di5TdGF0ZS5jYWxsc1tlXVsyXSxzPXYuU3RhdGUuY2FsbHNbZV1bNF0sbD0hMSx1PTAsYz1yLmxlbmd0aDtjPnU7dSsrKXt2YXIgcD1yW3VdLmVsZW1lbnQ7aWYodHx8by5sb29wfHwoXCJub25lXCI9PT1vLmRpc3BsYXkmJnguc2V0UHJvcGVydHlWYWx1ZShwLFwiZGlzcGxheVwiLG8uZGlzcGxheSksXCJoaWRkZW5cIj09PW8udmlzaWJpbGl0eSYmeC5zZXRQcm9wZXJ0eVZhbHVlKHAsXCJ2aXNpYmlsaXR5XCIsby52aXNpYmlsaXR5KSksby5sb29wIT09ITAmJigkLnF1ZXVlKHApWzFdPT09YXx8IS9cXC52ZWxvY2l0eVF1ZXVlRW50cnlGbGFnL2kudGVzdCgkLnF1ZXVlKHApWzFdKSkmJmkocCkpe2kocCkuaXNBbmltYXRpbmc9ITEsaShwKS5yb290UHJvcGVydHlWYWx1ZUNhY2hlPXt9O3ZhciBmPSExOyQuZWFjaCh4Lkxpc3RzLnRyYW5zZm9ybXMzRCxmdW5jdGlvbihlLHQpe3ZhciByPS9ec2NhbGUvLnRlc3QodCk/MTowLG49aShwKS50cmFuc2Zvcm1DYWNoZVt0XTtpKHApLnRyYW5zZm9ybUNhY2hlW3RdIT09YSYmbmV3IFJlZ0V4cChcIl5cXFxcKFwiK3IrXCJbXi5dXCIpLnRlc3QobikmJihmPSEwLGRlbGV0ZSBpKHApLnRyYW5zZm9ybUNhY2hlW3RdKX0pLG8ubW9iaWxlSEEmJihmPSEwLGRlbGV0ZSBpKHApLnRyYW5zZm9ybUNhY2hlLnRyYW5zbGF0ZTNkKSxmJiZ4LmZsdXNoVHJhbnNmb3JtQ2FjaGUocCkseC5WYWx1ZXMucmVtb3ZlQ2xhc3MocCxcInZlbG9jaXR5LWFuaW1hdGluZ1wiKX1pZighdCYmby5jb21wbGV0ZSYmIW8ubG9vcCYmdT09PWMtMSl0cnl7by5jb21wbGV0ZS5jYWxsKG4sbil9Y2F0Y2goZCl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGR9LDEpfXMmJm8ubG9vcCE9PSEwJiZzKG4pLGkocCkmJm8ubG9vcD09PSEwJiYhdCYmKCQuZWFjaChpKHApLnR3ZWVuc0NvbnRhaW5lcixmdW5jdGlvbihlLHQpey9ecm90YXRlLy50ZXN0KGUpJiYzNjA9PT1wYXJzZUZsb2F0KHQuZW5kVmFsdWUpJiYodC5lbmRWYWx1ZT0wLHQuc3RhcnRWYWx1ZT0zNjApLC9eYmFja2dyb3VuZFBvc2l0aW9uLy50ZXN0KGUpJiYxMDA9PT1wYXJzZUZsb2F0KHQuZW5kVmFsdWUpJiZcIiVcIj09PXQudW5pdFR5cGUmJih0LmVuZFZhbHVlPTAsdC5zdGFydFZhbHVlPTEwMCl9KSx2KHAsXCJyZXZlcnNlXCIse2xvb3A6ITAsZGVsYXk6by5kZWxheX0pKSxvLnF1ZXVlIT09ITEmJiQuZGVxdWV1ZShwLG8ucXVldWUpfXYuU3RhdGUuY2FsbHNbZV09ITE7Zm9yKHZhciBnPTAsbT12LlN0YXRlLmNhbGxzLmxlbmd0aDttPmc7ZysrKWlmKHYuU3RhdGUuY2FsbHNbZ10hPT0hMSl7bD0hMDticmVha31sPT09ITEmJih2LlN0YXRlLmlzVGlja2luZz0hMSxkZWxldGUgdi5TdGF0ZS5jYWxscyx2LlN0YXRlLmNhbGxzPVtdKX12YXIgZj1mdW5jdGlvbigpe2lmKHIuZG9jdW1lbnRNb2RlKXJldHVybiByLmRvY3VtZW50TW9kZTtmb3IodmFyIGU9NztlPjQ7ZS0tKXt2YXIgdD1yLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWYodC5pbm5lckhUTUw9XCI8IS0tW2lmIElFIFwiK2UrXCJdPjxzcGFuPjwvc3Bhbj48IVtlbmRpZl0tLT5cIix0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3BhblwiKS5sZW5ndGgpcmV0dXJuIHQ9bnVsbCxlfXJldHVybiBhfSgpLGQ9ZnVuY3Rpb24oKXt2YXIgZT0wO3JldHVybiB0LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKHQpe3ZhciByPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGE7cmV0dXJuIGE9TWF0aC5tYXgoMCwxNi0oci1lKSksZT1yK2Esc2V0VGltZW91dChmdW5jdGlvbigpe3QocithKX0sYSl9fSgpLGc9e2lzU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfSxpc0FycmF5OkFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0saXNGdW5jdGlvbjpmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LGlzTm9kZTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5ub2RlVHlwZX0saXNOb2RlTGlzdDpmdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmL15cXFtvYmplY3QgKEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fE9iamVjdClcXF0kLy50ZXN0KE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSkmJmUubGVuZ3RoIT09YSYmKDA9PT1lLmxlbmd0aHx8XCJvYmplY3RcIj09dHlwZW9mIGVbMF0mJmVbMF0ubm9kZVR5cGU+MCl9LGlzV3JhcHBlZDpmdW5jdGlvbihlKXtyZXR1cm4gZSYmKGUuanF1ZXJ5fHx0LlplcHRvJiZ0LlplcHRvLnplcHRvLmlzWihlKSl9LGlzU1ZHOmZ1bmN0aW9uKGUpe3JldHVybiB0LlNWR0VsZW1lbnQmJmUgaW5zdGFuY2VvZiB0LlNWR0VsZW1lbnR9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpcmV0dXJuITE7cmV0dXJuITB9fSwkLG09ITE7aWYoZS5mbiYmZS5mbi5qcXVlcnk/KCQ9ZSxtPSEwKTokPXQuVmVsb2NpdHkuVXRpbGl0aWVzLDg+PWYmJiFtKXRocm93IG5ldyBFcnJvcihcIlZlbG9jaXR5OiBJRTggYW5kIGJlbG93IHJlcXVpcmUgalF1ZXJ5IHRvIGJlIGxvYWRlZCBiZWZvcmUgVmVsb2NpdHkuXCIpO2lmKDc+PWYpcmV0dXJuIHZvaWQoalF1ZXJ5LmZuLnZlbG9jaXR5PWpRdWVyeS5mbi5hbmltYXRlKTt2YXIgeT00MDAsaD1cInN3aW5nXCIsdj17U3RhdGU6e2lzTW9iaWxlOi9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxpc0FuZHJvaWQ6L0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLGlzR2luZ2VyYnJlYWQ6L0FuZHJvaWQgMlxcLjNcXC5bMy03XS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksaXNDaHJvbWU6dC5jaHJvbWUsaXNGaXJlZm94Oi9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxwcmVmaXhFbGVtZW50OnIuY3JlYXRlRWxlbWVudChcImRpdlwiKSxwcmVmaXhNYXRjaGVzOnt9LHNjcm9sbEFuY2hvcjpudWxsLHNjcm9sbFByb3BlcnR5TGVmdDpudWxsLHNjcm9sbFByb3BlcnR5VG9wOm51bGwsaXNUaWNraW5nOiExLGNhbGxzOltdfSxDU1M6e30sVXRpbGl0aWVzOiQsUmVkaXJlY3RzOnt9LEVhc2luZ3M6e30sUHJvbWlzZTp0LlByb21pc2UsZGVmYXVsdHM6e3F1ZXVlOlwiXCIsZHVyYXRpb246eSxlYXNpbmc6aCxiZWdpbjphLGNvbXBsZXRlOmEscHJvZ3Jlc3M6YSxkaXNwbGF5OmEsdmlzaWJpbGl0eTphLGxvb3A6ITEsZGVsYXk6ITEsbW9iaWxlSEE6ITAsX2NhY2hlVmFsdWVzOiEwfSxpbml0OmZ1bmN0aW9uKGUpeyQuZGF0YShlLFwidmVsb2NpdHlcIix7aXNTVkc6Zy5pc1NWRyhlKSxpc0FuaW1hdGluZzohMSxjb21wdXRlZFN0eWxlOm51bGwsdHdlZW5zQ29udGFpbmVyOm51bGwscm9vdFByb3BlcnR5VmFsdWVDYWNoZTp7fSx0cmFuc2Zvcm1DYWNoZTp7fX0pfSxob29rOm51bGwsbW9jazohMSx2ZXJzaW9uOnttYWpvcjoxLG1pbm9yOjIscGF0Y2g6Mn0sZGVidWc6ITF9O3QucGFnZVlPZmZzZXQhPT1hPyh2LlN0YXRlLnNjcm9sbEFuY2hvcj10LHYuU3RhdGUuc2Nyb2xsUHJvcGVydHlMZWZ0PVwicGFnZVhPZmZzZXRcIix2LlN0YXRlLnNjcm9sbFByb3BlcnR5VG9wPVwicGFnZVlPZmZzZXRcIik6KHYuU3RhdGUuc2Nyb2xsQW5jaG9yPXIuZG9jdW1lbnRFbGVtZW50fHxyLmJvZHkucGFyZW50Tm9kZXx8ci5ib2R5LHYuU3RhdGUuc2Nyb2xsUHJvcGVydHlMZWZ0PVwic2Nyb2xsTGVmdFwiLHYuU3RhdGUuc2Nyb2xsUHJvcGVydHlUb3A9XCJzY3JvbGxUb3BcIik7dmFyIGI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVybi1lLnRlbnNpb24qZS54LWUuZnJpY3Rpb24qZS52fWZ1bmN0aW9uIHQodCxyLGEpe3ZhciBuPXt4OnQueCthLmR4KnIsdjp0LnYrYS5kdipyLHRlbnNpb246dC50ZW5zaW9uLGZyaWN0aW9uOnQuZnJpY3Rpb259O3JldHVybntkeDpuLnYsZHY6ZShuKX19ZnVuY3Rpb24gcihyLGEpe3ZhciBuPXtkeDpyLnYsZHY6ZShyKX0sbz10KHIsLjUqYSxuKSxpPXQociwuNSphLG8pLHM9dChyLGEsaSksbD0xLzYqKG4uZHgrMiooby5keCtpLmR4KStzLmR4KSx1PTEvNioobi5kdisyKihvLmR2K2kuZHYpK3MuZHYpO3JldHVybiByLng9ci54K2wqYSxyLnY9ci52K3UqYSxyfXJldHVybiBmdW5jdGlvbiBhKGUsdCxuKXt2YXIgbz17eDotMSx2OjAsdGVuc2lvbjpudWxsLGZyaWN0aW9uOm51bGx9LGk9WzBdLHM9MCxsPTFlLTQsdT0uMDE2LGMscCxmO2ZvcihlPXBhcnNlRmxvYXQoZSl8fDUwMCx0PXBhcnNlRmxvYXQodCl8fDIwLG49bnx8bnVsbCxvLnRlbnNpb249ZSxvLmZyaWN0aW9uPXQsYz1udWxsIT09bixjPyhzPWEoZSx0KSxwPXMvbip1KTpwPXU7OylpZihmPXIoZnx8byxwKSxpLnB1c2goMStmLngpLHMrPTE2LCEoTWF0aC5hYnMoZi54KT5sJiZNYXRoLmFicyhmLnYpPmwpKWJyZWFrO3JldHVybiBjP2Z1bmN0aW9uKGUpe3JldHVybiBpW2UqKGkubGVuZ3RoLTEpfDBdfTpzfX0oKTt2LkVhc2luZ3M9e2xpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sc3dpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuLjUtTWF0aC5jb3MoZSpNYXRoLlBJKS8yfSxzcHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIDEtTWF0aC5jb3MoNC41KmUqTWF0aC5QSSkqTWF0aC5leHAoNiotZSl9fSwkLmVhY2goW1tcImVhc2VcIixbLjI1LC4xLC4yNSwxXV0sW1wiZWFzZS1pblwiLFsuNDIsMCwxLDFdXSxbXCJlYXNlLW91dFwiLFswLDAsLjU4LDFdXSxbXCJlYXNlLWluLW91dFwiLFsuNDIsMCwuNTgsMV1dLFtcImVhc2VJblNpbmVcIixbLjQ3LDAsLjc0NSwuNzE1XV0sW1wiZWFzZU91dFNpbmVcIixbLjM5LC41NzUsLjU2NSwxXV0sW1wiZWFzZUluT3V0U2luZVwiLFsuNDQ1LC4wNSwuNTUsLjk1XV0sW1wiZWFzZUluUXVhZFwiLFsuNTUsLjA4NSwuNjgsLjUzXV0sW1wiZWFzZU91dFF1YWRcIixbLjI1LC40NiwuNDUsLjk0XV0sW1wiZWFzZUluT3V0UXVhZFwiLFsuNDU1LC4wMywuNTE1LC45NTVdXSxbXCJlYXNlSW5DdWJpY1wiLFsuNTUsLjA1NSwuNjc1LC4xOV1dLFtcImVhc2VPdXRDdWJpY1wiLFsuMjE1LC42MSwuMzU1LDFdXSxbXCJlYXNlSW5PdXRDdWJpY1wiLFsuNjQ1LC4wNDUsLjM1NSwxXV0sW1wiZWFzZUluUXVhcnRcIixbLjg5NSwuMDMsLjY4NSwuMjJdXSxbXCJlYXNlT3V0UXVhcnRcIixbLjE2NSwuODQsLjQ0LDFdXSxbXCJlYXNlSW5PdXRRdWFydFwiLFsuNzcsMCwuMTc1LDFdXSxbXCJlYXNlSW5RdWludFwiLFsuNzU1LC4wNSwuODU1LC4wNl1dLFtcImVhc2VPdXRRdWludFwiLFsuMjMsMSwuMzIsMV1dLFtcImVhc2VJbk91dFF1aW50XCIsWy44NiwwLC4wNywxXV0sW1wiZWFzZUluRXhwb1wiLFsuOTUsLjA1LC43OTUsLjAzNV1dLFtcImVhc2VPdXRFeHBvXCIsWy4xOSwxLC4yMiwxXV0sW1wiZWFzZUluT3V0RXhwb1wiLFsxLDAsMCwxXV0sW1wiZWFzZUluQ2lyY1wiLFsuNiwuMDQsLjk4LC4zMzVdXSxbXCJlYXNlT3V0Q2lyY1wiLFsuMDc1LC44MiwuMTY1LDFdXSxbXCJlYXNlSW5PdXRDaXJjXCIsWy43ODUsLjEzNSwuMTUsLjg2XV1dLGZ1bmN0aW9uKGUsdCl7di5FYXNpbmdzW3RbMF1dPWwuYXBwbHkobnVsbCx0WzFdKX0pO3ZhciB4PXYuQ1NTPXtSZWdFeDp7aXNIZXg6L14jKFtBLWZcXGRdezN9KXsxLDJ9JC9pLHZhbHVlVW53cmFwOi9eW0Etel0rXFwoKC4qKVxcKSQvaSx3cmFwcGVkVmFsdWVBbHJlYWR5RXh0cmFjdGVkOi9bMC05Ll0rIFswLTkuXSsgWzAtOS5dKyggWzAtOS5dKyk/Lyx2YWx1ZVNwbGl0Oi8oW0Etel0rXFwoLitcXCkpfCgoW0EtejAtOSMtLl0rPykoPz1cXHN8JCkpL2dpfSxMaXN0czp7Y29sb3JzOltcImZpbGxcIixcInN0cm9rZVwiLFwic3RvcENvbG9yXCIsXCJjb2xvclwiLFwiYmFja2dyb3VuZENvbG9yXCIsXCJib3JkZXJDb2xvclwiLFwiYm9yZGVyVG9wQ29sb3JcIixcImJvcmRlclJpZ2h0Q29sb3JcIixcImJvcmRlckJvdHRvbUNvbG9yXCIsXCJib3JkZXJMZWZ0Q29sb3JcIixcIm91dGxpbmVDb2xvclwiXSx0cmFuc2Zvcm1zQmFzZTpbXCJ0cmFuc2xhdGVYXCIsXCJ0cmFuc2xhdGVZXCIsXCJzY2FsZVwiLFwic2NhbGVYXCIsXCJzY2FsZVlcIixcInNrZXdYXCIsXCJza2V3WVwiLFwicm90YXRlWlwiXSx0cmFuc2Zvcm1zM0Q6W1widHJhbnNmb3JtUGVyc3BlY3RpdmVcIixcInRyYW5zbGF0ZVpcIixcInNjYWxlWlwiLFwicm90YXRlWFwiLFwicm90YXRlWVwiXX0sSG9va3M6e3RlbXBsYXRlczp7dGV4dFNoYWRvdzpbXCJDb2xvciBYIFkgQmx1clwiLFwiYmxhY2sgMHB4IDBweCAwcHhcIl0sYm94U2hhZG93OltcIkNvbG9yIFggWSBCbHVyIFNwcmVhZFwiLFwiYmxhY2sgMHB4IDBweCAwcHggMHB4XCJdLGNsaXA6W1wiVG9wIFJpZ2h0IEJvdHRvbSBMZWZ0XCIsXCIwcHggMHB4IDBweCAwcHhcIl0sYmFja2dyb3VuZFBvc2l0aW9uOltcIlggWVwiLFwiMCUgMCVcIl0sdHJhbnNmb3JtT3JpZ2luOltcIlggWSBaXCIsXCI1MCUgNTAlIDBweFwiXSxwZXJzcGVjdGl2ZU9yaWdpbjpbXCJYIFlcIixcIjUwJSA1MCVcIl19LHJlZ2lzdGVyZWQ6e30scmVnaXN0ZXI6ZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPHguTGlzdHMuY29sb3JzLmxlbmd0aDtlKyspe3ZhciB0PVwiY29sb3JcIj09PXguTGlzdHMuY29sb3JzW2VdP1wiMCAwIDAgMVwiOlwiMjU1IDI1NSAyNTUgMVwiO3guSG9va3MudGVtcGxhdGVzW3guTGlzdHMuY29sb3JzW2VdXT1bXCJSZWQgR3JlZW4gQmx1ZSBBbHBoYVwiLHRdfXZhciByLGEsbjtpZihmKWZvcihyIGluIHguSG9va3MudGVtcGxhdGVzKXthPXguSG9va3MudGVtcGxhdGVzW3JdLG49YVswXS5zcGxpdChcIiBcIik7dmFyIG89YVsxXS5tYXRjaCh4LlJlZ0V4LnZhbHVlU3BsaXQpO1wiQ29sb3JcIj09PW5bMF0mJihuLnB1c2gobi5zaGlmdCgpKSxvLnB1c2goby5zaGlmdCgpKSx4Lkhvb2tzLnRlbXBsYXRlc1tyXT1bbi5qb2luKFwiIFwiKSxvLmpvaW4oXCIgXCIpXSl9Zm9yKHIgaW4geC5Ib29rcy50ZW1wbGF0ZXMpe2E9eC5Ib29rcy50ZW1wbGF0ZXNbcl0sbj1hWzBdLnNwbGl0KFwiIFwiKTtmb3IodmFyIGUgaW4gbil7dmFyIGk9cituW2VdLHM9ZTt4Lkhvb2tzLnJlZ2lzdGVyZWRbaV09W3Isc119fX0sZ2V0Um9vdDpmdW5jdGlvbihlKXt2YXIgdD14Lkhvb2tzLnJlZ2lzdGVyZWRbZV07cmV0dXJuIHQ/dFswXTplfSxjbGVhblJvb3RQcm9wZXJ0eVZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHguUmVnRXgudmFsdWVVbndyYXAudGVzdCh0KSYmKHQ9dC5tYXRjaCh4LlJlZ0V4LnZhbHVlVW53cmFwKVsxXSkseC5WYWx1ZXMuaXNDU1NOdWxsVmFsdWUodCkmJih0PXguSG9va3MudGVtcGxhdGVzW2VdWzFdKSx0fSxleHRyYWN0VmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj14Lkhvb2tzLnJlZ2lzdGVyZWRbZV07aWYocil7dmFyIGE9clswXSxuPXJbMV07cmV0dXJuIHQ9eC5Ib29rcy5jbGVhblJvb3RQcm9wZXJ0eVZhbHVlKGEsdCksdC50b1N0cmluZygpLm1hdGNoKHguUmVnRXgudmFsdWVTcGxpdClbbl19cmV0dXJuIHR9LGluamVjdFZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt2YXIgYT14Lkhvb2tzLnJlZ2lzdGVyZWRbZV07aWYoYSl7dmFyIG49YVswXSxvPWFbMV0saSxzO3JldHVybiByPXguSG9va3MuY2xlYW5Sb290UHJvcGVydHlWYWx1ZShuLHIpLGk9ci50b1N0cmluZygpLm1hdGNoKHguUmVnRXgudmFsdWVTcGxpdCksaVtvXT10LHM9aS5qb2luKFwiIFwiKX1yZXR1cm4gcn19LE5vcm1hbGl6YXRpb25zOntyZWdpc3RlcmVkOntjbGlwOmZ1bmN0aW9uKGUsdCxyKXtzd2l0Y2goZSl7Y2FzZVwibmFtZVwiOnJldHVyblwiY2xpcFwiO2Nhc2VcImV4dHJhY3RcIjp2YXIgYTtyZXR1cm4geC5SZWdFeC53cmFwcGVkVmFsdWVBbHJlYWR5RXh0cmFjdGVkLnRlc3Qocik/YT1yOihhPXIudG9TdHJpbmcoKS5tYXRjaCh4LlJlZ0V4LnZhbHVlVW53cmFwKSxhPWE/YVsxXS5yZXBsYWNlKC8sKFxccyspPy9nLFwiIFwiKTpyKSxhO2Nhc2VcImluamVjdFwiOnJldHVyblwicmVjdChcIityK1wiKVwifX0sYmx1cjpmdW5jdGlvbihlLHQscil7c3dpdGNoKGUpe2Nhc2VcIm5hbWVcIjpyZXR1cm4gdi5TdGF0ZS5pc0ZpcmVmb3g/XCJmaWx0ZXJcIjpcIi13ZWJraXQtZmlsdGVyXCI7Y2FzZVwiZXh0cmFjdFwiOnZhciBhPXBhcnNlRmxvYXQocik7aWYoIWEmJjAhPT1hKXt2YXIgbj1yLnRvU3RyaW5nKCkubWF0Y2goL2JsdXJcXCgoWzAtOV0rW0Etel0rKVxcKS9pKTthPW4/blsxXTowfXJldHVybiBhO2Nhc2VcImluamVjdFwiOnJldHVybiBwYXJzZUZsb2F0KHIpP1wiYmx1cihcIityK1wiKVwiOlwibm9uZVwifX0sb3BhY2l0eTpmdW5jdGlvbihlLHQscil7aWYoOD49Zilzd2l0Y2goZSl7Y2FzZVwibmFtZVwiOnJldHVyblwiZmlsdGVyXCI7Y2FzZVwiZXh0cmFjdFwiOnZhciBhPXIudG9TdHJpbmcoKS5tYXRjaCgvYWxwaGFcXChvcGFjaXR5PSguKilcXCkvaSk7cmV0dXJuIHI9YT9hWzFdLzEwMDoxO2Nhc2VcImluamVjdFwiOnJldHVybiB0LnN0eWxlLnpvb209MSxwYXJzZUZsb2F0KHIpPj0xP1wiXCI6XCJhbHBoYShvcGFjaXR5PVwiK3BhcnNlSW50KDEwMCpwYXJzZUZsb2F0KHIpLDEwKStcIilcIn1lbHNlIHN3aXRjaChlKXtjYXNlXCJuYW1lXCI6cmV0dXJuXCJvcGFjaXR5XCI7Y2FzZVwiZXh0cmFjdFwiOnJldHVybiByO2Nhc2VcImluamVjdFwiOnJldHVybiByfX19LHJlZ2lzdGVyOmZ1bmN0aW9uKCl7OT49Znx8di5TdGF0ZS5pc0dpbmdlcmJyZWFkfHwoeC5MaXN0cy50cmFuc2Zvcm1zQmFzZT14Lkxpc3RzLnRyYW5zZm9ybXNCYXNlLmNvbmNhdCh4Lkxpc3RzLnRyYW5zZm9ybXMzRCkpO2Zvcih2YXIgZT0wO2U8eC5MaXN0cy50cmFuc2Zvcm1zQmFzZS5sZW5ndGg7ZSsrKSFmdW5jdGlvbigpe3ZhciB0PXguTGlzdHMudHJhbnNmb3Jtc0Jhc2VbZV07eC5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3RdPWZ1bmN0aW9uKGUscixuKXtzd2l0Y2goZSl7Y2FzZVwibmFtZVwiOnJldHVyblwidHJhbnNmb3JtXCI7Y2FzZVwiZXh0cmFjdFwiOnJldHVybiBpKHIpPT09YXx8aShyKS50cmFuc2Zvcm1DYWNoZVt0XT09PWE/L15zY2FsZS9pLnRlc3QodCk/MTowOmkocikudHJhbnNmb3JtQ2FjaGVbdF0ucmVwbGFjZSgvWygpXS9nLFwiXCIpO2Nhc2VcImluamVjdFwiOnZhciBvPSExO3N3aXRjaCh0LnN1YnN0cigwLHQubGVuZ3RoLTEpKXtjYXNlXCJ0cmFuc2xhdGVcIjpvPSEvKCV8cHh8ZW18cmVtfHZ3fHZofFxcZCkkL2kudGVzdChuKTticmVhaztjYXNlXCJzY2FsXCI6Y2FzZVwic2NhbGVcIjp2LlN0YXRlLmlzQW5kcm9pZCYmaShyKS50cmFuc2Zvcm1DYWNoZVt0XT09PWEmJjE+biYmKG49MSksbz0hLyhcXGQpJC9pLnRlc3Qobik7YnJlYWs7Y2FzZVwic2tld1wiOm89IS8oZGVnfFxcZCkkL2kudGVzdChuKTticmVhaztjYXNlXCJyb3RhdGVcIjpvPSEvKGRlZ3xcXGQpJC9pLnRlc3Qobil9cmV0dXJuIG98fChpKHIpLnRyYW5zZm9ybUNhY2hlW3RdPVwiKFwiK24rXCIpXCIpLGkocikudHJhbnNmb3JtQ2FjaGVbdF19fX0oKTtmb3IodmFyIGU9MDtlPHguTGlzdHMuY29sb3JzLmxlbmd0aDtlKyspIWZ1bmN0aW9uKCl7dmFyIHQ9eC5MaXN0cy5jb2xvcnNbZV07eC5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3RdPWZ1bmN0aW9uKGUscixuKXtzd2l0Y2goZSl7Y2FzZVwibmFtZVwiOnJldHVybiB0O2Nhc2VcImV4dHJhY3RcIjp2YXIgbztpZih4LlJlZ0V4LndyYXBwZWRWYWx1ZUFscmVhZHlFeHRyYWN0ZWQudGVzdChuKSlvPW47ZWxzZXt2YXIgaSxzPXtibGFjazpcInJnYigwLCAwLCAwKVwiLGJsdWU6XCJyZ2IoMCwgMCwgMjU1KVwiLGdyYXk6XCJyZ2IoMTI4LCAxMjgsIDEyOClcIixncmVlbjpcInJnYigwLCAxMjgsIDApXCIscmVkOlwicmdiKDI1NSwgMCwgMClcIix3aGl0ZTpcInJnYigyNTUsIDI1NSwgMjU1KVwifTsvXltBLXpdKyQvaS50ZXN0KG4pP2k9c1tuXSE9PWE/c1tuXTpzLmJsYWNrOnguUmVnRXguaXNIZXgudGVzdChuKT9pPVwicmdiKFwiK3guVmFsdWVzLmhleFRvUmdiKG4pLmpvaW4oXCIgXCIpK1wiKVwiOi9ecmdiYT9cXCgvaS50ZXN0KG4pfHwoaT1zLmJsYWNrKSxvPShpfHxuKS50b1N0cmluZygpLm1hdGNoKHguUmVnRXgudmFsdWVVbndyYXApWzFdLnJlcGxhY2UoLywoXFxzKyk/L2csXCIgXCIpfXJldHVybiA4Pj1mfHwzIT09by5zcGxpdChcIiBcIikubGVuZ3RofHwobys9XCIgMVwiKSxvO2Nhc2VcImluamVjdFwiOnJldHVybiA4Pj1mPzQ9PT1uLnNwbGl0KFwiIFwiKS5sZW5ndGgmJihuPW4uc3BsaXQoL1xccysvKS5zbGljZSgwLDMpLmpvaW4oXCIgXCIpKTozPT09bi5zcGxpdChcIiBcIikubGVuZ3RoJiYobis9XCIgMVwiKSwoOD49Zj9cInJnYlwiOlwicmdiYVwiKStcIihcIituLnJlcGxhY2UoL1xccysvZyxcIixcIikucmVwbGFjZSgvXFwuKFxcZCkrKD89LCkvZyxcIlwiKStcIilcIn19fSgpfX0sTmFtZXM6e2NhbWVsQ2FzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC8tKFxcdykvZyxmdW5jdGlvbihlLHQpe3JldHVybiB0LnRvVXBwZXJDYXNlKCl9KX0sU1ZHQXR0cmlidXRlOmZ1bmN0aW9uKGUpe3ZhciB0PVwid2lkdGh8aGVpZ2h0fHh8eXxjeHxjeXxyfHJ4fHJ5fHgxfHgyfHkxfHkyXCI7cmV0dXJuKGZ8fHYuU3RhdGUuaXNBbmRyb2lkJiYhdi5TdGF0ZS5pc0Nocm9tZSkmJih0Kz1cInx0cmFuc2Zvcm1cIiksbmV3IFJlZ0V4cChcIl4oXCIrdCtcIikkXCIsXCJpXCIpLnRlc3QoZSl9LHByZWZpeENoZWNrOmZ1bmN0aW9uKGUpe2lmKHYuU3RhdGUucHJlZml4TWF0Y2hlc1tlXSlyZXR1cm5bdi5TdGF0ZS5wcmVmaXhNYXRjaGVzW2VdLCEwXTtmb3IodmFyIHQ9W1wiXCIsXCJXZWJraXRcIixcIk1velwiLFwibXNcIixcIk9cIl0scj0wLGE9dC5sZW5ndGg7YT5yO3IrKyl7dmFyIG47aWYobj0wPT09cj9lOnRbcl0rZS5yZXBsYWNlKC9eXFx3LyxmdW5jdGlvbihlKXtyZXR1cm4gZS50b1VwcGVyQ2FzZSgpfSksZy5pc1N0cmluZyh2LlN0YXRlLnByZWZpeEVsZW1lbnQuc3R5bGVbbl0pKXJldHVybiB2LlN0YXRlLnByZWZpeE1hdGNoZXNbZV09bixbbiwhMF19cmV0dXJuW2UsITFdfX0sVmFsdWVzOntoZXhUb1JnYjpmdW5jdGlvbihlKXt2YXIgdD0vXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pJC9pLHI9L14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaSxhO3JldHVybiBlPWUucmVwbGFjZSh0LGZ1bmN0aW9uKGUsdCxyLGEpe3JldHVybiB0K3QrcityK2ErYX0pLGE9ci5leGVjKGUpLGE/W3BhcnNlSW50KGFbMV0sMTYpLHBhcnNlSW50KGFbMl0sMTYpLHBhcnNlSW50KGFbM10sMTYpXTpbMCwwLDBdfSxpc0NTU051bGxWYWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gMD09ZXx8L14obm9uZXxhdXRvfHRyYW5zcGFyZW50fChyZ2JhXFwoMCwgPzAsID8wLCA/MFxcKSkpJC9pLnRlc3QoZSl9LGdldFVuaXRUeXBlOmZ1bmN0aW9uKGUpe3JldHVybi9eKHJvdGF0ZXxza2V3KS9pLnRlc3QoZSk/XCJkZWdcIjovKF4oc2NhbGV8c2NhbGVYfHNjYWxlWXxzY2FsZVp8YWxwaGF8ZmxleEdyb3d8ZmxleEhlaWdodHx6SW5kZXh8Zm9udFdlaWdodCkkKXwoKG9wYWNpdHl8cmVkfGdyZWVufGJsdWV8YWxwaGEpJCkvaS50ZXN0KGUpP1wiXCI6XCJweFwifSxnZXREaXNwbGF5VHlwZTpmdW5jdGlvbihlKXt2YXIgdD1lJiZlLnRhZ05hbWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO3JldHVybi9eKGJ8YmlnfGl8c21hbGx8dHR8YWJicnxhY3JvbnltfGNpdGV8Y29kZXxkZm58ZW18a2JkfHN0cm9uZ3xzYW1wfHZhcnxhfGJkb3xicnxpbWd8bWFwfG9iamVjdHxxfHNjcmlwdHxzcGFufHN1YnxzdXB8YnV0dG9ufGlucHV0fGxhYmVsfHNlbGVjdHx0ZXh0YXJlYSkkL2kudGVzdCh0KT9cImlubGluZVwiOi9eKGxpKSQvaS50ZXN0KHQpP1wibGlzdC1pdGVtXCI6L14odHIpJC9pLnRlc3QodCk/XCJ0YWJsZS1yb3dcIjovXih0YWJsZSkkL2kudGVzdCh0KT9cInRhYmxlXCI6L14odGJvZHkpJC9pLnRlc3QodCk/XCJ0YWJsZS1yb3ctZ3JvdXBcIjpcImJsb2NrXCJ9LGFkZENsYXNzOmZ1bmN0aW9uKGUsdCl7ZS5jbGFzc0xpc3Q/ZS5jbGFzc0xpc3QuYWRkKHQpOmUuY2xhc3NOYW1lKz0oZS5jbGFzc05hbWUubGVuZ3RoP1wiIFwiOlwiXCIpK3R9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGUsdCl7ZS5jbGFzc0xpc3Q/ZS5jbGFzc0xpc3QucmVtb3ZlKHQpOmUuY2xhc3NOYW1lPWUuY2xhc3NOYW1lLnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrdC5zcGxpdChcIiBcIikuam9pbihcInxcIikrXCIoXFxcXHN8JClcIixcImdpXCIpLFwiIFwiKX19LGdldFByb3BlcnR5VmFsdWU6ZnVuY3Rpb24oZSxyLG4sbyl7ZnVuY3Rpb24gcyhlLHIpe2Z1bmN0aW9uIG4oKXt1JiZ4LnNldFByb3BlcnR5VmFsdWUoZSxcImRpc3BsYXlcIixcIm5vbmVcIil9dmFyIGw9MDtpZig4Pj1mKWw9JC5jc3MoZSxyKTtlbHNle3ZhciB1PSExO2lmKC9eKHdpZHRofGhlaWdodCkkLy50ZXN0KHIpJiYwPT09eC5nZXRQcm9wZXJ0eVZhbHVlKGUsXCJkaXNwbGF5XCIpJiYodT0hMCx4LnNldFByb3BlcnR5VmFsdWUoZSxcImRpc3BsYXlcIix4LlZhbHVlcy5nZXREaXNwbGF5VHlwZShlKSkpLCFvKXtpZihcImhlaWdodFwiPT09ciYmXCJib3JkZXItYm94XCIhPT14LmdldFByb3BlcnR5VmFsdWUoZSxcImJveFNpemluZ1wiKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpe3ZhciBjPWUub2Zmc2V0SGVpZ2h0LShwYXJzZUZsb2F0KHguZ2V0UHJvcGVydHlWYWx1ZShlLFwiYm9yZGVyVG9wV2lkdGhcIikpfHwwKS0ocGFyc2VGbG9hdCh4LmdldFByb3BlcnR5VmFsdWUoZSxcImJvcmRlckJvdHRvbVdpZHRoXCIpKXx8MCktKHBhcnNlRmxvYXQoeC5nZXRQcm9wZXJ0eVZhbHVlKGUsXCJwYWRkaW5nVG9wXCIpKXx8MCktKHBhcnNlRmxvYXQoeC5nZXRQcm9wZXJ0eVZhbHVlKGUsXCJwYWRkaW5nQm90dG9tXCIpKXx8MCk7cmV0dXJuIG4oKSxjfWlmKFwid2lkdGhcIj09PXImJlwiYm9yZGVyLWJveFwiIT09eC5nZXRQcm9wZXJ0eVZhbHVlKGUsXCJib3hTaXppbmdcIikudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKXt2YXIgcD1lLm9mZnNldFdpZHRoLShwYXJzZUZsb2F0KHguZ2V0UHJvcGVydHlWYWx1ZShlLFwiYm9yZGVyTGVmdFdpZHRoXCIpKXx8MCktKHBhcnNlRmxvYXQoeC5nZXRQcm9wZXJ0eVZhbHVlKGUsXCJib3JkZXJSaWdodFdpZHRoXCIpKXx8MCktKHBhcnNlRmxvYXQoeC5nZXRQcm9wZXJ0eVZhbHVlKGUsXCJwYWRkaW5nTGVmdFwiKSl8fDApLShwYXJzZUZsb2F0KHguZ2V0UHJvcGVydHlWYWx1ZShlLFwicGFkZGluZ1JpZ2h0XCIpKXx8MCk7cmV0dXJuIG4oKSxwfX12YXIgZDtkPWkoZSk9PT1hP3QuZ2V0Q29tcHV0ZWRTdHlsZShlLG51bGwpOmkoZSkuY29tcHV0ZWRTdHlsZT9pKGUpLmNvbXB1dGVkU3R5bGU6aShlKS5jb21wdXRlZFN0eWxlPXQuZ2V0Q29tcHV0ZWRTdHlsZShlLG51bGwpLFwiYm9yZGVyQ29sb3JcIj09PXImJihyPVwiYm9yZGVyVG9wQ29sb3JcIiksbD05PT09ZiYmXCJmaWx0ZXJcIj09PXI/ZC5nZXRQcm9wZXJ0eVZhbHVlKHIpOmRbcl0sKFwiXCI9PT1sfHxudWxsPT09bCkmJihsPWUuc3R5bGVbcl0pLG4oKX1pZihcImF1dG9cIj09PWwmJi9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkL2kudGVzdChyKSl7dmFyIGc9cyhlLFwicG9zaXRpb25cIik7KFwiZml4ZWRcIj09PWd8fFwiYWJzb2x1dGVcIj09PWcmJi90b3B8bGVmdC9pLnRlc3QocikpJiYobD0kKGUpLnBvc2l0aW9uKClbcl0rXCJweFwiKX1yZXR1cm4gbH12YXIgbDtpZih4Lkhvb2tzLnJlZ2lzdGVyZWRbcl0pe3ZhciB1PXIsYz14Lkhvb2tzLmdldFJvb3QodSk7bj09PWEmJihuPXguZ2V0UHJvcGVydHlWYWx1ZShlLHguTmFtZXMucHJlZml4Q2hlY2soYylbMF0pKSx4Lk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbY10mJihuPXguTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtjXShcImV4dHJhY3RcIixlLG4pKSxsPXguSG9va3MuZXh0cmFjdFZhbHVlKHUsbil9ZWxzZSBpZih4Lk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbcl0pe3ZhciBwLGQ7cD14Lk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbcl0oXCJuYW1lXCIsZSksXCJ0cmFuc2Zvcm1cIiE9PXAmJihkPXMoZSx4Lk5hbWVzLnByZWZpeENoZWNrKHApWzBdKSx4LlZhbHVlcy5pc0NTU051bGxWYWx1ZShkKSYmeC5Ib29rcy50ZW1wbGF0ZXNbcl0mJihkPXguSG9va3MudGVtcGxhdGVzW3JdWzFdKSksbD14Lk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbcl0oXCJleHRyYWN0XCIsZSxkKX1pZighL15bXFxkLV0vLnRlc3QobCkpaWYoaShlKSYmaShlKS5pc1NWRyYmeC5OYW1lcy5TVkdBdHRyaWJ1dGUocikpaWYoL14oaGVpZ2h0fHdpZHRoKSQvaS50ZXN0KHIpKXRyeXtsPWUuZ2V0QkJveCgpW3JdfWNhdGNoKGcpe2w9MH1lbHNlIGw9ZS5nZXRBdHRyaWJ1dGUocik7ZWxzZSBsPXMoZSx4Lk5hbWVzLnByZWZpeENoZWNrKHIpWzBdKTtyZXR1cm4geC5WYWx1ZXMuaXNDU1NOdWxsVmFsdWUobCkmJihsPTApLHYuZGVidWc+PTImJmNvbnNvbGUubG9nKFwiR2V0IFwiK3IrXCI6IFwiK2wpLGx9LHNldFByb3BlcnR5VmFsdWU6ZnVuY3Rpb24oZSxyLGEsbixvKXt2YXIgcz1yO2lmKFwic2Nyb2xsXCI9PT1yKW8uY29udGFpbmVyP28uY29udGFpbmVyW1wic2Nyb2xsXCIrby5kaXJlY3Rpb25dPWE6XCJMZWZ0XCI9PT1vLmRpcmVjdGlvbj90LnNjcm9sbFRvKGEsby5hbHRlcm5hdGVWYWx1ZSk6dC5zY3JvbGxUbyhvLmFsdGVybmF0ZVZhbHVlLGEpO2Vsc2UgaWYoeC5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3JdJiZcInRyYW5zZm9ybVwiPT09eC5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3JdKFwibmFtZVwiLGUpKXguTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtyXShcImluamVjdFwiLGUsYSkscz1cInRyYW5zZm9ybVwiLGE9aShlKS50cmFuc2Zvcm1DYWNoZVtyXTtlbHNle2lmKHguSG9va3MucmVnaXN0ZXJlZFtyXSl7dmFyIGw9cix1PXguSG9va3MuZ2V0Um9vdChyKTtuPW58fHguZ2V0UHJvcGVydHlWYWx1ZShlLHUpLGE9eC5Ib29rcy5pbmplY3RWYWx1ZShsLGEsbikscj11fWlmKHguTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtyXSYmKGE9eC5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3JdKFwiaW5qZWN0XCIsZSxhKSxyPXguTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtyXShcIm5hbWVcIixlKSkscz14Lk5hbWVzLnByZWZpeENoZWNrKHIpWzBdLDg+PWYpdHJ5e2Uuc3R5bGVbc109YX1jYXRjaChjKXt2LmRlYnVnJiZjb25zb2xlLmxvZyhcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBbXCIrYStcIl0gZm9yIFtcIitzK1wiXVwiKX1lbHNlIGkoZSkmJmkoZSkuaXNTVkcmJnguTmFtZXMuU1ZHQXR0cmlidXRlKHIpP2Uuc2V0QXR0cmlidXRlKHIsYSk6ZS5zdHlsZVtzXT1hO3YuZGVidWc+PTImJmNvbnNvbGUubG9nKFwiU2V0IFwiK3IrXCIgKFwiK3MrXCIpOiBcIithKX1yZXR1cm5bcyxhXX0sZmx1c2hUcmFuc2Zvcm1DYWNoZTpmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiBwYXJzZUZsb2F0KHguZ2V0UHJvcGVydHlWYWx1ZShlLHQpKX12YXIgcj1cIlwiO2lmKChmfHx2LlN0YXRlLmlzQW5kcm9pZCYmIXYuU3RhdGUuaXNDaHJvbWUpJiZpKGUpLmlzU1ZHKXt2YXIgYT17dHJhbnNsYXRlOlt0KFwidHJhbnNsYXRlWFwiKSx0KFwidHJhbnNsYXRlWVwiKV0sc2tld1g6W3QoXCJza2V3WFwiKV0sc2tld1k6W3QoXCJza2V3WVwiKV0sc2NhbGU6MSE9PXQoXCJzY2FsZVwiKT9bdChcInNjYWxlXCIpLHQoXCJzY2FsZVwiKV06W3QoXCJzY2FsZVhcIiksdChcInNjYWxlWVwiKV0scm90YXRlOlt0KFwicm90YXRlWlwiKSwwLDBdfTskLmVhY2goaShlKS50cmFuc2Zvcm1DYWNoZSxmdW5jdGlvbihlKXsvXnRyYW5zbGF0ZS9pLnRlc3QoZSk/ZT1cInRyYW5zbGF0ZVwiOi9ec2NhbGUvaS50ZXN0KGUpP2U9XCJzY2FsZVwiOi9ecm90YXRlL2kudGVzdChlKSYmKGU9XCJyb3RhdGVcIiksYVtlXSYmKHIrPWUrXCIoXCIrYVtlXS5qb2luKFwiIFwiKStcIikgXCIsZGVsZXRlIGFbZV0pfSl9ZWxzZXt2YXIgbixvOyQuZWFjaChpKGUpLnRyYW5zZm9ybUNhY2hlLGZ1bmN0aW9uKHQpe3JldHVybiBuPWkoZSkudHJhbnNmb3JtQ2FjaGVbdF0sXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiPT09dD8obz1uLCEwKTooOT09PWYmJlwicm90YXRlWlwiPT09dCYmKHQ9XCJyb3RhdGVcIiksdm9pZChyKz10K24rXCIgXCIpKX0pLG8mJihyPVwicGVyc3BlY3RpdmVcIitvK1wiIFwiK3IpfXguc2V0UHJvcGVydHlWYWx1ZShlLFwidHJhbnNmb3JtXCIscil9fTt4Lkhvb2tzLnJlZ2lzdGVyKCkseC5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcigpLHYuaG9vaz1mdW5jdGlvbihlLHQscil7dmFyIG49YTtyZXR1cm4gZT1vKGUpLCQuZWFjaChlLGZ1bmN0aW9uKGUsbyl7aWYoaShvKT09PWEmJnYuaW5pdChvKSxyPT09YSluPT09YSYmKG49di5DU1MuZ2V0UHJvcGVydHlWYWx1ZShvLHQpKTtlbHNle3ZhciBzPXYuQ1NTLnNldFByb3BlcnR5VmFsdWUobyx0LHIpO1widHJhbnNmb3JtXCI9PT1zWzBdJiZ2LkNTUy5mbHVzaFRyYW5zZm9ybUNhY2hlKG8pLG49c319KSxufTt2YXIgUz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbD9ULnByb21pc2V8fG51bGw6Zn1mdW5jdGlvbiBuKCl7ZnVuY3Rpb24gZShlKXtmdW5jdGlvbiBwKGUsdCl7dmFyIHI9YSxpPWEscz1hO3JldHVybiBnLmlzQXJyYXkoZSk/KHI9ZVswXSwhZy5pc0FycmF5KGVbMV0pJiYvXltcXGQtXS8udGVzdChlWzFdKXx8Zy5pc0Z1bmN0aW9uKGVbMV0pfHx4LlJlZ0V4LmlzSGV4LnRlc3QoZVsxXSk/cz1lWzFdOihnLmlzU3RyaW5nKGVbMV0pJiYheC5SZWdFeC5pc0hleC50ZXN0KGVbMV0pfHxnLmlzQXJyYXkoZVsxXSkpJiYoaT10P2VbMV06dShlWzFdLG8uZHVyYXRpb24pLGVbMl0hPT1hJiYocz1lWzJdKSkpOnI9ZSx0fHwoaT1pfHxvLmVhc2luZyksZy5pc0Z1bmN0aW9uKHIpJiYocj1yLmNhbGwobix3LFApKSxnLmlzRnVuY3Rpb24ocykmJihzPXMuY2FsbChuLHcsUCkpLFtyfHwwLGksc119ZnVuY3Rpb24gZihlLHQpe3ZhciByLGE7cmV0dXJuIGE9KHR8fFwiMFwiKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWyVBLXpdKyQvLGZ1bmN0aW9uKGUpe3JldHVybiByPWUsXCJcIn0pLHJ8fChyPXguVmFsdWVzLmdldFVuaXRUeXBlKGUpKSxbYSxyXX1mdW5jdGlvbiBkKCl7dmFyIGU9e215UGFyZW50Om4ucGFyZW50Tm9kZXx8ci5ib2R5LHBvc2l0aW9uOnguZ2V0UHJvcGVydHlWYWx1ZShuLFwicG9zaXRpb25cIiksZm9udFNpemU6eC5nZXRQcm9wZXJ0eVZhbHVlKG4sXCJmb250U2l6ZVwiKX0sYT1lLnBvc2l0aW9uPT09Ti5sYXN0UG9zaXRpb24mJmUubXlQYXJlbnQ9PT1OLmxhc3RQYXJlbnQsbz1lLmZvbnRTaXplPT09Ti5sYXN0Rm9udFNpemU7Ti5sYXN0UGFyZW50PWUubXlQYXJlbnQsTi5sYXN0UG9zaXRpb249ZS5wb3NpdGlvbixOLmxhc3RGb250U2l6ZT1lLmZvbnRTaXplO3ZhciBzPTEwMCxsPXt9O2lmKG8mJmEpbC5lbVRvUHg9Ti5sYXN0RW1Ub1B4LGwucGVyY2VudFRvUHhXaWR0aD1OLmxhc3RQZXJjZW50VG9QeFdpZHRoLGwucGVyY2VudFRvUHhIZWlnaHQ9Ti5sYXN0UGVyY2VudFRvUHhIZWlnaHQ7ZWxzZXt2YXIgdT1pKG4pLmlzU1ZHP3IuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInJlY3RcIik6ci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3YuaW5pdCh1KSxlLm15UGFyZW50LmFwcGVuZENoaWxkKHUpLCQuZWFjaChbXCJvdmVyZmxvd1wiLFwib3ZlcmZsb3dYXCIsXCJvdmVyZmxvd1lcIl0sZnVuY3Rpb24oZSx0KXt2LkNTUy5zZXRQcm9wZXJ0eVZhbHVlKHUsdCxcImhpZGRlblwiKX0pLHYuQ1NTLnNldFByb3BlcnR5VmFsdWUodSxcInBvc2l0aW9uXCIsZS5wb3NpdGlvbiksdi5DU1Muc2V0UHJvcGVydHlWYWx1ZSh1LFwiZm9udFNpemVcIixlLmZvbnRTaXplKSx2LkNTUy5zZXRQcm9wZXJ0eVZhbHVlKHUsXCJib3hTaXppbmdcIixcImNvbnRlbnQtYm94XCIpLCQuZWFjaChbXCJtaW5XaWR0aFwiLFwibWF4V2lkdGhcIixcIndpZHRoXCIsXCJtaW5IZWlnaHRcIixcIm1heEhlaWdodFwiLFwiaGVpZ2h0XCJdLGZ1bmN0aW9uKGUsdCl7di5DU1Muc2V0UHJvcGVydHlWYWx1ZSh1LHQscytcIiVcIil9KSx2LkNTUy5zZXRQcm9wZXJ0eVZhbHVlKHUsXCJwYWRkaW5nTGVmdFwiLHMrXCJlbVwiKSxsLnBlcmNlbnRUb1B4V2lkdGg9Ti5sYXN0UGVyY2VudFRvUHhXaWR0aD0ocGFyc2VGbG9hdCh4LmdldFByb3BlcnR5VmFsdWUodSxcIndpZHRoXCIsbnVsbCwhMCkpfHwxKS9zLGwucGVyY2VudFRvUHhIZWlnaHQ9Ti5sYXN0UGVyY2VudFRvUHhIZWlnaHQ9KHBhcnNlRmxvYXQoeC5nZXRQcm9wZXJ0eVZhbHVlKHUsXCJoZWlnaHRcIixudWxsLCEwKSl8fDEpL3MsbC5lbVRvUHg9Ti5sYXN0RW1Ub1B4PShwYXJzZUZsb2F0KHguZ2V0UHJvcGVydHlWYWx1ZSh1LFwicGFkZGluZ0xlZnRcIikpfHwxKS9zLGUubXlQYXJlbnQucmVtb3ZlQ2hpbGQodSl9cmV0dXJuIG51bGw9PT1OLnJlbVRvUHgmJihOLnJlbVRvUHg9cGFyc2VGbG9hdCh4LmdldFByb3BlcnR5VmFsdWUoci5ib2R5LFwiZm9udFNpemVcIikpfHwxNiksbnVsbD09PU4udndUb1B4JiYoTi52d1RvUHg9cGFyc2VGbG9hdCh0LmlubmVyV2lkdGgpLzEwMCxOLnZoVG9QeD1wYXJzZUZsb2F0KHQuaW5uZXJIZWlnaHQpLzEwMCksbC5yZW1Ub1B4PU4ucmVtVG9QeCxsLnZ3VG9QeD1OLnZ3VG9QeCxsLnZoVG9QeD1OLnZoVG9QeCx2LmRlYnVnPj0xJiZjb25zb2xlLmxvZyhcIlVuaXQgcmF0aW9zOiBcIitKU09OLnN0cmluZ2lmeShsKSxuKSxsfWlmKG8uYmVnaW4mJjA9PT13KXRyeXtvLmJlZ2luLmNhbGwobSxtKX1jYXRjaCh5KXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgeX0sMSl9aWYoXCJzY3JvbGxcIj09PWspe3ZhciBTPS9eeCQvaS50ZXN0KG8uYXhpcyk/XCJMZWZ0XCI6XCJUb3BcIixWPXBhcnNlRmxvYXQoby5vZmZzZXQpfHwwLEMsQSxGO28uY29udGFpbmVyP2cuaXNXcmFwcGVkKG8uY29udGFpbmVyKXx8Zy5pc05vZGUoby5jb250YWluZXIpPyhvLmNvbnRhaW5lcj1vLmNvbnRhaW5lclswXXx8by5jb250YWluZXIsQz1vLmNvbnRhaW5lcltcInNjcm9sbFwiK1NdLEY9QyskKG4pLnBvc2l0aW9uKClbUy50b0xvd2VyQ2FzZSgpXStWKTpvLmNvbnRhaW5lcj1udWxsOihDPXYuU3RhdGUuc2Nyb2xsQW5jaG9yW3YuU3RhdGVbXCJzY3JvbGxQcm9wZXJ0eVwiK1NdXSxBPXYuU3RhdGUuc2Nyb2xsQW5jaG9yW3YuU3RhdGVbXCJzY3JvbGxQcm9wZXJ0eVwiKyhcIkxlZnRcIj09PVM/XCJUb3BcIjpcIkxlZnRcIildXSxGPSQobikub2Zmc2V0KClbUy50b0xvd2VyQ2FzZSgpXStWKSxzPXtzY3JvbGw6e3Jvb3RQcm9wZXJ0eVZhbHVlOiExLHN0YXJ0VmFsdWU6QyxjdXJyZW50VmFsdWU6QyxlbmRWYWx1ZTpGLHVuaXRUeXBlOlwiXCIsZWFzaW5nOm8uZWFzaW5nLHNjcm9sbERhdGE6e2NvbnRhaW5lcjpvLmNvbnRhaW5lcixkaXJlY3Rpb246UyxhbHRlcm5hdGVWYWx1ZTpBfX0sZWxlbWVudDpufSx2LmRlYnVnJiZjb25zb2xlLmxvZyhcInR3ZWVuc0NvbnRhaW5lciAoc2Nyb2xsKTogXCIscy5zY3JvbGwsbil9ZWxzZSBpZihcInJldmVyc2VcIj09PWspe2lmKCFpKG4pLnR3ZWVuc0NvbnRhaW5lcilyZXR1cm4gdm9pZCAkLmRlcXVldWUobixvLnF1ZXVlKTtcIm5vbmVcIj09PWkobikub3B0cy5kaXNwbGF5JiYoaShuKS5vcHRzLmRpc3BsYXk9XCJhdXRvXCIpLFwiaGlkZGVuXCI9PT1pKG4pLm9wdHMudmlzaWJpbGl0eSYmKGkobikub3B0cy52aXNpYmlsaXR5PVwidmlzaWJsZVwiKSxpKG4pLm9wdHMubG9vcD0hMSxpKG4pLm9wdHMuYmVnaW49bnVsbCxpKG4pLm9wdHMuY29tcGxldGU9bnVsbCxiLmVhc2luZ3x8ZGVsZXRlIG8uZWFzaW5nLGIuZHVyYXRpb258fGRlbGV0ZSBvLmR1cmF0aW9uLG89JC5leHRlbmQoe30saShuKS5vcHRzLG8pO3ZhciBFPSQuZXh0ZW5kKCEwLHt9LGkobikudHdlZW5zQ29udGFpbmVyKTtmb3IodmFyIGogaW4gRSlpZihcImVsZW1lbnRcIiE9PWope3ZhciBIPUVbal0uc3RhcnRWYWx1ZTtFW2pdLnN0YXJ0VmFsdWU9RVtqXS5jdXJyZW50VmFsdWU9RVtqXS5lbmRWYWx1ZSxFW2pdLmVuZFZhbHVlPUgsZy5pc0VtcHR5T2JqZWN0KGIpfHwoRVtqXS5lYXNpbmc9by5lYXNpbmcpLHYuZGVidWcmJmNvbnNvbGUubG9nKFwicmV2ZXJzZSB0d2VlbnNDb250YWluZXIgKFwiK2orXCIpOiBcIitKU09OLnN0cmluZ2lmeShFW2pdKSxuKX1zPUV9ZWxzZSBpZihcInN0YXJ0XCI9PT1rKXt2YXIgRTtpKG4pLnR3ZWVuc0NvbnRhaW5lciYmaShuKS5pc0FuaW1hdGluZz09PSEwJiYoRT1pKG4pLnR3ZWVuc0NvbnRhaW5lciksJC5lYWNoKGgsZnVuY3Rpb24oZSx0KXtpZihSZWdFeHAoXCJeXCIreC5MaXN0cy5jb2xvcnMuam9pbihcIiR8XlwiKStcIiRcIikudGVzdChlKSl7dmFyIHI9cCh0LCEwKSxuPXJbMF0sbz1yWzFdLGk9clsyXTtpZih4LlJlZ0V4LmlzSGV4LnRlc3Qobikpe2Zvcih2YXIgcz1bXCJSZWRcIixcIkdyZWVuXCIsXCJCbHVlXCJdLGw9eC5WYWx1ZXMuaGV4VG9SZ2IobiksdT1pP3guVmFsdWVzLmhleFRvUmdiKGkpOmEsYz0wO2M8cy5sZW5ndGg7YysrKXt2YXIgZj1bbFtjXV07byYmZi5wdXNoKG8pLHUhPT1hJiZmLnB1c2godVtjXSksaFtlK3NbY11dPWZ9ZGVsZXRlIGhbZV19fX0pO2Zvcih2YXIgUiBpbiBoKXt2YXIgTz1wKGhbUl0pLHo9T1swXSxxPU9bMV0sTT1PWzJdO1I9eC5OYW1lcy5jYW1lbENhc2UoUik7dmFyIEk9eC5Ib29rcy5nZXRSb290KFIpLEI9ITE7aWYoaShuKS5pc1NWR3x8XCJ0d2VlblwiPT09SXx8eC5OYW1lcy5wcmVmaXhDaGVjayhJKVsxXSE9PSExfHx4Lk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbSV0hPT1hKXsoby5kaXNwbGF5IT09YSYmbnVsbCE9PW8uZGlzcGxheSYmXCJub25lXCIhPT1vLmRpc3BsYXl8fG8udmlzaWJpbGl0eSE9PWEmJlwiaGlkZGVuXCIhPT1vLnZpc2liaWxpdHkpJiYvb3BhY2l0eXxmaWx0ZXIvLnRlc3QoUikmJiFNJiYwIT09eiYmKE09MCksby5fY2FjaGVWYWx1ZXMmJkUmJkVbUl0/KE09PT1hJiYoTT1FW1JdLmVuZFZhbHVlK0VbUl0udW5pdFR5cGUpLEI9aShuKS5yb290UHJvcGVydHlWYWx1ZUNhY2hlW0ldKTp4Lkhvb2tzLnJlZ2lzdGVyZWRbUl0/TT09PWE/KEI9eC5nZXRQcm9wZXJ0eVZhbHVlKG4sSSksTT14LmdldFByb3BlcnR5VmFsdWUobixSLEIpKTpCPXguSG9va3MudGVtcGxhdGVzW0ldWzFdOk09PT1hJiYoTT14LmdldFByb3BlcnR5VmFsdWUobixSKSk7dmFyIFcsRyxELFg9ITE7aWYoVz1mKFIsTSksTT1XWzBdLEQ9V1sxXSxXPWYoUix6KSx6PVdbMF0ucmVwbGFjZSgvXihbKy1cXC8qXSk9LyxmdW5jdGlvbihlLHQpe3JldHVybiBYPXQsXCJcIn0pLEc9V1sxXSxNPXBhcnNlRmxvYXQoTSl8fDAsej1wYXJzZUZsb2F0KHopfHwwLFwiJVwiPT09RyYmKC9eKGZvbnRTaXplfGxpbmVIZWlnaHQpJC8udGVzdChSKT8oei89MTAwLEc9XCJlbVwiKTovXnNjYWxlLy50ZXN0KFIpPyh6Lz0xMDAsRz1cIlwiKTovKFJlZHxHcmVlbnxCbHVlKSQvaS50ZXN0KFIpJiYoej16LzEwMCoyNTUsRz1cIlwiKSksL1tcXC8qXS8udGVzdChYKSlHPUQ7ZWxzZSBpZihEIT09RyYmMCE9PU0paWYoMD09PXopRz1EO2Vsc2V7bD1sfHxkKCk7dmFyIFk9L21hcmdpbnxwYWRkaW5nfGxlZnR8cmlnaHR8d2lkdGh8dGV4dHx3b3JkfGxldHRlci9pLnRlc3QoUil8fC9YJC8udGVzdChSKXx8XCJ4XCI9PT1SP1wieFwiOlwieVwiO3N3aXRjaChEKXtjYXNlXCIlXCI6TSo9XCJ4XCI9PT1ZP2wucGVyY2VudFRvUHhXaWR0aDpsLnBlcmNlbnRUb1B4SGVpZ2h0O2JyZWFrO2Nhc2VcInB4XCI6YnJlYWs7ZGVmYXVsdDpNKj1sW0QrXCJUb1B4XCJdfXN3aXRjaChHKXtjYXNlXCIlXCI6TSo9MS8oXCJ4XCI9PT1ZP2wucGVyY2VudFRvUHhXaWR0aDpsLnBlcmNlbnRUb1B4SGVpZ2h0KTticmVhaztjYXNlXCJweFwiOmJyZWFrO2RlZmF1bHQ6TSo9MS9sW0crXCJUb1B4XCJdfX1zd2l0Y2goWCl7Y2FzZVwiK1wiOno9TSt6O2JyZWFrO2Nhc2VcIi1cIjp6PU0tejticmVhaztjYXNlXCIqXCI6ej1NKno7YnJlYWs7Y2FzZVwiL1wiOno9TS96fXNbUl09e3Jvb3RQcm9wZXJ0eVZhbHVlOkIsc3RhcnRWYWx1ZTpNLGN1cnJlbnRWYWx1ZTpNLGVuZFZhbHVlOnosdW5pdFR5cGU6RyxlYXNpbmc6cX0sdi5kZWJ1ZyYmY29uc29sZS5sb2coXCJ0d2VlbnNDb250YWluZXIgKFwiK1IrXCIpOiBcIitKU09OLnN0cmluZ2lmeShzW1JdKSxuKX1lbHNlIHYuZGVidWcmJmNvbnNvbGUubG9nKFwiU2tpcHBpbmcgW1wiK0krXCJdIGR1ZSB0byBhIGxhY2sgb2YgYnJvd3NlciBzdXBwb3J0LlwiKX1zLmVsZW1lbnQ9bn1zLmVsZW1lbnQmJih4LlZhbHVlcy5hZGRDbGFzcyhuLFwidmVsb2NpdHktYW5pbWF0aW5nXCIpLEwucHVzaChzKSxcIlwiPT09by5xdWV1ZSYmKGkobikudHdlZW5zQ29udGFpbmVyPXMsaShuKS5vcHRzPW8pLGkobikuaXNBbmltYXRpbmc9ITAsdz09PVAtMT8odi5TdGF0ZS5jYWxscy5wdXNoKFtMLG0sbyxudWxsLFQucmVzb2x2ZXJdKSx2LlN0YXRlLmlzVGlja2luZz09PSExJiYodi5TdGF0ZS5pc1RpY2tpbmc9ITAsYygpKSk6dysrKX12YXIgbj10aGlzLG89JC5leHRlbmQoe30sdi5kZWZhdWx0cyxiKSxzPXt9LGw7c3dpdGNoKGkobik9PT1hJiZ2LmluaXQobikscGFyc2VGbG9hdChvLmRlbGF5KSYmby5xdWV1ZSE9PSExJiYkLnF1ZXVlKG4sby5xdWV1ZSxmdW5jdGlvbihlKXt2LnZlbG9jaXR5UXVldWVFbnRyeUZsYWc9ITAsaShuKS5kZWxheVRpbWVyPXtzZXRUaW1lb3V0OnNldFRpbWVvdXQoZSxwYXJzZUZsb2F0KG8uZGVsYXkpKSxuZXh0OmV9fSksby5kdXJhdGlvbi50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpe2Nhc2VcImZhc3RcIjpvLmR1cmF0aW9uPTIwMDticmVhaztjYXNlXCJub3JtYWxcIjpvLmR1cmF0aW9uPXk7YnJlYWs7Y2FzZVwic2xvd1wiOm8uZHVyYXRpb249NjAwO2JyZWFrO2RlZmF1bHQ6by5kdXJhdGlvbj1wYXJzZUZsb2F0KG8uZHVyYXRpb24pfHwxfXYubW9jayE9PSExJiYodi5tb2NrPT09ITA/by5kdXJhdGlvbj1vLmRlbGF5PTE6KG8uZHVyYXRpb24qPXBhcnNlRmxvYXQodi5tb2NrKXx8MSxvLmRlbGF5Kj1wYXJzZUZsb2F0KHYubW9jayl8fDEpKSxvLmVhc2luZz11KG8uZWFzaW5nLG8uZHVyYXRpb24pLG8uYmVnaW4mJiFnLmlzRnVuY3Rpb24oby5iZWdpbikmJihvLmJlZ2luPW51bGwpLG8ucHJvZ3Jlc3MmJiFnLmlzRnVuY3Rpb24oby5wcm9ncmVzcykmJihvLnByb2dyZXNzPW51bGwpLG8uY29tcGxldGUmJiFnLmlzRnVuY3Rpb24oby5jb21wbGV0ZSkmJihvLmNvbXBsZXRlPW51bGwpLG8uZGlzcGxheSE9PWEmJm51bGwhPT1vLmRpc3BsYXkmJihvLmRpc3BsYXk9by5kaXNwbGF5LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSxcImF1dG9cIj09PW8uZGlzcGxheSYmKG8uZGlzcGxheT12LkNTUy5WYWx1ZXMuZ2V0RGlzcGxheVR5cGUobikpKSxvLnZpc2liaWxpdHkhPT1hJiZudWxsIT09by52aXNpYmlsaXR5JiYoby52aXNpYmlsaXR5PW8udmlzaWJpbGl0eS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpLG8ubW9iaWxlSEE9by5tb2JpbGVIQSYmdi5TdGF0ZS5pc01vYmlsZSYmIXYuU3RhdGUuaXNHaW5nZXJicmVhZCxvLnF1ZXVlPT09ITE/by5kZWxheT9zZXRUaW1lb3V0KGUsby5kZWxheSk6ZSgpOiQucXVldWUobixvLnF1ZXVlLGZ1bmN0aW9uKHQscil7cmV0dXJuIHI9PT0hMD8oVC5wcm9taXNlJiZULnJlc29sdmVyKG0pLCEwKToodi52ZWxvY2l0eVF1ZXVlRW50cnlGbGFnPSEwLHZvaWQgZSh0KSl9KSxcIlwiIT09by5xdWV1ZSYmXCJmeFwiIT09by5xdWV1ZXx8XCJpbnByb2dyZXNzXCI9PT0kLnF1ZXVlKG4pWzBdfHwkLmRlcXVldWUobil9dmFyIHM9YXJndW1lbnRzWzBdJiYoYXJndW1lbnRzWzBdLnB8fCQuaXNQbGFpbk9iamVjdChhcmd1bWVudHNbMF0ucHJvcGVydGllcykmJiFhcmd1bWVudHNbMF0ucHJvcGVydGllcy5uYW1lc3x8Zy5pc1N0cmluZyhhcmd1bWVudHNbMF0ucHJvcGVydGllcykpLGwsZixkLG0saCxiO2lmKGcuaXNXcmFwcGVkKHRoaXMpPyhsPSExLGQ9MCxtPXRoaXMsZj10aGlzKToobD0hMCxkPTEsbT1zP2FyZ3VtZW50c1swXS5lbGVtZW50c3x8YXJndW1lbnRzWzBdLmU6YXJndW1lbnRzWzBdKSxtPW8obSkpe3M/KGg9YXJndW1lbnRzWzBdLnByb3BlcnRpZXN8fGFyZ3VtZW50c1swXS5wLGI9YXJndW1lbnRzWzBdLm9wdGlvbnN8fGFyZ3VtZW50c1swXS5vKTooaD1hcmd1bWVudHNbZF0sYj1hcmd1bWVudHNbZCsxXSk7dmFyIFA9bS5sZW5ndGgsdz0wO2lmKCEvXihzdG9wfGZpbmlzaCkkL2kudGVzdChoKSYmISQuaXNQbGFpbk9iamVjdChiKSl7dmFyIFY9ZCsxO2I9e307Zm9yKHZhciBDPVY7Qzxhcmd1bWVudHMubGVuZ3RoO0MrKylnLmlzQXJyYXkoYXJndW1lbnRzW0NdKXx8IS9eKGZhc3R8bm9ybWFsfHNsb3cpJC9pLnRlc3QoYXJndW1lbnRzW0NdKSYmIS9eXFxkLy50ZXN0KGFyZ3VtZW50c1tDXSk/Zy5pc1N0cmluZyhhcmd1bWVudHNbQ10pfHxnLmlzQXJyYXkoYXJndW1lbnRzW0NdKT9iLmVhc2luZz1hcmd1bWVudHNbQ106Zy5pc0Z1bmN0aW9uKGFyZ3VtZW50c1tDXSkmJihiLmNvbXBsZXRlPWFyZ3VtZW50c1tDXSk6Yi5kdXJhdGlvbj1hcmd1bWVudHNbQ119dmFyIFQ9e3Byb21pc2U6bnVsbCxyZXNvbHZlcjpudWxsLHJlamVjdGVyOm51bGx9O2wmJnYuUHJvbWlzZSYmKFQucHJvbWlzZT1uZXcgdi5Qcm9taXNlKGZ1bmN0aW9uKGUsdCl7VC5yZXNvbHZlcj1lLFQucmVqZWN0ZXI9dH0pKTt2YXIgaztzd2l0Y2goaCl7Y2FzZVwic2Nyb2xsXCI6az1cInNjcm9sbFwiO2JyZWFrO2Nhc2VcInJldmVyc2VcIjprPVwicmV2ZXJzZVwiO2JyZWFrO2Nhc2VcImZpbmlzaFwiOmNhc2VcInN0b3BcIjokLmVhY2gobSxmdW5jdGlvbihlLHQpe2kodCkmJmkodCkuZGVsYXlUaW1lciYmKGNsZWFyVGltZW91dChpKHQpLmRlbGF5VGltZXIuc2V0VGltZW91dCksaSh0KS5kZWxheVRpbWVyLm5leHQmJmkodCkuZGVsYXlUaW1lci5uZXh0KCksZGVsZXRlIGkodCkuZGVsYXlUaW1lcil9KTt2YXIgQT1bXTtyZXR1cm4gJC5lYWNoKHYuU3RhdGUuY2FsbHMsZnVuY3Rpb24oZSx0KXt0JiYkLmVhY2godFsxXSxmdW5jdGlvbihyLG4pe3ZhciBvPWI9PT1hP1wiXCI6YjtyZXR1cm4gbz09PSEwfHx0WzJdLnF1ZXVlPT09b3x8Yj09PWEmJnRbMl0ucXVldWU9PT0hMT92b2lkICQuZWFjaChtLGZ1bmN0aW9uKHIsYSl7YT09PW4mJigoYj09PSEwfHxnLmlzU3RyaW5nKGIpKSYmKCQuZWFjaCgkLnF1ZXVlKGEsZy5pc1N0cmluZyhiKT9iOlwiXCIpLGZ1bmN0aW9uKGUsdCl7Zy5pc0Z1bmN0aW9uKHQpJiZ0KG51bGwsITApfSksJC5xdWV1ZShhLGcuaXNTdHJpbmcoYik/YjpcIlwiLFtdKSksXCJzdG9wXCI9PT1oPyhpKGEpJiZpKGEpLnR3ZWVuc0NvbnRhaW5lciYmbyE9PSExJiYkLmVhY2goaShhKS50d2VlbnNDb250YWluZXIsZnVuY3Rpb24oZSx0KXt0LmVuZFZhbHVlPXQuY3VycmVudFZhbHVlXG59KSxBLnB1c2goZSkpOlwiZmluaXNoXCI9PT1oJiYodFsyXS5kdXJhdGlvbj0xKSl9KTohMH0pfSksXCJzdG9wXCI9PT1oJiYoJC5lYWNoKEEsZnVuY3Rpb24oZSx0KXtwKHQsITApfSksVC5wcm9taXNlJiZULnJlc29sdmVyKG0pKSxlKCk7ZGVmYXVsdDppZighJC5pc1BsYWluT2JqZWN0KGgpfHxnLmlzRW1wdHlPYmplY3QoaCkpe2lmKGcuaXNTdHJpbmcoaCkmJnYuUmVkaXJlY3RzW2hdKXt2YXIgRj0kLmV4dGVuZCh7fSxiKSxFPUYuZHVyYXRpb24saj1GLmRlbGF5fHwwO3JldHVybiBGLmJhY2t3YXJkcz09PSEwJiYobT0kLmV4dGVuZCghMCxbXSxtKS5yZXZlcnNlKCkpLCQuZWFjaChtLGZ1bmN0aW9uKGUsdCl7cGFyc2VGbG9hdChGLnN0YWdnZXIpP0YuZGVsYXk9aitwYXJzZUZsb2F0KEYuc3RhZ2dlcikqZTpnLmlzRnVuY3Rpb24oRi5zdGFnZ2VyKSYmKEYuZGVsYXk9aitGLnN0YWdnZXIuY2FsbCh0LGUsUCkpLEYuZHJhZyYmKEYuZHVyYXRpb249cGFyc2VGbG9hdChFKXx8KC9eKGNhbGxvdXR8dHJhbnNpdGlvbikvLnRlc3QoaCk/MWUzOnkpLEYuZHVyYXRpb249TWF0aC5tYXgoRi5kdXJhdGlvbiooRi5iYWNrd2FyZHM/MS1lL1A6KGUrMSkvUCksLjc1KkYuZHVyYXRpb24sMjAwKSksdi5SZWRpcmVjdHNbaF0uY2FsbCh0LHQsRnx8e30sZSxQLG0sVC5wcm9taXNlP1Q6YSl9KSxlKCl9dmFyIEg9XCJWZWxvY2l0eTogRmlyc3QgYXJndW1lbnQgKFwiK2grXCIpIHdhcyBub3QgYSBwcm9wZXJ0eSBtYXAsIGEga25vd24gYWN0aW9uLCBvciBhIHJlZ2lzdGVyZWQgcmVkaXJlY3QuIEFib3J0aW5nLlwiO3JldHVybiBULnByb21pc2U/VC5yZWplY3RlcihuZXcgRXJyb3IoSCkpOmNvbnNvbGUubG9nKEgpLGUoKX1rPVwic3RhcnRcIn12YXIgTj17bGFzdFBhcmVudDpudWxsLGxhc3RQb3NpdGlvbjpudWxsLGxhc3RGb250U2l6ZTpudWxsLGxhc3RQZXJjZW50VG9QeFdpZHRoOm51bGwsbGFzdFBlcmNlbnRUb1B4SGVpZ2h0Om51bGwsbGFzdEVtVG9QeDpudWxsLHJlbVRvUHg6bnVsbCx2d1RvUHg6bnVsbCx2aFRvUHg6bnVsbH0sTD1bXTskLmVhY2gobSxmdW5jdGlvbihlLHQpe2cuaXNOb2RlKHQpJiZuLmNhbGwodCl9KTt2YXIgRj0kLmV4dGVuZCh7fSx2LmRlZmF1bHRzLGIpLFI7aWYoRi5sb29wPXBhcnNlSW50KEYubG9vcCksUj0yKkYubG9vcC0xLEYubG9vcClmb3IodmFyIE89MDtSPk87TysrKXt2YXIgej17ZGVsYXk6Ri5kZWxheSxwcm9ncmVzczpGLnByb2dyZXNzfTtPPT09Ui0xJiYoei5kaXNwbGF5PUYuZGlzcGxheSx6LnZpc2liaWxpdHk9Ri52aXNpYmlsaXR5LHouY29tcGxldGU9Ri5jb21wbGV0ZSksUyhtLFwicmV2ZXJzZVwiLHopfXJldHVybiBlKCl9fTt2PSQuZXh0ZW5kKFMsdiksdi5hbmltYXRlPVM7dmFyIFA9dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGQ7cmV0dXJuIHYuU3RhdGUuaXNNb2JpbGV8fHIuaGlkZGVuPT09YXx8ci5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGZ1bmN0aW9uKCl7ci5oaWRkZW4/KFA9ZnVuY3Rpb24oZSl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKCEwKX0sMTYpfSxjKCkpOlA9dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGR9KSxlLlZlbG9jaXR5PXYsZSE9PXQmJihlLmZuLnZlbG9jaXR5PVMsZS5mbi52ZWxvY2l0eS5kZWZhdWx0cz12LmRlZmF1bHRzKSwkLmVhY2goW1wiRG93blwiLFwiVXBcIl0sZnVuY3Rpb24oZSx0KXt2LlJlZGlyZWN0c1tcInNsaWRlXCIrdF09ZnVuY3Rpb24oZSxyLG4sbyxpLHMpe3ZhciBsPSQuZXh0ZW5kKHt9LHIpLHU9bC5iZWdpbixjPWwuY29tcGxldGUscD17aGVpZ2h0OlwiXCIsbWFyZ2luVG9wOlwiXCIsbWFyZ2luQm90dG9tOlwiXCIscGFkZGluZ1RvcDpcIlwiLHBhZGRpbmdCb3R0b206XCJcIn0sZj17fTtsLmRpc3BsYXk9PT1hJiYobC5kaXNwbGF5PVwiRG93blwiPT09dD9cImlubGluZVwiPT09di5DU1MuVmFsdWVzLmdldERpc3BsYXlUeXBlKGUpP1wiaW5saW5lLWJsb2NrXCI6XCJibG9ja1wiOlwibm9uZVwiKSxsLmJlZ2luPWZ1bmN0aW9uKCl7dSYmdS5jYWxsKGksaSk7Zm9yKHZhciByIGluIHApe2Zbcl09ZS5zdHlsZVtyXTt2YXIgYT12LkNTUy5nZXRQcm9wZXJ0eVZhbHVlKGUscik7cFtyXT1cIkRvd25cIj09PXQ/W2EsMF06WzAsYV19Zi5vdmVyZmxvdz1lLnN0eWxlLm92ZXJmbG93LGUuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIn0sbC5jb21wbGV0ZT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiBmKWUuc3R5bGVbdF09Zlt0XTtjJiZjLmNhbGwoaSxpKSxzJiZzLnJlc29sdmVyKGkpfSx2KGUscCxsKX19KSwkLmVhY2goW1wiSW5cIixcIk91dFwiXSxmdW5jdGlvbihlLHQpe3YuUmVkaXJlY3RzW1wiZmFkZVwiK3RdPWZ1bmN0aW9uKGUscixuLG8saSxzKXt2YXIgbD0kLmV4dGVuZCh7fSxyKSx1PXtvcGFjaXR5OlwiSW5cIj09PXQ/MTowfSxjPWwuY29tcGxldGU7bC5jb21wbGV0ZT1uIT09by0xP2wuYmVnaW49bnVsbDpmdW5jdGlvbigpe2MmJmMuY2FsbChpLGkpLHMmJnMucmVzb2x2ZXIoaSl9LGwuZGlzcGxheT09PWEmJihsLmRpc3BsYXk9XCJJblwiPT09dD9cImF1dG9cIjpcIm5vbmVcIiksdih0aGlzLHUsbCl9fSksdn0od2luZG93LmpRdWVyeXx8d2luZG93LlplcHRvfHx3aW5kb3csd2luZG93LGRvY3VtZW50KX0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYm93ZXJfY29tcG9uZW50cy92ZWxvY2l0eS92ZWxvY2l0eS5taW4uanNcbiAqKi8iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNi4yXG4vKiogZWNobyAgKiBAbGljZW5zZSBlY2hvICAqIHdoaWxlIHJlYWQgaSBkbyBlY2hvICAqICBkb25lIGVjaG9cbiovXG5cblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgQ29sb3IsIEssIFBJVEhJUkQsIFRXT1BJLCBYLCBZLCBaLCBiZXppZXIsIGJyZXdlciwgY2hyb21hLCBjbGlwX3JnYiwgY29sb3JzLCBjb3MsIGNzczJyZ2IsIGhleDJyZ2IsIGhzaTJyZ2IsIGhzbDJyZ2IsIGhzdjJyZ2IsIGxhYjJsY2gsIGxhYjJyZ2IsIGxhYl94eXosIGxjaDJsYWIsIGxjaDJyZ2IsIGxpbWl0LCBsdW1pbmFuY2UsIGx1bWluYW5jZV94LCByZ2IyaGV4LCByZ2IyaHNpLCByZ2IyaHNsLCByZ2IyaHN2LCByZ2IybGFiLCByZ2IybGNoLCByZ2JfeHl6LCByb290LCB0eXBlLCB1bnBhY2ssIHh5el9sYWIsIHh5el9yZ2IsIF9yZWY7XG5cbiAgY2hyb21hID0gZnVuY3Rpb24oeCwgeSwgeiwgbSkge1xuICAgIHJldHVybiBuZXcgQ29sb3IoeCwgeSwgeiwgbSk7XG4gIH07XG5cbiAgaWYgKCh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZSAhPT0gbnVsbCkgJiYgKG1vZHVsZS5leHBvcnRzICE9IG51bGwpKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBjaHJvbWE7XG4gIH1cblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjaHJvbWE7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdCA9IHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiICYmIGV4cG9ydHMgIT09IG51bGwgPyBleHBvcnRzIDogdGhpcztcbiAgICByb290LmNocm9tYSA9IGNocm9tYTtcbiAgfVxuXG4gIGNocm9tYS5jb2xvciA9IGZ1bmN0aW9uKHgsIHksIHosIG0pIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHgsIHksIHosIG0pO1xuICB9O1xuXG4gIGNocm9tYS5oc2wgPSBmdW5jdGlvbihoLCBzLCBsLCBhKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcihoLCBzLCBsLCBhLCAnaHNsJyk7XG4gIH07XG5cbiAgY2hyb21hLmhzdiA9IGZ1bmN0aW9uKGgsIHMsIHYsIGEpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKGgsIHMsIHYsIGEsICdoc3YnKTtcbiAgfTtcblxuICBjaHJvbWEucmdiID0gZnVuY3Rpb24ociwgZywgYiwgYSkge1xuICAgIHJldHVybiBuZXcgQ29sb3IociwgZywgYiwgYSwgJ3JnYicpO1xuICB9O1xuXG4gIGNocm9tYS5oZXggPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcih4KTtcbiAgfTtcblxuICBjaHJvbWEuY3NzID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBuZXcgQ29sb3IoeCk7XG4gIH07XG5cbiAgY2hyb21hLmxhYiA9IGZ1bmN0aW9uKGwsIGEsIGIpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKGwsIGEsIGIsICdsYWInKTtcbiAgfTtcblxuICBjaHJvbWEubGNoID0gZnVuY3Rpb24obCwgYywgaCkge1xuICAgIHJldHVybiBuZXcgQ29sb3IobCwgYywgaCwgJ2xjaCcpO1xuICB9O1xuXG4gIGNocm9tYS5oc2kgPSBmdW5jdGlvbihoLCBzLCBpKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcihoLCBzLCBpLCAnaHNpJyk7XG4gIH07XG5cbiAgY2hyb21hLmdsID0gZnVuY3Rpb24ociwgZywgYiwgYSkge1xuICAgIHJldHVybiBuZXcgQ29sb3IociAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NSwgYSwgJ2dsJyk7XG4gIH07XG5cbiAgY2hyb21hLmludGVycG9sYXRlID0gZnVuY3Rpb24oYSwgYiwgZiwgbSkge1xuICAgIGlmICgoYSA9PSBudWxsKSB8fCAoYiA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuICcjMDAwJztcbiAgICB9XG4gICAgaWYgKHR5cGUoYSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhID0gbmV3IENvbG9yKGEpO1xuICAgIH1cbiAgICBpZiAodHlwZShiKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGIgPSBuZXcgQ29sb3IoYik7XG4gICAgfVxuICAgIHJldHVybiBhLmludGVycG9sYXRlKGYsIGIsIG0pO1xuICB9O1xuXG4gIGNocm9tYS5taXggPSBjaHJvbWEuaW50ZXJwb2xhdGU7XG5cbiAgY2hyb21hLmNvbnRyYXN0ID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBsMSwgbDI7XG5cbiAgICBpZiAodHlwZShhKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGEgPSBuZXcgQ29sb3IoYSk7XG4gICAgfVxuICAgIGlmICh0eXBlKGIpID09PSAnc3RyaW5nJykge1xuICAgICAgYiA9IG5ldyBDb2xvcihiKTtcbiAgICB9XG4gICAgbDEgPSBhLmx1bWluYW5jZSgpO1xuICAgIGwyID0gYi5sdW1pbmFuY2UoKTtcbiAgICBpZiAobDEgPiBsMikge1xuICAgICAgcmV0dXJuIChsMSArIDAuMDUpIC8gKGwyICsgMC4wNSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAobDIgKyAwLjA1KSAvIChsMSArIDAuMDUpO1xuICAgIH1cbiAgfTtcblxuICBjaHJvbWEubHVtaW5hbmNlID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgICByZXR1cm4gY2hyb21hKGNvbG9yKS5sdW1pbmFuY2UoKTtcbiAgfTtcblxuICBjaHJvbWEuX0NvbG9yID0gQ29sb3I7XG5cbiAgLyoqXG4gICAgICBjaHJvbWEuanNcbiAgXG4gICAgICBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMywgR3JlZ29yIEFpc2NoXG4gICAgICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICBcbiAgICAgIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICAgICAgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gIFxuICAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAgICAgICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gIFxuICAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gICAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cbiAgICAgICAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gIFxuICAgICAgKiBUaGUgbmFtZSBHcmVnb3IgQWlzY2ggbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICAgICAgICBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAgXG4gICAgICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuICAgICAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICAgICAgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gICAgICBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBHUkVHT1IgQUlTQ0ggT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCxcbiAgICAgIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLFxuICAgICAgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbiAgICAgIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUllcbiAgICAgIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gICAgICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXG4gICAgICBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICBcbiAgICAgIEBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9na2EvY2hyb21hLmpzXG4gICovXG5cblxuICBDb2xvciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBDb2xvcigpIHtcbiAgICAgIHZhciBhLCBhcmcsIGFyZ3MsIG0sIG1lLCBtZV9yZ2IsIHgsIHksIHosIF9pLCBfbGVuLCBfcmVmLCBfcmVmMSwgX3JlZjIsIF9yZWYzO1xuXG4gICAgICBtZSA9IHRoaXM7XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBhcmcgPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICBpZiAoYXJnICE9IG51bGwpIHtcbiAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIF9yZWYgPSBbMjU1LCAwLCAyNTUsIDEsICdyZ2InXSwgeCA9IF9yZWZbMF0sIHkgPSBfcmVmWzFdLCB6ID0gX3JlZlsyXSwgYSA9IF9yZWZbM10sIG0gPSBfcmVmWzRdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlKGFyZ3NbMF0pID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgaWYgKGFyZ3NbMF0ubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgX3JlZjEgPSBhcmdzWzBdLCB4ID0gX3JlZjFbMF0sIHkgPSBfcmVmMVsxXSwgeiA9IF9yZWYxWzJdO1xuICAgICAgICAgIGEgPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMF0ubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgX3JlZjIgPSBhcmdzWzBdLCB4ID0gX3JlZjJbMF0sIHkgPSBfcmVmMlsxXSwgeiA9IF9yZWYyWzJdLCBhID0gX3JlZjJbM107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgJ3Vua25vd24gaW5wdXQgYXJndW1lbnQnO1xuICAgICAgICB9XG4gICAgICAgIG0gPSBhcmdzWzFdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlKGFyZ3NbMF0pID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHggPSBhcmdzWzBdO1xuICAgICAgICBtID0gJ2hleCc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUoYXJnc1swXSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgX3JlZjMgPSBhcmdzWzBdLl9yZ2IsIHggPSBfcmVmM1swXSwgeSA9IF9yZWYzWzFdLCB6ID0gX3JlZjNbMl0sIGEgPSBfcmVmM1szXTtcbiAgICAgICAgbSA9ICdyZ2InO1xuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIHggPSBhcmdzWzBdO1xuICAgICAgICB5ID0gYXJnc1sxXTtcbiAgICAgICAgeiA9IGFyZ3NbMl07XG4gICAgICB9XG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgbSA9ICdyZ2InO1xuICAgICAgICBhID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgaWYgKHR5cGUoYXJnc1szXSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBtID0gYXJnc1szXTtcbiAgICAgICAgICBhID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlKGFyZ3NbM10pID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgbSA9ICdyZ2InO1xuICAgICAgICAgIGEgPSBhcmdzWzNdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSA1KSB7XG4gICAgICAgIGEgPSBhcmdzWzNdO1xuICAgICAgICBtID0gYXJnc1s0XTtcbiAgICAgIH1cbiAgICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgICAgYSA9IDE7XG4gICAgICB9XG4gICAgICBpZiAobSA9PT0gJ3JnYicpIHtcbiAgICAgICAgbWUuX3JnYiA9IFt4LCB5LCB6LCBhXTtcbiAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2dsJykge1xuICAgICAgICBtZS5fcmdiID0gW3ggKiAyNTUsIHkgKiAyNTUsIHogKiAyNTUsIGFdO1xuICAgICAgfSBlbHNlIGlmIChtID09PSAnaHNsJykge1xuICAgICAgICBtZS5fcmdiID0gaHNsMnJnYih4LCB5LCB6KTtcbiAgICAgICAgbWUuX3JnYlszXSA9IGE7XG4gICAgICB9IGVsc2UgaWYgKG0gPT09ICdoc3YnKSB7XG4gICAgICAgIG1lLl9yZ2IgPSBoc3YycmdiKHgsIHksIHopO1xuICAgICAgICBtZS5fcmdiWzNdID0gYTtcbiAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2hleCcpIHtcbiAgICAgICAgbWUuX3JnYiA9IGhleDJyZ2IoeCk7XG4gICAgICB9IGVsc2UgaWYgKG0gPT09ICdsYWInKSB7XG4gICAgICAgIG1lLl9yZ2IgPSBsYWIycmdiKHgsIHksIHopO1xuICAgICAgICBtZS5fcmdiWzNdID0gYTtcbiAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2xjaCcpIHtcbiAgICAgICAgbWUuX3JnYiA9IGxjaDJyZ2IoeCwgeSwgeik7XG4gICAgICAgIG1lLl9yZ2JbM10gPSBhO1xuICAgICAgfSBlbHNlIGlmIChtID09PSAnaHNpJykge1xuICAgICAgICBtZS5fcmdiID0gaHNpMnJnYih4LCB5LCB6KTtcbiAgICAgICAgbWUuX3JnYlszXSA9IGE7XG4gICAgICB9XG4gICAgICBtZV9yZ2IgPSBjbGlwX3JnYihtZS5fcmdiKTtcbiAgICB9XG5cbiAgICBDb2xvci5wcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmdiLnNsaWNlKDAsIDMpO1xuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUucmdiYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JnYjtcbiAgICB9O1xuXG4gICAgQ29sb3IucHJvdG90eXBlLmhleCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJnYjJoZXgodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgQ29sb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5uYW1lKCk7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5oc2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZ2IyaHNsKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5oc3YgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZ2IyaHN2KHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5sYWIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZ2IybGFiKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5sY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZ2IybGNoKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5oc2kgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZ2IyaHNpKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5nbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFt0aGlzLl9yZ2JbMF0gLyAyNTUsIHRoaXMuX3JnYlsxXSAvIDI1NSwgdGhpcy5fcmdiWzJdIC8gMjU1LCB0aGlzLl9yZ2JbM11dO1xuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUubHVtaW5hbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbHVtaW5hbmNlKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5uYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaCwgaztcblxuICAgICAgaCA9IHRoaXMuaGV4KCk7XG4gICAgICBmb3IgKGsgaW4gY2hyb21hLmNvbG9ycykge1xuICAgICAgICBpZiAoaCA9PT0gY2hyb21hLmNvbG9yc1trXSkge1xuICAgICAgICAgIHJldHVybiBrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaDtcbiAgICB9O1xuXG4gICAgQ29sb3IucHJvdG90eXBlLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3JnYlszXSA9IGFscGhhO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9yZ2JbM107XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5jc3MgPSBmdW5jdGlvbihtb2RlKSB7XG4gICAgICB2YXIgaHNsLCBtZSwgcmdiLCBybmQ7XG5cbiAgICAgIGlmIChtb2RlID09IG51bGwpIHtcbiAgICAgICAgbW9kZSA9ICdyZ2InO1xuICAgICAgfVxuICAgICAgbWUgPSB0aGlzO1xuICAgICAgcmdiID0gbWUuX3JnYjtcbiAgICAgIGlmIChtb2RlLmxlbmd0aCA9PT0gMyAmJiByZ2JbM10gPCAxKSB7XG4gICAgICAgIG1vZGUgKz0gJ2EnO1xuICAgICAgfVxuICAgICAgaWYgKG1vZGUgPT09ICdyZ2InKSB7XG4gICAgICAgIHJldHVybiBtb2RlICsgJygnICsgcmdiLnNsaWNlKDAsIDMpLmpvaW4oJywnKSArICcpJztcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ3JnYmEnKSB7XG4gICAgICAgIHJldHVybiBtb2RlICsgJygnICsgcmdiLmpvaW4oJywnKSArICcpJztcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2hzbCcgfHwgbW9kZSA9PT0gJ2hzbGEnKSB7XG4gICAgICAgIGhzbCA9IG1lLmhzbCgpO1xuICAgICAgICBybmQgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYSAqIDEwMCkgLyAxMDA7XG4gICAgICAgIH07XG4gICAgICAgIGhzbFswXSA9IHJuZChoc2xbMF0pO1xuICAgICAgICBoc2xbMV0gPSBybmQoaHNsWzFdICogMTAwKSArICclJztcbiAgICAgICAgaHNsWzJdID0gcm5kKGhzbFsyXSAqIDEwMCkgKyAnJSc7XG4gICAgICAgIGlmIChtb2RlLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgIGhzbFszXSA9IHJnYlszXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kZSArICcoJyArIGhzbC5qb2luKCcsJykgKyAnKSc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKGYsIGNvbCwgbSkge1xuICAgICAgLypcbiAgICAgIGludGVycG9sYXRlcyBiZXR3ZWVuIGNvbG9yc1xuICAgICAgZiA9IDAgLS0+IG1lXG4gICAgICBmID0gMSAtLT4gY29sXG4gICAgICAqL1xuXG4gICAgICB2YXIgZGgsIGh1ZSwgaHVlMCwgaHVlMSwgbGJ2LCBsYnYwLCBsYnYxLCBtZSwgcmVzLCBzYXQsIHNhdDAsIHNhdDEsIHh5ejAsIHh5ejE7XG5cbiAgICAgIG1lID0gdGhpcztcbiAgICAgIGlmIChtID09IG51bGwpIHtcbiAgICAgICAgbSA9ICdyZ2InO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUoY29sKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb2wgPSBuZXcgQ29sb3IoY29sKTtcbiAgICAgIH1cbiAgICAgIGlmIChtID09PSAnaHNsJyB8fCBtID09PSAnaHN2JyB8fCBtID09PSAnbGNoJyB8fCBtID09PSAnaHNpJykge1xuICAgICAgICBpZiAobSA9PT0gJ2hzbCcpIHtcbiAgICAgICAgICB4eXowID0gbWUuaHNsKCk7XG4gICAgICAgICAgeHl6MSA9IGNvbC5oc2woKTtcbiAgICAgICAgfSBlbHNlIGlmIChtID09PSAnaHN2Jykge1xuICAgICAgICAgIHh5ejAgPSBtZS5oc3YoKTtcbiAgICAgICAgICB4eXoxID0gY29sLmhzdigpO1xuICAgICAgICB9IGVsc2UgaWYgKG0gPT09ICdoc2knKSB7XG4gICAgICAgICAgeHl6MCA9IG1lLmhzaSgpO1xuICAgICAgICAgIHh5ejEgPSBjb2wuaHNpKCk7XG4gICAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2xjaCcpIHtcbiAgICAgICAgICB4eXowID0gbWUubGNoKCk7XG4gICAgICAgICAgeHl6MSA9IGNvbC5sY2goKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobS5zdWJzdHIoMCwgMSkgPT09ICdoJykge1xuICAgICAgICAgIGh1ZTAgPSB4eXowWzBdLCBzYXQwID0geHl6MFsxXSwgbGJ2MCA9IHh5ejBbMl07XG4gICAgICAgICAgaHVlMSA9IHh5ejFbMF0sIHNhdDEgPSB4eXoxWzFdLCBsYnYxID0geHl6MVsyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYnYwID0geHl6MFswXSwgc2F0MCA9IHh5ejBbMV0sIGh1ZTAgPSB4eXowWzJdO1xuICAgICAgICAgIGxidjEgPSB4eXoxWzBdLCBzYXQxID0geHl6MVsxXSwgaHVlMSA9IHh5ejFbMl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihodWUwKSAmJiAhaXNOYU4oaHVlMSkpIHtcbiAgICAgICAgICBpZiAoaHVlMSA+IGh1ZTAgJiYgaHVlMSAtIGh1ZTAgPiAxODApIHtcbiAgICAgICAgICAgIGRoID0gaHVlMSAtIChodWUwICsgMzYwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGh1ZTEgPCBodWUwICYmIGh1ZTAgLSBodWUxID4gMTgwKSB7XG4gICAgICAgICAgICBkaCA9IGh1ZTEgKyAzNjAgLSBodWUwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaCA9IGh1ZTEgLSBodWUwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBodWUgPSBodWUwICsgZiAqIGRoO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc05hTihodWUwKSkge1xuICAgICAgICAgIGh1ZSA9IGh1ZTA7XG4gICAgICAgICAgaWYgKChsYnYxID09PSAxIHx8IGxidjEgPT09IDApICYmIG0gIT09ICdoc3YnKSB7XG4gICAgICAgICAgICBzYXQgPSBzYXQwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNOYU4oaHVlMSkpIHtcbiAgICAgICAgICBodWUgPSBodWUxO1xuICAgICAgICAgIGlmICgobGJ2MCA9PT0gMSB8fCBsYnYwID09PSAwKSAmJiBtICE9PSAnaHN2Jykge1xuICAgICAgICAgICAgc2F0ID0gc2F0MTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaHVlID0gTnVtYmVyLk5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2F0ID09IG51bGwpIHtcbiAgICAgICAgICBzYXQgPSBzYXQwICsgZiAqIChzYXQxIC0gc2F0MCk7XG4gICAgICAgIH1cbiAgICAgICAgbGJ2ID0gbGJ2MCArIGYgKiAobGJ2MSAtIGxidjApO1xuICAgICAgICBpZiAobS5zdWJzdHIoMCwgMSkgPT09ICdoJykge1xuICAgICAgICAgIHJlcyA9IG5ldyBDb2xvcihodWUsIHNhdCwgbGJ2LCBtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBuZXcgQ29sb3IobGJ2LCBzYXQsIGh1ZSwgbSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ3JnYicpIHtcbiAgICAgICAgeHl6MCA9IG1lLl9yZ2I7XG4gICAgICAgIHh5ejEgPSBjb2wuX3JnYjtcbiAgICAgICAgcmVzID0gbmV3IENvbG9yKHh5ejBbMF0gKyBmICogKHh5ejFbMF0gLSB4eXowWzBdKSwgeHl6MFsxXSArIGYgKiAoeHl6MVsxXSAtIHh5ejBbMV0pLCB4eXowWzJdICsgZiAqICh4eXoxWzJdIC0geHl6MFsyXSksIG0pO1xuICAgICAgfSBlbHNlIGlmIChtID09PSAnbGFiJykge1xuICAgICAgICB4eXowID0gbWUubGFiKCk7XG4gICAgICAgIHh5ejEgPSBjb2wubGFiKCk7XG4gICAgICAgIHJlcyA9IG5ldyBDb2xvcih4eXowWzBdICsgZiAqICh4eXoxWzBdIC0geHl6MFswXSksIHh5ejBbMV0gKyBmICogKHh5ejFbMV0gLSB4eXowWzFdKSwgeHl6MFsyXSArIGYgKiAoeHl6MVsyXSAtIHh5ejBbMl0pLCBtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFwiY29sb3IgbW9kZSBcIiArIG0gKyBcIiBpcyBub3Qgc3VwcG9ydGVkXCI7XG4gICAgICB9XG4gICAgICByZXMuYWxwaGEobWUuYWxwaGEoKSArIGYgKiAoY29sLmFscGhhKCkgLSBtZS5hbHBoYSgpKSk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUucHJlbXVsdGlwbHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhLCByZ2I7XG5cbiAgICAgIHJnYiA9IHRoaXMucmdiKCk7XG4gICAgICBhID0gdGhpcy5hbHBoYSgpO1xuICAgICAgcmV0dXJuIGNocm9tYShyZ2JbMF0gKiBhLCByZ2JbMV0gKiBhLCByZ2JbMl0gKiBhLCBhKTtcbiAgICB9O1xuXG4gICAgQ29sb3IucHJvdG90eXBlLmRhcmtlbiA9IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgdmFyIGxjaCwgbWU7XG5cbiAgICAgIGlmIChhbW91bnQgPT0gbnVsbCkge1xuICAgICAgICBhbW91bnQgPSAyMDtcbiAgICAgIH1cbiAgICAgIG1lID0gdGhpcztcbiAgICAgIGxjaCA9IG1lLmxjaCgpO1xuICAgICAgbGNoWzBdIC09IGFtb3VudDtcbiAgICAgIHJldHVybiBjaHJvbWEubGNoKGxjaCkuYWxwaGEobWUuYWxwaGEoKSk7XG4gICAgfTtcblxuICAgIENvbG9yLnByb3RvdHlwZS5kYXJrZXIgPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhcmtlbihhbW91bnQpO1xuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUuYnJpZ2h0ZW4gPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIGlmIChhbW91bnQgPT0gbnVsbCkge1xuICAgICAgICBhbW91bnQgPSAyMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmRhcmtlbigtYW1vdW50KTtcbiAgICB9O1xuXG4gICAgQ29sb3IucHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5icmlnaHRlbihhbW91bnQpO1xuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUuc2F0dXJhdGUgPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHZhciBsY2gsIG1lO1xuXG4gICAgICBpZiAoYW1vdW50ID09IG51bGwpIHtcbiAgICAgICAgYW1vdW50ID0gMjA7XG4gICAgICB9XG4gICAgICBtZSA9IHRoaXM7XG4gICAgICBsY2ggPSBtZS5sY2goKTtcbiAgICAgIGxjaFsxXSArPSBhbW91bnQ7XG4gICAgICByZXR1cm4gY2hyb21hLmxjaChsY2gpLmFscGhhKG1lLmFscGhhKCkpO1xuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUuZGVzYXR1cmF0ZSA9IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgaWYgKGFtb3VudCA9PSBudWxsKSB7XG4gICAgICAgIGFtb3VudCA9IDIwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc2F0dXJhdGUoLWFtb3VudCk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb2xvcjtcblxuICB9KSgpO1xuXG4gIGNsaXBfcmdiID0gZnVuY3Rpb24ocmdiKSB7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgaW4gcmdiKSB7XG4gICAgICBpZiAoaSA8IDMpIHtcbiAgICAgICAgaWYgKHJnYltpXSA8IDApIHtcbiAgICAgICAgICByZ2JbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZ2JbaV0gPiAyNTUpIHtcbiAgICAgICAgICByZ2JbaV0gPSAyNTU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMykge1xuICAgICAgICBpZiAocmdiW2ldIDwgMCkge1xuICAgICAgICAgIHJnYltpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJnYltpXSA+IDEpIHtcbiAgICAgICAgICByZ2JbaV0gPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZ2I7XG4gIH07XG5cbiAgY3NzMnJnYiA9IGZ1bmN0aW9uKGNzcykge1xuICAgIHZhciBoc2wsIGksIG0sIHJnYiwgX2ksIF9qLCBfaywgX2w7XG5cbiAgICBjc3MgPSBjc3MudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoKGNocm9tYS5jb2xvcnMgIT0gbnVsbCkgJiYgY2hyb21hLmNvbG9yc1tjc3NdKSB7XG4gICAgICByZXR1cm4gaGV4MnJnYihjaHJvbWEuY29sb3JzW2Nzc10pO1xuICAgIH1cbiAgICBpZiAobSA9IGNzcy5tYXRjaCgvcmdiXFwoXFxzKihcXC0/XFxkKyksXFxzKihcXC0/XFxkKylcXHMqLFxccyooXFwtP1xcZCspXFxzKlxcKS8pKSB7XG4gICAgICByZ2IgPSBtLnNsaWNlKDEsIDQpO1xuICAgICAgZm9yIChpID0gX2kgPSAwOyBfaSA8PSAyOyBpID0gKytfaSkge1xuICAgICAgICByZ2JbaV0gPSArcmdiW2ldO1xuICAgICAgfVxuICAgICAgcmdiWzNdID0gMTtcbiAgICB9IGVsc2UgaWYgKG0gPSBjc3MubWF0Y2goL3JnYmFcXChcXHMqKFxcLT9cXGQrKSxcXHMqKFxcLT9cXGQrKVxccyosXFxzKihcXC0/XFxkKylcXHMqLFxccyooWzAxXXxbMDFdP1xcLlxcZCspXFwpLykpIHtcbiAgICAgIHJnYiA9IG0uc2xpY2UoMSwgNSk7XG4gICAgICBmb3IgKGkgPSBfaiA9IDA7IF9qIDw9IDM7IGkgPSArK19qKSB7XG4gICAgICAgIHJnYltpXSA9ICtyZ2JbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtID0gY3NzLm1hdGNoKC9yZ2JcXChcXHMqKFxcLT9cXGQrKD86XFwuXFxkKyk/KSUsXFxzKihcXC0/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFxcLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqXFwpLykpIHtcbiAgICAgIHJnYiA9IG0uc2xpY2UoMSwgNCk7XG4gICAgICBmb3IgKGkgPSBfayA9IDA7IF9rIDw9IDI7IGkgPSArK19rKSB7XG4gICAgICAgIHJnYltpXSA9IE1hdGgucm91bmQocmdiW2ldICogMi41NSk7XG4gICAgICB9XG4gICAgICByZ2JbM10gPSAxO1xuICAgIH0gZWxzZSBpZiAobSA9IGNzcy5tYXRjaCgvcmdiYVxcKFxccyooXFwtP1xcZCsoPzpcXC5cXGQrKT8pJSxcXHMqKFxcLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooXFwtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbMDFdfFswMV0/XFwuXFxkKylcXCkvKSkge1xuICAgICAgcmdiID0gbS5zbGljZSgxLCA1KTtcbiAgICAgIGZvciAoaSA9IF9sID0gMDsgX2wgPD0gMjsgaSA9ICsrX2wpIHtcbiAgICAgICAgcmdiW2ldID0gTWF0aC5yb3VuZChyZ2JbaV0gKiAyLjU1KTtcbiAgICAgIH1cbiAgICAgIHJnYlszXSA9ICtyZ2JbM107XG4gICAgfSBlbHNlIGlmIChtID0gY3NzLm1hdGNoKC9oc2xcXChcXHMqKFxcLT9cXGQrKD86XFwuXFxkKyk/KSxcXHMqKFxcLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooXFwtP1xcZCsoPzpcXC5cXGQrKT8pJVxccypcXCkvKSkge1xuICAgICAgaHNsID0gbS5zbGljZSgxLCA0KTtcbiAgICAgIGhzbFsxXSAqPSAwLjAxO1xuICAgICAgaHNsWzJdICo9IDAuMDE7XG4gICAgICByZ2IgPSBoc2wycmdiKGhzbCk7XG4gICAgICByZ2JbM10gPSAxO1xuICAgIH0gZWxzZSBpZiAobSA9IGNzcy5tYXRjaCgvaHNsYVxcKFxccyooXFwtP1xcZCsoPzpcXC5cXGQrKT8pLFxccyooXFwtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihcXC0/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFswMV18WzAxXT9cXC5cXGQrKVxcKS8pKSB7XG4gICAgICBoc2wgPSBtLnNsaWNlKDEsIDQpO1xuICAgICAgaHNsWzFdICo9IDAuMDE7XG4gICAgICBoc2xbMl0gKj0gMC4wMTtcbiAgICAgIHJnYiA9IGhzbDJyZ2IoaHNsKTtcbiAgICAgIHJnYlszXSA9ICttWzRdO1xuICAgIH1cbiAgICByZXR1cm4gcmdiO1xuICB9O1xuXG4gIGhleDJyZ2IgPSBmdW5jdGlvbihoZXgpIHtcbiAgICB2YXIgYSwgYiwgZywgciwgcmdiLCB1O1xuXG4gICAgaWYgKGhleC5tYXRjaCgvXiM/KFtBLUZhLWYwLTldezZ9fFtBLUZhLWYwLTldezN9KSQvKSkge1xuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDQgfHwgaGV4Lmxlbmd0aCA9PT0gNykge1xuICAgICAgICBoZXggPSBoZXguc3Vic3RyKDEpO1xuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgaGV4ID0gaGV4LnNwbGl0KFwiXCIpO1xuICAgICAgICBoZXggPSBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl07XG4gICAgICB9XG4gICAgICB1ID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgICByID0gdSA+PiAxNjtcbiAgICAgIGcgPSB1ID4+IDggJiAweEZGO1xuICAgICAgYiA9IHUgJiAweEZGO1xuICAgICAgcmV0dXJuIFtyLCBnLCBiLCAxXTtcbiAgICB9XG4gICAgaWYgKGhleC5tYXRjaCgvXiM/KFtBLUZhLWYwLTldezh9KSQvKSkge1xuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgaGV4ID0gaGV4LnN1YnN0cigxKTtcbiAgICAgIH1cbiAgICAgIHUgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgIHIgPSB1ID4+IDI0ICYgMHhGRjtcbiAgICAgIGcgPSB1ID4+IDE2ICYgMHhGRjtcbiAgICAgIGIgPSB1ID4+IDggJiAweEZGO1xuICAgICAgYSA9IHUgJiAweEZGO1xuICAgICAgcmV0dXJuIFtyLCBnLCBiLCBhXTtcbiAgICB9XG4gICAgaWYgKHJnYiA9IGNzczJyZ2IoaGV4KSkge1xuICAgICAgcmV0dXJuIHJnYjtcbiAgICB9XG4gICAgdGhyb3cgXCJ1bmtub3duIGNvbG9yOiBcIiArIGhleDtcbiAgfTtcblxuICBoc2kycmdiID0gZnVuY3Rpb24oaCwgcywgaSkge1xuICAgIC8qXG4gICAgYm9ycm93ZWQgZnJvbSBoZXJlOlxuICAgIGh0dHA6Ly9odW1tZXIuc3RhbmZvcmQuZWR1L211c2VpbmZvL2RvYy9leGFtcGxlcy9odW1kcnVtL2tleXNjYXBlMi9oc2kycmdiLmNwcFxuICAgICovXG5cbiAgICB2YXIgYiwgZywgciwgX3JlZjtcblxuICAgIF9yZWYgPSB1bnBhY2soYXJndW1lbnRzKSwgaCA9IF9yZWZbMF0sIHMgPSBfcmVmWzFdLCBpID0gX3JlZlsyXTtcbiAgICBoIC89IDM2MDtcbiAgICBpZiAoaCA8IDEgLyAzKSB7XG4gICAgICBiID0gKDEgLSBzKSAvIDM7XG4gICAgICByID0gKDEgKyBzICogY29zKFRXT1BJICogaCkgLyBjb3MoUElUSElSRCAtIFRXT1BJICogaCkpIC8gMztcbiAgICAgIGcgPSAxIC0gKGIgKyByKTtcbiAgICB9IGVsc2UgaWYgKGggPCAyIC8gMykge1xuICAgICAgaCAtPSAxIC8gMztcbiAgICAgIHIgPSAoMSAtIHMpIC8gMztcbiAgICAgIGcgPSAoMSArIHMgKiBjb3MoVFdPUEkgKiBoKSAvIGNvcyhQSVRISVJEIC0gVFdPUEkgKiBoKSkgLyAzO1xuICAgICAgYiA9IDEgLSAociArIGcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoIC09IDIgLyAzO1xuICAgICAgZyA9ICgxIC0gcykgLyAzO1xuICAgICAgYiA9ICgxICsgcyAqIGNvcyhUV09QSSAqIGgpIC8gY29zKFBJVEhJUkQgLSBUV09QSSAqIGgpKSAvIDM7XG4gICAgICByID0gMSAtIChnICsgYik7XG4gICAgfVxuICAgIHIgPSBsaW1pdChpICogciAqIDMpO1xuICAgIGcgPSBsaW1pdChpICogZyAqIDMpO1xuICAgIGIgPSBsaW1pdChpICogYiAqIDMpO1xuICAgIHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG4gIH07XG5cbiAgaHNsMnJnYiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiLCBjLCBnLCBoLCBpLCBsLCByLCBzLCB0MSwgdDIsIHQzLCBfaSwgX3JlZiwgX3JlZjE7XG5cbiAgICBfcmVmID0gdW5wYWNrKGFyZ3VtZW50cyksIGggPSBfcmVmWzBdLCBzID0gX3JlZlsxXSwgbCA9IF9yZWZbMl07XG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIHIgPSBnID0gYiA9IGwgKiAyNTU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQzID0gWzAsIDAsIDBdO1xuICAgICAgYyA9IFswLCAwLCAwXTtcbiAgICAgIHQyID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgIHQxID0gMiAqIGwgLSB0MjtcbiAgICAgIGggLz0gMzYwO1xuICAgICAgdDNbMF0gPSBoICsgMSAvIDM7XG4gICAgICB0M1sxXSA9IGg7XG4gICAgICB0M1syXSA9IGggLSAxIC8gMztcbiAgICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPD0gMjsgaSA9ICsrX2kpIHtcbiAgICAgICAgaWYgKHQzW2ldIDwgMCkge1xuICAgICAgICAgIHQzW2ldICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQzW2ldID4gMSkge1xuICAgICAgICAgIHQzW2ldIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDYgKiB0M1tpXSA8IDEpIHtcbiAgICAgICAgICBjW2ldID0gdDEgKyAodDIgLSB0MSkgKiA2ICogdDNbaV07XG4gICAgICAgIH0gZWxzZSBpZiAoMiAqIHQzW2ldIDwgMSkge1xuICAgICAgICAgIGNbaV0gPSB0MjtcbiAgICAgICAgfSBlbHNlIGlmICgzICogdDNbaV0gPCAyKSB7XG4gICAgICAgICAgY1tpXSA9IHQxICsgKHQyIC0gdDEpICogKCgyIC8gMykgLSB0M1tpXSkgKiA2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNbaV0gPSB0MTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3JlZjEgPSBbTWF0aC5yb3VuZChjWzBdICogMjU1KSwgTWF0aC5yb3VuZChjWzFdICogMjU1KSwgTWF0aC5yb3VuZChjWzJdICogMjU1KV0sIHIgPSBfcmVmMVswXSwgZyA9IF9yZWYxWzFdLCBiID0gX3JlZjFbMl07XG4gICAgfVxuICAgIHJldHVybiBbciwgZywgYl07XG4gIH07XG5cbiAgaHN2MnJnYiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiLCBmLCBnLCBoLCBpLCBwLCBxLCByLCBzLCB0LCB2LCBfcmVmLCBfcmVmMSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX3JlZjUsIF9yZWY2O1xuXG4gICAgX3JlZiA9IHVucGFjayhhcmd1bWVudHMpLCBoID0gX3JlZlswXSwgcyA9IF9yZWZbMV0sIHYgPSBfcmVmWzJdO1xuICAgIHYgKj0gMjU1O1xuICAgIGlmIChzID09PSAwKSB7XG4gICAgICByID0gZyA9IGIgPSB2O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaCA9PT0gMzYwKSB7XG4gICAgICAgIGggPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGggPiAzNjApIHtcbiAgICAgICAgaCAtPSAzNjA7XG4gICAgICB9XG4gICAgICBpZiAoaCA8IDApIHtcbiAgICAgICAgaCArPSAzNjA7XG4gICAgICB9XG4gICAgICBoIC89IDYwO1xuICAgICAgaSA9IE1hdGguZmxvb3IoaCk7XG4gICAgICBmID0gaCAtIGk7XG4gICAgICBwID0gdiAqICgxIC0gcyk7XG4gICAgICBxID0gdiAqICgxIC0gcyAqIGYpO1xuICAgICAgdCA9IHYgKiAoMSAtIHMgKiAoMSAtIGYpKTtcbiAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgX3JlZjEgPSBbdiwgdCwgcF0sIHIgPSBfcmVmMVswXSwgZyA9IF9yZWYxWzFdLCBiID0gX3JlZjFbMl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBfcmVmMiA9IFtxLCB2LCBwXSwgciA9IF9yZWYyWzBdLCBnID0gX3JlZjJbMV0sIGIgPSBfcmVmMlsyXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIF9yZWYzID0gW3AsIHYsIHRdLCByID0gX3JlZjNbMF0sIGcgPSBfcmVmM1sxXSwgYiA9IF9yZWYzWzJdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgX3JlZjQgPSBbcCwgcSwgdl0sIHIgPSBfcmVmNFswXSwgZyA9IF9yZWY0WzFdLCBiID0gX3JlZjRbMl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBfcmVmNSA9IFt0LCBwLCB2XSwgciA9IF9yZWY1WzBdLCBnID0gX3JlZjVbMV0sIGIgPSBfcmVmNVsyXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIF9yZWY2ID0gW3YsIHAsIHFdLCByID0gX3JlZjZbMF0sIGcgPSBfcmVmNlsxXSwgYiA9IF9yZWY2WzJdO1xuICAgICAgfVxuICAgIH1cbiAgICByID0gTWF0aC5yb3VuZChyKTtcbiAgICBnID0gTWF0aC5yb3VuZChnKTtcbiAgICBiID0gTWF0aC5yb3VuZChiKTtcbiAgICByZXR1cm4gW3IsIGcsIGJdO1xuICB9O1xuXG4gIEsgPSAxODtcblxuICBYID0gMC45NTA0NzA7XG5cbiAgWSA9IDE7XG5cbiAgWiA9IDEuMDg4ODMwO1xuXG4gIGxhYjJsY2ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYiwgYywgaCwgbCwgX3JlZjtcblxuICAgIF9yZWYgPSB1bnBhY2soYXJndW1lbnRzKSwgbCA9IF9yZWZbMF0sIGEgPSBfcmVmWzFdLCBiID0gX3JlZlsyXTtcbiAgICBjID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICAgIGggPSBNYXRoLmF0YW4yKGIsIGEpIC8gTWF0aC5QSSAqIDE4MDtcbiAgICByZXR1cm4gW2wsIGMsIGhdO1xuICB9O1xuXG4gIGxhYjJyZ2IgPSBmdW5jdGlvbihsLCBhLCBiKSB7XG4gICAgLypcbiAgICBhZGFwdGVkIHRvIG1hdGNoIGQzIGltcGxlbWVudGF0aW9uXG4gICAgKi9cblxuICAgIHZhciBnLCByLCB4LCB5LCB6LCBfcmVmLCBfcmVmMTtcblxuICAgIGlmIChsICE9PSB2b2lkIDAgJiYgbC5sZW5ndGggPT09IDMpIHtcbiAgICAgIF9yZWYgPSBsLCBsID0gX3JlZlswXSwgYSA9IF9yZWZbMV0sIGIgPSBfcmVmWzJdO1xuICAgIH1cbiAgICBpZiAobCAhPT0gdm9pZCAwICYmIGwubGVuZ3RoID09PSAzKSB7XG4gICAgICBfcmVmMSA9IGwsIGwgPSBfcmVmMVswXSwgYSA9IF9yZWYxWzFdLCBiID0gX3JlZjFbMl07XG4gICAgfVxuICAgIHkgPSAobCArIDE2KSAvIDExNjtcbiAgICB4ID0geSArIGEgLyA1MDA7XG4gICAgeiA9IHkgLSBiIC8gMjAwO1xuICAgIHggPSBsYWJfeHl6KHgpICogWDtcbiAgICB5ID0gbGFiX3h5eih5KSAqIFk7XG4gICAgeiA9IGxhYl94eXooeikgKiBaO1xuICAgIHIgPSB4eXpfcmdiKDMuMjQwNDU0MiAqIHggLSAxLjUzNzEzODUgKiB5IC0gMC40OTg1MzE0ICogeik7XG4gICAgZyA9IHh5el9yZ2IoLTAuOTY5MjY2MCAqIHggKyAxLjg3NjAxMDggKiB5ICsgMC4wNDE1NTYwICogeik7XG4gICAgYiA9IHh5el9yZ2IoMC4wNTU2NDM0ICogeCAtIDAuMjA0MDI1OSAqIHkgKyAxLjA1NzIyNTIgKiB6KTtcbiAgICByZXR1cm4gW2xpbWl0KHIsIDAsIDI1NSksIGxpbWl0KGcsIDAsIDI1NSksIGxpbWl0KGIsIDAsIDI1NSksIDFdO1xuICB9O1xuXG4gIGxhYl94eXogPSBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPiAwLjIwNjg5MzAzNCkge1xuICAgICAgcmV0dXJuIHggKiB4ICogeDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICh4IC0gNCAvIDI5KSAvIDcuNzg3MDM3O1xuICAgIH1cbiAgfTtcblxuICB4eXpfcmdiID0gZnVuY3Rpb24ocikge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKDI1NSAqIChyIDw9IDAuMDAzMDQgPyAxMi45MiAqIHIgOiAxLjA1NSAqIE1hdGgucG93KHIsIDEgLyAyLjQpIC0gMC4wNTUpKTtcbiAgfTtcblxuICBsY2gybGFiID0gZnVuY3Rpb24oKSB7XG4gICAgLypcbiAgICBDb252ZXJ0IGZyb20gYSBxdWFsaXRhdGl2ZSBwYXJhbWV0ZXIgaCBhbmQgYSBxdWFudGl0YXRpdmUgcGFyYW1ldGVyIGwgdG8gYSAyNC1iaXQgcGl4ZWwuIFRoZXNlIGZvcm11bGFzIHdlcmUgaW52ZW50ZWQgYnkgRGF2aWQgRGFscnltcGxlIHRvIG9idGFpbiBtYXhpbXVtIGNvbnRyYXN0IHdpdGhvdXQgZ29pbmcgb3V0IG9mIGdhbXV0IGlmIHRoZSBwYXJhbWV0ZXJzIGFyZSBpbiB0aGUgcmFuZ2UgMC0xLlxuICAgIEEgc2F0dXJhdGlvbiBtdWx0aXBsaWVyIHdhcyBhZGRlZCBieSBHcmVnb3IgQWlzY2hcbiAgICAqL1xuXG4gICAgdmFyIGMsIGgsIGwsIF9yZWY7XG5cbiAgICBfcmVmID0gdW5wYWNrKGFyZ3VtZW50cyksIGwgPSBfcmVmWzBdLCBjID0gX3JlZlsxXSwgaCA9IF9yZWZbMl07XG4gICAgaCA9IGggKiBNYXRoLlBJIC8gMTgwO1xuICAgIHJldHVybiBbbCwgTWF0aC5jb3MoaCkgKiBjLCBNYXRoLnNpbihoKSAqIGNdO1xuICB9O1xuXG4gIGxjaDJyZ2IgPSBmdW5jdGlvbihsLCBjLCBoKSB7XG4gICAgdmFyIEwsIGEsIGIsIGcsIHIsIF9yZWYsIF9yZWYxO1xuXG4gICAgX3JlZiA9IGxjaDJsYWIobCwgYywgaCksIEwgPSBfcmVmWzBdLCBhID0gX3JlZlsxXSwgYiA9IF9yZWZbMl07XG4gICAgX3JlZjEgPSBsYWIycmdiKEwsIGEsIGIpLCByID0gX3JlZjFbMF0sIGcgPSBfcmVmMVsxXSwgYiA9IF9yZWYxWzJdO1xuICAgIHJldHVybiBbbGltaXQociwgMCwgMjU1KSwgbGltaXQoZywgMCwgMjU1KSwgbGltaXQoYiwgMCwgMjU1KV07XG4gIH07XG5cbiAgbHVtaW5hbmNlID0gZnVuY3Rpb24ociwgZywgYikge1xuICAgIHZhciBfcmVmO1xuXG4gICAgX3JlZiA9IHVucGFjayhhcmd1bWVudHMpLCByID0gX3JlZlswXSwgZyA9IF9yZWZbMV0sIGIgPSBfcmVmWzJdO1xuICAgIHIgPSBsdW1pbmFuY2VfeChyKTtcbiAgICBnID0gbHVtaW5hbmNlX3goZyk7XG4gICAgYiA9IGx1bWluYW5jZV94KGIpO1xuICAgIHJldHVybiAwLjIxMjYgKiByICsgMC43MTUyICogZyArIDAuMDcyMiAqIGI7XG4gIH07XG5cbiAgbHVtaW5hbmNlX3ggPSBmdW5jdGlvbih4KSB7XG4gICAgeCAvPSAyNTU7XG4gICAgaWYgKHggPD0gMC4wMzkyOCkge1xuICAgICAgcmV0dXJuIHggLyAxMi45MjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgfVxuICB9O1xuXG4gIHJnYjJoZXggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYiwgZywgciwgc3RyLCB1LCBfcmVmO1xuXG4gICAgX3JlZiA9IHVucGFjayhhcmd1bWVudHMpLCByID0gX3JlZlswXSwgZyA9IF9yZWZbMV0sIGIgPSBfcmVmWzJdO1xuICAgIHUgPSByIDw8IDE2IHwgZyA8PCA4IHwgYjtcbiAgICBzdHIgPSBcIjAwMDAwMFwiICsgdS50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIFwiI1wiICsgc3RyLnN1YnN0cihzdHIubGVuZ3RoIC0gNik7XG4gIH07XG5cbiAgcmdiMmhzaSA9IGZ1bmN0aW9uKCkge1xuICAgIC8qXG4gICAgYm9ycm93ZWQgZnJvbSBoZXJlOlxuICAgIGh0dHA6Ly9odW1tZXIuc3RhbmZvcmQuZWR1L211c2VpbmZvL2RvYy9leGFtcGxlcy9odW1kcnVtL2tleXNjYXBlMi9yZ2IyaHNpLmNwcFxuICAgICovXG5cbiAgICB2YXIgVFdPUEksIGIsIGcsIGgsIGksIG1pbiwgciwgcywgX3JlZjtcblxuICAgIF9yZWYgPSB1bnBhY2soYXJndW1lbnRzKSwgciA9IF9yZWZbMF0sIGcgPSBfcmVmWzFdLCBiID0gX3JlZlsyXTtcbiAgICBUV09QSSA9IE1hdGguUEkgKiAyO1xuICAgIHIgLz0gMjU1O1xuICAgIGcgLz0gMjU1O1xuICAgIGIgLz0gMjU1O1xuICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGkgPSAociArIGcgKyBiKSAvIDM7XG4gICAgcyA9IDEgLSBtaW4gLyBpO1xuICAgIGlmIChzID09PSAwKSB7XG4gICAgICBoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9ICgociAtIGcpICsgKHIgLSBiKSkgLyAyO1xuICAgICAgaCAvPSBNYXRoLnNxcnQoKHIgLSBnKSAqIChyIC0gZykgKyAociAtIGIpICogKGcgLSBiKSk7XG4gICAgICBoID0gTWF0aC5hY29zKGgpO1xuICAgICAgaWYgKGIgPiBnKSB7XG4gICAgICAgIGggPSBUV09QSSAtIGg7XG4gICAgICB9XG4gICAgICBoIC89IFRXT1BJO1xuICAgIH1cbiAgICByZXR1cm4gW2ggKiAzNjAsIHMsIGldO1xuICB9O1xuXG4gIHJnYjJoc2wgPSBmdW5jdGlvbihyLCBnLCBiKSB7XG4gICAgdmFyIGgsIGwsIG1heCwgbWluLCBzLCBfcmVmO1xuXG4gICAgaWYgKHIgIT09IHZvaWQgMCAmJiByLmxlbmd0aCA+PSAzKSB7XG4gICAgICBfcmVmID0gciwgciA9IF9yZWZbMF0sIGcgPSBfcmVmWzFdLCBiID0gX3JlZlsyXTtcbiAgICB9XG4gICAgciAvPSAyNTU7XG4gICAgZyAvPSAyNTU7XG4gICAgYiAvPSAyNTU7XG4gICAgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgIHMgPSAwO1xuICAgICAgaCA9IE51bWJlci5OYU47XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBsIDwgMC41ID8gKG1heCAtIG1pbikgLyAobWF4ICsgbWluKSA6IChtYXggLSBtaW4pIC8gKDIgLSBtYXggLSBtaW4pO1xuICAgIH1cbiAgICBpZiAociA9PT0gbWF4KSB7XG4gICAgICBoID0gKGcgLSBiKSAvIChtYXggLSBtaW4pO1xuICAgIH0gZWxzZSBpZiAoZyA9PT0gbWF4KSB7XG4gICAgICBoID0gMiArIChiIC0gcikgLyAobWF4IC0gbWluKTtcbiAgICB9IGVsc2UgaWYgKGIgPT09IG1heCkge1xuICAgICAgaCA9IDQgKyAociAtIGcpIC8gKG1heCAtIG1pbik7XG4gICAgfVxuICAgIGggKj0gNjA7XG4gICAgaWYgKGggPCAwKSB7XG4gICAgICBoICs9IDM2MDtcbiAgICB9XG4gICAgcmV0dXJuIFtoLCBzLCBsXTtcbiAgfTtcblxuICByZ2IyaHN2ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGIsIGRlbHRhLCBnLCBoLCBtYXgsIG1pbiwgciwgcywgdiwgX3JlZjtcblxuICAgIF9yZWYgPSB1bnBhY2soYXJndW1lbnRzKSwgciA9IF9yZWZbMF0sIGcgPSBfcmVmWzFdLCBiID0gX3JlZlsyXTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICB2ID0gbWF4IC8gMjU1LjA7XG4gICAgaWYgKG1heCA9PT0gMCkge1xuICAgICAgaCA9IE51bWJlci5OYU47XG4gICAgICBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IGRlbHRhIC8gbWF4O1xuICAgICAgaWYgKHIgPT09IG1heCkge1xuICAgICAgICBoID0gKGcgLSBiKSAvIGRlbHRhO1xuICAgICAgfVxuICAgICAgaWYgKGcgPT09IG1heCkge1xuICAgICAgICBoID0gMiArIChiIC0gcikgLyBkZWx0YTtcbiAgICAgIH1cbiAgICAgIGlmIChiID09PSBtYXgpIHtcbiAgICAgICAgaCA9IDQgKyAociAtIGcpIC8gZGVsdGE7XG4gICAgICB9XG4gICAgICBoICo9IDYwO1xuICAgICAgaWYgKGggPCAwKSB7XG4gICAgICAgIGggKz0gMzYwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW2gsIHMsIHZdO1xuICB9O1xuXG4gIHJnYjJsYWIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYiwgZywgciwgeCwgeSwgeiwgX3JlZjtcblxuICAgIF9yZWYgPSB1bnBhY2soYXJndW1lbnRzKSwgciA9IF9yZWZbMF0sIGcgPSBfcmVmWzFdLCBiID0gX3JlZlsyXTtcbiAgICByID0gcmdiX3h5eihyKTtcbiAgICBnID0gcmdiX3h5eihnKTtcbiAgICBiID0gcmdiX3h5eihiKTtcbiAgICB4ID0geHl6X2xhYigoMC40MTI0NTY0ICogciArIDAuMzU3NTc2MSAqIGcgKyAwLjE4MDQzNzUgKiBiKSAvIFgpO1xuICAgIHkgPSB4eXpfbGFiKCgwLjIxMjY3MjkgKiByICsgMC43MTUxNTIyICogZyArIDAuMDcyMTc1MCAqIGIpIC8gWSk7XG4gICAgeiA9IHh5el9sYWIoKDAuMDE5MzMzOSAqIHIgKyAwLjExOTE5MjAgKiBnICsgMC45NTAzMDQxICogYikgLyBaKTtcbiAgICByZXR1cm4gWzExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KV07XG4gIH07XG5cbiAgcmdiX3h5eiA9IGZ1bmN0aW9uKHIpIHtcbiAgICBpZiAoKHIgLz0gMjU1KSA8PSAwLjA0MDQ1KSB7XG4gICAgICByZXR1cm4gciAvIDEyLjkyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3coKHIgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICB9XG4gIH07XG5cbiAgeHl6X2xhYiA9IGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA+IDAuMDA4ODU2KSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3coeCwgMSAvIDMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gNy43ODcwMzcgKiB4ICsgNCAvIDI5O1xuICAgIH1cbiAgfTtcblxuICByZ2IybGNoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEsIGIsIGcsIGwsIHIsIF9yZWYsIF9yZWYxO1xuXG4gICAgX3JlZiA9IHVucGFjayhhcmd1bWVudHMpLCByID0gX3JlZlswXSwgZyA9IF9yZWZbMV0sIGIgPSBfcmVmWzJdO1xuICAgIF9yZWYxID0gcmdiMmxhYihyLCBnLCBiKSwgbCA9IF9yZWYxWzBdLCBhID0gX3JlZjFbMV0sIGIgPSBfcmVmMVsyXTtcbiAgICByZXR1cm4gbGFiMmxjaChsLCBhLCBiKTtcbiAgfTtcblxuICAvKlxuICAgICAgY2hyb21hLmpzXG4gIFxuICAgICAgQ29weXJpZ2h0IChjKSAyMDExLTIwMTMsIEdyZWdvciBBaXNjaFxuICAgICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgXG4gICAgICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgICAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICBcbiAgICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gICAgICAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICBcbiAgICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICAgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gICAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICBcbiAgICAgICogVGhlIG5hbWUgR3JlZ29yIEFpc2NoIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAgICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gIFxuICAgICAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAgICAgIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAgICAgIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICAgICAgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgR1JFR09SIEFJU0NIIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsXG4gICAgICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORyxcbiAgICAgIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gICAgICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZXG4gICAgICBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICAgICAgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuICAgICAgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAgXG4gICAgICBAc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ2thL2Nocm9tYS5qc1xuICAqL1xuXG5cbiAgY2hyb21hLnNjYWxlID0gZnVuY3Rpb24oY29sb3JzLCBwb3NpdGlvbnMpIHtcbiAgICB2YXIgY2xhc3NpZnlWYWx1ZSwgZiwgZ2V0Q2xhc3MsIGdldENvbG9yLCByZXNldENhY2hlLCBzZXRDb2xvcnMsIHNldERvbWFpbiwgdG1hcCwgX2NvbG9yQ2FjaGUsIF9jb2xvcnMsIF9jb3JyZWN0TGlnaHRuZXNzLCBfZG9tYWluLCBfZml4ZWQsIF9tYXgsIF9taW4sIF9tb2RlLCBfbmFjb2wsIF9udW1DbGFzc2VzLCBfb3V0LCBfcG9zLCBfc3ByZWFkO1xuXG4gICAgX21vZGUgPSAncmdiJztcbiAgICBfbmFjb2wgPSBjaHJvbWEoJyNjY2MnKTtcbiAgICBfc3ByZWFkID0gMDtcbiAgICBfZml4ZWQgPSBmYWxzZTtcbiAgICBfZG9tYWluID0gWzAsIDFdO1xuICAgIF9jb2xvcnMgPSBbXTtcbiAgICBfb3V0ID0gZmFsc2U7XG4gICAgX3BvcyA9IFtdO1xuICAgIF9taW4gPSAwO1xuICAgIF9tYXggPSAxO1xuICAgIF9jb3JyZWN0TGlnaHRuZXNzID0gZmFsc2U7XG4gICAgX251bUNsYXNzZXMgPSAwO1xuICAgIF9jb2xvckNhY2hlID0ge307XG4gICAgc2V0Q29sb3JzID0gZnVuY3Rpb24oY29sb3JzLCBwb3NpdGlvbnMpIHtcbiAgICAgIHZhciBjLCBjb2wsIF9pLCBfaiwgX3JlZiwgX3JlZjEsIF9yZWYyO1xuXG4gICAgICBpZiAoY29sb3JzID09IG51bGwpIHtcbiAgICAgICAgY29sb3JzID0gWycjZGRkJywgJyMyMjInXTtcbiAgICAgIH1cbiAgICAgIGlmICgoY29sb3JzICE9IG51bGwpICYmIHR5cGUoY29sb3JzKSA9PT0gJ3N0cmluZycgJiYgKCgoX3JlZiA9IGNocm9tYS5icmV3ZXIpICE9IG51bGwgPyBfcmVmW2NvbG9yc10gOiB2b2lkIDApICE9IG51bGwpKSB7XG4gICAgICAgIGNvbG9ycyA9IGNocm9tYS5icmV3ZXJbY29sb3JzXTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlKGNvbG9ycykgPT09ICdhcnJheScpIHtcbiAgICAgICAgY29sb3JzID0gY29sb3JzLnNsaWNlKDApO1xuICAgICAgICBmb3IgKGMgPSBfaSA9IDAsIF9yZWYxID0gY29sb3JzLmxlbmd0aCAtIDE7IDAgPD0gX3JlZjEgPyBfaSA8PSBfcmVmMSA6IF9pID49IF9yZWYxOyBjID0gMCA8PSBfcmVmMSA/ICsrX2kgOiAtLV9pKSB7XG4gICAgICAgICAgY29sID0gY29sb3JzW2NdO1xuICAgICAgICAgIGlmICh0eXBlKGNvbCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbG9yc1tjXSA9IGNocm9tYShjb2wpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICBfcG9zID0gcG9zaXRpb25zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9wb3MgPSBbXTtcbiAgICAgICAgICBmb3IgKGMgPSBfaiA9IDAsIF9yZWYyID0gY29sb3JzLmxlbmd0aCAtIDE7IDAgPD0gX3JlZjIgPyBfaiA8PSBfcmVmMiA6IF9qID49IF9yZWYyOyBjID0gMCA8PSBfcmVmMiA/ICsrX2ogOiAtLV9qKSB7XG4gICAgICAgICAgICBfcG9zLnB1c2goYyAvIChjb2xvcnMubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzZXRDYWNoZSgpO1xuICAgICAgcmV0dXJuIF9jb2xvcnMgPSBjb2xvcnM7XG4gICAgfTtcbiAgICBzZXREb21haW4gPSBmdW5jdGlvbihkb21haW4pIHtcbiAgICAgIGlmIChkb21haW4gPT0gbnVsbCkge1xuICAgICAgICBkb21haW4gPSBbXTtcbiAgICAgIH1cbiAgICAgIC8qXG4gICAgICAjIHVzZSB0aGlzIGlmIHlvdSB3YW50IHRvIGRpc3BsYXkgYSBsaW1pdGVkIG51bWJlciBvZiBkYXRhIGNsYXNzZXNcbiAgICAgICMgcG9zc2libGUgbWV0aG9kcyBhcmUgXCJlcXVhbGludGVydmFsXCIsIFwicXVhbnRpbGVzXCIsIFwiY3VzdG9tXCJcbiAgICAgICovXG5cbiAgICAgIF9kb21haW4gPSBkb21haW47XG4gICAgICBfbWluID0gZG9tYWluWzBdO1xuICAgICAgX21heCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV07XG4gICAgICByZXNldENhY2hlKCk7XG4gICAgICBpZiAoZG9tYWluLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gX251bUNsYXNzZXMgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9udW1DbGFzc2VzID0gZG9tYWluLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgfTtcbiAgICBnZXRDbGFzcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgaSwgbjtcblxuICAgICAgaWYgKF9kb21haW4gIT0gbnVsbCkge1xuICAgICAgICBuID0gX2RvbWFpbi5sZW5ndGggLSAxO1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBuICYmIHZhbHVlID49IF9kb21haW5baV0pIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGkgLSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICB0bWFwID0gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICBjbGFzc2lmeVZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBpLCBtYXhjLCBtaW5jLCBuLCB2YWw7XG5cbiAgICAgIHZhbCA9IHZhbHVlO1xuICAgICAgaWYgKF9kb21haW4ubGVuZ3RoID4gMikge1xuICAgICAgICBuID0gX2RvbWFpbi5sZW5ndGggLSAxO1xuICAgICAgICBpID0gZ2V0Q2xhc3ModmFsdWUpO1xuICAgICAgICBtaW5jID0gX2RvbWFpblswXSArIChfZG9tYWluWzFdIC0gX2RvbWFpblswXSkgKiAoMCArIF9zcHJlYWQgKiAwLjUpO1xuICAgICAgICBtYXhjID0gX2RvbWFpbltuIC0gMV0gKyAoX2RvbWFpbltuXSAtIF9kb21haW5bbiAtIDFdKSAqICgxIC0gX3NwcmVhZCAqIDAuNSk7XG4gICAgICAgIHZhbCA9IF9taW4gKyAoKF9kb21haW5baV0gKyAoX2RvbWFpbltpICsgMV0gLSBfZG9tYWluW2ldKSAqIDAuNSAtIG1pbmMpIC8gKG1heGMgLSBtaW5jKSkgKiAoX21heCAtIF9taW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuICAgIGdldENvbG9yID0gZnVuY3Rpb24odmFsLCBieXBhc3NNYXApIHtcbiAgICAgIHZhciBjLCBjb2wsIGYwLCBpLCBrLCBwLCB0LCBfaSwgX3JlZjtcblxuICAgICAgaWYgKGJ5cGFzc01hcCA9PSBudWxsKSB7XG4gICAgICAgIGJ5cGFzc01hcCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIF9uYWNvbDtcbiAgICAgIH1cbiAgICAgIGlmICghYnlwYXNzTWFwKSB7XG4gICAgICAgIGlmIChfZG9tYWluLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBjID0gZ2V0Q2xhc3ModmFsKTtcbiAgICAgICAgICB0ID0gYyAvIChfbnVtQ2xhc3NlcyAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQgPSBmMCA9ICh2YWwgLSBfbWluKSAvIChfbWF4IC0gX21pbik7XG4gICAgICAgICAgdCA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHQpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHZhbDtcbiAgICAgIH1cbiAgICAgIGlmICghYnlwYXNzTWFwKSB7XG4gICAgICAgIHQgPSB0bWFwKHQpO1xuICAgICAgfVxuICAgICAgayA9IE1hdGguZmxvb3IodCAqIDEwMDAwKTtcbiAgICAgIGlmIChfY29sb3JDYWNoZVtrXSkge1xuICAgICAgICBjb2wgPSBfY29sb3JDYWNoZVtrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlKF9jb2xvcnMpID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gX3Bvcy5sZW5ndGggLSAxOyAwIDw9IF9yZWYgPyBfaSA8PSBfcmVmIDogX2kgPj0gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7XG4gICAgICAgICAgICBwID0gX3Bvc1tpXTtcbiAgICAgICAgICAgIGlmICh0IDw9IHApIHtcbiAgICAgICAgICAgICAgY29sID0gX2NvbG9yc1tpXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodCA+PSBwICYmIGkgPT09IF9wb3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBjb2wgPSBfY29sb3JzW2ldO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0ID4gcCAmJiB0IDwgX3Bvc1tpICsgMV0pIHtcbiAgICAgICAgICAgICAgdCA9ICh0IC0gcCkgLyAoX3Bvc1tpICsgMV0gLSBwKTtcbiAgICAgICAgICAgICAgY29sID0gY2hyb21hLmludGVycG9sYXRlKF9jb2xvcnNbaV0sIF9jb2xvcnNbaSArIDFdLCB0LCBfbW9kZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlKF9jb2xvcnMpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY29sID0gX2NvbG9ycyh0KTtcbiAgICAgICAgfVxuICAgICAgICBfY29sb3JDYWNoZVtrXSA9IGNvbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2w7XG4gICAgfTtcbiAgICByZXNldENhY2hlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2NvbG9yQ2FjaGUgPSB7fTtcbiAgICB9O1xuICAgIHNldENvbG9ycyhjb2xvcnMsIHBvc2l0aW9ucyk7XG4gICAgZiA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHZhciBjO1xuXG4gICAgICBjID0gZ2V0Q29sb3Iodik7XG4gICAgICBpZiAoX291dCAmJiBjW19vdXRdKSB7XG4gICAgICAgIHJldHVybiBjW19vdXRdKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYztcbiAgICAgIH1cbiAgICB9O1xuICAgIGYuZG9tYWluID0gZnVuY3Rpb24oZG9tYWluLCBjbGFzc2VzLCBtb2RlLCBrZXkpIHtcbiAgICAgIHZhciBkO1xuXG4gICAgICBpZiAobW9kZSA9PSBudWxsKSB7XG4gICAgICAgIG1vZGUgPSAnZSc7XG4gICAgICB9XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIF9kb21haW47XG4gICAgICB9XG4gICAgICBpZiAoY2xhc3NlcyAhPSBudWxsKSB7XG4gICAgICAgIGQgPSBjaHJvbWEuYW5hbHl6ZShkb21haW4sIGtleSk7XG4gICAgICAgIGlmIChjbGFzc2VzID09PSAwKSB7XG4gICAgICAgICAgZG9tYWluID0gW2QubWluLCBkLm1heF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9tYWluID0gY2hyb21hLmxpbWl0cyhkLCBtb2RlLCBjbGFzc2VzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0RG9tYWluKGRvbWFpbik7XG4gICAgICByZXR1cm4gZjtcbiAgICB9O1xuICAgIGYubW9kZSA9IGZ1bmN0aW9uKF9tKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIF9tb2RlO1xuICAgICAgfVxuICAgICAgX21vZGUgPSBfbTtcbiAgICAgIHJlc2V0Q2FjaGUoKTtcbiAgICAgIHJldHVybiBmO1xuICAgIH07XG4gICAgZi5yYW5nZSA9IGZ1bmN0aW9uKGNvbG9ycywgX3Bvcykge1xuICAgICAgc2V0Q29sb3JzKGNvbG9ycywgX3Bvcyk7XG4gICAgICByZXR1cm4gZjtcbiAgICB9O1xuICAgIGYub3V0ID0gZnVuY3Rpb24oX28pIHtcbiAgICAgIF9vdXQgPSBfbztcbiAgICAgIHJldHVybiBmO1xuICAgIH07XG4gICAgZi5zcHJlYWQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gX3NwcmVhZDtcbiAgICAgIH1cbiAgICAgIF9zcHJlYWQgPSB2YWw7XG4gICAgICByZXR1cm4gZjtcbiAgICB9O1xuICAgIGYuY29ycmVjdExpZ2h0bmVzcyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gX2NvcnJlY3RMaWdodG5lc3M7XG4gICAgICB9XG4gICAgICBfY29ycmVjdExpZ2h0bmVzcyA9IHY7XG4gICAgICByZXNldENhY2hlKCk7XG4gICAgICBpZiAoX2NvcnJlY3RMaWdodG5lc3MpIHtcbiAgICAgICAgdG1hcCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICB2YXIgTDAsIEwxLCBMX2FjdHVhbCwgTF9kaWZmLCBMX2lkZWFsLCBtYXhfaXRlciwgcG9sLCB0MCwgdDE7XG5cbiAgICAgICAgICBMMCA9IGdldENvbG9yKDAsIHRydWUpLmxhYigpWzBdO1xuICAgICAgICAgIEwxID0gZ2V0Q29sb3IoMSwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgcG9sID0gTDAgPiBMMTtcbiAgICAgICAgICBMX2FjdHVhbCA9IGdldENvbG9yKHQsIHRydWUpLmxhYigpWzBdO1xuICAgICAgICAgIExfaWRlYWwgPSBMMCArIChMMSAtIEwwKSAqIHQ7XG4gICAgICAgICAgTF9kaWZmID0gTF9hY3R1YWwgLSBMX2lkZWFsO1xuICAgICAgICAgIHQwID0gMDtcbiAgICAgICAgICB0MSA9IDE7XG4gICAgICAgICAgbWF4X2l0ZXIgPSAyMDtcbiAgICAgICAgICB3aGlsZSAoTWF0aC5hYnMoTF9kaWZmKSA+IDFlLTIgJiYgbWF4X2l0ZXItLSA+IDApIHtcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHBvbCkge1xuICAgICAgICAgICAgICAgIExfZGlmZiAqPSAtMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoTF9kaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIHQwID0gdDtcbiAgICAgICAgICAgICAgICB0ICs9ICh0MSAtIHQpICogMC41O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHQxID0gdDtcbiAgICAgICAgICAgICAgICB0ICs9ICh0MCAtIHQpICogMC41O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIExfYWN0dWFsID0gZ2V0Q29sb3IodCwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgICAgIHJldHVybiBMX2RpZmYgPSBMX2FjdHVhbCAtIExfaWRlYWw7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRtYXAgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZjtcbiAgICB9O1xuICAgIGYuY29sb3JzID0gZnVuY3Rpb24ob3V0KSB7XG4gICAgICB2YXIgaSwgc2FtcGxlcywgX2ksIF9qLCBfbGVuLCBfcmVmO1xuXG4gICAgICBpZiAob3V0ID09IG51bGwpIHtcbiAgICAgICAgb3V0ID0gJ2hleCc7XG4gICAgICB9XG4gICAgICBjb2xvcnMgPSBbXTtcbiAgICAgIHNhbXBsZXMgPSBbXTtcbiAgICAgIGlmIChfZG9tYWluLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgZm9yIChpID0gX2kgPSAxLCBfcmVmID0gX2RvbWFpbi5sZW5ndGg7IDEgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDEgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7XG4gICAgICAgICAgc2FtcGxlcy5wdXNoKChfZG9tYWluW2kgLSAxXSArIF9kb21haW5baV0pICogMC41KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2FtcGxlcyA9IF9kb21haW47XG4gICAgICB9XG4gICAgICBmb3IgKF9qID0gMCwgX2xlbiA9IHNhbXBsZXMubGVuZ3RoOyBfaiA8IF9sZW47IF9qKyspIHtcbiAgICAgICAgaSA9IHNhbXBsZXNbX2pdO1xuICAgICAgICBjb2xvcnMucHVzaChmKGkpW291dF0oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sb3JzO1xuICAgIH07XG4gICAgcmV0dXJuIGY7XG4gIH07XG5cbiAgaWYgKChfcmVmID0gY2hyb21hLnNjYWxlcykgPT0gbnVsbCkge1xuICAgIGNocm9tYS5zY2FsZXMgPSB7fTtcbiAgfVxuXG4gIGNocm9tYS5zY2FsZXMuY29vbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjaHJvbWEuc2NhbGUoW2Nocm9tYS5oc2woMTgwLCAxLCAuOSksIGNocm9tYS5oc2woMjUwLCAuNywgLjQpXSk7XG4gIH07XG5cbiAgY2hyb21hLnNjYWxlcy5ob3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2hyb21hLnNjYWxlKFsnIzAwMCcsICcjZjAwJywgJyNmZjAnLCAnI2ZmZiddLCBbMCwgLjI1LCAuNzUsIDFdKS5tb2RlKCdyZ2InKTtcbiAgfTtcblxuICAvKlxuICAgICAgY2hyb21hLmpzXG4gIFxuICAgICAgQ29weXJpZ2h0IChjKSAyMDExLTIwMTMsIEdyZWdvciBBaXNjaFxuICAgICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgXG4gICAgICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgICAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICBcbiAgICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gICAgICAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICBcbiAgICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICAgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gICAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICBcbiAgICAgICogVGhlIG5hbWUgR3JlZ29yIEFpc2NoIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAgICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gIFxuICAgICAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAgICAgIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAgICAgIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICAgICAgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgR1JFR09SIEFJU0NIIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsXG4gICAgICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORyxcbiAgICAgIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gICAgICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZXG4gICAgICBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICAgICAgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuICAgICAgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAgXG4gICAgICBAc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ2thL2Nocm9tYS5qc1xuICAqL1xuXG5cbiAgY2hyb21hLmFuYWx5emUgPSBmdW5jdGlvbihkYXRhLCBrZXksIGZpbHRlcikge1xuICAgIHZhciBhZGQsIGssIHIsIHZhbCwgdmlzaXQsIF9pLCBfbGVuO1xuXG4gICAgciA9IHtcbiAgICAgIG1pbjogTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgIG1heDogTnVtYmVyLk1BWF9WQUxVRSAqIC0xLFxuICAgICAgc3VtOiAwLFxuICAgICAgdmFsdWVzOiBbXSxcbiAgICAgIGNvdW50OiAwXG4gICAgfTtcbiAgICBpZiAoZmlsdGVyID09IG51bGwpIHtcbiAgICAgIGZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfVxuICAgIGFkZCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKCh2YWwgIT0gbnVsbCkgJiYgIWlzTmFOKHZhbCkpIHtcbiAgICAgICAgci52YWx1ZXMucHVzaCh2YWwpO1xuICAgICAgICByLnN1bSArPSB2YWw7XG4gICAgICAgIGlmICh2YWwgPCByLm1pbikge1xuICAgICAgICAgIHIubWluID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgPiByLm1heCkge1xuICAgICAgICAgIHIubWF4ID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHIuY291bnQgKz0gMTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZpc2l0ID0gZnVuY3Rpb24odmFsLCBrKSB7XG4gICAgICBpZiAoZmlsdGVyKHZhbCwgaykpIHtcbiAgICAgICAgaWYgKChrZXkgIT0gbnVsbCkgJiYgdHlwZShrZXkpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFkZChrZXkodmFsKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGtleSAhPSBudWxsKSAmJiB0eXBlKGtleSkgPT09ICdzdHJpbmcnIHx8IHR5cGUoa2V5KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZXR1cm4gYWRkKHZhbFtrZXldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYWRkKHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICh0eXBlKGRhdGEpID09PSAnYXJyYXknKSB7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGRhdGEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgdmFsID0gZGF0YVtfaV07XG4gICAgICAgIHZpc2l0KHZhbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoayBpbiBkYXRhKSB7XG4gICAgICAgIHZhbCA9IGRhdGFba107XG4gICAgICAgIHZpc2l0KHZhbCwgayk7XG4gICAgICB9XG4gICAgfVxuICAgIHIuZG9tYWluID0gW3IubWluLCByLm1heF07XG4gICAgci5saW1pdHMgPSBmdW5jdGlvbihtb2RlLCBudW0pIHtcbiAgICAgIHJldHVybiBjaHJvbWEubGltaXRzKHIsIG1vZGUsIG51bSk7XG4gICAgfTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBjaHJvbWEubGltaXRzID0gZnVuY3Rpb24oZGF0YSwgbW9kZSwgbnVtKSB7XG4gICAgdmFyIGFzc2lnbm1lbnRzLCBiZXN0LCBjZW50cm9pZHMsIGNsdXN0ZXIsIGNsdXN0ZXJTaXplcywgZGlzdCwgaSwgaiwga0NsdXN0ZXJzLCBsaW1pdHMsIG1heCwgbWF4X2xvZywgbWluLCBtaW5fbG9nLCBtaW5kaXN0LCBuLCBuYl9pdGVycywgbmV3Q2VudHJvaWRzLCBwLCBwYiwgcHIsIHJlcGVhdCwgc3VtLCB0bXBLTWVhbnNCcmVha3MsIHZhbHVlLCB2YWx1ZXMsIF9pLCBfaiwgX2ssIF9sLCBfbSwgX24sIF9vLCBfcCwgX3EsIF9yLCBfcmVmMSwgX3JlZjEwLCBfcmVmMTEsIF9yZWYxMiwgX3JlZjEzLCBfcmVmMTQsIF9yZWYxNSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX3JlZjgsIF9yZWY5LCBfcywgX3QsIF91LCBfdiwgX3c7XG5cbiAgICBpZiAobW9kZSA9PSBudWxsKSB7XG4gICAgICBtb2RlID0gJ2VxdWFsJztcbiAgICB9XG4gICAgaWYgKG51bSA9PSBudWxsKSB7XG4gICAgICBudW0gPSA3O1xuICAgIH1cbiAgICBpZiAoZGF0YS52YWx1ZXMgPT0gbnVsbCkge1xuICAgICAgZGF0YSA9IGNocm9tYS5hbmFseXplKGRhdGEpO1xuICAgIH1cbiAgICBtaW4gPSBkYXRhLm1pbjtcbiAgICBtYXggPSBkYXRhLm1heDtcbiAgICBzdW0gPSBkYXRhLnN1bTtcbiAgICB2YWx1ZXMgPSBkYXRhLnZhbHVlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9KTtcbiAgICBsaW1pdHMgPSBbXTtcbiAgICBpZiAobW9kZS5zdWJzdHIoMCwgMSkgPT09ICdjJykge1xuICAgICAgbGltaXRzLnB1c2gobWluKTtcbiAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG4gICAgfVxuICAgIGlmIChtb2RlLnN1YnN0cigwLCAxKSA9PT0gJ2UnKSB7XG4gICAgICBsaW1pdHMucHVzaChtaW4pO1xuICAgICAgZm9yIChpID0gX2kgPSAxLCBfcmVmMSA9IG51bSAtIDE7IDEgPD0gX3JlZjEgPyBfaSA8PSBfcmVmMSA6IF9pID49IF9yZWYxOyBpID0gMSA8PSBfcmVmMSA/ICsrX2kgOiAtLV9pKSB7XG4gICAgICAgIGxpbWl0cy5wdXNoKG1pbiArIChpIC8gbnVtKSAqIChtYXggLSBtaW4pKTtcbiAgICAgIH1cbiAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG4gICAgfSBlbHNlIGlmIChtb2RlLnN1YnN0cigwLCAxKSA9PT0gJ2wnKSB7XG4gICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgdGhyb3cgJ0xvZ2FyaXRobWljIHNjYWxlcyBhcmUgb25seSBwb3NzaWJsZSBmb3IgdmFsdWVzID4gMCc7XG4gICAgICB9XG4gICAgICBtaW5fbG9nID0gTWF0aC5MT0cxMEUgKiBNYXRoLmxvZyhtaW4pO1xuICAgICAgbWF4X2xvZyA9IE1hdGguTE9HMTBFICogTWF0aC5sb2cobWF4KTtcbiAgICAgIGxpbWl0cy5wdXNoKG1pbik7XG4gICAgICBmb3IgKGkgPSBfaiA9IDEsIF9yZWYyID0gbnVtIC0gMTsgMSA8PSBfcmVmMiA/IF9qIDw9IF9yZWYyIDogX2ogPj0gX3JlZjI7IGkgPSAxIDw9IF9yZWYyID8gKytfaiA6IC0tX2opIHtcbiAgICAgICAgbGltaXRzLnB1c2goTWF0aC5wb3coMTAsIG1pbl9sb2cgKyAoaSAvIG51bSkgKiAobWF4X2xvZyAtIG1pbl9sb2cpKSk7XG4gICAgICB9XG4gICAgICBsaW1pdHMucHVzaChtYXgpO1xuICAgIH0gZWxzZSBpZiAobW9kZS5zdWJzdHIoMCwgMSkgPT09ICdxJykge1xuICAgICAgbGltaXRzLnB1c2gobWluKTtcbiAgICAgIGZvciAoaSA9IF9rID0gMSwgX3JlZjMgPSBudW0gLSAxOyAxIDw9IF9yZWYzID8gX2sgPD0gX3JlZjMgOiBfayA+PSBfcmVmMzsgaSA9IDEgPD0gX3JlZjMgPyArK19rIDogLS1faykge1xuICAgICAgICBwID0gdmFsdWVzLmxlbmd0aCAqIGkgLyBudW07XG4gICAgICAgIHBiID0gTWF0aC5mbG9vcihwKTtcbiAgICAgICAgaWYgKHBiID09PSBwKSB7XG4gICAgICAgICAgbGltaXRzLnB1c2godmFsdWVzW3BiXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHIgPSBwIC0gcGI7XG4gICAgICAgICAgbGltaXRzLnB1c2godmFsdWVzW3BiXSAqIHByICsgdmFsdWVzW3BiICsgMV0gKiAoMSAtIHByKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG4gICAgfSBlbHNlIGlmIChtb2RlLnN1YnN0cigwLCAxKSA9PT0gJ2snKSB7XG4gICAgICAvKlxuICAgICAgaW1wbGVtZW50YXRpb24gYmFzZWQgb25cbiAgICAgIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9maWd1ZS9zb3VyY2UvYnJvd3NlL3RydW5rL2ZpZ3VlLmpzIzMzNlxuICAgICAgc2ltcGxpZmllZCBmb3IgMS1kIGlucHV0IHZhbHVlc1xuICAgICAgKi9cblxuICAgICAgbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICBhc3NpZ25tZW50cyA9IG5ldyBBcnJheShuKTtcbiAgICAgIGNsdXN0ZXJTaXplcyA9IG5ldyBBcnJheShudW0pO1xuICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgIG5iX2l0ZXJzID0gMDtcbiAgICAgIGNlbnRyb2lkcyA9IG51bGw7XG4gICAgICBjZW50cm9pZHMgPSBbXTtcbiAgICAgIGNlbnRyb2lkcy5wdXNoKG1pbik7XG4gICAgICBmb3IgKGkgPSBfbCA9IDEsIF9yZWY0ID0gbnVtIC0gMTsgMSA8PSBfcmVmNCA/IF9sIDw9IF9yZWY0IDogX2wgPj0gX3JlZjQ7IGkgPSAxIDw9IF9yZWY0ID8gKytfbCA6IC0tX2wpIHtcbiAgICAgICAgY2VudHJvaWRzLnB1c2gobWluICsgKGkgLyBudW0pICogKG1heCAtIG1pbikpO1xuICAgICAgfVxuICAgICAgY2VudHJvaWRzLnB1c2gobWF4KTtcbiAgICAgIHdoaWxlIChyZXBlYXQpIHtcbiAgICAgICAgZm9yIChqID0gX20gPSAwLCBfcmVmNSA9IG51bSAtIDE7IDAgPD0gX3JlZjUgPyBfbSA8PSBfcmVmNSA6IF9tID49IF9yZWY1OyBqID0gMCA8PSBfcmVmNSA/ICsrX20gOiAtLV9tKSB7XG4gICAgICAgICAgY2x1c3RlclNpemVzW2pdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBfbiA9IDAsIF9yZWY2ID0gbiAtIDE7IDAgPD0gX3JlZjYgPyBfbiA8PSBfcmVmNiA6IF9uID49IF9yZWY2OyBpID0gMCA8PSBfcmVmNiA/ICsrX24gOiAtLV9uKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgbWluZGlzdCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgZm9yIChqID0gX28gPSAwLCBfcmVmNyA9IG51bSAtIDE7IDAgPD0gX3JlZjcgPyBfbyA8PSBfcmVmNyA6IF9vID49IF9yZWY3OyBqID0gMCA8PSBfcmVmNyA/ICsrX28gOiAtLV9vKSB7XG4gICAgICAgICAgICBkaXN0ID0gTWF0aC5hYnMoY2VudHJvaWRzW2pdIC0gdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGRpc3QgPCBtaW5kaXN0KSB7XG4gICAgICAgICAgICAgIG1pbmRpc3QgPSBkaXN0O1xuICAgICAgICAgICAgICBiZXN0ID0gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY2x1c3RlclNpemVzW2Jlc3RdKys7XG4gICAgICAgICAgYXNzaWdubWVudHNbaV0gPSBiZXN0O1xuICAgICAgICB9XG4gICAgICAgIG5ld0NlbnRyb2lkcyA9IG5ldyBBcnJheShudW0pO1xuICAgICAgICBmb3IgKGogPSBfcCA9IDAsIF9yZWY4ID0gbnVtIC0gMTsgMCA8PSBfcmVmOCA/IF9wIDw9IF9yZWY4IDogX3AgPj0gX3JlZjg7IGogPSAwIDw9IF9yZWY4ID8gKytfcCA6IC0tX3ApIHtcbiAgICAgICAgICBuZXdDZW50cm9pZHNbal0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IF9xID0gMCwgX3JlZjkgPSBuIC0gMTsgMCA8PSBfcmVmOSA/IF9xIDw9IF9yZWY5IDogX3EgPj0gX3JlZjk7IGkgPSAwIDw9IF9yZWY5ID8gKytfcSA6IC0tX3EpIHtcbiAgICAgICAgICBjbHVzdGVyID0gYXNzaWdubWVudHNbaV07XG4gICAgICAgICAgaWYgKG5ld0NlbnRyb2lkc1tjbHVzdGVyXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3Q2VudHJvaWRzW2NsdXN0ZXJdID0gdmFsdWVzW2ldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdDZW50cm9pZHNbY2x1c3Rlcl0gKz0gdmFsdWVzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGogPSBfciA9IDAsIF9yZWYxMCA9IG51bSAtIDE7IDAgPD0gX3JlZjEwID8gX3IgPD0gX3JlZjEwIDogX3IgPj0gX3JlZjEwOyBqID0gMCA8PSBfcmVmMTAgPyArK19yIDogLS1fcikge1xuICAgICAgICAgIG5ld0NlbnRyb2lkc1tqXSAqPSAxIC8gY2x1c3RlclNpemVzW2pdO1xuICAgICAgICB9XG4gICAgICAgIHJlcGVhdCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGogPSBfcyA9IDAsIF9yZWYxMSA9IG51bSAtIDE7IDAgPD0gX3JlZjExID8gX3MgPD0gX3JlZjExIDogX3MgPj0gX3JlZjExOyBqID0gMCA8PSBfcmVmMTEgPyArK19zIDogLS1fcykge1xuICAgICAgICAgIGlmIChuZXdDZW50cm9pZHNbal0gIT09IGNlbnRyb2lkc1tpXSkge1xuICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjZW50cm9pZHMgPSBuZXdDZW50cm9pZHM7XG4gICAgICAgIG5iX2l0ZXJzKys7XG4gICAgICAgIGlmIChuYl9pdGVycyA+IDIwMCkge1xuICAgICAgICAgIHJlcGVhdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBrQ2x1c3RlcnMgPSB7fTtcbiAgICAgIGZvciAoaiA9IF90ID0gMCwgX3JlZjEyID0gbnVtIC0gMTsgMCA8PSBfcmVmMTIgPyBfdCA8PSBfcmVmMTIgOiBfdCA+PSBfcmVmMTI7IGogPSAwIDw9IF9yZWYxMiA/ICsrX3QgOiAtLV90KSB7XG4gICAgICAgIGtDbHVzdGVyc1tqXSA9IFtdO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gX3UgPSAwLCBfcmVmMTMgPSBuIC0gMTsgMCA8PSBfcmVmMTMgPyBfdSA8PSBfcmVmMTMgOiBfdSA+PSBfcmVmMTM7IGkgPSAwIDw9IF9yZWYxMyA/ICsrX3UgOiAtLV91KSB7XG4gICAgICAgIGNsdXN0ZXIgPSBhc3NpZ25tZW50c1tpXTtcbiAgICAgICAga0NsdXN0ZXJzW2NsdXN0ZXJdLnB1c2godmFsdWVzW2ldKTtcbiAgICAgIH1cbiAgICAgIHRtcEtNZWFuc0JyZWFrcyA9IFtdO1xuICAgICAgZm9yIChqID0gX3YgPSAwLCBfcmVmMTQgPSBudW0gLSAxOyAwIDw9IF9yZWYxNCA/IF92IDw9IF9yZWYxNCA6IF92ID49IF9yZWYxNDsgaiA9IDAgPD0gX3JlZjE0ID8gKytfdiA6IC0tX3YpIHtcbiAgICAgICAgdG1wS01lYW5zQnJlYWtzLnB1c2goa0NsdXN0ZXJzW2pdWzBdKTtcbiAgICAgICAgdG1wS01lYW5zQnJlYWtzLnB1c2goa0NsdXN0ZXJzW2pdW2tDbHVzdGVyc1tqXS5sZW5ndGggLSAxXSk7XG4gICAgICB9XG4gICAgICB0bXBLTWVhbnNCcmVha3MgPSB0bXBLTWVhbnNCcmVha3Muc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH0pO1xuICAgICAgbGltaXRzLnB1c2godG1wS01lYW5zQnJlYWtzWzBdKTtcbiAgICAgIGZvciAoaSA9IF93ID0gMSwgX3JlZjE1ID0gdG1wS01lYW5zQnJlYWtzLmxlbmd0aCAtIDE7IF93IDw9IF9yZWYxNTsgaSA9IF93ICs9IDIpIHtcbiAgICAgICAgaWYgKCFpc05hTih0bXBLTWVhbnNCcmVha3NbaV0pKSB7XG4gICAgICAgICAgbGltaXRzLnB1c2godG1wS01lYW5zQnJlYWtzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGltaXRzO1xuICB9O1xuXG4gIC8qKlxuICBcdENvbG9yQnJld2VyIGNvbG9ycyBmb3IgY2hyb21hLmpzXG4gIFxuICBcdENvcHlyaWdodCAoYykgMjAwMiBDeW50aGlhIEJyZXdlciwgTWFyayBIYXJyb3dlciwgYW5kIFRoZSBcbiAgXHRQZW5uc3lsdmFuaWEgU3RhdGUgVW5pdmVyc2l0eS5cbiAgXG4gIFx0TGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgXG4gIFx0eW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICBcdFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFx0XG4gIFx0aHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gIFxuICBcdFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWRcbiAgXHR1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUlxuICBcdENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gIFx0c3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgXG4gICAgICBAcHJlc2VydmVcbiAgKi9cblxuXG4gIGNocm9tYS5icmV3ZXIgPSBicmV3ZXIgPSB7XG4gICAgT3JSZDogWycjZmZmN2VjJywgJyNmZWU4YzgnLCAnI2ZkZDQ5ZScsICcjZmRiYjg0JywgJyNmYzhkNTknLCAnI2VmNjU0OCcsICcjZDczMDFmJywgJyNiMzAwMDAnLCAnIzdmMDAwMCddLFxuICAgIFB1QnU6IFsnI2ZmZjdmYicsICcjZWNlN2YyJywgJyNkMGQxZTYnLCAnI2E2YmRkYicsICcjNzRhOWNmJywgJyMzNjkwYzAnLCAnIzA1NzBiMCcsICcjMDQ1YThkJywgJyMwMjM4NTgnXSxcbiAgICBCdVB1OiBbJyNmN2ZjZmQnLCAnI2UwZWNmNCcsICcjYmZkM2U2JywgJyM5ZWJjZGEnLCAnIzhjOTZjNicsICcjOGM2YmIxJywgJyM4ODQxOWQnLCAnIzgxMGY3YycsICcjNGQwMDRiJ10sXG4gICAgT3JhbmdlczogWycjZmZmNWViJywgJyNmZWU2Y2UnLCAnI2ZkZDBhMicsICcjZmRhZTZiJywgJyNmZDhkM2MnLCAnI2YxNjkxMycsICcjZDk0ODAxJywgJyNhNjM2MDMnLCAnIzdmMjcwNCddLFxuICAgIEJ1R246IFsnI2Y3ZmNmZCcsICcjZTVmNWY5JywgJyNjY2VjZTYnLCAnIzk5ZDhjOScsICcjNjZjMmE0JywgJyM0MWFlNzYnLCAnIzIzOGI0NScsICcjMDA2ZDJjJywgJyMwMDQ0MWInXSxcbiAgICBZbE9yQnI6IFsnI2ZmZmZlNScsICcjZmZmN2JjJywgJyNmZWUzOTEnLCAnI2ZlYzQ0ZicsICcjZmU5OTI5JywgJyNlYzcwMTQnLCAnI2NjNGMwMicsICcjOTkzNDA0JywgJyM2NjI1MDYnXSxcbiAgICBZbEduOiBbJyNmZmZmZTUnLCAnI2Y3ZmNiOScsICcjZDlmMGEzJywgJyNhZGRkOGUnLCAnIzc4YzY3OScsICcjNDFhYjVkJywgJyMyMzg0NDMnLCAnIzAwNjgzNycsICcjMDA0NTI5J10sXG4gICAgUmVkczogWycjZmZmNWYwJywgJyNmZWUwZDInLCAnI2ZjYmJhMScsICcjZmM5MjcyJywgJyNmYjZhNGEnLCAnI2VmM2IyYycsICcjY2IxODFkJywgJyNhNTBmMTUnLCAnIzY3MDAwZCddLFxuICAgIFJkUHU6IFsnI2ZmZjdmMycsICcjZmRlMGRkJywgJyNmY2M1YzAnLCAnI2ZhOWZiNScsICcjZjc2OGExJywgJyNkZDM0OTcnLCAnI2FlMDE3ZScsICcjN2EwMTc3JywgJyM0OTAwNmEnXSxcbiAgICBHcmVlbnM6IFsnI2Y3ZmNmNScsICcjZTVmNWUwJywgJyNjN2U5YzAnLCAnI2ExZDk5YicsICcjNzRjNDc2JywgJyM0MWFiNWQnLCAnIzIzOGI0NScsICcjMDA2ZDJjJywgJyMwMDQ0MWInXSxcbiAgICBZbEduQnU6IFsnI2ZmZmZkOScsICcjZWRmOGIxJywgJyNjN2U5YjQnLCAnIzdmY2RiYicsICcjNDFiNmM0JywgJyMxZDkxYzAnLCAnIzIyNWVhOCcsICcjMjUzNDk0JywgJyMwODFkNTgnXSxcbiAgICBQdXJwbGVzOiBbJyNmY2ZiZmQnLCAnI2VmZWRmNScsICcjZGFkYWViJywgJyNiY2JkZGMnLCAnIzllOWFjOCcsICcjODA3ZGJhJywgJyM2YTUxYTMnLCAnIzU0Mjc4ZicsICcjM2YwMDdkJ10sXG4gICAgR25CdTogWycjZjdmY2YwJywgJyNlMGYzZGInLCAnI2NjZWJjNScsICcjYThkZGI1JywgJyM3YmNjYzQnLCAnIzRlYjNkMycsICcjMmI4Y2JlJywgJyMwODY4YWMnLCAnIzA4NDA4MSddLFxuICAgIEdyZXlzOiBbJyNmZmZmZmYnLCAnI2YwZjBmMCcsICcjZDlkOWQ5JywgJyNiZGJkYmQnLCAnIzk2OTY5NicsICcjNzM3MzczJywgJyM1MjUyNTInLCAnIzI1MjUyNScsICcjMDAwMDAwJ10sXG4gICAgWWxPclJkOiBbJyNmZmZmY2MnLCAnI2ZmZWRhMCcsICcjZmVkOTc2JywgJyNmZWIyNGMnLCAnI2ZkOGQzYycsICcjZmM0ZTJhJywgJyNlMzFhMWMnLCAnI2JkMDAyNicsICcjODAwMDI2J10sXG4gICAgUHVSZDogWycjZjdmNGY5JywgJyNlN2UxZWYnLCAnI2Q0YjlkYScsICcjYzk5NGM3JywgJyNkZjY1YjAnLCAnI2U3Mjk4YScsICcjY2UxMjU2JywgJyM5ODAwNDMnLCAnIzY3MDAxZiddLFxuICAgIEJsdWVzOiBbJyNmN2ZiZmYnLCAnI2RlZWJmNycsICcjYzZkYmVmJywgJyM5ZWNhZTEnLCAnIzZiYWVkNicsICcjNDI5MmM2JywgJyMyMTcxYjUnLCAnIzA4NTE5YycsICcjMDgzMDZiJ10sXG4gICAgUHVCdUduOiBbJyNmZmY3ZmInLCAnI2VjZTJmMCcsICcjZDBkMWU2JywgJyNhNmJkZGInLCAnIzY3YTljZicsICcjMzY5MGMwJywgJyMwMjgxOGEnLCAnIzAxNmM1OScsICcjMDE0NjM2J10sXG4gICAgU3BlY3RyYWw6IFsnIzllMDE0MicsICcjZDUzZTRmJywgJyNmNDZkNDMnLCAnI2ZkYWU2MScsICcjZmVlMDhiJywgJyNmZmZmYmYnLCAnI2U2ZjU5OCcsICcjYWJkZGE0JywgJyM2NmMyYTUnLCAnIzMyODhiZCcsICcjNWU0ZmEyJ10sXG4gICAgUmRZbEduOiBbJyNhNTAwMjYnLCAnI2Q3MzAyNycsICcjZjQ2ZDQzJywgJyNmZGFlNjEnLCAnI2ZlZTA4YicsICcjZmZmZmJmJywgJyNkOWVmOGInLCAnI2E2ZDk2YScsICcjNjZiZDYzJywgJyMxYTk4NTAnLCAnIzAwNjgzNyddLFxuICAgIFJkQnU6IFsnIzY3MDAxZicsICcjYjIxODJiJywgJyNkNjYwNGQnLCAnI2Y0YTU4MicsICcjZmRkYmM3JywgJyNmN2Y3ZjcnLCAnI2QxZTVmMCcsICcjOTJjNWRlJywgJyM0MzkzYzMnLCAnIzIxNjZhYycsICcjMDUzMDYxJ10sXG4gICAgUGlZRzogWycjOGUwMTUyJywgJyNjNTFiN2QnLCAnI2RlNzdhZScsICcjZjFiNmRhJywgJyNmZGUwZWYnLCAnI2Y3ZjdmNycsICcjZTZmNWQwJywgJyNiOGUxODYnLCAnIzdmYmM0MScsICcjNGQ5MjIxJywgJyMyNzY0MTknXSxcbiAgICBQUkduOiBbJyM0MDAwNGInLCAnIzc2MmE4MycsICcjOTk3MGFiJywgJyNjMmE1Y2YnLCAnI2U3ZDRlOCcsICcjZjdmN2Y3JywgJyNkOWYwZDMnLCAnI2E2ZGJhMCcsICcjNWFhZTYxJywgJyMxYjc4MzcnLCAnIzAwNDQxYiddLFxuICAgIFJkWWxCdTogWycjYTUwMDI2JywgJyNkNzMwMjcnLCAnI2Y0NmQ0MycsICcjZmRhZTYxJywgJyNmZWUwOTAnLCAnI2ZmZmZiZicsICcjZTBmM2Y4JywgJyNhYmQ5ZTknLCAnIzc0YWRkMScsICcjNDU3NWI0JywgJyMzMTM2OTUnXSxcbiAgICBCckJHOiBbJyM1NDMwMDUnLCAnIzhjNTEwYScsICcjYmY4MTJkJywgJyNkZmMyN2QnLCAnI2Y2ZThjMycsICcjZjVmNWY1JywgJyNjN2VhZTUnLCAnIzgwY2RjMScsICcjMzU5NzhmJywgJyMwMTY2NWUnLCAnIzAwM2MzMCddLFxuICAgIFJkR3k6IFsnIzY3MDAxZicsICcjYjIxODJiJywgJyNkNjYwNGQnLCAnI2Y0YTU4MicsICcjZmRkYmM3JywgJyNmZmZmZmYnLCAnI2UwZTBlMCcsICcjYmFiYWJhJywgJyM4Nzg3ODcnLCAnIzRkNGQ0ZCcsICcjMWExYTFhJ10sXG4gICAgUHVPcjogWycjN2YzYjA4JywgJyNiMzU4MDYnLCAnI2UwODIxNCcsICcjZmRiODYzJywgJyNmZWUwYjYnLCAnI2Y3ZjdmNycsICcjZDhkYWViJywgJyNiMmFiZDInLCAnIzgwNzNhYycsICcjNTQyNzg4JywgJyMyZDAwNGInXSxcbiAgICBTZXQyOiBbJyM2NmMyYTUnLCAnI2ZjOGQ2MicsICcjOGRhMGNiJywgJyNlNzhhYzMnLCAnI2E2ZDg1NCcsICcjZmZkOTJmJywgJyNlNWM0OTQnLCAnI2IzYjNiMyddLFxuICAgIEFjY2VudDogWycjN2ZjOTdmJywgJyNiZWFlZDQnLCAnI2ZkYzA4NicsICcjZmZmZjk5JywgJyMzODZjYjAnLCAnI2YwMDI3ZicsICcjYmY1YjE3JywgJyM2NjY2NjYnXSxcbiAgICBTZXQxOiBbJyNlNDFhMWMnLCAnIzM3N2ViOCcsICcjNGRhZjRhJywgJyM5ODRlYTMnLCAnI2ZmN2YwMCcsICcjZmZmZjMzJywgJyNhNjU2MjgnLCAnI2Y3ODFiZicsICcjOTk5OTk5J10sXG4gICAgU2V0MzogWycjOGRkM2M3JywgJyNmZmZmYjMnLCAnI2JlYmFkYScsICcjZmI4MDcyJywgJyM4MGIxZDMnLCAnI2ZkYjQ2MicsICcjYjNkZTY5JywgJyNmY2NkZTUnLCAnI2Q5ZDlkOScsICcjYmM4MGJkJywgJyNjY2ViYzUnLCAnI2ZmZWQ2ZiddLFxuICAgIERhcmsyOiBbJyMxYjllNzcnLCAnI2Q5NWYwMicsICcjNzU3MGIzJywgJyNlNzI5OGEnLCAnIzY2YTYxZScsICcjZTZhYjAyJywgJyNhNjc2MWQnLCAnIzY2NjY2NiddLFxuICAgIFBhaXJlZDogWycjYTZjZWUzJywgJyMxZjc4YjQnLCAnI2IyZGY4YScsICcjMzNhMDJjJywgJyNmYjlhOTknLCAnI2UzMWExYycsICcjZmRiZjZmJywgJyNmZjdmMDAnLCAnI2NhYjJkNicsICcjNmEzZDlhJywgJyNmZmZmOTknLCAnI2IxNTkyOCddLFxuICAgIFBhc3RlbDI6IFsnI2IzZTJjZCcsICcjZmRjZGFjJywgJyNjYmQ1ZTgnLCAnI2Y0Y2FlNCcsICcjZTZmNWM5JywgJyNmZmYyYWUnLCAnI2YxZTJjYycsICcjY2NjY2NjJ10sXG4gICAgUGFzdGVsMTogWycjZmJiNGFlJywgJyNiM2NkZTMnLCAnI2NjZWJjNScsICcjZGVjYmU0JywgJyNmZWQ5YTYnLCAnI2ZmZmZjYycsICcjZTVkOGJkJywgJyNmZGRhZWMnLCAnI2YyZjJmMiddXG4gIH07XG5cbiAgLyoqXG4gIFx0WDExIGNvbG9yIG5hbWVzXG4gIFxuICBcdGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvI3N2Zy1jb2xvclxuICAqL1xuXG5cbiAgY2hyb21hLmNvbG9ycyA9IGNvbG9ycyA9IHtcbiAgICBpbmRpZ286IFwiIzRiMDA4MlwiLFxuICAgIGdvbGQ6IFwiI2ZmZDcwMFwiLFxuICAgIGhvdHBpbms6IFwiI2ZmNjliNFwiLFxuICAgIGZpcmVicmljazogXCIjYjIyMjIyXCIsXG4gICAgaW5kaWFucmVkOiBcIiNjZDVjNWNcIixcbiAgICB5ZWxsb3c6IFwiI2ZmZmYwMFwiLFxuICAgIG1pc3R5cm9zZTogXCIjZmZlNGUxXCIsXG4gICAgZGFya29saXZlZ3JlZW46IFwiIzU1NmIyZlwiLFxuICAgIG9saXZlOiBcIiM4MDgwMDBcIixcbiAgICBkYXJrc2VhZ3JlZW46IFwiIzhmYmM4ZlwiLFxuICAgIHBpbms6IFwiI2ZmYzBjYlwiLFxuICAgIHRvbWF0bzogXCIjZmY2MzQ3XCIsXG4gICAgbGlnaHRjb3JhbDogXCIjZjA4MDgwXCIsXG4gICAgb3JhbmdlcmVkOiBcIiNmZjQ1MDBcIixcbiAgICBuYXZham93aGl0ZTogXCIjZmZkZWFkXCIsXG4gICAgbGltZTogXCIjMDBmZjAwXCIsXG4gICAgcGFsZWdyZWVuOiBcIiM5OGZiOThcIixcbiAgICBkYXJrc2xhdGVncmV5OiBcIiMyZjRmNGZcIixcbiAgICBncmVlbnllbGxvdzogXCIjYWRmZjJmXCIsXG4gICAgYnVybHl3b29kOiBcIiNkZWI4ODdcIixcbiAgICBzZWFzaGVsbDogXCIjZmZmNWVlXCIsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46IFwiIzAwZmE5YVwiLFxuICAgIGZ1Y2hzaWE6IFwiI2ZmMDBmZlwiLFxuICAgIHBhcGF5YXdoaXA6IFwiI2ZmZWZkNVwiLFxuICAgIGJsYW5jaGVkYWxtb25kOiBcIiNmZmViY2RcIixcbiAgICBjaGFydHJldXNlOiBcIiM3ZmZmMDBcIixcbiAgICBkaW1ncmF5OiBcIiM2OTY5NjlcIixcbiAgICBibGFjazogXCIjMDAwMDAwXCIsXG4gICAgcGVhY2hwdWZmOiBcIiNmZmRhYjlcIixcbiAgICBzcHJpbmdncmVlbjogXCIjMDBmZjdmXCIsXG4gICAgYXF1YW1hcmluZTogXCIjN2ZmZmQ0XCIsXG4gICAgd2hpdGU6IFwiI2ZmZmZmZlwiLFxuICAgIG9yYW5nZTogXCIjZmZhNTAwXCIsXG4gICAgbGlnaHRzYWxtb246IFwiI2ZmYTA3YVwiLFxuICAgIGRhcmtzbGF0ZWdyYXk6IFwiIzJmNGY0ZlwiLFxuICAgIGJyb3duOiBcIiNhNTJhMmFcIixcbiAgICBpdm9yeTogXCIjZmZmZmYwXCIsXG4gICAgZG9kZ2VyYmx1ZTogXCIjMWU5MGZmXCIsXG4gICAgcGVydTogXCIjY2Q4NTNmXCIsXG4gICAgbGF3bmdyZWVuOiBcIiM3Y2ZjMDBcIixcbiAgICBjaG9jb2xhdGU6IFwiI2QyNjkxZVwiLFxuICAgIGNyaW1zb246IFwiI2RjMTQzY1wiLFxuICAgIGZvcmVzdGdyZWVuOiBcIiMyMjhiMjJcIixcbiAgICBkYXJrZ3JleTogXCIjYTlhOWE5XCIsXG4gICAgbGlnaHRzZWFncmVlbjogXCIjMjBiMmFhXCIsXG4gICAgY3lhbjogXCIjMDBmZmZmXCIsXG4gICAgbWludGNyZWFtOiBcIiNmNWZmZmFcIixcbiAgICBzaWx2ZXI6IFwiI2MwYzBjMFwiLFxuICAgIGFudGlxdWV3aGl0ZTogXCIjZmFlYmQ3XCIsXG4gICAgbWVkaXVtb3JjaGlkOiBcIiNiYTU1ZDNcIixcbiAgICBza3libHVlOiBcIiM4N2NlZWJcIixcbiAgICBncmF5OiBcIiM4MDgwODBcIixcbiAgICBkYXJrdHVycXVvaXNlOiBcIiMwMGNlZDFcIixcbiAgICBnb2xkZW5yb2Q6IFwiI2RhYTUyMFwiLFxuICAgIGRhcmtncmVlbjogXCIjMDA2NDAwXCIsXG4gICAgZmxvcmFsd2hpdGU6IFwiI2ZmZmFmMFwiLFxuICAgIGRhcmt2aW9sZXQ6IFwiIzk0MDBkM1wiLFxuICAgIGRhcmtncmF5OiBcIiNhOWE5YTlcIixcbiAgICBtb2NjYXNpbjogXCIjZmZlNGI1XCIsXG4gICAgc2FkZGxlYnJvd246IFwiIzhiNDUxM1wiLFxuICAgIGdyZXk6IFwiIzgwODA4MFwiLFxuICAgIGRhcmtzbGF0ZWJsdWU6IFwiIzQ4M2Q4YlwiLFxuICAgIGxpZ2h0c2t5Ymx1ZTogXCIjODdjZWZhXCIsXG4gICAgbGlnaHRwaW5rOiBcIiNmZmI2YzFcIixcbiAgICBtZWRpdW12aW9sZXRyZWQ6IFwiI2M3MTU4NVwiLFxuICAgIHNsYXRlZ3JleTogXCIjNzA4MDkwXCIsXG4gICAgcmVkOiBcIiNmZjAwMDBcIixcbiAgICBkZWVwcGluazogXCIjZmYxNDkzXCIsXG4gICAgbGltZWdyZWVuOiBcIiMzMmNkMzJcIixcbiAgICBkYXJrbWFnZW50YTogXCIjOGIwMDhiXCIsXG4gICAgcGFsZWdvbGRlbnJvZDogXCIjZWVlOGFhXCIsXG4gICAgcGx1bTogXCIjZGRhMGRkXCIsXG4gICAgdHVycXVvaXNlOiBcIiM0MGUwZDBcIixcbiAgICBsaWdodGdyZXk6IFwiI2QzZDNkM1wiLFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiBcIiNmYWZhZDJcIixcbiAgICBkYXJrZ29sZGVucm9kOiBcIiNiODg2MGJcIixcbiAgICBsYXZlbmRlcjogXCIjZTZlNmZhXCIsXG4gICAgbWFyb29uOiBcIiM4MDAwMDBcIixcbiAgICB5ZWxsb3dncmVlbjogXCIjOWFjZDMyXCIsXG4gICAgc2FuZHlicm93bjogXCIjZjRhNDYwXCIsXG4gICAgdGhpc3RsZTogXCIjZDhiZmQ4XCIsXG4gICAgdmlvbGV0OiBcIiNlZTgyZWVcIixcbiAgICBuYXZ5OiBcIiMwMDAwODBcIixcbiAgICBtYWdlbnRhOiBcIiNmZjAwZmZcIixcbiAgICBkaW1ncmV5OiBcIiM2OTY5NjlcIixcbiAgICB0YW46IFwiI2QyYjQ4Y1wiLFxuICAgIHJvc3licm93bjogXCIjYmM4ZjhmXCIsXG4gICAgb2xpdmVkcmFiOiBcIiM2YjhlMjNcIixcbiAgICBibHVlOiBcIiMwMDAwZmZcIixcbiAgICBsaWdodGJsdWU6IFwiI2FkZDhlNlwiLFxuICAgIGdob3N0d2hpdGU6IFwiI2Y4ZjhmZlwiLFxuICAgIGhvbmV5ZGV3OiBcIiNmMGZmZjBcIixcbiAgICBjb3JuZmxvd2VyYmx1ZTogXCIjNjQ5NWVkXCIsXG4gICAgc2xhdGVibHVlOiBcIiM2YTVhY2RcIixcbiAgICBsaW5lbjogXCIjZmFmMGU2XCIsXG4gICAgZGFya2JsdWU6IFwiIzAwMDA4YlwiLFxuICAgIHBvd2RlcmJsdWU6IFwiI2IwZTBlNlwiLFxuICAgIHNlYWdyZWVuOiBcIiMyZThiNTdcIixcbiAgICBkYXJra2hha2k6IFwiI2JkYjc2YlwiLFxuICAgIHNub3c6IFwiI2ZmZmFmYVwiLFxuICAgIHNpZW5uYTogXCIjYTA1MjJkXCIsXG4gICAgbWVkaXVtYmx1ZTogXCIjMDAwMGNkXCIsXG4gICAgcm95YWxibHVlOiBcIiM0MTY5ZTFcIixcbiAgICBsaWdodGN5YW46IFwiI2UwZmZmZlwiLFxuICAgIGdyZWVuOiBcIiMwMDgwMDBcIixcbiAgICBtZWRpdW1wdXJwbGU6IFwiIzkzNzBkYlwiLFxuICAgIG1pZG5pZ2h0Ymx1ZTogXCIjMTkxOTcwXCIsXG4gICAgY29ybnNpbGs6IFwiI2ZmZjhkY1wiLFxuICAgIHBhbGV0dXJxdW9pc2U6IFwiI2FmZWVlZVwiLFxuICAgIGJpc3F1ZTogXCIjZmZlNGM0XCIsXG4gICAgc2xhdGVncmF5OiBcIiM3MDgwOTBcIixcbiAgICBkYXJrY3lhbjogXCIjMDA4YjhiXCIsXG4gICAga2hha2k6IFwiI2YwZTY4Y1wiLFxuICAgIHdoZWF0OiBcIiNmNWRlYjNcIixcbiAgICB0ZWFsOiBcIiMwMDgwODBcIixcbiAgICBkYXJrb3JjaGlkOiBcIiM5OTMyY2NcIixcbiAgICBkZWVwc2t5Ymx1ZTogXCIjMDBiZmZmXCIsXG4gICAgc2FsbW9uOiBcIiNmYTgwNzJcIixcbiAgICBkYXJrcmVkOiBcIiM4YjAwMDBcIixcbiAgICBzdGVlbGJsdWU6IFwiIzQ2ODJiNFwiLFxuICAgIHBhbGV2aW9sZXRyZWQ6IFwiI2RiNzA5M1wiLFxuICAgIGxpZ2h0c2xhdGVncmF5OiBcIiM3Nzg4OTlcIixcbiAgICBhbGljZWJsdWU6IFwiI2YwZjhmZlwiLFxuICAgIGxpZ2h0c2xhdGVncmV5OiBcIiM3Nzg4OTlcIixcbiAgICBsaWdodGdyZWVuOiBcIiM5MGVlOTBcIixcbiAgICBvcmNoaWQ6IFwiI2RhNzBkNlwiLFxuICAgIGdhaW5zYm9ybzogXCIjZGNkY2RjXCIsXG4gICAgbWVkaXVtc2VhZ3JlZW46IFwiIzNjYjM3MVwiLFxuICAgIGxpZ2h0Z3JheTogXCIjZDNkM2QzXCIsXG4gICAgbWVkaXVtdHVycXVvaXNlOiBcIiM0OGQxY2NcIixcbiAgICBsZW1vbmNoaWZmb246IFwiI2ZmZmFjZFwiLFxuICAgIGNhZGV0Ymx1ZTogXCIjNWY5ZWEwXCIsXG4gICAgbGlnaHR5ZWxsb3c6IFwiI2ZmZmZlMFwiLFxuICAgIGxhdmVuZGVyYmx1c2g6IFwiI2ZmZjBmNVwiLFxuICAgIGNvcmFsOiBcIiNmZjdmNTBcIixcbiAgICBwdXJwbGU6IFwiIzgwMDA4MFwiLFxuICAgIGFxdWE6IFwiIzAwZmZmZlwiLFxuICAgIHdoaXRlc21va2U6IFwiI2Y1ZjVmNVwiLFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogXCIjN2I2OGVlXCIsXG4gICAgZGFya29yYW5nZTogXCIjZmY4YzAwXCIsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogXCIjNjZjZGFhXCIsXG4gICAgZGFya3NhbG1vbjogXCIjZTk5NjdhXCIsXG4gICAgYmVpZ2U6IFwiI2Y1ZjVkY1wiLFxuICAgIGJsdWV2aW9sZXQ6IFwiIzhhMmJlMlwiLFxuICAgIGF6dXJlOiBcIiNmMGZmZmZcIixcbiAgICBsaWdodHN0ZWVsYmx1ZTogXCIjYjBjNGRlXCIsXG4gICAgb2xkbGFjZTogXCIjZmRmNWU2XCJcbiAgfTtcblxuICAvKlxuICAgICAgY2hyb21hLmpzXG4gIFxuICAgICAgQ29weXJpZ2h0IChjKSAyMDExLTIwMTMsIEdyZWdvciBBaXNjaFxuICAgICAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgXG4gICAgICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgICAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICBcbiAgICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gICAgICAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICBcbiAgICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICAgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gICAgICAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICBcbiAgICAgICogVGhlIG5hbWUgR3JlZ29yIEFpc2NoIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAgICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gIFxuICAgICAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAgICAgIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAgICAgIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICAgICAgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgR1JFR09SIEFJU0NIIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsXG4gICAgICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORyxcbiAgICAgIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gICAgICBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZXG4gICAgICBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICAgICAgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuICAgICAgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAgXG4gICAgICBAc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ2thL2Nocm9tYS5qc1xuICAqL1xuXG5cbiAgdHlwZSA9IChmdW5jdGlvbigpIHtcbiAgICAvKlxuICAgIGZvciBicm93c2VyLXNhZmUgdHlwZSBjaGVja2luZytcbiAgICBwb3J0ZWQgZnJvbSBqUXVlcnkncyAkLnR5cGVcbiAgICAqL1xuXG4gICAgdmFyIGNsYXNzVG9UeXBlLCBuYW1lLCBfaSwgX2xlbiwgX3JlZjE7XG5cbiAgICBjbGFzc1RvVHlwZSA9IHt9O1xuICAgIF9yZWYxID0gXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgVW5kZWZpbmVkIE51bGxcIi5zcGxpdChcIiBcIik7XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgbmFtZSA9IF9yZWYxW19pXTtcbiAgICAgIGNsYXNzVG9UeXBlW1wiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIl0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHZhciBzdHJUeXBlO1xuXG4gICAgICBzdHJUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG4gICAgICByZXR1cm4gY2xhc3NUb1R5cGVbc3RyVHlwZV0gfHwgXCJvYmplY3RcIjtcbiAgICB9O1xuICB9KSgpO1xuXG4gIGxpbWl0ID0gZnVuY3Rpb24oeCwgbWluLCBtYXgpIHtcbiAgICBpZiAobWluID09IG51bGwpIHtcbiAgICAgIG1pbiA9IDA7XG4gICAgfVxuICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgbWF4ID0gMTtcbiAgICB9XG4gICAgaWYgKHggPCBtaW4pIHtcbiAgICAgIHggPSBtaW47XG4gICAgfVxuICAgIGlmICh4ID4gbWF4KSB7XG4gICAgICB4ID0gbWF4O1xuICAgIH1cbiAgICByZXR1cm4geDtcbiAgfTtcblxuICB1bnBhY2sgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID49IDMpIHtcbiAgICAgIHJldHVybiBhcmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXJnc1swXTtcbiAgICB9XG4gIH07XG5cbiAgVFdPUEkgPSBNYXRoLlBJICogMjtcblxuICBQSVRISVJEID0gTWF0aC5QSSAvIDM7XG5cbiAgY29zID0gTWF0aC5jb3M7XG5cbiAgLypcbiAgaW50ZXJwb2xhdGVzIGJldHdlZW4gYSBzZXQgb2YgY29sb3JzIHV6aW5nIGEgYmV6aWVyIHNwbGluZVxuICAqL1xuXG5cbiAgYmV6aWVyID0gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIEksIEkwLCBJMSwgYywgbGFiMCwgbGFiMSwgbGFiMiwgbGFiMywgX3JlZjEsIF9yZWYyLCBfcmVmMztcblxuICAgIGNvbG9ycyA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfaSwgX2xlbiwgX3Jlc3VsdHM7XG5cbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGNvbG9ycy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBjID0gY29sb3JzW19pXTtcbiAgICAgICAgX3Jlc3VsdHMucHVzaChjaHJvbWEoYykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgIH0pKCk7XG4gICAgaWYgKGNvbG9ycy5sZW5ndGggPT09IDIpIHtcbiAgICAgIF9yZWYxID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX2ksIF9sZW4sIF9yZXN1bHRzO1xuXG4gICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gY29sb3JzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgYyA9IGNvbG9yc1tfaV07XG4gICAgICAgICAgX3Jlc3VsdHMucHVzaChjLmxhYigpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICB9KSgpLCBsYWIwID0gX3JlZjFbMF0sIGxhYjEgPSBfcmVmMVsxXTtcbiAgICAgIEkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBpLCBsYWI7XG5cbiAgICAgICAgbGFiID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBfaSwgX3Jlc3VsdHM7XG5cbiAgICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPD0gMjsgaSA9ICsrX2kpIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2gobGFiMFtpXSArIHQgKiAobGFiMVtpXSAtIGxhYjBbaV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgICB9KSgpO1xuICAgICAgICByZXR1cm4gY2hyb21hLmxhYi5hcHBseShjaHJvbWEsIGxhYik7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoY29sb3JzLmxlbmd0aCA9PT0gMykge1xuICAgICAgX3JlZjIgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfaSwgX2xlbiwgX3Jlc3VsdHM7XG5cbiAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBjb2xvcnMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICBjID0gY29sb3JzW19pXTtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKGMubGFiKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgIH0pKCksIGxhYjAgPSBfcmVmMlswXSwgbGFiMSA9IF9yZWYyWzFdLCBsYWIyID0gX3JlZjJbMl07XG4gICAgICBJID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgaSwgbGFiO1xuXG4gICAgICAgIGxhYiA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgX2ksIF9yZXN1bHRzO1xuXG4gICAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGkgPSBfaSA9IDA7IF9pIDw9IDI7IGkgPSArK19pKSB7XG4gICAgICAgICAgICBfcmVzdWx0cy5wdXNoKCgxIC0gdCkgKiAoMSAtIHQpICogbGFiMFtpXSArIDIgKiAoMSAtIHQpICogdCAqIGxhYjFbaV0gKyB0ICogdCAqIGxhYjJbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJldHVybiBjaHJvbWEubGFiLmFwcGx5KGNocm9tYSwgbGFiKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChjb2xvcnMubGVuZ3RoID09PSA0KSB7XG4gICAgICBfcmVmMyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF9pLCBfbGVuLCBfcmVzdWx0cztcblxuICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGNvbG9ycy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgIGMgPSBjb2xvcnNbX2ldO1xuICAgICAgICAgIF9yZXN1bHRzLnB1c2goYy5sYWIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgfSkoKSwgbGFiMCA9IF9yZWYzWzBdLCBsYWIxID0gX3JlZjNbMV0sIGxhYjIgPSBfcmVmM1syXSwgbGFiMyA9IF9yZWYzWzNdO1xuICAgICAgSSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGksIGxhYjtcblxuICAgICAgICBsYWIgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIF9pLCBfcmVzdWx0cztcblxuICAgICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yIChpID0gX2kgPSAwOyBfaSA8PSAyOyBpID0gKytfaSkge1xuICAgICAgICAgICAgX3Jlc3VsdHMucHVzaCgoMSAtIHQpICogKDEgLSB0KSAqICgxIC0gdCkgKiBsYWIwW2ldICsgMyAqICgxIC0gdCkgKiAoMSAtIHQpICogdCAqIGxhYjFbaV0gKyAzICogKDEgLSB0KSAqIHQgKiB0ICogbGFiMltpXSArIHQgKiB0ICogdCAqIGxhYjNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJldHVybiBjaHJvbWEubGFiLmFwcGx5KGNocm9tYSwgbGFiKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChjb2xvcnMubGVuZ3RoID09PSA1KSB7XG4gICAgICBJMCA9IGJlemllcihjb2xvcnMuc2xpY2UoMCwgMykpO1xuICAgICAgSTEgPSBiZXppZXIoY29sb3JzLnNsaWNlKDIsIDUpKTtcbiAgICAgIEkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGlmICh0IDwgMC41KSB7XG4gICAgICAgICAgcmV0dXJuIEkwKHQgKiAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gSTEoKHQgLSAwLjUpICogMik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBJO1xuICB9O1xuXG4gIGNocm9tYS5pbnRlcnBvbGF0ZS5iZXppZXIgPSBiZXppZXI7XG5cbn0pLmNhbGwodGhpcyk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2Jvd2VyX2NvbXBvbmVudHMvY2hyb21hLWpzL2Nocm9tYS5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxpc3QgPSBbXTtcclxuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdGlmKGl0ZW1bMl0pIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcclxuXHR9O1xyXG5cdHJldHVybiBsaXN0O1xyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2Nzcy1sb2FkZXIvY3NzVG9TdHJpbmcuanNcbiAqKi8iLCJkZWZpbmUoW1xuXHQnanF1ZXJ5Jyxcblx0J2JsdWViaXJkJyxcblx0Jy4vdXRpbC9taXNjLmpzJyxcblx0Jy4vdXRpbC9rZWZpci1zaWduYWwtaGFuZGxlci5qcycsXG5cdCcuL3V0aWwvdW5pcXVlLWlkLmpzJyxcblx0Jy4vdXRpbC9tYWluLWRlbHRhLW1vZGVsLmpzJyxcblx0Jy4vdXRpbC9wbHVnaW4uanMnLFxuXHQnLi91dGlsL2RlZmVyLmpzJ1xuXSwgZnVuY3Rpb24gKCQsIFAsIFUsIEtlZmlyU2lnbmFsSGFuZGxlciwgdW5pcXVlSUQsIGRtLCBwbHVnaW4sIGRlZmVyKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdHJldHVybiBwbHVnaW4uc2VsZWN0ZWQudGhlbigoKSA9PiB7XG5cblxuXHRcdC8qIGhvd2V2ZXIgKG9mdGVuKSB0aGlzIGlzIGxvYWRlZCwgY3JlYXRlIHRoZSBjbGFzcyBvbmx5IG9uY2UgKi9cblx0XHRpZiAoVS5pc0RlZmluZWQod2luZG93Ll9hbXlfQXJ0ZWZhY3QpKSB7IHJldHVybiB3aW5kb3cuX2FteV9BcnRlZmFjdCB9XG5cblxuXHRcdC8qKiB7QGV4cG9ydCBAY2xhc3MgQXJ0ZWZhY3QgQGV4dGVuZHMgS2VmaXJTaWduYWxIYW5kbGVyfVxuXHRcdCAqIFVzZSB0aGlzIGFzIGEgc3ViY2xhc3MgKG9yIGp1c3QgbWl4IGl0IGluKSB0byBwcm92aWRlIHN1cHBvcnQgZm9yXG5cdFx0ICogZXZlbnRzIGFuZCBvYnNlcnZhYmxlIHByb3BlcnRpZXMgdGhyb3VnaCBLZWZpci5qcy5cblx0XHQgKlxuXHRcdCAqIFVzZXJzIGNhbiBwYXNzIGEgcHJvbWlzZSB0aHJvdWdoIHRoZSAnYmVmb3JlQ29uc3RydWN0aW9uJyBvcHRpb24uIElmIGRvbmUsIHRoZVxuXHRcdCAqIGFydGVmYWN0IHdhaXRzIG9uIHRoYXQgcHJvbWlzZSBiZWZvcmUgY2FsbGluZyBpdHMgJ2NvbnN0cnVjdCcgbWV0aG9kLlxuXHRcdCAqIFNpbWlsYXJseSwgdXNlcnMgb2YgaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3Mgc2hvdWxkIHRlc3QgdGhlICdjb25zdHJ1Y3RlZCcgcHJvcGVydHkuXG5cdFx0ICogSWYgaXQgaXMgZGVmaW5lZCwgaXQgaXMgYSBwcm9taXNlIHRoYXQgaGFzIHRvIGJlIHdhaXRlZCBmb3IuXG5cdFx0ICogSWYgbm90LCB0aGUgb2JqZWN0IGluc3RhbmNlIGNhbiBiZSB1c2VkIHN5bmNocm9ub3VzbHkgYWZ0ZXIgY29uc3RydWN0aW9uLlxuXHRcdCAqL1xuXHRcdHdpbmRvdy5fYW15X0FydGVmYWN0ID0gZG0udnAoJ0FydGVmYWN0JywgVS5uZXdTdWJjbGFzcyhLZWZpclNpZ25hbEhhbmRsZXIsIChzdXBlckZuKSA9PiBmdW5jdGlvbiBBcnRlZmFjdChvcHRpb25zKSB7XG5cdFx0XHRzdXBlckZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblx0XHRcdHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuXHRcdFx0dmFyIHtpZCwgdHlwZSwgcGFyZW50LCBiZWZvcmVDb25zdHJ1Y3Rpb259ID0gb3B0aW9ucztcblxuXHRcdFx0Lyogc2V0IGhpZXJhcmNoeSBzdHVmZiAqL1xuXHRcdFx0dGhpcy5faWQgPSBpZCB8fCB1bmlxdWVJRCh0eXBlKTtcblx0XHRcdHRoaXMuX3R5cGUgPSB0eXBlO1xuXHRcdFx0dGhpcy5fcGFyZW50ID0gcGFyZW50O1xuXHRcdFx0dGhpcy5fY2hpbGRyZW4gPSBbXTtcblx0XHRcdGlmIChwYXJlbnQpIHsgVS5hcnJheShwYXJlbnQsICdfY2hpbGRyZW4nKS5wdXNoKHRoaXMpIH1cblxuXHRcdFx0LyogY3JlYXRlIGV2ZW50cyAqL1xuXHRcdFx0dGhpcy5uZXdFdmVudCgnZGVzdHJveScpO1xuXG5cdFx0XHQvKiBwb3NzaWJseSB3YWl0IGZvciBzb21ldGhpbmcgYmVmb3JlIGNvbnN0cnVjdGlvbiAobGlrZSBwbHVnaW5zKT8gKi9cblx0XHRcdHRoaXMuYmVmb3JlQ29uc3RydWN0aW9uKGJlZm9yZUNvbnN0cnVjdGlvbik7XG5cblx0XHRcdC8qIGdpdmUgdGhlIHJvb3QgYXJ0ZWZhY3QgYSB3YXkgdG8gcmVnaXN0ZXIgb3RoZXIgYXJ0ZWZhY3RzIGJ5IElEICovXG5cdFx0XHRpZiAodGhpcy5yb290ID09PSB0aGlzKSB7XG5cdFx0XHRcdHRoaXMuX2FydGVmYWN0c0J5SUQgPSB7fTtcblx0XHRcdFx0dGhpcy5fcmVnaXN0ZXJBcnRlZmFjdCA9IGZ1bmN0aW9uIChhcnRlZmFjdCkge1xuXHRcdFx0XHRcdFUuZ2V0RGVmKHRoaXMuX2FydGVmYWN0c0J5SUQsIGFydGVmYWN0LmlkLCBkZWZlcikucmVzb2x2ZShhcnRlZmFjdCk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHR9LCAvKiogQGxlbmRzIEFydGVmYWN0LnByb3RvdHlwZSAqLyB7XG5cblx0XHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHRcdCAqIEFsbG93IGEgcHJvbWlzZSB0byBiZSBpbnNlcnRlZCBvbiB3aGljaCB0aGUgcmVzdCBvZiBjb25zdHJ1Y3Rpb24gc2hvdWxkIHdhaXQuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHBvc3NpYmxlUHJvbWlzZSB7Kn0gIC0gYSB2YWx1ZSB0aGF0IG1pZ2h0IGJlIGEgcHJvbWlzZVxuXHRcdFx0ICovXG5cdFx0XHRiZWZvcmVDb25zdHJ1Y3Rpb24ocG9zc2libGVQcm9taXNlKSB7XG5cblx0XHRcdFx0LyogaWYgbm8gcHJvbWlzZSBpcyBwYXNzZWQgaW4sIGlnbm9yZSwgdG8ga2VlcCBjb25zdHJ1Y3Rpb24gc3luY2hyb25vdXMgKi9cblx0XHRcdFx0aWYgKCFwb3NzaWJsZVByb21pc2UgfHwgISQuaXNGdW5jdGlvbihwb3NzaWJsZVByb21pc2UudGhlbikpIHsgcmV0dXJuIH1cblxuXHRcdFx0XHQvKiBpZiB0aGlzIGlzIHRoZSBmaXJzdCBwcm9taXNlIHBhc3NlZCBpbiwgaW5pdGlhbGl6ZSAndGhpcy5jb25zdHJ1Y3RlZCcgKi9cblx0XHRcdFx0aWYgKCF0aGlzLmNvbnN0cnVjdGVkKSB7IHRoaXMuY29uc3RydWN0ZWQgPSBQLnJlc29sdmUodGhpcykgfVxuXG5cdFx0XHRcdC8qIGluc2VydCB0aGUgbmV3IHByb21pc2UgaW50byB0aGUgY2hhaW4gZm9yICd0aGlzLmNvbnN0cnVjdGVkJyByZXNvbHV0aW9uICovXG5cdFx0XHRcdHRoaXMuY29uc3RydWN0ZWQgPSB0aGlzLmNvbnN0cnVjdGVkLnRhcCgoKSA9PiBQLnJlc29sdmUocG9zc2libGVQcm9taXNlKSk7XG5cblx0XHRcdH0sXG5cblx0XHRcdC8qKiB7QHB1YmxpY317QHByb3BlcnR5fVxuXHRcdFx0ICpcblx0XHRcdCAqIEByZXR1cm4ge09iamVjdH0gLSB0aGUgb3B0aW9ucyBwcm92aWRlZCB0aHJvdWdoIHRoZSBjb25zdHJ1Y3RvclxuXHRcdFx0ICovXG5cdFx0XHRnZXQgb3B0aW9ucygpIHsgcmV0dXJuIHRoaXMuX29wdGlvbnMgfSxcblxuXHRcdFx0LyoqIHtAcHVibGljfXtAcHJvcGVydHl9XG5cdFx0XHQgKlxuXHRcdFx0ICogQHJldHVybiB7U3RyaW5nfSAtIHRoZSB1bmlxdWUgaWRlbnRpZmllciBiZWxvbmdpbmcgdG8gdGhpcyBhcnRlZmFjdFxuXHRcdFx0ICovXG5cdFx0XHRnZXQgaWQoKSB7IHJldHVybiB0aGlzLl9pZCB9LFxuXG5cdFx0XHQvKioge0BwdWJsaWN9e0Bwcm9wZXJ0eX1cblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuIHtTdHJpbmd9IC0gdGhlIHR5cGUgb2YgdGhpcyBhcnRlZmFjdFxuXHRcdFx0ICovXG5cdFx0XHRnZXQgdHlwZSgpIHsgcmV0dXJuIHRoaXMuX3R5cGUgfSxcblxuXHRcdFx0LyoqIHtAcHVibGljfXtAcHJvcGVydHl9XG5cdFx0XHQgKlxuXHRcdFx0ICogQHJldHVybiB7QXJ0ZWZhY3R8dW5kZWZpbmVkfSAtIHRoZSBwYXJlbnQgb2YgdGhpcyBhcnRlZmFjdCwgdW5sZXNzIHRoaXMgaXMgdGhlIHJvb3Rcblx0XHRcdCAqL1xuXHRcdFx0Z2V0IHBhcmVudCgpIHsgcmV0dXJuIHRoaXMuX3BhcmVudCB9LFxuXG5cdFx0XHQvKioge0BwdWJsaWN9e0Bwcm9wZXJ0eX1cblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuIHtbQXJ0ZWZhY3RdfSAtIHRoZSBjaGlsZHJlbiBvZiB0aGlzIGFydGVmYWN0XG5cdFx0XHQgKi9cblx0XHRcdGdldCBjaGlsZHJlbigpIHsgcmV0dXJuIHRoaXMuX2NoaWxkcmVuIH0sXG5cblx0XHRcdC8qKiB7QHB1YmxpY317QHByb3BlcnR5fVxuXHRcdFx0ICpcblx0XHRcdCAqIEByZXR1cm4ge0FydGVmYWN0fSAtIHRoZSByb290IG9mIHRoZSBhcnRlZmFjdCBoaWVyYXJjaHlcblx0XHRcdCAqL1xuXHRcdFx0Z2V0IHJvb3QoKSB7XG5cdFx0XHRcdGlmICghdGhpcy5fcm9vdCkgeyB0aGlzLl9yb290ID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5yb290IDogdGhpcyB9XG5cdFx0XHRcdHJldHVybiB0aGlzLl9yb290O1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqIHtAcHVibGljfXtAbWV0aG9kfVxuXHRcdFx0ICpcblx0XHRcdCAqIEdldCBhIHByb21pc2UgdG8gYW4gYXJ0ZWZhY3QgZ2l2ZW4gaXRzIElELlxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgaWQge1N0cmluZ30gICAtIHRoZSBpZCBvZiB0aGUgcmVxdWlyZWQgYXJ0ZWZhY3Rcblx0XHRcdCAqIEByZXR1cm4ge1A8QXJ0ZWZhY3Q+fSAtIHRoZSBwcm9taXNlIHRvIHRoZSBhcnRlZmFjdCB0aGF0IGhhcyB0aGUgZ2l2ZW4gaWRcblx0XHRcdCAqL1xuXHRcdFx0YXJ0ZWZhY3RCeUlkKGlkKSB7XG5cdFx0XHRcdHJldHVybiBVLmdldERlZih0aGlzLnJvb3QuX2FydGVmYWN0c0J5SUQsIGlkLCBkZWZlcikucHJvbWlzZTtcblx0XHRcdH0sXG5cblx0XHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHRcdCAqXG5cdFx0XHQgKiBUcmF2ZXJzZSB0aGUgQXJ0ZWZhY3QgaGllcmFyY2h5IHdpdGggdGhpcyBhcyByb290LlxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSBmbiB7KEFydGVmYWN0KSA9PiBCb29sZWFufSAtIHRoZSBmdW5jdGlvbiB0byBjYWxsIG9uIGVhY2ggYXJ0ZWZhY3Rcblx0XHRcdCAqL1xuXHRcdFx0dHJhdmVyc2VBcnRlZmFjdHMoZm4sIG9wdGlvbnMgPSB7fSkge1xuXHRcdFx0XHR2YXIge29yZGVyfSA9IG9wdGlvbnM7XG5cdFx0XHRcdGlmICghb3JkZXIpIHsgb3JkZXIgPSAncHJlZml4JyB9XG5cblx0XHRcdFx0aWYgKG9yZGVyID09PSAncHJlZml4JykgeyBmbih0aGlzKSB9XG5cdFx0XHRcdHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcblx0XHRcdFx0XHRjaGlsZC50cmF2ZXJzZUFydGVmYWN0cyhmbiwgb3B0aW9ucyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAob3JkZXIgPT09ICdwb3N0Zml4JykgeyBmbih0aGlzKSB9XG5cdFx0XHR9LFxuXG5cdFx0XHQvKioge0BwdWJsaWN9e0BtZXRob2R9XG5cdFx0XHQgKlxuXHRcdFx0ICogVHJhdmVyc2UgdGhlIEFydGVmYWN0IGhpZXJhcmNoeSB3aXRoIHRoaXMgYXMgcm9vdC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gZm4geyhBcnRlZmFjdCkgPT4gQm9vbGVhbn0gLSB0aGUgZnVuY3Rpb24gdG8gY2FsbCBvbiBlYWNoIGFydGVmYWN0XG5cdFx0XHQgKi9cblx0XHRcdHRyYXZlcnNlQXJ0ZWZhY3RzQnlUeXBlKHR5cGUsIGZuLCBvcHRpb25zID0ge30pIHtcblx0XHRcdFx0dmFyIHtvcmRlcn0gPSBvcHRpb25zO1xuXHRcdFx0XHRpZiAoIW9yZGVyKSB7IG9yZGVyID0gJ3ByZWZpeCcgfVxuXG5cdFx0XHRcdGlmIChvcmRlciA9PT0gJ3ByZWZpeCcgJiYgdGhpcy50eXBlID09PSB0eXBlKSB7IGZuKHRoaXMpIH1cblx0XHRcdFx0aWYgKG9wdGlvbnMuYmVmb3JlR29pbmdJbikgeyBvcHRpb25zLmJlZm9yZUdvaW5nSW4odGhpcykgfVxuXHRcdFx0XHR0aGlzLmNsb3Nlc3REZXNjZW5kYW50c0J5VHlwZSh0eXBlKS5mb3JFYWNoKChkZXNjZW5kZW50KSA9PiB7XG5cdFx0XHRcdFx0ZGVzY2VuZGVudC50cmF2ZXJzZUFydGVmYWN0c0J5VHlwZSh0eXBlLCBmbiwgb3B0aW9ucyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAob3B0aW9ucy5iZWZvcmVHb2luZ091dCkgeyBvcHRpb25zLmJlZm9yZUdvaW5nT3V0KHRoaXMpIH1cblx0XHRcdFx0aWYgKG9yZGVyID09PSAncG9zdGZpeCcgJiYgdGhpcy50eXBlID09PSB0eXBlKSB7IGZuKHRoaXMpIH1cblx0XHRcdH0sXG5cblx0XHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHRcdCAqXG5cdFx0XHQgKiBSZXRyaWV2ZSB0aGUgY2xvc2VzdCBhbmNlc3RvciAocGFyZW50LCBwYXJlbnQncyBwYXJlbnQsIC4uLilcblx0XHRcdCAqIG9mIHRoaXMgYXJ0ZWZhY3Qgd2l0aCB0aGUgZ2l2ZW4gdHlwZS5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuIHtBcnRlZmFjdHx1bmRlZmluZWR9IC0gdGhlIGNsb3Nlc3QgYW5jZXN0b3Igb2YgdGhlIGdpdmVuIHR5cGUsIHVubGVzcyB0aGVyZSBpcyBub25lXG5cdFx0XHQgKi9cblx0XHRcdGNsb3Nlc3RBbmNlc3RvckJ5VHlwZSh0eXBlKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSB0aGlzO1xuXHRcdFx0XHRkbyB7IHJlc3VsdCA9IHJlc3VsdC5wYXJlbnQgfSB3aGlsZSAocmVzdWx0ICYmIHJlc3VsdC50eXBlICYmIHJlc3VsdC50eXBlICE9PSB0eXBlKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0sXG5cblx0XHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHRcdCAqXG5cdFx0XHQgKiBSZXRyaWV2ZSB0aGUgY2xvc2VzdCBkZXNjZW5kYW50IChjaGlsZHJlbiwgY2hpbGRyZW4ncyBjaGlsZHJlbiwgLi4uKVxuXHRcdFx0ICogb2YgdGhpcyBhcnRlZmFjdCB3aXRoIHRoZSBnaXZlbiB0eXBlLlxuXHRcdFx0ICpcblx0XHRcdCAqIEByZXR1cm4ge1tBcnRlZmFjdF19IC0gdGhlIGNsb3Nlc3QgZGVzY2VuZGFudHMgb2YgdGhlIGdpdmVuIHR5cGU7IG5vbmUgb2YgdGhlbVxuXHRcdFx0ICogICAgICAgICAgICAgICAgICAgICAgICBhcmUgZGVzY2VuZGFudCBmcm9tIGFueSBvdGhlclxuXHRcdFx0ICovXG5cdFx0XHRjbG9zZXN0RGVzY2VuZGFudHNCeVR5cGUodHlwZSkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHRcdHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcblx0XHRcdFx0XHRpZiAoY2hpbGQudHlwZSA9PT0gdHlwZSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnB1c2goY2hpbGQpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSByZXN1bHQuY29uY2F0KGNoaWxkLmNsb3Nlc3REZXNjZW5kYW50c0J5VHlwZSh0eXBlKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0sXG5cblx0XHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHRcdCAqXG5cdFx0XHQgKiBJbmRpY2F0ZSB0aGF0IHRoaXMgYXJ0ZWZhY3Qgd2lsbCBuZXZlciBiZSB1c2VkIGFnYWluLCBhbGxvd2luZyBpdFxuXHRcdFx0ICogdG8gZG8gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxuXHRcdFx0ICovXG5cdFx0XHRkZXN0cm95KCkge1xuXHRcdFx0XHR0aGlzLnRyaWdnZXIoJ2Rlc3Ryb3knKTtcblx0XHRcdFx0dGhpcy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4geyBjaGlsZC5kZXN0cm95KCkgfSk7XG5cdFx0XHR9XG5cblx0XHR9KSk7XG5cblxuXHRcdC8qKiB7QGZ1bmN0aW9uIEFydGVmYWN0Lm5ld1N1YmNsYXNzfVxuXHRcdCAqIEEgc3RhdGljIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHN1YmNsYXNzIG9mIHtAbGluayBBcnRlZmFjdH0uXG5cdFx0ICovXG5cdFx0d2luZG93Ll9hbXlfQXJ0ZWZhY3QubmV3U3ViY2xhc3MgPSBmdW5jdGlvbiBuZXdTdWJDbGFzcyhuYW1lLCBjb25zdHJ1Y3RvciwgcHJvdG90eXBlID0ge30sIG9wdGlvbkRlZmF1bHRzID0ge30pIHtcblx0XHRcdHJldHVybiBkbS52cChuYW1lLCBVLm5ld1N1YmNsYXNzKHdpbmRvdy5fYW15X0FydGVmYWN0LCAoc3VwZXJGbikgPT4gZnVuY3Rpb24gKG9wdGlvbnMgPSB7fSkge1xuXG5cdFx0XHRcdC8qIHByb2Nlc3Mgb3B0aW9ucyAqL1xuXHRcdFx0XHR2YXIgcHJvY2Vzc2VkT3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0XHRcdE9iamVjdC5rZXlzKG9wdGlvbkRlZmF1bHRzKS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdFx0XHRpZiAoVS5pc1VuZGVmaW5lZChwcm9jZXNzZWRPcHRpb25zW2tleV0pKSB7XG5cdFx0XHRcdFx0XHRwcm9jZXNzZWRPcHRpb25zW2tleV0gPSBvcHRpb25EZWZhdWx0c1trZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHByb2Nlc3NlZE9wdGlvbnMudHlwZSA9IG5hbWU7XG5cblx0XHRcdFx0LyogY2FsbCBzdXBlci1jb25zdHJ1Y3RvciAqL1xuXHRcdFx0XHRzdXBlckZuLmNhbGwodGhpcywgVS5leHRlbmQob3B0aW9ucywgcHJvY2Vzc2VkT3B0aW9ucykpO1xuXG5cdFx0XHRcdC8qIGNhbGwgdGhpcyBjb25zdHJ1Y3RvciAqL1xuXHRcdFx0XHRjb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHByb2Nlc3NlZE9wdGlvbnMpO1xuXG5cdFx0XHRcdC8qIHRoZW4gcnVuIHRoZSAnY29uc3RydWN0JyBtZXRob2QgKi9cblx0XHRcdFx0aWYgKHRoaXMuY29uc3RydWN0ZWQpIHsgLy8gY29uc3RydWN0IGFzeW5jaHJvbm91c2x5XG5cdFx0XHRcdFx0dGhpcy5jb25zdHJ1Y3RlZCA9IHRoaXMuY29uc3RydWN0ZWQudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoJC5pc0Z1bmN0aW9uKHRoaXMuY29uc3RydWN0KSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gUC5yZXNvbHZlKHRoaXMuY29uc3RydWN0KG9wdGlvbnMpKS5yZXR1cm4odGhpcyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBlbHNlIGlmICgkLmlzRnVuY3Rpb24odGhpcy5jb25zdHJ1Y3QpKSB7XG5cdFx0XHRcdFx0dGhpcy5iZWZvcmVDb25zdHJ1Y3Rpb24odGhpcy5jb25zdHJ1Y3Qob3B0aW9ucykpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0LyogcmVnaXN0ZXIgdGhpcyBhcnRlZmFjdCB0byB0aGUgY2lyY3VpdGJvYXJkICovXG5cdFx0XHRcdCh0aGlzLmNvbnN0cnVjdGVkIHx8IFAucmVzb2x2ZSgpKS50aGVuKCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnJvb3QuX3JlZ2lzdGVyQXJ0ZWZhY3QodGhpcyk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9LCBVLmV4dGVuZCh7fSwgcHJvdG90eXBlLCB7XG5cdFx0XHRcdGdldCBjaXJjdWl0Ym9hcmQoKSB7XG5cdFx0XHRcdFx0aWYgKCF0aGlzLl9jaXJjdWl0Ym9hcmQpIHsgdGhpcy5fY2lyY3VpdGJvYXJkID0gdGhpcy5jbG9zZXN0QW5jZXN0b3JCeVR5cGUoJ0NpcmN1aXRib2FyZCcpIH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fY2lyY3VpdGJvYXJkO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSkpO1xuXHRcdH07XG5cblxuXHRcdHJldHVybiB3aW5kb3cuX2FteV9BcnRlZmFjdDtcblxuXG5cdH0pLnRhcCgoYykgPT4geyAkLmNpcmN1aXRib2FyZC5BcnRlZmFjdCA9IGMgfSk7XG5cblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9BcnRlZmFjdC5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuZGVmaW5lKFsnanF1ZXJ5JywgJy4vbWlzYy5qcycsICcuL2tlZmlyLWFuZC1lZ2dzLmpzJ10sIGZ1bmN0aW9uICgkLCBVLCBLZWZpcikge1xuXG5cblx0LyoqIHtAZXhwb3J0fXtAY2xhc3MgS2VmaXJTaWduYWxIYW5kbGVyfVxuXHQgKiBVc2UgdGhpcyBhcyBhIHN1YmNsYXNzIChvciBqdXN0IG1peCBpdCBpbikgdG8gcHJvdmlkZSBzdXBwb3J0IGZvclxuXHQgKiBldmVudHMgYW5kIG9ic2VydmFibGUgcHJvcGVydGllcyB0aHJvdWdoIEtlZmlyLmpzLlxuXHQgKi9cblx0dmFyIEtlZmlyU2lnbmFsSGFuZGxlciA9IFUubmV3Q2xhc3MoZnVuY3Rpb24gS2VmaXJTaWduYWxIYW5kbGVyKCkge1xuXG5cdFx0dGhpcy5fZXZlbnRzID0ge307XG5cdFx0dGhpcy5fcHJvcGVydGllcyA9IHt9O1xuXHRcdHRoaXMuX3Byb3BlcnR5QnVzc2VzID0ge307XG5cblx0fSwgLyoqIEBsZW5kcyBLZWZpclNpZ25hbEhhbmRsZXIucHJvdG90eXBlICovIHtcblxuXHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHQgKiBEZWNsYXJlcyBhIG5ldyBldmVudCBzdHJlYW0gZm9yIHRoaXMgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgbmFtZSAgICAtIHRoZSBuYW1lIG9mIHRoZSBldmVudCwgdXNlZCB0byB0cmlnZ2VyIG9yIHN1YnNjcmliZSB0byBpdFxuXHRcdCAqIEBwYXJhbSAge0tlZmlyLlN0cmVhbX0gW3NvdXJjZV0gLSBhbm90aGVyIGV2ZW50IHN0cmVhbSB0byBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhpcyBldmVudFxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7S2VmaXIuQnVzfSAtIHRoZSBjcmVhdGVkIGV2ZW50IHN0cmVhbVxuXHRcdCAqL1xuXHRcdG5ld0V2ZW50KG5hbWUsIHtzb3VyY2V9ID0ge30pIHtcblxuXHRcdFx0LyogaXMgdGhlIGV2ZW50IG5hbWUgYWxyZWFkeSB0YWtlbj8gKi9cblx0XHRcdFUuYXNzZXJ0KCF0aGlzLl9ldmVudHNbbmFtZV0sXG5cdFx0XHRcdFx0YFRoZXJlIGlzIGFscmVhZHkgYW4gZXZlbnQgJyR7bmFtZX0nIG9uIHRoaXMgb2JqZWN0LmApO1xuXHRcdFx0VS5hc3NlcnQoIXRoaXMuX3Byb3BlcnRpZXNbbmFtZV0sXG5cdFx0XHRcdFx0YFRoZXJlIGlzIGFscmVhZHkgYSBwcm9wZXJ0eSAnJHtuYW1lfScgb24gdGhpcyBvYmplY3QuYCk7XG5cblx0XHRcdC8qIGRlZmluZSB0aGUgZXZlbnQgc3RyZWFtICovXG5cdFx0XHR2YXIgYnVzID0gS2VmaXIuYnVzKCk7XG5cdFx0XHRpZiAoc291cmNlKSB7IGJ1cy5wbHVnKHNvdXJjZSkgfVxuXHRcdFx0cmV0dXJuIHRoaXMuX2V2ZW50c1tuYW1lXSA9IGJ1cztcblxuXHRcdH0sXG5cblxuXHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHQgKiBSZXRyaWV2ZSBhbiBldmVudCBzdHJlYW0gYnkgbmFtZS4gSWYgdGhlIG5hbWUgb2YgYSBwcm9wZXJ0eSBpcyBnaXZlbiwgYSBzdHJlYW1cblx0XHQgKiBiYXNlZCBvbiBjaGFuZ2VzIHRvIHRoYXQgcHJvcGVydHkgaXMgcmV0dXJuZWQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gIHtTdHJpbmd9ICBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIGV2ZW50IHN0cmVhbSB0byByZXRyaWV2ZVxuXHRcdCAqIEByZXR1cm4ge0tlZmlyLlN0cmVhbX0gLSB0aGUgZXZlbnQgc3RyZWFtIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuXHRcdCAqL1xuXHRcdGV2ZW50KG5hbWUpIHtcblxuXHRcdFx0LyogZG9lcyB0aGUgZXZlbnQgZXhpc3Q/ICovXG5cdFx0XHRVLmFzc2VydCh0aGlzLl9ldmVudHNbbmFtZV0sXG5cdFx0XHRcdFx0YFRoZXJlIGlzIG5vIGV2ZW50ICcke25hbWV9JyBvbiB0aGlzIG9iamVjdC5gKTtcblxuXHRcdFx0LyogcmV0dXJuIGl0ICovXG5cdFx0XHRyZXR1cm4gdGhpcy5fZXZlbnRzW25hbWVdO1xuXG5cdFx0fSxcblxuXG5cdFx0LyoqIHtAcHVibGljfXtAbWV0aG9kfVxuXHRcdCAqIFJldHJpZXZlIGEgcHJvcGVydHkgYnkgbmFtZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZXRyaWV2ZVxuXHRcdCAqIEByZXR1cm4ge0tlZmlyLlByb3BlcnR5fSAtIHRoZSBwcm9wZXJ0eSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIG5hbWVcblx0XHQgKi9cblx0XHRwcm9wZXJ0eShuYW1lKSB7IHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzW25hbWVdIH0sXG5cblx0XHQvKiogQGFsaWFzIHByb3BlcnR5ICovXG5cdFx0cChuYW1lKSB7IHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzW25hbWVdIH0sXG5cblxuXHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHQgKiBUaGlzIG1ldGhvZCBkZWZpbmVzIGEgbmV3IHByb3BlcnR5IG9uIHRoaXMgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICBuYW1lICAgICAgICAgICAtIHRoZSBuYW1lIG9mIHRoZSBldmVudCBzdHJlYW0gdG8gcmV0cmlldmVcblx0XHQgKiBAcGFyYW0gIHtCb29sZWFufSAgICAgICAgICAgICAgICAgW3NldHRhYmxlPXRydWVdIC0gd2hldGhlciB0aGUgdmFsdWUgY2FuIGJlIG1hbnVhbGx5IHNldFxuXHRcdCAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgICAgICAgICBbaW5pdGlhbF0gICAgICAgLSB0aGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5XG5cdFx0ICogQHBhcmFtICB7ZnVuY3Rpb24oKiwqKTpCb29sZWFufSAgIFtpc0VxdWFsXSAgICAgICAtIGEgcHJlZGljYXRlIGZ1bmN0aW9uIGJ5IHdoaWNoIHRvIHRlc3QgZm9yIGR1cGxpY2F0ZSB2YWx1ZXNcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge0tlZmlyLlByb3BlcnR5fSAtIHRoZSBwcm9wZXJ0eSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIG5hbWVcblx0XHQgKi9cblx0XHRuZXdQcm9wZXJ0eShuYW1lLCB7c2V0dGFibGUsIGluaXRpYWwsIGlzRXF1YWx9ID0ge30pIHtcblxuXHRcdFx0LyogaXMgdGhlIHByb3BlcnR5IG5hbWUgYWxyZWFkeSB0YWtlbj8gKi9cblx0XHRcdFUuYXNzZXJ0KCF0aGlzLl9ldmVudHNbbmFtZV0sXG5cdFx0XHRcdFx0YFRoZXJlIGlzIGFscmVhZHkgYW4gZXZlbnQgJyR7bmFtZX0nIG9uIHRoaXMgb2JqZWN0LmApO1xuXHRcdFx0VS5hc3NlcnQoIXRoaXMuX3Byb3BlcnRpZXNbbmFtZV0sXG5cdFx0XHRcdFx0YFRoZXJlIGlzIGFscmVhZHkgYSBwcm9wZXJ0eSAnJHtuYW1lfScgb24gdGhpcyBvYmplY3QuYCk7XG5cblx0XHRcdC8qIGRlZmF1bHQgdmFsdWUgZm9yICdzZXR0YWJsZScgKi9cblx0XHRcdGlmIChVLmlzVW5kZWZpbmVkKHNldHRhYmxlKSkgeyBzZXR0YWJsZSA9IHRydWUgfVxuXG5cdFx0XHQvKiBkZWZpbmUgdGhlIGJ1cyB3aGljaCBtYW5hZ2VzIHRoZSBwcm9wZXJ0eSAqL1xuXHRcdFx0dmFyIGJ1cyA9IEtlZmlyLmJ1cygpO1xuXG5cdFx0XHQvKiBkZWZpbmUgdGhlIHByb3BlcnR5IGl0c2VsZiwgYW5kIGdpdmUgaXQgYWRkaXRpb25hbCBtZXRob2RzICovXG5cdFx0XHR2YXIgcHJvcGVydHkgPSB0aGlzLl9wcm9wZXJ0aWVzW25hbWVdID0gYnVzLnRvUHJvcGVydHkoaW5pdGlhbCkuc2tpcER1cGxpY2F0ZXMoaXNFcXVhbCk7XG5cdFx0XHRwcm9wZXJ0eS5wbHVnICAgPSAob2JzZXJ2YWJsZSkgPT4geyBidXMucGx1ZyhvYnNlcnZhYmxlKTsgICByZXR1cm4gcHJvcGVydHkgfTtcblx0XHRcdHByb3BlcnR5LnVucGx1ZyA9IChvYnNlcnZhYmxlKSA9PiB7IGJ1cy51bnBsdWcob2JzZXJ2YWJsZSk7IHJldHVybiBwcm9wZXJ0eSB9O1xuXHRcdFx0cHJvcGVydHkuZ2V0ID0gKCkgPT4gcHJvcGVydHkuX2N1cnJlbnQ7IC8vIFRPRE86IGFjY2Vzc2luZyBwcml2YXRlIGZpZWxkIG9mIEtlZmlyIHByb3BlcnR5OyBkb24ndFxuXHRcdFx0aWYgKHNldHRhYmxlKSB7XG5cdFx0XHRcdHByb3BlcnR5LnNldCA9ICh2YWx1ZSkgPT4geyBidXMuZW1pdCh2YWx1ZSk7IHJldHVybiBwcm9wZXJ0eSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBhZGQgdGhlIHByb3BlcnR5IHRvIHRoZSBvYmplY3QgaW50ZXJmYWNlICovXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuXHRcdFx0XHRnZXQ6IHByb3BlcnR5LmdldCxcblx0XHRcdFx0c2V0OiBzZXR0YWJsZSA/IHByb3BlcnR5LnNldCA6IHVuZGVmaW5lZFxuXHRcdFx0fSk7XG5cblx0XHRcdC8qIG1ha2UgdGhlIHByb3BlcnR5IGFjdGl2ZTsgaXQgZG9lc24ndCB3b3JrIGlmIHRoaXMgaXNuJ3QgZG9uZSAodGhlIG5hdHVyZSBvZiBLZWZpci5qcykgKi9cblx0XHRcdHByb3BlcnR5LnJ1bigpO1xuXHRcdFx0dGhpcy5ldmVudCgnZGVzdHJveScpLm9uVmFsdWUoKCkgPT4geyBidXMuZW5kKCkgfSk7XG5cblx0XHRcdC8qIHJldHVybiB0aGUgcHJvcGVydHkgKi9cblx0XHRcdHJldHVybiBwcm9wZXJ0eTtcblxuXHRcdH0sXG5cblxuXHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHQgKiBUcmlnZ2VyIGFuIGV2ZW50IGZvciBhbGwgc3Vic2NyaWJlcnMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAgLSB0aGUgbmFtZSBvZiB0aGUgZXZlbnQgc3RyZWFtIHRvIHRyaWdnZXJcblx0XHQgKiBAdmFsdWUgeyp9ICAgICAgdmFsdWUgLSB0aGUgdmFsdWUgdG8gYXR0YWNoIHRvIHRoZSBldmVudFxuXHRcdCAqL1xuXHRcdHRyaWdnZXIobmFtZSwgdmFsdWUpIHtcblxuXHRcdFx0LyogZG9lcyB0aGUgZXZlbnQgc3RyZWFtIGV4aXN0PyAqL1xuXHRcdFx0VS5hc3NlcnQodGhpcy5fZXZlbnRzW25hbWVdLFxuXHRcdFx0XHRcdGBUaGVyZSBpcyBubyBldmVudCAnJHtuYW1lfScgb24gdGhpcyBvYmplY3QuYCk7XG5cblx0XHRcdC8qIHB1c2ggdGhlIHZhbHVlIHRvIHRoZSBzdHJlYW0gKi9cblx0XHRcdHRoaXMuX2V2ZW50c1tuYW1lXS5lbWl0KHZhbHVlKTtcblxuXHRcdH0sXG5cblxuXHRcdC8qKiB7QHB1YmxpY317QG1ldGhvZH1cblx0XHQgKiBUaGlzIG1ldGhvZCBzZWxlY3RzIGFuIGV4aXN0aW5nIHN0cmVhbSBvciBwcm9wZXJ0eSwgYW5kIHRoZW5cblx0XHQgKiBlaXRoZXIgcmV0dXJucyBpdCwgb3IgY3JlYXRlcyBhIHN1YnNjcmlwdGlvbiB0byBpdCwgZGVwZW5kaW5nXG5cdFx0ICogb24gd2hldGhlciBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgICAgbmFtZSAgICAgICAgICAgICAgICAgLSB0aGUgbmFtZSBvZiB0aGUgZXZlbnQgb3IgcHJvcGVydHkgdG8gc3Vic2NyaWJlIHRvXG5cdFx0ICogQHBhcmFtIHsqfSAgICAgICAgICAgICAgICBbZXhwZWN0ZWRWYWx1ZV0gICAgICAgLSBpZiBwcm92aWRlZCwgZmlsdGVycyB0aGUgc3RyZWFtIGJ5ID09PSBlcXVhbGl0eSB3aXRoIHRoaXMgdmFsdWU7XG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIG1heSBub3QgYmUgYSBwbGFpbiBvYmplY3Rcblx0XHQgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgIFtvcHRpb25zXSAgICAgICAgICAgICAtIGEgcGxhaW4gb2JqZWN0IGZvciBwcm92aWRpbmcgYWRkaXRpb25hbCBvcHRpb25zXG5cdFx0ICogQHBhcmFtIHtCb29sZWFufSAgICAgICAgICBbb3B0aW9ucy5vbmNlPWZhbHNlXSAgLSB3aGV0aGVyIHRoZSBzdHJlYW0gZW5kcyBhZnRlciBvbmUgZXZlbnRcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCopOnZvaWR9IFtjYWxsYmFja10gICAgICAgICAgICAtIGlmIHByb3ZpZGVkLCBzdWJzY3JpYmVzIHRvIHRoaXMgc3RyZWFtIHdpdGggdGhlIHRoaXMgY2FsbGJhY2tcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge0tlZmlyLk9ic2VydmFibGV8ZnVuY3Rpb24oKTp1bmRlZmluZWR9IC0gaWYgbm8gYGNhbGxiYWNrYCBpcyBwcm92aWRlZCwgdGhlIHNwZWNpZmllZCBldmVudCBzdHJlYW1cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIHByb3BlcnR5OyBvdGhlcndpc2UsIGEgZnVuY3Rpb24gdG8gdW5zdWJzY3JpYmUgdG8gc2FpZFxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtIG9yIHByb3BlcnR5XG5cdFx0ICovXG5cdFx0b24obmFtZSwgZXhwZWN0ZWRWYWx1ZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcblx0XHRcdHZhciBhcmdzT2JqID0gdGhpcy5fZ2F0aGVyT25Bcmd1bWVudHMobmFtZSwgZXhwZWN0ZWRWYWx1ZSwgb3B0aW9ucywgY2FsbGJhY2spO1xuXHRcdFx0cmV0dXJuIHRoaXMuX29uKGFyZ3NPYmopO1xuXHRcdH0sXG5cblxuXHRcdC8qKiB7QHByaXZhdGV9e0BtZXRob2R9XG5cdFx0ICogVGhpcyBtZXRob2QgZG9lcyB0aGUgbWFpbiB3b3JrIGZvciB7QGxpbmsgb259LCBidXQgYWNjZXB0c1xuXHRcdCAqIHRoZSBwYXJhbWV0ZXJzIGFzIG9uZSBvYmplY3QsIHNvIGl0IGRvZXNuJ3QgaGF2ZSB0byBkZWFsIHdpdGggcGFyYW1ldGVyIG9yZGVyaW5nLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7S2VmaXIuT2JzZXJ2YWJsZXxmdW5jdGlvbigpOnZvaWR9XG5cdFx0ICovXG5cdFx0X29uKHtuYW1lLCBleHBlY3RlZFZhbHVlLCBjYWxsYmFja30pIHtcblx0XHRcdC8qIGRvZXMgYW4gZXZlbnQgb3IgcHJvcGVydHkgYnkgdGhpcyBuYW1lIGV4aXN0PyAqL1xuXHRcdFx0VS5hc3NlcnQodGhpcy5fZXZlbnRzW25hbWVdIHx8IHRoaXMuX3Byb3BlcnRpZXNbbmFtZV0sXG5cdFx0XHRcdFx0YFRoZXJlIGlzIG5vIGV2ZW50IG9yIHByb3BlcnR5ICcke25hbWV9JyBvbiB0aGlzIG9iamVjdC5gKTtcblxuXHRcdFx0LyogcHJvY2VzcyBuYW1lICovXG5cdFx0XHR2YXIgcmVzdWx0ID0gdGhpcy5fZXZlbnRzW25hbWVdIHx8IHRoaXMuX3Byb3BlcnRpZXNbbmFtZV07XG5cblx0XHRcdC8qIHByb2Nlc3MgZXhwZWN0ZWRWYWx1ZSAqL1xuXHRcdFx0aWYgKFUuaXNEZWZpbmVkKGV4cGVjdGVkVmFsdWUpKSB7IHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoKHYpID0+IHYgPT09IGV4cGVjdGVkVmFsdWUpIH1cblxuXHRcdFx0LyogcHJvY2VzcyBjYWxsYmFjayAqL1xuXHRcdFx0aWYgKGNhbGxiYWNrKSB7IHJlc3VsdCA9IHJlc3VsdC5vblZhbHVlKGNhbGxiYWNrKSB9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSxcblxuXG5cdFx0LyoqIHtAcHJpdmF0ZX17QG1ldGhvZH1cblx0XHQgKiBQcm9jZXNzIHRoZSBhcmd1bWVudHMgYWNjZXB0ZWQgYnkge0BsaW5rIG9ufS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge09iamVjdH1cblx0XHQgKi9cblx0XHRfZ2F0aGVyT25Bcmd1bWVudHMoLi4uYXJncykge1xuXHRcdFx0dmFyIHJlc3VsdCA9IHsgbmFtZTogYXJncy5zaGlmdCgpIH07XG5cblx0XHRcdC8qIHRlc3QgZm9yIGV4cGVjdGVkIHZhbHVlIGFyZ3VtZW50ICovXG5cdFx0XHRpZiAoVS5pc0RlZmluZWQoYXJnc1swXSkgJiYgIVUuaXNGdW5jdGlvbihhcmdzWzBdKSAmJiAhVS5pc1BsYWluT2JqZWN0KGFyZ3NbMF0pKSB7XG5cdFx0XHRcdHJlc3VsdC5leHBlY3RlZFZhbHVlID0gYXJncy5zaGlmdCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiB0ZXN0IGZvciBjYWxsYmFjayBmdW5jdGlvbiAqL1xuXHRcdFx0aWYgKFUuaXNEZWZpbmVkKGFyZ3NbMF0pICYmIFUuaXNGdW5jdGlvbihhcmdzWzBdKSkge1xuXHRcdFx0XHRyZXN1bHQuY2FsbGJhY2sgPSBhcmdzLnNoaWZ0KCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cblx0fSk7XG5cblxuXHRyZXR1cm4gS2VmaXJTaWduYWxIYW5kbGVyO1xuXG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbC9rZWZpci1zaWduYWwtaGFuZGxlci5qc1xuICoqLyIsImRlZmluZShbJ2JsdWViaXJkJywgJ2RlbHRhLWpzJyBdLCBmdW5jdGlvbiAoUCwgRE0pIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0LyogYWxyZWFkeSBjYWNoZWQ/ICovXG5cdGlmICh3aW5kb3cuX19hcGluYXRvbXlfY29yZV9kZWx0YV9tb2RlbCkgeyByZXR1cm4gd2luZG93Ll9fYXBpbmF0b215X2NvcmVfZGVsdGFfbW9kZWwgfVxuXG5cblx0LyogdGVsbCBkZWx0YS5qcyBhYm91dCBibHVlYmlyZCAqL1xuXHRETS5yZWdpc3RlclByb21pc2VSZXNvbHZlcihQLnJlc29sdmUpO1xuXG5cblx0Lyogc2V0IHRoZSBjYWNoZSAqL1xuXHR3aW5kb3cuX19hcGluYXRvbXlfY29yZV9kZWx0YV9tb2RlbCA9IG5ldyBETSgpO1xuXG5cblx0LyogcmV0dXJuIHRoZSBkZWx0YSBtb2RlbCB0aGF0IG1hbmFnZXMgYWxsIHBsdWdpbnMgKD0gZGVsdGFzKSAqL1xuXHRyZXR1cm4gd2luZG93Ll9fYXBpbmF0b215X2NvcmVfZGVsdGFfbW9kZWw7XG5cblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlsL21haW4tZGVsdGEtbW9kZWwuanNcbiAqKi8iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5wcm9jZXNzLm5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FuU2V0SW1tZWRpYXRlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlO1xuICAgIHZhciBjYW5NdXRhdGlvbk9ic2VydmVyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcjtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICB2YXIgcXVldWUgPSBbXTtcblxuICAgIGlmIChjYW5NdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAgIHZhciBoaWRkZW5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcXVldWVMaXN0ID0gcXVldWUuc2xpY2UoKTtcbiAgICAgICAgICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICBxdWV1ZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoaGlkZGVuRGl2LCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGhpZGRlbkRpdi5zZXRBdHRyaWJ1dGUoJ3llcycsICdubycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9wcm9jZXNzL2Jyb3dzZXIuanNcbiAqKi8iLCIvKiEgS2VmaXIuanMgdjEuMC4wXG4gKiAgaHR0cHM6Ly9naXRodWIuY29tL3BvemFkaS9rZWZpclxuICovXG47KGZ1bmN0aW9uKGdsb2JhbCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBLZWZpciA9IHt9O1xuXG5cbmZ1bmN0aW9uIGFuZCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWFyZ3VtZW50c1tpXSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZ3VtZW50c1tpIC0gMV07XG59XG5cbmZ1bmN0aW9uIG9yKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcmd1bWVudHNbaV0pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHNbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBhcmd1bWVudHNbaSAtIDFdO1xufVxuXG5mdW5jdGlvbiBub3QoeCkge1xuICByZXR1cm4gIXg7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChhLCBiKSB7XG4gIHZhciByZXN1bHQsIGxlbmd0aCwgaSwgajtcbiAgaWYgKGEubGVuZ3RoID09PSAwKSB7ICByZXR1cm4gYiAgfVxuICBpZiAoYi5sZW5ndGggPT09IDApIHsgIHJldHVybiBhICB9XG4gIGogPSAwO1xuICByZXN1bHQgPSBuZXcgQXJyYXkoYS5sZW5ndGggKyBiLmxlbmd0aCk7XG4gIGxlbmd0aCA9IGEubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyssIGorKykge1xuICAgIHJlc3VsdFtqXSA9IGFbaV07XG4gIH1cbiAgbGVuZ3RoID0gYi5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKywgaisrKSB7XG4gICAgcmVzdWx0W2pdID0gYltpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaW5kKGFyciwgdmFsdWUpIHtcbiAgdmFyIGxlbmd0aCA9IGFyci5sZW5ndGhcbiAgICAsIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0gPT09IHZhbHVlKSB7ICByZXR1cm4gaSAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZmluZEJ5UHJlZChhcnIsIHByZWQpIHtcbiAgdmFyIGxlbmd0aCA9IGFyci5sZW5ndGhcbiAgICAsIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChwcmVkKGFycltpXSkpIHsgIHJldHVybiBpICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBjbG9uZUFycmF5KGlucHV0KSB7XG4gIHZhciBsZW5ndGggPSBpbnB1dC5sZW5ndGhcbiAgICAsIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpXG4gICAgLCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBpbnB1dFtpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiByZW1vdmUoaW5wdXQsIGluZGV4KSB7XG4gIHZhciBsZW5ndGggPSBpbnB1dC5sZW5ndGhcbiAgICAsIHJlc3VsdCwgaSwgajtcbiAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGggLSAxKTtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGkgIT09IGluZGV4KSB7XG4gICAgICAgICAgcmVzdWx0W2pdID0gaW5wdXRbaV07XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQnlQcmVkKGlucHV0LCBwcmVkKSB7XG4gIHJldHVybiByZW1vdmUoaW5wdXQsIGZpbmRCeVByZWQoaW5wdXQsIHByZWQpKTtcbn1cblxuZnVuY3Rpb24gbWFwKGlucHV0LCBmbikge1xuICB2YXIgbGVuZ3RoID0gaW5wdXQubGVuZ3RoXG4gICAgLCByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKVxuICAgICwgaTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gZm4oaW5wdXRbaV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goYXJyLCBmbikge1xuICB2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aFxuICAgICwgaTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7ICBmbihhcnJbaV0pICB9XG59XG5cbmZ1bmN0aW9uIGZpbGxBcnJheShhcnIsIHZhbHVlKSB7XG4gIHZhciBsZW5ndGggPSBhcnIubGVuZ3RoXG4gICAgLCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnJbaV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb250YWlucyhhcnIsIHZhbHVlKSB7XG4gIHJldHVybiBmaW5kKGFyciwgdmFsdWUpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gcmVzdChhcnIsIHN0YXJ0LCBvbkVtcHR5KSB7XG4gIGlmIChhcnIubGVuZ3RoID4gc3RhcnQpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyLCBzdGFydCk7XG4gIH1cbiAgcmV0dXJuIG9uRW1wdHk7XG59XG5cbmZ1bmN0aW9uIHNsaWRlKGN1ciwgbmV4dCwgbWF4KSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihtYXgsIGN1ci5sZW5ndGggKyAxKSxcbiAgICAgIG9mZnNldCA9IGN1ci5sZW5ndGggLSBsZW5ndGggKyAxLFxuICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCksXG4gICAgICBpO1xuICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdFtpIC0gb2Zmc2V0XSA9IGN1cltpXTtcbiAgfVxuICByZXN1bHRbbGVuZ3RoIC0gMV0gPSBuZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBpc0VxdWFsQXJyYXlzKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCwgaTtcbiAgaWYgKGEgPT0gbnVsbCAmJiBiID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoaSA9IDAsIGxlbmd0aCA9IGEubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc3ByZWFkKGZuLCBsZW5ndGgpIHtcbiAgc3dpdGNoKGxlbmd0aCkge1xuICAgIGNhc2UgMDogIHJldHVybiBmdW5jdGlvbihhKSB7ICByZXR1cm4gZm4oKSAgfTtcbiAgICBjYXNlIDE6ICByZXR1cm4gZnVuY3Rpb24oYSkgeyAgcmV0dXJuIGZuKGFbMF0pICB9O1xuICAgIGNhc2UgMjogIHJldHVybiBmdW5jdGlvbihhKSB7ICByZXR1cm4gZm4oYVswXSwgYVsxXSkgIH07XG4gICAgY2FzZSAzOiAgcmV0dXJuIGZ1bmN0aW9uKGEpIHsgIHJldHVybiBmbihhWzBdLCBhWzFdLCBhWzJdKSAgfTtcbiAgICBjYXNlIDQ6ICByZXR1cm4gZnVuY3Rpb24oYSkgeyAgcmV0dXJuIGZuKGFbMF0sIGFbMV0sIGFbMl0sIGFbM10pICB9O1xuICAgIGRlZmF1bHQ6IHJldHVybiBmdW5jdGlvbihhKSB7ICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYSkgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHkoZm4sIGMsIGEpIHtcbiAgdmFyIGFMZW5ndGggPSBhID8gYS5sZW5ndGggOiAwO1xuICBpZiAoYyA9PSBudWxsKSB7XG4gICAgc3dpdGNoIChhTGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6ICByZXR1cm4gZm4oKTtcbiAgICAgIGNhc2UgMTogIHJldHVybiBmbihhWzBdKTtcbiAgICAgIGNhc2UgMjogIHJldHVybiBmbihhWzBdLCBhWzFdKTtcbiAgICAgIGNhc2UgMzogIHJldHVybiBmbihhWzBdLCBhWzFdLCBhWzJdKTtcbiAgICAgIGNhc2UgNDogIHJldHVybiBmbihhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBmbi5hcHBseShudWxsLCBhKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhTGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6ICByZXR1cm4gZm4uY2FsbChjKTtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBmbi5hcHBseShjLCBhKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0KG1hcCwga2V5LCBub3RGb3VuZCkge1xuICBpZiAobWFwICYmIGtleSBpbiBtYXApIHtcbiAgICByZXR1cm4gbWFwW2tleV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vdEZvdW5kO1xuICB9XG59XG5cbmZ1bmN0aW9uIG93bihvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmoocHJvdG8pIHtcbiAgdmFyIEYgPSBmdW5jdGlvbigpIHt9O1xuICBGLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXR1cm4gbmV3IEYoKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCAvKiwgbWl4aW4xLCBtaXhpbjIuLi4qLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaSwgcHJvcDtcbiAgZm9yIChpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChwcm9wIGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgdGFyZ2V0W3Byb3BdID0gYXJndW1lbnRzW2ldW3Byb3BdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBpbmhlcml0KENoaWxkLCBQYXJlbnQgLyosIG1peGluMSwgbWl4aW4yLi4uKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGk7XG4gIENoaWxkLnByb3RvdHlwZSA9IGNyZWF0ZU9iaihQYXJlbnQucHJvdG90eXBlKTtcbiAgQ2hpbGQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2hpbGQ7XG4gIGZvciAoaSA9IDI7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGV4dGVuZChDaGlsZC5wcm90b3R5cGUsIGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIENoaWxkO1xufVxuXG52YXIgTk9USElORyA9IFsnPG5vdGhpbmc+J107XG52YXIgRU5EID0gJ2VuZCc7XG52YXIgVkFMVUUgPSAndmFsdWUnO1xudmFyIEVSUk9SID0gJ2Vycm9yJztcbnZhciBBTlkgPSAnYW55JztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGlkKHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHREaWZmKGEsIGIpIHtcbiAgcmV0dXJuIFthLCBiXVxufVxuXG52YXIgbm93ID0gRGF0ZS5ub3cgP1xuICBmdW5jdGlvbigpIHsgcmV0dXJuIERhdGUubm93KCkgfSA6XG4gIGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgfTtcblxuZnVuY3Rpb24gaXNGbihmbikge1xuICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHhzKSB7XG4gIHJldHVybiBpc0FycmF5KHhzKSB8fCBpc0FyZ3VtZW50cyh4cyk7XG59XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxudmFyIGlzQXJndW1lbnRzID0gZnVuY3Rpb24oeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufVxuXG4vLyBGb3IgSUVcbmlmICghaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICBpc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb3duKG9iaiwgJ2NhbGxlZScpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3aXRoSW50ZXJ2YWwobmFtZSwgbWl4aW4pIHtcblxuICBmdW5jdGlvbiBBbm9ueW1vdXNTdHJlYW0od2FpdCwgYXJncykge1xuICAgIFN0cmVhbS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3dhaXQgPSB3YWl0O1xuICAgIHRoaXMuX2ludGVydmFsSWQgPSBudWxsO1xuICAgIHZhciAkID0gdGhpcztcbiAgICB0aGlzLl8kb25UaWNrID0gZnVuY3Rpb24oKSB7ICAkLl9vblRpY2soKSAgfVxuICAgIHRoaXMuX2luaXQoYXJncyk7XG4gIH1cblxuICBpbmhlcml0KEFub255bW91c1N0cmVhbSwgU3RyZWFtLCB7XG5cbiAgICBfbmFtZTogbmFtZSxcblxuICAgIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7fSxcbiAgICBfZnJlZTogZnVuY3Rpb24oKSB7fSxcblxuICAgIF9vblRpY2s6IGZ1bmN0aW9uKCkge30sXG5cbiAgICBfb25BY3RpdmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2ludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh0aGlzLl8kb25UaWNrLCB0aGlzLl93YWl0KTtcbiAgICB9LFxuICAgIF9vbkRlYWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5faW50ZXJ2YWxJZCAhPT0gbnVsbCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsSWQpO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbElkID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIFN0cmVhbS5wcm90b3R5cGUuX2NsZWFyLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLl8kb25UaWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX2ZyZWUoKTtcbiAgICB9XG5cbiAgfSwgbWl4aW4pO1xuXG4gIEtlZmlyW25hbWVdID0gZnVuY3Rpb24od2FpdCkge1xuICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3RyZWFtKHdhaXQsIHJlc3QoYXJndW1lbnRzLCAxLCBbXSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdpdGhPbmVTb3VyY2UobmFtZSwgbWl4aW4sIG9wdGlvbnMpIHtcblxuXG4gIG9wdGlvbnMgPSBleHRlbmQoe1xuICAgIHN0cmVhbU1ldGhvZDogZnVuY3Rpb24oU3RyZWFtQ2xhc3MsIFByb3BlcnR5Q2xhc3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgIHJldHVybiBuZXcgU3RyZWFtQ2xhc3ModGhpcywgYXJndW1lbnRzKSAgfVxuICAgIH0sXG4gICAgcHJvcGVydHlNZXRob2Q6IGZ1bmN0aW9uKFN0cmVhbUNsYXNzLCBQcm9wZXJ0eUNsYXNzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7ICByZXR1cm4gbmV3IFByb3BlcnR5Q2xhc3ModGhpcywgYXJndW1lbnRzKSAgfVxuICAgIH1cbiAgfSwgb3B0aW9ucyB8fCB7fSk7XG5cblxuXG4gIG1peGluID0gZXh0ZW5kKHtcbiAgICBfaW5pdDogZnVuY3Rpb24oYXJncykge30sXG4gICAgX2ZyZWU6IGZ1bmN0aW9uKCkge30sXG5cbiAgICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkgeyAgdGhpcy5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KSAgfSxcbiAgICBfaGFuZGxlRXJyb3I6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkgeyAgdGhpcy5fc2VuZChFUlJPUiwgeCwgaXNDdXJyZW50KSAgfSxcbiAgICBfaGFuZGxlRW5kOiBmdW5jdGlvbihfXywgaXNDdXJyZW50KSB7ICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KSAgfSxcblxuICAgIF9oYW5kbGVBbnk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSBWQUxVRTogdGhpcy5faGFuZGxlVmFsdWUoZXZlbnQudmFsdWUsIGV2ZW50LmN1cnJlbnQpOyBicmVhaztcbiAgICAgICAgY2FzZSBFUlJPUjogdGhpcy5faGFuZGxlRXJyb3IoZXZlbnQudmFsdWUsIGV2ZW50LmN1cnJlbnQpOyBicmVhaztcbiAgICAgICAgY2FzZSBFTkQ6IHRoaXMuX2hhbmRsZUVuZChldmVudC52YWx1ZSwgZXZlbnQuY3VycmVudCk7IGJyZWFrO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfb25BY3RpdmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3NvdXJjZS5vbkFueSh0aGlzLl8kaGFuZGxlQW55KTtcbiAgICB9LFxuICAgIF9vbkRlYWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9zb3VyY2Uub2ZmQW55KHRoaXMuXyRoYW5kbGVBbnkpO1xuICAgIH1cbiAgfSwgbWl4aW4gfHwge30pO1xuXG5cblxuICBmdW5jdGlvbiBidWlsZENsYXNzKEJhc2VDbGFzcykge1xuICAgIGZ1bmN0aW9uIEFub255bW91c09ic2VydmFibGUoc291cmNlLCBhcmdzKSB7XG4gICAgICBCYXNlQ2xhc3MuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRoaXMuX25hbWUgPSBzb3VyY2UuX25hbWUgKyAnLicgKyBuYW1lO1xuICAgICAgdGhpcy5faW5pdChhcmdzKTtcbiAgICAgIHZhciAkID0gdGhpcztcbiAgICAgIHRoaXMuXyRoYW5kbGVBbnkgPSBmdW5jdGlvbihldmVudCkgeyAgJC5faGFuZGxlQW55KGV2ZW50KSAgfVxuICAgIH1cblxuICAgIGluaGVyaXQoQW5vbnltb3VzT2JzZXJ2YWJsZSwgQmFzZUNsYXNzLCB7XG4gICAgICBfY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBCYXNlQ2xhc3MucHJvdG90eXBlLl9jbGVhci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9zb3VyY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl8kaGFuZGxlQW55ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZnJlZSgpO1xuICAgICAgfVxuICAgIH0sIG1peGluKTtcblxuICAgIHJldHVybiBBbm9ueW1vdXNPYnNlcnZhYmxlO1xuICB9XG5cblxuICB2YXIgQW5vbnltb3VzU3RyZWFtID0gYnVpbGRDbGFzcyhTdHJlYW0pO1xuICB2YXIgQW5vbnltb3VzUHJvcGVydHkgPSBidWlsZENsYXNzKFByb3BlcnR5KTtcblxuICBpZiAob3B0aW9ucy5zdHJlYW1NZXRob2QpIHtcbiAgICBTdHJlYW0ucHJvdG90eXBlW25hbWVdID0gb3B0aW9ucy5zdHJlYW1NZXRob2QoQW5vbnltb3VzU3RyZWFtLCBBbm9ueW1vdXNQcm9wZXJ0eSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5wcm9wZXJ0eU1ldGhvZCkge1xuICAgIFByb3BlcnR5LnByb3RvdHlwZVtuYW1lXSA9IG9wdGlvbnMucHJvcGVydHlNZXRob2QoQW5vbnltb3VzU3RyZWFtLCBBbm9ueW1vdXNQcm9wZXJ0eSk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiB3aXRoVHdvU291cmNlcyhuYW1lLCBtaXhpbiAvKiwgb3B0aW9ucyovKSB7XG5cbiAgbWl4aW4gPSBleHRlbmQoe1xuICAgIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7fSxcbiAgICBfZnJlZTogZnVuY3Rpb24oKSB7fSxcblxuICAgIF9oYW5kbGVQcmltYXJ5VmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkgeyAgdGhpcy5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KSAgfSxcbiAgICBfaGFuZGxlUHJpbWFyeUVycm9yOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHsgIHRoaXMuX3NlbmQoRVJST1IsIHgsIGlzQ3VycmVudCkgIH0sXG4gICAgX2hhbmRsZVByaW1hcnlFbmQ6IGZ1bmN0aW9uKF9fLCBpc0N1cnJlbnQpIHsgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCBpc0N1cnJlbnQpICB9LFxuXG4gICAgX2hhbmRsZVNlY29uZGFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHsgIHRoaXMuX2xhc3RTZWNvbmRhcnkgPSB4ICB9LFxuICAgIF9oYW5kbGVTZWNvbmRhcnlFcnJvcjogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7ICB0aGlzLl9zZW5kKEVSUk9SLCB4LCBpc0N1cnJlbnQpICB9LFxuICAgIF9oYW5kbGVTZWNvbmRhcnlFbmQ6IGZ1bmN0aW9uKF9fLCBpc0N1cnJlbnQpIHt9LFxuXG4gICAgX2hhbmRsZVByaW1hcnlBbnk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSBWQUxVRTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVQcmltYXJ5VmFsdWUoZXZlbnQudmFsdWUsIGV2ZW50LmN1cnJlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVSUk9SOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVByaW1hcnlFcnJvcihldmVudC52YWx1ZSwgZXZlbnQuY3VycmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRU5EOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVByaW1hcnlFbmQoZXZlbnQudmFsdWUsIGV2ZW50LmN1cnJlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2hhbmRsZVNlY29uZGFyeUFueTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlIFZBTFVFOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVNlY29uZGFyeVZhbHVlKGV2ZW50LnZhbHVlLCBldmVudC5jdXJyZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFUlJPUjpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVTZWNvbmRhcnlFcnJvcihldmVudC52YWx1ZSwgZXZlbnQuY3VycmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRU5EOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVNlY29uZGFyeUVuZChldmVudC52YWx1ZSwgZXZlbnQuY3VycmVudCk7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlU2Vjb25kYXJ5KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9yZW1vdmVTZWNvbmRhcnk6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX3NlY29uZGFyeSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9zZWNvbmRhcnkub2ZmQW55KHRoaXMuXyRoYW5kbGVTZWNvbmRhcnlBbnkpO1xuICAgICAgICB0aGlzLl8kaGFuZGxlU2Vjb25kYXJ5QW55ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Vjb25kYXJ5ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX29uQWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fc2Vjb25kYXJ5ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3NlY29uZGFyeS5vbkFueSh0aGlzLl8kaGFuZGxlU2Vjb25kYXJ5QW55KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9hbGl2ZSkge1xuICAgICAgICB0aGlzLl9wcmltYXJ5Lm9uQW55KHRoaXMuXyRoYW5kbGVQcmltYXJ5QW55KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9vbkRlYWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fc2Vjb25kYXJ5ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3NlY29uZGFyeS5vZmZBbnkodGhpcy5fJGhhbmRsZVNlY29uZGFyeUFueSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wcmltYXJ5Lm9mZkFueSh0aGlzLl8kaGFuZGxlUHJpbWFyeUFueSk7XG4gICAgfVxuICB9LCBtaXhpbiB8fCB7fSk7XG5cblxuXG4gIGZ1bmN0aW9uIGJ1aWxkQ2xhc3MoQmFzZUNsYXNzKSB7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzT2JzZXJ2YWJsZShwcmltYXJ5LCBzZWNvbmRhcnksIGFyZ3MpIHtcbiAgICAgIEJhc2VDbGFzcy5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5fcHJpbWFyeSA9IHByaW1hcnk7XG4gICAgICB0aGlzLl9zZWNvbmRhcnkgPSBzZWNvbmRhcnk7XG4gICAgICB0aGlzLl9uYW1lID0gcHJpbWFyeS5fbmFtZSArICcuJyArIG5hbWU7XG4gICAgICB0aGlzLl9sYXN0U2Vjb25kYXJ5ID0gTk9USElORztcbiAgICAgIHZhciAkID0gdGhpcztcbiAgICAgIHRoaXMuXyRoYW5kbGVTZWNvbmRhcnlBbnkgPSBmdW5jdGlvbihldmVudCkgeyAgJC5faGFuZGxlU2Vjb25kYXJ5QW55KGV2ZW50KSAgfVxuICAgICAgdGhpcy5fJGhhbmRsZVByaW1hcnlBbnkgPSBmdW5jdGlvbihldmVudCkgeyAgJC5faGFuZGxlUHJpbWFyeUFueShldmVudCkgIH1cbiAgICAgIHRoaXMuX2luaXQoYXJncyk7XG4gICAgfVxuXG4gICAgaW5oZXJpdChBbm9ueW1vdXNPYnNlcnZhYmxlLCBCYXNlQ2xhc3MsIHtcbiAgICAgIF9jbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIEJhc2VDbGFzcy5wcm90b3R5cGUuX2NsZWFyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3ByaW1hcnkgPSBudWxsO1xuICAgICAgICB0aGlzLl9zZWNvbmRhcnkgPSBudWxsO1xuICAgICAgICB0aGlzLl9sYXN0U2Vjb25kYXJ5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fJGhhbmRsZVNlY29uZGFyeUFueSA9IG51bGw7XG4gICAgICAgIHRoaXMuXyRoYW5kbGVQcmltYXJ5QW55ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZnJlZSgpO1xuICAgICAgfVxuICAgIH0sIG1peGluKTtcblxuICAgIHJldHVybiBBbm9ueW1vdXNPYnNlcnZhYmxlO1xuICB9XG5cblxuICB2YXIgQW5vbnltb3VzU3RyZWFtID0gYnVpbGRDbGFzcyhTdHJlYW0pO1xuICB2YXIgQW5vbnltb3VzUHJvcGVydHkgPSBidWlsZENsYXNzKFByb3BlcnR5KTtcblxuICBTdHJlYW0ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oc2Vjb25kYXJ5KSB7XG4gICAgcmV0dXJuIG5ldyBBbm9ueW1vdXNTdHJlYW0odGhpcywgc2Vjb25kYXJ5LCByZXN0KGFyZ3VtZW50cywgMSwgW10pKTtcbiAgfVxuXG4gIFByb3BlcnR5LnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKHNlY29uZGFyeSkge1xuICAgIHJldHVybiBuZXcgQW5vbnltb3VzUHJvcGVydHkodGhpcywgc2Vjb25kYXJ5LCByZXN0KGFyZ3VtZW50cywgMSwgW10pKTtcbiAgfVxuXG59XG5cbi8vIFN1YnNjcmliZXJzXG5cbmZ1bmN0aW9uIFN1YnNjcmliZXJzKCkge1xuICB0aGlzLl9pdGVtcyA9IFtdO1xufVxuXG5leHRlbmQoU3Vic2NyaWJlcnMsIHtcbiAgY2FsbE9uZTogZnVuY3Rpb24oZm5EYXRhLCBldmVudCkge1xuICAgIGlmIChmbkRhdGEudHlwZSA9PT0gQU5ZKSB7XG4gICAgICBmbkRhdGEuZm4oZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoZm5EYXRhLnR5cGUgPT09IGV2ZW50LnR5cGUpIHtcbiAgICAgIGlmIChmbkRhdGEudHlwZSA9PT0gVkFMVUUgfHwgZm5EYXRhLnR5cGUgPT09IEVSUk9SKSB7XG4gICAgICAgIGZuRGF0YS5mbihldmVudC52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbkRhdGEuZm4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNhbGxPbmNlOiBmdW5jdGlvbih0eXBlLCBmbiwgZXZlbnQpIHtcbiAgICBpZiAodHlwZSA9PT0gQU5ZKSB7XG4gICAgICBmbihldmVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBldmVudC50eXBlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gVkFMVUUgfHwgdHlwZSA9PT0gRVJST1IpIHtcbiAgICAgICAgZm4oZXZlbnQudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5cbmV4dGVuZChTdWJzY3JpYmVycy5wcm90b3R5cGUsIHtcbiAgYWRkOiBmdW5jdGlvbih0eXBlLCBmbiwgX2tleSkge1xuICAgIHRoaXMuX2l0ZW1zID0gY29uY2F0KHRoaXMuX2l0ZW1zLCBbe1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGZuOiBmbixcbiAgICAgIGtleTogX2tleSB8fCBudWxsXG4gICAgfV0pO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKHR5cGUsIGZuLCBfa2V5KSB7XG4gICAgdmFyIHByZWQgPSBpc0FycmF5KF9rZXkpID9cbiAgICAgIGZ1bmN0aW9uKGZuRGF0YSkge3JldHVybiBmbkRhdGEudHlwZSA9PT0gdHlwZSAmJiBpc0VxdWFsQXJyYXlzKGZuRGF0YS5rZXksIF9rZXkpfSA6XG4gICAgICBmdW5jdGlvbihmbkRhdGEpIHtyZXR1cm4gZm5EYXRhLnR5cGUgPT09IHR5cGUgJiYgZm5EYXRhLmZuID09PSBmbn07XG4gICAgdGhpcy5faXRlbXMgPSByZW1vdmVCeVByZWQodGhpcy5faXRlbXMsIHByZWQpO1xuICB9LFxuICBjYWxsQWxsOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1zO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIFN1YnNjcmliZXJzLmNhbGxPbmUoaXRlbXNbaV0sIGV2ZW50KTtcbiAgICB9XG4gIH0sXG4gIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVtcy5sZW5ndGggPT09IDA7XG4gIH1cbn0pO1xuXG5cblxuXG5cbi8vIEV2ZW50c1xuXG5mdW5jdGlvbiBFdmVudCh0eXBlLCB2YWx1ZSwgY3VycmVudCkge1xuICByZXR1cm4ge3R5cGU6IHR5cGUsIHZhbHVlOiB2YWx1ZSwgY3VycmVudDogISFjdXJyZW50fTtcbn1cblxudmFyIENVUlJFTlRfRU5EID0gRXZlbnQoRU5ELCB1bmRlZmluZWQsIHRydWUpO1xuXG5cblxuXG5cbi8vIE9ic2VydmFibGVcblxuZnVuY3Rpb24gT2JzZXJ2YWJsZSgpIHtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBuZXcgU3Vic2NyaWJlcnMoKTtcbiAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gIHRoaXMuX2FsaXZlID0gdHJ1ZTtcbn1cbktlZmlyLk9ic2VydmFibGUgPSBPYnNlcnZhYmxlO1xuXG5leHRlbmQoT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcblxuICBfbmFtZTogJ29ic2VydmFibGUnLFxuXG4gIF9vbkFjdGl2YXRpb246IGZ1bmN0aW9uKCkge30sXG4gIF9vbkRlYWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7fSxcblxuICBfc2V0QWN0aXZlOiBmdW5jdGlvbihhY3RpdmUpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlICE9PSBhY3RpdmUpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgdGhpcy5fb25BY3RpdmF0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9vbkRlYWN0aXZhdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3NldEFjdGl2ZShmYWxzZSk7XG4gICAgdGhpcy5fYWxpdmUgPSBmYWxzZTtcbiAgICB0aGlzLl9zdWJzY3JpYmVycyA9IG51bGw7XG4gIH0sXG5cbiAgX3NlbmQ6IGZ1bmN0aW9uKHR5cGUsIHgsIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9hbGl2ZSkge1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnMuY2FsbEFsbChFdmVudCh0eXBlLCB4LCBpc0N1cnJlbnQpKTtcbiAgICAgIGlmICh0eXBlID09PSBFTkQpIHsgIHRoaXMuX2NsZWFyKCkgIH1cbiAgICB9XG4gIH0sXG5cbiAgX29uOiBmdW5jdGlvbih0eXBlLCBmbiwgX2tleSkge1xuICAgIGlmICh0aGlzLl9hbGl2ZSkge1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnMuYWRkKHR5cGUsIGZuLCBfa2V5KTtcbiAgICAgIHRoaXMuX3NldEFjdGl2ZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgU3Vic2NyaWJlcnMuY2FsbE9uY2UodHlwZSwgZm4sIENVUlJFTlRfRU5EKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgX29mZjogZnVuY3Rpb24odHlwZSwgZm4sIF9rZXkpIHtcbiAgICBpZiAodGhpcy5fYWxpdmUpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmliZXJzLnJlbW92ZSh0eXBlLCBmbiwgX2tleSk7XG4gICAgICBpZiAodGhpcy5fc3Vic2NyaWJlcnMuaXNFbXB0eSgpKSB7XG4gICAgICAgIHRoaXMuX3NldEFjdGl2ZShmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9uVmFsdWU6ICBmdW5jdGlvbihmbiwgX2tleSkgeyAgcmV0dXJuIHRoaXMuX29uKFZBTFVFLCBmbiwgX2tleSkgICB9LFxuICBvbkVycm9yOiAgZnVuY3Rpb24oZm4sIF9rZXkpIHsgIHJldHVybiB0aGlzLl9vbihFUlJPUiwgZm4sIF9rZXkpICAgfSxcbiAgb25FbmQ6ICAgIGZ1bmN0aW9uKGZuLCBfa2V5KSB7ICByZXR1cm4gdGhpcy5fb24oRU5ELCBmbiwgX2tleSkgICAgIH0sXG4gIG9uQW55OiAgICBmdW5jdGlvbihmbiwgX2tleSkgeyAgcmV0dXJuIHRoaXMuX29uKEFOWSwgZm4sIF9rZXkpICAgICB9LFxuXG4gIG9mZlZhbHVlOiBmdW5jdGlvbihmbiwgX2tleSkgeyAgcmV0dXJuIHRoaXMuX29mZihWQUxVRSwgZm4sIF9rZXkpICB9LFxuICBvZmZFcnJvcjogZnVuY3Rpb24oZm4sIF9rZXkpIHsgIHJldHVybiB0aGlzLl9vZmYoRVJST1IsIGZuLCBfa2V5KSAgfSxcbiAgb2ZmRW5kOiAgIGZ1bmN0aW9uKGZuLCBfa2V5KSB7ICByZXR1cm4gdGhpcy5fb2ZmKEVORCwgZm4sIF9rZXkpICAgIH0sXG4gIG9mZkFueTogICBmdW5jdGlvbihmbiwgX2tleSkgeyAgcmV0dXJuIHRoaXMuX29mZihBTlksIGZuLCBfa2V5KSAgICB9XG5cbn0pO1xuXG5cbi8vIGV4dGVuZCgpIGNhbid0IGhhbmRsZSBgdG9TdHJpbmdgIGluIElFOFxuT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgIHJldHVybiAnWycgKyB0aGlzLl9uYW1lICsgJ10nICB9O1xuXG5cblxuXG5cblxuXG5cblxuLy8gU3RyZWFtXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgT2JzZXJ2YWJsZS5jYWxsKHRoaXMpO1xufVxuS2VmaXIuU3RyZWFtID0gU3RyZWFtO1xuXG5pbmhlcml0KFN0cmVhbSwgT2JzZXJ2YWJsZSwge1xuXG4gIF9uYW1lOiAnc3RyZWFtJ1xuXG59KTtcblxuXG5cblxuXG5cblxuLy8gUHJvcGVydHlcblxuZnVuY3Rpb24gUHJvcGVydHkoKSB7XG4gIE9ic2VydmFibGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5fY3VycmVudCA9IE5PVEhJTkc7XG4gIHRoaXMuX2N1cnJlbnRFcnJvciA9IE5PVEhJTkc7XG59XG5LZWZpci5Qcm9wZXJ0eSA9IFByb3BlcnR5O1xuXG5pbmhlcml0KFByb3BlcnR5LCBPYnNlcnZhYmxlLCB7XG5cbiAgX25hbWU6ICdwcm9wZXJ0eScsXG5cbiAgX3NlbmQ6IGZ1bmN0aW9uKHR5cGUsIHgsIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9hbGl2ZSkge1xuICAgICAgaWYgKCFpc0N1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlcnMuY2FsbEFsbChFdmVudCh0eXBlLCB4KSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gVkFMVUUpIHsgIHRoaXMuX2N1cnJlbnQgPSB4ICB9XG4gICAgICBpZiAodHlwZSA9PT0gRVJST1IpIHsgIHRoaXMuX2N1cnJlbnRFcnJvciA9IHggIH1cbiAgICAgIGlmICh0eXBlID09PSBFTkQpIHsgIHRoaXMuX2NsZWFyKCkgIH1cbiAgICB9XG4gIH0sXG5cbiAgX29uOiBmdW5jdGlvbih0eXBlLCBmbiwgX2tleSkge1xuICAgIGlmICh0aGlzLl9hbGl2ZSkge1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnMuYWRkKHR5cGUsIGZuLCBfa2V5KTtcbiAgICAgIHRoaXMuX3NldEFjdGl2ZSh0cnVlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2N1cnJlbnQgIT09IE5PVEhJTkcpIHtcbiAgICAgIFN1YnNjcmliZXJzLmNhbGxPbmNlKHR5cGUsIGZuLCBFdmVudChWQUxVRSwgdGhpcy5fY3VycmVudCwgdHJ1ZSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY3VycmVudEVycm9yICE9PSBOT1RISU5HKSB7XG4gICAgICBTdWJzY3JpYmVycy5jYWxsT25jZSh0eXBlLCBmbiwgRXZlbnQoRVJST1IsIHRoaXMuX2N1cnJlbnRFcnJvciwgdHJ1ZSkpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2FsaXZlKSB7XG4gICAgICBTdWJzY3JpYmVycy5jYWxsT25jZSh0eXBlLCBmbiwgQ1VSUkVOVF9FTkQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59KTtcblxuXG5cblxuXG5cbi8vIExvZ1xuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBuYW1lIHx8IHRoaXMudG9TdHJpbmcoKTtcbiAgdGhpcy5vbkFueShmdW5jdGlvbihldmVudCkge1xuICAgIHZhciB0eXBlU3RyID0gJzwnICsgZXZlbnQudHlwZSArIChldmVudC5jdXJyZW50ID8gJzpjdXJyZW50JyA6ICcnKSArICc+JztcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gVkFMVUUgfHwgZXZlbnQudHlwZSA9PT0gRVJST1IpIHtcbiAgICAgIGNvbnNvbGUubG9nKG5hbWUsIHR5cGVTdHIsIGV2ZW50LnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2cobmFtZSwgdHlwZVN0cik7XG4gICAgfVxuICB9LCBbJ19fbG9nS2V5X18nLCB0aGlzLCBuYW1lXSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5vZmZMb2cgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBuYW1lIHx8IHRoaXMudG9TdHJpbmcoKTtcbiAgdGhpcy5vZmZBbnkobnVsbCwgWydfX2xvZ0tleV9fJywgdGhpcywgbmFtZV0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuXG5cbi8vIEtlZmlyLndpdGhJbnRlcnZhbCgpXG5cbndpdGhJbnRlcnZhbCgnd2l0aEludGVydmFsJywge1xuICBfaW5pdDogZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuX2ZuID0gYXJnc1swXTtcbiAgICB2YXIgJCA9IHRoaXM7XG4gICAgdGhpcy5fZW1pdHRlciA9IHtcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uKHgpIHsgICQuX3NlbmQoVkFMVUUsIHgpICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHgpIHsgICQuX3NlbmQoRVJST1IsIHgpICB9LFxuICAgICAgZW5kOiBmdW5jdGlvbigpIHsgICQuX3NlbmQoRU5EKSAgfVxuICAgIH1cbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2ZuID0gbnVsbDtcbiAgICB0aGlzLl9lbWl0dGVyID0gbnVsbDtcbiAgfSxcbiAgX29uVGljazogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZm4odGhpcy5fZW1pdHRlcik7XG4gIH1cbn0pO1xuXG5cblxuXG5cbi8vIEtlZmlyLmZyb21Qb2xsKClcblxud2l0aEludGVydmFsKCdmcm9tUG9sbCcsIHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl9mbiA9IGFyZ3NbMF07XG4gIH0sXG4gIF9mcmVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9mbiA9IG51bGw7XG4gIH0sXG4gIF9vblRpY2s6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3NlbmQoVkFMVUUsIHRoaXMuX2ZuKCkpO1xuICB9XG59KTtcblxuXG5cblxuXG4vLyBLZWZpci5pbnRlcnZhbCgpXG5cbndpdGhJbnRlcnZhbCgnaW50ZXJ2YWwnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5feCA9IGFyZ3NbMF07XG4gIH0sXG4gIF9mcmVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gbnVsbDtcbiAgfSxcbiAgX29uVGljazogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fc2VuZChWQUxVRSwgdGhpcy5feCk7XG4gIH1cbn0pO1xuXG5cblxuXG4vLyBLZWZpci5zZXF1ZW50aWFsbHkoKVxuXG53aXRoSW50ZXJ2YWwoJ3NlcXVlbnRpYWxseScsIHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl94cyA9IGNsb25lQXJyYXkoYXJnc1swXSk7XG4gICAgaWYgKHRoaXMuX3hzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5fc2VuZChFTkQpXG4gICAgfVxuICB9LFxuICBfZnJlZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feHMgPSBudWxsO1xuICB9LFxuICBfb25UaWNrOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3hzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0aGlzLl9zZW5kKFZBTFVFLCB0aGlzLl94c1swXSk7XG4gICAgICAgIHRoaXMuX3NlbmQoRU5EKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLl9zZW5kKFZBTFVFLCB0aGlzLl94cy5zaGlmdCgpKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuXG4vLyBLZWZpci5yZXBlYXRlZGx5KClcblxud2l0aEludGVydmFsKCdyZXBlYXRlZGx5Jywge1xuICBfaW5pdDogZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuX3hzID0gY2xvbmVBcnJheShhcmdzWzBdKTtcbiAgICB0aGlzLl9pID0gLTE7XG4gIH0sXG4gIF9vblRpY2s6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94cy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl9pID0gKHRoaXMuX2kgKyAxKSAlIHRoaXMuX3hzLmxlbmd0aDtcbiAgICAgIHRoaXMuX3NlbmQoVkFMVUUsIHRoaXMuX3hzW3RoaXMuX2ldKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuXG5cbi8vIEtlZmlyLmxhdGVyKClcblxud2l0aEludGVydmFsKCdsYXRlcicsIHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl94ID0gYXJnc1swXTtcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBudWxsO1xuICB9LFxuICBfb25UaWNrOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9zZW5kKFZBTFVFLCB0aGlzLl94KTtcbiAgICB0aGlzLl9zZW5kKEVORCk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBfQWJzdHJhY3RQb29sKG9wdGlvbnMpIHtcbiAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5fcXVldWVMaW0gPSBnZXQob3B0aW9ucywgJ3F1ZXVlTGltJywgMCk7XG4gIHRoaXMuX2NvbmN1ckxpbSA9IGdldChvcHRpb25zLCAnY29uY3VyTGltJywgLTEpO1xuICB0aGlzLl9kcm9wID0gZ2V0KG9wdGlvbnMsICdkcm9wJywgJ25ldycpO1xuICBpZiAodGhpcy5fY29uY3VyTGltID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLmNvbmN1ckxpbSBjYW5cXCd0IGJlIDAnKTtcbiAgfVxuXG4gIHZhciAkID0gdGhpcztcbiAgdGhpcy5fJGhhbmRsZVN1YkFueSA9IGZ1bmN0aW9uKGV2ZW50KSB7ICAkLl9oYW5kbGVTdWJBbnkoZXZlbnQpICB9O1xuXG4gIHRoaXMuX3F1ZXVlID0gW107XG4gIHRoaXMuX2N1clNvdXJjZXMgPSBbXTtcbiAgdGhpcy5fYWN0aXZhdGluZyA9IGZhbHNlO1xufVxuXG5pbmhlcml0KF9BYnN0cmFjdFBvb2wsIFN0cmVhbSwge1xuXG4gIF9uYW1lOiAnYWJzdHJhY3RQb29sJyxcblxuICBfYWRkOiBmdW5jdGlvbihvYmosIHRvT2JzKSB7XG4gICAgdG9PYnMgPSB0b09icyB8fCBpZDtcbiAgICBpZiAodGhpcy5fY29uY3VyTGltID09PSAtMSB8fCB0aGlzLl9jdXJTb3VyY2VzLmxlbmd0aCA8IHRoaXMuX2NvbmN1ckxpbSkge1xuICAgICAgdGhpcy5fYWRkVG9DdXIodG9PYnMob2JqKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9xdWV1ZUxpbSA9PT0gLTEgfHwgdGhpcy5fcXVldWUubGVuZ3RoIDwgdGhpcy5fcXVldWVMaW0pIHtcbiAgICAgICAgdGhpcy5fYWRkVG9RdWV1ZSh0b09icyhvYmopKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fZHJvcCA9PT0gJ29sZCcpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlT2xkZXN0KCk7XG4gICAgICAgIHRoaXMuX2FkZCh0b09icyhvYmopKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIF9hZGRBbGw6IGZ1bmN0aW9uKG9ic3MpIHtcbiAgICB2YXIgJCA9IHRoaXM7XG4gICAgZm9yRWFjaChvYnNzLCBmdW5jdGlvbihvYnMpIHsgICQuX2FkZChvYnMpICB9KTtcbiAgfSxcbiAgX3JlbW92ZTogZnVuY3Rpb24ob2JzKSB7XG4gICAgaWYgKHRoaXMuX3JlbW92ZUN1cihvYnMpID09PSAtMSkge1xuICAgICAgdGhpcy5fcmVtb3ZlUXVldWUob2JzKTtcbiAgICB9XG4gIH0sXG5cbiAgX2FkZFRvUXVldWU6IGZ1bmN0aW9uKG9icykge1xuICAgIHRoaXMuX3F1ZXVlID0gY29uY2F0KHRoaXMuX3F1ZXVlLCBbb2JzXSk7XG4gIH0sXG4gIF9hZGRUb0N1cjogZnVuY3Rpb24ob2JzKSB7XG4gICAgdGhpcy5fY3VyU291cmNlcyA9IGNvbmNhdCh0aGlzLl9jdXJTb3VyY2VzLCBbb2JzXSk7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkgeyAgdGhpcy5fc3Vic2NyaWJlKG9icykgIH1cbiAgfSxcbiAgX3N1YnNjcmliZTogZnVuY3Rpb24ob2JzKSB7XG4gICAgdmFyICQgPSB0aGlzO1xuICAgIG9icy5vbkFueSh0aGlzLl8kaGFuZGxlU3ViQW55KTtcbiAgICBvYnMub25FbmQoZnVuY3Rpb24oKSB7ICAkLl9yZW1vdmVDdXIob2JzKSAgfSwgW3RoaXMsIG9ic10pO1xuICB9LFxuICBfdW5zdWJzY3JpYmU6IGZ1bmN0aW9uKG9icykge1xuICAgIG9icy5vZmZBbnkodGhpcy5fJGhhbmRsZVN1YkFueSk7XG4gICAgb2JzLm9mZkVuZChudWxsLCBbdGhpcywgb2JzXSk7XG4gIH0sXG4gIF9oYW5kbGVTdWJBbnk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09IFZBTFVFIHx8IGV2ZW50LnR5cGUgPT09IEVSUk9SKSB7XG4gICAgICB0aGlzLl9zZW5kKGV2ZW50LnR5cGUsIGV2ZW50LnZhbHVlLCBldmVudC5jdXJyZW50ICYmIHRoaXMuX2FjdGl2YXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBfcmVtb3ZlUXVldWU6IGZ1bmN0aW9uKG9icykge1xuICAgIHZhciBpbmRleCA9IGZpbmQodGhpcy5fcXVldWUsIG9icyk7XG4gICAgdGhpcy5fcXVldWUgPSByZW1vdmUodGhpcy5fcXVldWUsIGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH0sXG4gIF9yZW1vdmVDdXI6IGZ1bmN0aW9uKG9icykge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHsgIHRoaXMuX3Vuc3Vic2NyaWJlKG9icykgIH1cbiAgICB2YXIgaW5kZXggPSBmaW5kKHRoaXMuX2N1clNvdXJjZXMsIG9icyk7XG4gICAgdGhpcy5fY3VyU291cmNlcyA9IHJlbW92ZSh0aGlzLl9jdXJTb3VyY2VzLCBpbmRleCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKHRoaXMuX3F1ZXVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0aGlzLl9wdWxsUXVldWUoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fY3VyU291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fb25FbXB0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH0sXG4gIF9yZW1vdmVPbGRlc3Q6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3JlbW92ZUN1cih0aGlzLl9jdXJTb3VyY2VzWzBdKTtcbiAgfSxcblxuICBfcHVsbFF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fcXVldWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLl9xdWV1ZSA9IGNsb25lQXJyYXkodGhpcy5fcXVldWUpO1xuICAgICAgdGhpcy5fYWRkVG9DdXIodGhpcy5fcXVldWUuc2hpZnQoKSk7XG4gICAgfVxuICB9LFxuXG4gIF9vbkFjdGl2YXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3VyY2VzID0gdGhpcy5fY3VyU291cmNlc1xuICAgICAgLCBpO1xuICAgIHRoaXMuX2FjdGl2YXRpbmcgPSB0cnVlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7ICB0aGlzLl9zdWJzY3JpYmUoc291cmNlc1tpXSkgIH1cbiAgICB0aGlzLl9hY3RpdmF0aW5nID0gZmFsc2U7XG4gIH0sXG4gIF9vbkRlYWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvdXJjZXMgPSB0aGlzLl9jdXJTb3VyY2VzXG4gICAgICAsIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHsgIHRoaXMuX3Vuc3Vic2NyaWJlKHNvdXJjZXNbaV0pICB9XG4gIH0sXG5cbiAgX2lzRW1wdHk6IGZ1bmN0aW9uKCkgeyAgcmV0dXJuIHRoaXMuX2N1clNvdXJjZXMubGVuZ3RoID09PSAwICB9LFxuICBfb25FbXB0eTogZnVuY3Rpb24oKSB7fSxcblxuICBfY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIFN0cmVhbS5wcm90b3R5cGUuX2NsZWFyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5fcXVldWUgPSBudWxsO1xuICAgIHRoaXMuX2N1clNvdXJjZXMgPSBudWxsO1xuICAgIHRoaXMuXyRoYW5kbGVTdWJBbnkgPSBudWxsO1xuICB9XG5cbn0pO1xuXG5cblxuXG5cbi8vIC5tZXJnZSgpXG5cbnZhciBNZXJnZUxpa2UgPSB7XG4gIF9vbkVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5faW5pdGlhbGlzZWQpIHsgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCB0aGlzLl9hY3RpdmF0aW5nKSAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBNZXJnZShzb3VyY2VzKSB7XG4gIF9BYnN0cmFjdFBvb2wuY2FsbCh0aGlzKTtcbiAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwKSB7ICB0aGlzLl9zZW5kKEVORCkgIH0gZWxzZSB7ICB0aGlzLl9hZGRBbGwoc291cmNlcykgIH1cbiAgdGhpcy5faW5pdGlhbGlzZWQgPSB0cnVlO1xufVxuXG5pbmhlcml0KE1lcmdlLCBfQWJzdHJhY3RQb29sLCBleHRlbmQoe19uYW1lOiAnbWVyZ2UnfSwgTWVyZ2VMaWtlKSk7XG5cbktlZmlyLm1lcmdlID0gZnVuY3Rpb24ob2Jzcykge1xuICByZXR1cm4gbmV3IE1lcmdlKG9ic3MpO1xufVxuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiBLZWZpci5tZXJnZShbdGhpcywgb3RoZXJdKTtcbn1cblxuXG5cblxuLy8gLmNvbmNhdCgpXG5cbmZ1bmN0aW9uIENvbmNhdChzb3VyY2VzKSB7XG4gIF9BYnN0cmFjdFBvb2wuY2FsbCh0aGlzLCB7Y29uY3VyTGltOiAxLCBxdWV1ZUxpbTogLTF9KTtcbiAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwKSB7ICB0aGlzLl9zZW5kKEVORCkgIH0gZWxzZSB7ICB0aGlzLl9hZGRBbGwoc291cmNlcykgIH1cbiAgdGhpcy5faW5pdGlhbGlzZWQgPSB0cnVlO1xufVxuXG5pbmhlcml0KENvbmNhdCwgX0Fic3RyYWN0UG9vbCwgZXh0ZW5kKHtfbmFtZTogJ2NvbmNhdCd9LCBNZXJnZUxpa2UpKTtcblxuS2VmaXIuY29uY2F0ID0gZnVuY3Rpb24ob2Jzcykge1xuICByZXR1cm4gbmV3IENvbmNhdChvYnNzKTtcbn1cblxuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgcmV0dXJuIEtlZmlyLmNvbmNhdChbdGhpcywgb3RoZXJdKTtcbn1cblxuXG5cblxuXG5cbi8vIC5wb29sKClcblxuZnVuY3Rpb24gUG9vbCgpIHtcbiAgX0Fic3RyYWN0UG9vbC5jYWxsKHRoaXMpO1xufVxuXG5pbmhlcml0KFBvb2wsIF9BYnN0cmFjdFBvb2wsIHtcblxuICBfbmFtZTogJ3Bvb2wnLFxuXG4gIHBsdWc6IGZ1bmN0aW9uKG9icykge1xuICAgIHRoaXMuX2FkZChvYnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICB1bnBsdWc6IGZ1bmN0aW9uKG9icykge1xuICAgIHRoaXMuX3JlbW92ZShvYnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn0pO1xuXG5LZWZpci5wb29sID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUG9vbCgpO1xufVxuXG5cblxuXG5cbi8vIC5idXMoKVxuXG5mdW5jdGlvbiBCdXMoKSB7XG4gIF9BYnN0cmFjdFBvb2wuY2FsbCh0aGlzKTtcbn1cblxuaW5oZXJpdChCdXMsIF9BYnN0cmFjdFBvb2wsIHtcblxuICBfbmFtZTogJ2J1cycsXG5cbiAgcGx1ZzogZnVuY3Rpb24ob2JzKSB7XG4gICAgdGhpcy5fYWRkKG9icyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHVucGx1ZzogZnVuY3Rpb24ob2JzKSB7XG4gICAgdGhpcy5fcmVtb3ZlKG9icyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgZW1pdDogZnVuY3Rpb24oeCkge1xuICAgIHRoaXMuX3NlbmQoVkFMVUUsIHgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBlcnJvcjogZnVuY3Rpb24oeCkge1xuICAgIHRoaXMuX3NlbmQoRVJST1IsIHgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3NlbmQoRU5EKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59KTtcblxuS2VmaXIuYnVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgQnVzKCk7XG59XG5cblxuXG5cblxuLy8gLmZsYXRNYXAoKVxuXG5mdW5jdGlvbiBGbGF0TWFwKHNvdXJjZSwgZm4sIG9wdGlvbnMpIHtcbiAgX0Fic3RyYWN0UG9vbC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIHRoaXMuX2ZuID0gZm4gfHwgaWQ7XG4gIHRoaXMuX21haW5FbmRlZCA9IGZhbHNlO1xuICB0aGlzLl9sYXN0Q3VycmVudCA9IG51bGw7XG5cbiAgdmFyICQgPSB0aGlzO1xuICB0aGlzLl8kaGFuZGxlTWFpblNvdXJjZSA9IGZ1bmN0aW9uKGV2ZW50KSB7ICAkLl9oYW5kbGVNYWluU291cmNlKGV2ZW50KSAgfTtcbn1cblxuaW5oZXJpdChGbGF0TWFwLCBfQWJzdHJhY3RQb29sLCB7XG5cbiAgX29uQWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgX0Fic3RyYWN0UG9vbC5wcm90b3R5cGUuX29uQWN0aXZhdGlvbi5jYWxsKHRoaXMpO1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX2FjdGl2YXRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5fc291cmNlLm9uQW55KHRoaXMuXyRoYW5kbGVNYWluU291cmNlKTtcbiAgICAgIHRoaXMuX2FjdGl2YXRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIF9vbkRlYWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgX0Fic3RyYWN0UG9vbC5wcm90b3R5cGUuX29uRGVhY3RpdmF0aW9uLmNhbGwodGhpcyk7XG4gICAgdGhpcy5fc291cmNlLm9mZkFueSh0aGlzLl8kaGFuZGxlTWFpblNvdXJjZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1haW5Tb3VyY2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09IFZBTFVFKSB7XG4gICAgICBpZiAoIWV2ZW50LmN1cnJlbnQgfHwgdGhpcy5fbGFzdEN1cnJlbnQgIT09IGV2ZW50LnZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2FkZChldmVudC52YWx1ZSwgdGhpcy5fZm4pO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGFzdEN1cnJlbnQgPSBldmVudC52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09IEVSUk9SKSB7XG4gICAgICB0aGlzLl9zZW5kKEVSUk9SLCBldmVudC52YWx1ZSwgZXZlbnQuY3VycmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSBFTkQpIHtcbiAgICAgIGlmICh0aGlzLl9pc0VtcHR5KCkpIHtcbiAgICAgICAgdGhpcy5fc2VuZChFTkQsIG51bGwsIGV2ZW50LmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbWFpbkVuZGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX29uRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9tYWluRW5kZWQpIHsgIHRoaXMuX3NlbmQoRU5EKSAgfVxuICB9LFxuXG4gIF9jbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgX0Fic3RyYWN0UG9vbC5wcm90b3R5cGUuX2NsZWFyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5fc291cmNlID0gbnVsbDtcbiAgICB0aGlzLl9sYXN0Q3VycmVudCA9IG51bGw7XG4gICAgdGhpcy5fJGhhbmRsZU1haW5Tb3VyY2UgPSBudWxsO1xuICB9XG5cbn0pO1xuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5mbGF0TWFwID0gZnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIG5ldyBGbGF0TWFwKHRoaXMsIGZuKVxuICAgIC5zZXROYW1lKHRoaXMsICdmbGF0TWFwJyk7XG59XG5cbk9ic2VydmFibGUucHJvdG90eXBlLmZsYXRNYXBMYXRlc3QgPSBmdW5jdGlvbihmbikge1xuICByZXR1cm4gbmV3IEZsYXRNYXAodGhpcywgZm4sIHtjb25jdXJMaW06IDEsIGRyb3A6ICdvbGQnfSlcbiAgICAuc2V0TmFtZSh0aGlzLCAnZmxhdE1hcExhdGVzdCcpO1xufVxuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5mbGF0TWFwRmlyc3QgPSBmdW5jdGlvbihmbikge1xuICByZXR1cm4gbmV3IEZsYXRNYXAodGhpcywgZm4sIHtjb25jdXJMaW06IDF9KVxuICAgIC5zZXROYW1lKHRoaXMsICdmbGF0TWFwRmlyc3QnKTtcbn1cblxuT2JzZXJ2YWJsZS5wcm90b3R5cGUuZmxhdE1hcENvbmNhdCA9IGZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBuZXcgRmxhdE1hcCh0aGlzLCBmbiwge3F1ZXVlTGltOiAtMSwgY29uY3VyTGltOiAxfSlcbiAgICAuc2V0TmFtZSh0aGlzLCAnZmxhdE1hcENvbmNhdCcpO1xufVxuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5mbGF0TWFwQ29uY3VyTGltaXQgPSBmdW5jdGlvbihmbiwgbGltaXQpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGxpbWl0ID09PSAwKSB7XG4gICAgcmVzdWx0ID0gS2VmaXIubmV2ZXIoKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAobGltaXQgPCAwKSB7ICBsaW1pdCA9IC0xICB9XG4gICAgcmVzdWx0ID0gbmV3IEZsYXRNYXAodGhpcywgZm4sIHtxdWV1ZUxpbTogLTEsIGNvbmN1ckxpbTogbGltaXR9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LnNldE5hbWUodGhpcywgJ2ZsYXRNYXBDb25jdXJMaW1pdCcpO1xufVxuXG5cblxuXG5cblxuLy8gLnppcCgpXG5cbmZ1bmN0aW9uIFppcChzb3VyY2VzLCBjb21iaW5hdG9yKSB7XG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xuICBpZiAoc291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLl9zZW5kKEVORCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYnVmZmVycyA9IG1hcChzb3VyY2VzLCBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHNvdXJjZSkgPyBjbG9uZUFycmF5KHNvdXJjZSkgOiBbXTtcbiAgICB9KTtcbiAgICB0aGlzLl9zb3VyY2VzID0gbWFwKHNvdXJjZXMsIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkoc291cmNlKSA/IEtlZmlyLm5ldmVyKCkgOiBzb3VyY2U7XG4gICAgfSk7XG4gICAgdGhpcy5fY29tYmluYXRvciA9IGNvbWJpbmF0b3IgPyBzcHJlYWQoY29tYmluYXRvciwgdGhpcy5fc291cmNlcy5sZW5ndGgpIDogaWQ7XG4gICAgdGhpcy5fYWxpdmVDb3VudCA9IDA7XG4gIH1cbn1cblxuXG5pbmhlcml0KFppcCwgU3RyZWFtLCB7XG5cbiAgX25hbWU6ICd6aXAnLFxuXG4gIF9vbkFjdGl2YXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBsZW5ndGggPSB0aGlzLl9zb3VyY2VzLmxlbmd0aDtcbiAgICB0aGlzLl9kcmFpbkFycmF5cygpO1xuICAgIHRoaXMuX2FsaXZlQ291bnQgPSBsZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9zb3VyY2VzW2ldLm9uQW55KHRoaXMuX2JpbmRIYW5kbGVBbnkoaSksIFt0aGlzLCBpXSk7XG4gICAgfVxuICB9LFxuXG4gIF9vbkRlYWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9zb3VyY2VzW2ldLm9mZkFueShudWxsLCBbdGhpcywgaV0pO1xuICAgIH1cbiAgfSxcblxuICBfZW1pdDogZnVuY3Rpb24oaXNDdXJyZW50KSB7XG4gICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheSh0aGlzLl9idWZmZXJzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9idWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSB0aGlzLl9idWZmZXJzW2ldLnNoaWZ0KCk7XG4gICAgfVxuICAgIHRoaXMuX3NlbmQoVkFMVUUsIHRoaXMuX2NvbWJpbmF0b3IodmFsdWVzKSwgaXNDdXJyZW50KTtcbiAgfSxcblxuICBfaXNGdWxsOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2J1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9idWZmZXJzW2ldLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIF9lbWl0SWZGdWxsOiBmdW5jdGlvbihpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5faXNGdWxsKCkpIHtcbiAgICAgIHRoaXMuX2VtaXQoaXNDdXJyZW50KTtcbiAgICB9XG4gIH0sXG5cbiAgX2RyYWluQXJyYXlzOiBmdW5jdGlvbigpIHtcbiAgICB3aGlsZSAodGhpcy5faXNGdWxsKCkpIHtcbiAgICAgIHRoaXMuX2VtaXQodHJ1ZSk7XG4gICAgfVxuICB9LFxuXG4gIF9iaW5kSGFuZGxlQW55OiBmdW5jdGlvbihpKSB7XG4gICAgdmFyICQgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbihldmVudCkgeyAgJC5faGFuZGxlQW55KGksIGV2ZW50KSAgfTtcbiAgfSxcblxuICBfaGFuZGxlQW55OiBmdW5jdGlvbihpLCBldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09PSBWQUxVRSkge1xuICAgICAgdGhpcy5fYnVmZmVyc1tpXS5wdXNoKGV2ZW50LnZhbHVlKTtcbiAgICAgIHRoaXMuX2VtaXRJZkZ1bGwoZXZlbnQuY3VycmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSBFUlJPUikge1xuICAgICAgdGhpcy5fc2VuZChFUlJPUiwgZXZlbnQudmFsdWUsIGV2ZW50LmN1cnJlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gRU5EKSB7XG4gICAgICB0aGlzLl9hbGl2ZUNvdW50LS07XG4gICAgICBpZiAodGhpcy5fYWxpdmVDb3VudCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgZXZlbnQuY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF9jbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fY2xlYXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9zb3VyY2VzID0gbnVsbDtcbiAgICB0aGlzLl9idWZmZXJzID0gbnVsbDtcbiAgICB0aGlzLl9jb21iaW5hdG9yID0gbnVsbDtcbiAgfVxuXG59KTtcblxuS2VmaXIuemlwID0gZnVuY3Rpb24oc291cmNlcywgY29tYmluYXRvcikge1xuICByZXR1cm4gbmV3IFppcChzb3VyY2VzLCBjb21iaW5hdG9yKTtcbn1cblxuT2JzZXJ2YWJsZS5wcm90b3R5cGUuemlwID0gZnVuY3Rpb24ob3RoZXIsIGNvbWJpbmF0b3IpIHtcbiAgcmV0dXJuIG5ldyBaaXAoW3RoaXMsIG90aGVyXSwgY29tYmluYXRvcik7XG59XG5cblxuXG5cblxuXG4vLyAuc2FtcGxlZEJ5KClcblxuZnVuY3Rpb24gU2FtcGxlZEJ5KHBhc3NpdmUsIGFjdGl2ZSwgY29tYmluYXRvcikge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcbiAgaWYgKGFjdGl2ZS5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLl9zZW5kKEVORCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fcGFzc2l2ZUNvdW50ID0gcGFzc2l2ZS5sZW5ndGg7XG4gICAgdGhpcy5fc291cmNlcyA9IGNvbmNhdChwYXNzaXZlLCBhY3RpdmUpO1xuICAgIHRoaXMuX2NvbWJpbmF0b3IgPSBjb21iaW5hdG9yID8gc3ByZWFkKGNvbWJpbmF0b3IsIHRoaXMuX3NvdXJjZXMubGVuZ3RoKSA6IGlkO1xuICAgIHRoaXMuX2FsaXZlQ291bnQgPSAwO1xuICAgIHRoaXMuX2N1cnJlbnRzID0gbmV3IEFycmF5KHRoaXMuX3NvdXJjZXMubGVuZ3RoKTtcbiAgICBmaWxsQXJyYXkodGhpcy5fY3VycmVudHMsIE5PVEhJTkcpO1xuICAgIHRoaXMuX2FjdGl2YXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9lbWl0QWZ0ZXJBY3RpdmF0aW9uID0gZmFsc2U7XG4gICAgdGhpcy5fZW5kQWZ0ZXJBY3RpdmF0aW9uID0gZmFsc2U7XG4gIH1cbn1cblxuXG5pbmhlcml0KFNhbXBsZWRCeSwgU3RyZWFtLCB7XG5cbiAgX25hbWU6ICdzYW1wbGVkQnknLFxuXG4gIF9vbkFjdGl2YXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLl9zb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgaTtcbiAgICB0aGlzLl9hbGl2ZUNvdW50ID0gbGVuZ3RoIC0gdGhpcy5fcGFzc2l2ZUNvdW50O1xuICAgIHRoaXMuX2FjdGl2YXRpbmcgPSB0cnVlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fc291cmNlc1tpXS5vbkFueSh0aGlzLl9iaW5kSGFuZGxlQW55KGkpLCBbdGhpcywgaV0pO1xuICAgIH1cbiAgICB0aGlzLl9hY3RpdmF0aW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuX2VtaXRBZnRlckFjdGl2YXRpb24pIHtcbiAgICAgIHRoaXMuX2VtaXRBZnRlckFjdGl2YXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2VtaXRJZkZ1bGwodHJ1ZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9lbmRBZnRlckFjdGl2YXRpb24pIHtcbiAgICAgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCB0cnVlKTtcbiAgICB9XG4gIH0sXG5cbiAgX29uRGVhY3RpdmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5fc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9zb3VyY2VzW2ldLm9mZkFueShudWxsLCBbdGhpcywgaV0pO1xuICAgIH1cbiAgfSxcblxuICBfZW1pdElmRnVsbDogZnVuY3Rpb24oaXNDdXJyZW50KSB7XG4gICAgaWYgKCFjb250YWlucyh0aGlzLl9jdXJyZW50cywgTk9USElORykpIHtcbiAgICAgIHZhciBjb21iaW5lZCA9IGNsb25lQXJyYXkodGhpcy5fY3VycmVudHMpO1xuICAgICAgY29tYmluZWQgPSB0aGlzLl9jb21iaW5hdG9yKGNvbWJpbmVkKTtcbiAgICAgIHRoaXMuX3NlbmQoVkFMVUUsIGNvbWJpbmVkLCBpc0N1cnJlbnQpO1xuICAgIH1cbiAgfSxcblxuICBfYmluZEhhbmRsZUFueTogZnVuY3Rpb24oaSkge1xuICAgIHZhciAkID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHsgICQuX2hhbmRsZUFueShpLCBldmVudCkgIH07XG4gIH0sXG5cbiAgX2hhbmRsZUFueTogZnVuY3Rpb24oaSwgZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gVkFMVUUpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRzW2ldID0gZXZlbnQudmFsdWU7XG4gICAgICBpZiAoaSA+PSB0aGlzLl9wYXNzaXZlQ291bnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2YXRpbmcpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0QWZ0ZXJBY3RpdmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9lbWl0SWZGdWxsKGV2ZW50LmN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSBFUlJPUikge1xuICAgICAgdGhpcy5fc2VuZChFUlJPUiwgZXZlbnQudmFsdWUsIGV2ZW50LmN1cnJlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gRU5EKSB7XG4gICAgICBpZiAoaSA+PSB0aGlzLl9wYXNzaXZlQ291bnQpIHtcbiAgICAgICAgdGhpcy5fYWxpdmVDb3VudC0tO1xuICAgICAgICBpZiAodGhpcy5fYWxpdmVDb3VudCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmF0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmRBZnRlckFjdGl2YXRpb24gPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgZXZlbnQuY3VycmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF9jbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fY2xlYXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9zb3VyY2VzID0gbnVsbDtcbiAgICB0aGlzLl9jdXJyZW50cyA9IG51bGw7XG4gICAgdGhpcy5fY29tYmluYXRvciA9IG51bGw7XG4gIH1cblxufSk7XG5cbktlZmlyLnNhbXBsZWRCeSA9IGZ1bmN0aW9uKHBhc3NpdmUsIGFjdGl2ZSwgY29tYmluYXRvcikge1xuICByZXR1cm4gbmV3IFNhbXBsZWRCeShwYXNzaXZlLCBhY3RpdmUsIGNvbWJpbmF0b3IpO1xufVxuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5zYW1wbGVkQnkgPSBmdW5jdGlvbihvdGhlciwgY29tYmluYXRvcikge1xuICByZXR1cm4gS2VmaXIuc2FtcGxlZEJ5KFt0aGlzXSwgW290aGVyXSwgY29tYmluYXRvciB8fCBpZCk7XG59XG5cblxuXG5cbi8vIC5jb21iaW5lKClcblxuS2VmaXIuY29tYmluZSA9IGZ1bmN0aW9uKHNvdXJjZXMsIGNvbWJpbmF0b3IpIHtcbiAgcmV0dXJuIG5ldyBTYW1wbGVkQnkoW10sIHNvdXJjZXMsIGNvbWJpbmF0b3IpLnNldE5hbWUoJ2NvbWJpbmUnKTtcbn1cblxuT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29tYmluZSA9IGZ1bmN0aW9uKG90aGVyLCBjb21iaW5hdG9yKSB7XG4gIHJldHVybiBLZWZpci5jb21iaW5lKFt0aGlzLCBvdGhlcl0sIGNvbWJpbmF0b3IpO1xufVxuXG5mdW5jdGlvbiBwcm9kdWNlU3RyZWFtKFN0cmVhbUNsYXNzLCBQcm9wZXJ0eUNsYXNzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHsgIHJldHVybiBuZXcgU3RyZWFtQ2xhc3ModGhpcywgYXJndW1lbnRzKSAgfVxufVxuZnVuY3Rpb24gcHJvZHVjZVByb3BlcnR5KFN0cmVhbUNsYXNzLCBQcm9wZXJ0eUNsYXNzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHsgIHJldHVybiBuZXcgUHJvcGVydHlDbGFzcyh0aGlzLCBhcmd1bWVudHMpICB9XG59XG5cblxuXG4vLyAudG9Qcm9wZXJ0eSgpXG5cbndpdGhPbmVTb3VyY2UoJ3RvUHJvcGVydHknLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgYXJnc1swXSk7XG4gICAgfVxuICB9XG59LCB7cHJvcGVydHlNZXRob2Q6IHByb2R1Y2VQcm9wZXJ0eSwgc3RyZWFtTWV0aG9kOiBwcm9kdWNlUHJvcGVydHl9KTtcblxuXG5cblxuXG4vLyAuY2hhbmdlcygpXG5cbndpdGhPbmVTb3VyY2UoJ2NoYW5nZXMnLCB7XG4gIF9oYW5kbGVWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgaWYgKCFpc0N1cnJlbnQpIHtcbiAgICAgIHRoaXMuX3NlbmQoVkFMVUUsIHgpO1xuICAgIH1cbiAgfSxcbiAgX2hhbmRsZUVycm9yOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAoIWlzQ3VycmVudCkge1xuICAgICAgdGhpcy5fc2VuZChFUlJPUiwgeCk7XG4gICAgfVxuICB9XG59LCB7XG4gIHN0cmVhbU1ldGhvZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LFxuICBwcm9wZXJ0eU1ldGhvZDogcHJvZHVjZVN0cmVhbVxufSk7XG5cblxuXG5cbi8vIC53aXRoSGFuZGxlcigpXG5cbndpdGhPbmVTb3VyY2UoJ3dpdGhIYW5kbGVyJywge1xuICBfaW5pdDogZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuX2hhbmRsZXIgPSBhcmdzWzBdO1xuICAgIHRoaXMuX2ZvcmNlZEN1cnJlbnQgPSBmYWxzZTtcbiAgICB2YXIgJCA9IHRoaXM7XG4gICAgdGhpcy5fZW1pdHRlciA9IHtcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uKHgpIHsgICQuX3NlbmQoVkFMVUUsIHgsICQuX2ZvcmNlZEN1cnJlbnQpICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHgpIHsgICQuX3NlbmQoRVJST1IsIHgsICQuX2ZvcmNlZEN1cnJlbnQpICB9LFxuICAgICAgZW5kOiBmdW5jdGlvbigpIHsgICQuX3NlbmQoRU5ELCBudWxsLCAkLl9mb3JjZWRDdXJyZW50KSAgfVxuICAgIH1cbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2hhbmRsZXIgPSBudWxsO1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsO1xuICB9LFxuICBfaGFuZGxlQW55OiBmdW5jdGlvbihldmVudCkge1xuICAgIHRoaXMuX2ZvcmNlZEN1cnJlbnQgPSBldmVudC5jdXJyZW50O1xuICAgIHRoaXMuX2hhbmRsZXIodGhpcy5fZW1pdHRlciwgZXZlbnQpO1xuICAgIHRoaXMuX2ZvcmNlZEN1cnJlbnQgPSBmYWxzZTtcbiAgfVxufSk7XG5cblxuXG5cbi8vIC5mbGF0dGVuKGZuKVxuXG53aXRoT25lU291cmNlKCdmbGF0dGVuJywge1xuICBfaW5pdDogZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuX2ZuID0gYXJnc1swXSA/IGFyZ3NbMF0gOiBpZDtcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2ZuID0gbnVsbDtcbiAgfSxcbiAgX2hhbmRsZVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICB2YXIgeHMgPSB0aGlzLl9mbih4KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4c1tpXSwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuXG5cblxuXG4vLyAudHJhbnNkdWNlKHRyYW5zZHVjZXIpXG5cbmZ1bmN0aW9uIHhmb3JtRm9yT2JzKG9icykge1xuICByZXR1cm4ge1xuICAgIHN0ZXA6IGZ1bmN0aW9uKHJlcywgaW5wdXQpIHtcbiAgICAgIG9icy5fc2VuZChWQUxVRSwgaW5wdXQsIG9icy5fZm9yY2VkQ3VycmVudCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzKSB7XG4gICAgICBvYnMuX3NlbmQoRU5ELCBudWxsLCBvYnMuX2ZvcmNlZEN1cnJlbnQpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xufVxuXG53aXRoT25lU291cmNlKCd0cmFuc2R1Y2UnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5feGZvcm0gPSBhcmdzWzBdKHhmb3JtRm9yT2JzKHRoaXMpKTtcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3hmb3JtID0gbnVsbDtcbiAgfSxcbiAgX2hhbmRsZVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICB0aGlzLl9mb3JjZWRDdXJyZW50ID0gaXNDdXJyZW50O1xuICAgIGlmICh0aGlzLl94Zm9ybS5zdGVwKG51bGwsIHgpICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94Zm9ybS5yZXN1bHQobnVsbCk7XG4gICAgfVxuICAgIHRoaXMuX2ZvcmNlZEN1cnJlbnQgPSBmYWxzZTtcbiAgfSxcbiAgX2hhbmRsZUVuZDogZnVuY3Rpb24oX18sIGlzQ3VycmVudCkge1xuICAgIHRoaXMuX2ZvcmNlZEN1cnJlbnQgPSBpc0N1cnJlbnQ7XG4gICAgdGhpcy5feGZvcm0ucmVzdWx0KG51bGwpO1xuICAgIHRoaXMuX2ZvcmNlZEN1cnJlbnQgPSBmYWxzZTtcbiAgfVxufSk7XG5cblxuXG5cblxudmFyIHdpdGhGbkFyZ01peGluID0ge1xuICBfaW5pdDogZnVuY3Rpb24oYXJncykgeyAgdGhpcy5fZm4gPSBhcmdzWzBdIHx8IGlkICB9LFxuICBfZnJlZTogZnVuY3Rpb24oKSB7ICB0aGlzLl9mbiA9IG51bGwgIH1cbn07XG5cblxuXG4vLyAubWFwKGZuKVxuXG53aXRoT25lU291cmNlKCdtYXAnLCBleHRlbmQoe1xuICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIHRoaXMuX3NlbmQoVkFMVUUsIHRoaXMuX2ZuKHgpLCBpc0N1cnJlbnQpO1xuICB9XG59LCB3aXRoRm5BcmdNaXhpbikpO1xuXG5cblxuXG4vLyAubWFwRXJyb3JzKGZuKVxuXG53aXRoT25lU291cmNlKCdtYXBFcnJvcnMnLCBleHRlbmQoe1xuICBfaGFuZGxlRXJyb3I6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIHRoaXMuX3NlbmQoRVJST1IsIHRoaXMuX2ZuKHgpLCBpc0N1cnJlbnQpO1xuICB9XG59LCB3aXRoRm5BcmdNaXhpbikpO1xuXG5cblxuLy8gLmVycm9yc1RvVmFsdWVzKGZuKVxuXG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JzVG9WYWx1ZXNIYW5kbGVyKHgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb252ZXJ0OiB0cnVlLFxuICAgIHZhbHVlOiB4XG4gIH07XG59XG5cbndpdGhPbmVTb3VyY2UoJ2Vycm9yc1RvVmFsdWVzJywgZXh0ZW5kKHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl9mbiA9IGFyZ3NbMF0gfHwgZGVmYXVsdEVycm9yc1RvVmFsdWVzSGFuZGxlcjtcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2ZuID0gbnVsbDtcbiAgfSxcbiAgX2hhbmRsZUVycm9yOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZm4oeCk7XG4gICAgdmFyIHR5cGUgPSByZXN1bHQuY29udmVydCA/IFZBTFVFIDogRVJST1I7XG4gICAgdmFyIG5ld1ggPSByZXN1bHQuY29udmVydCA/IHJlc3VsdC52YWx1ZSA6IHg7XG4gICAgdGhpcy5fc2VuZCh0eXBlLCBuZXdYLCBpc0N1cnJlbnQpO1xuICB9XG59KSk7XG5cblxuXG4vLyAudmFsdWVzVG9FcnJvcnMoZm4pXG5cbmZ1bmN0aW9uIGRlZmF1bHRWYWx1ZXNUb0Vycm9yc0hhbmRsZXIoeCkge1xuICByZXR1cm4ge1xuICAgIGNvbnZlcnQ6IHRydWUsXG4gICAgZXJyb3I6IHhcbiAgfTtcbn1cblxud2l0aE9uZVNvdXJjZSgndmFsdWVzVG9FcnJvcnMnLCBleHRlbmQoe1xuICBfaW5pdDogZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuX2ZuID0gYXJnc1swXSB8fCBkZWZhdWx0VmFsdWVzVG9FcnJvcnNIYW5kbGVyO1xuICB9LFxuICBfZnJlZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZm4gPSBudWxsO1xuICB9LFxuICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLl9mbih4KTtcbiAgICB2YXIgdHlwZSA9IHJlc3VsdC5jb252ZXJ0ID8gRVJST1IgOiBWQUxVRTtcbiAgICB2YXIgbmV3WCA9IHJlc3VsdC5jb252ZXJ0ID8gcmVzdWx0LmVycm9yIDogeDtcbiAgICB0aGlzLl9zZW5kKHR5cGUsIG5ld1gsIGlzQ3VycmVudCk7XG4gIH1cbn0pKTtcblxuXG5cblxuLy8gLmZpbHRlcihmbilcblxud2l0aE9uZVNvdXJjZSgnZmlsdGVyJywgZXh0ZW5kKHtcbiAgX2hhbmRsZVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fZm4oeCkpIHtcbiAgICAgIHRoaXMuX3NlbmQoVkFMVUUsIHgsIGlzQ3VycmVudCk7XG4gICAgfVxuICB9XG59LCB3aXRoRm5BcmdNaXhpbikpO1xuXG5cblxuXG4vLyAuZmlsdGVyRXJyb3JzKGZuKVxuXG53aXRoT25lU291cmNlKCdmaWx0ZXJFcnJvcnMnLCBleHRlbmQoe1xuICBfaGFuZGxlRXJyb3I6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9mbih4KSkge1xuICAgICAgdGhpcy5fc2VuZChFUlJPUiwgeCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cbn0sIHdpdGhGbkFyZ01peGluKSk7XG5cblxuXG5cbi8vIC50YWtlV2hpbGUoZm4pXG5cbndpdGhPbmVTb3VyY2UoJ3Rha2VXaGlsZScsIGV4dGVuZCh7XG4gIF9oYW5kbGVWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgaWYgKHRoaXMuX2ZuKHgpKSB7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4LCBpc0N1cnJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cbn0sIHdpdGhGbkFyZ01peGluKSk7XG5cblxuXG5cblxuLy8gLnRha2Uobilcblxud2l0aE9uZVNvdXJjZSgndGFrZScsIHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl9uID0gYXJnc1swXTtcbiAgICBpZiAodGhpcy5fbiA8PSAwKSB7XG4gICAgICB0aGlzLl9zZW5kKEVORCk7XG4gICAgfVxuICB9LFxuICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIHRoaXMuX24tLTtcbiAgICB0aGlzLl9zZW5kKFZBTFVFLCB4LCBpc0N1cnJlbnQpO1xuICAgIGlmICh0aGlzLl9uID09PSAwKSB7XG4gICAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuXG5cbi8vIC5za2lwKG4pXG5cbndpdGhPbmVTb3VyY2UoJ3NraXAnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fbiA9IE1hdGgubWF4KDAsIGFyZ3NbMF0pO1xuICB9LFxuICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9uID09PSAwKSB7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4LCBpc0N1cnJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9uLS07XG4gICAgfVxuICB9XG59KTtcblxuXG5cblxuLy8gLnNraXBEdXBsaWNhdGVzKFtmbl0pXG5cbndpdGhPbmVTb3VyY2UoJ3NraXBEdXBsaWNhdGVzJywge1xuICBfaW5pdDogZnVuY3Rpb24oYXJncykge1xuICAgIHRoaXMuX2ZuID0gYXJnc1swXSB8fCBzdHJpY3RFcXVhbDtcbiAgICB0aGlzLl9wcmV2ID0gTk9USElORztcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2ZuID0gbnVsbDtcbiAgICB0aGlzLl9wcmV2ID0gbnVsbDtcbiAgfSxcbiAgX2hhbmRsZVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fcHJldiA9PT0gTk9USElORyB8fCAhdGhpcy5fZm4odGhpcy5fcHJldiwgeCkpIHtcbiAgICAgIHRoaXMuX3ByZXYgPSB4O1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuXG5cbi8vIC5za2lwV2hpbGUoZm4pXG5cbndpdGhPbmVTb3VyY2UoJ3NraXBXaGlsZScsIHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl9mbiA9IGFyZ3NbMF0gfHwgaWQ7XG4gICAgdGhpcy5fc2tpcCA9IHRydWU7XG4gIH0sXG4gIF9mcmVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9mbiA9IG51bGw7XG4gIH0sXG4gIF9oYW5kbGVWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgaWYgKCF0aGlzLl9za2lwKSB7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4LCBpc0N1cnJlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2ZuKHgpKSB7XG4gICAgICB0aGlzLl9za2lwID0gZmFsc2U7XG4gICAgICB0aGlzLl9mbiA9IG51bGw7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4LCBpc0N1cnJlbnQpO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG5cblxuLy8gLmRpZmYoZm4sIHNlZWQpXG5cbndpdGhPbmVTb3VyY2UoJ2RpZmYnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fZm4gPSBhcmdzWzBdIHx8IGRlZmF1bHREaWZmO1xuICAgIHRoaXMuX3ByZXYgPSBhcmdzLmxlbmd0aCA+IDEgPyBhcmdzWzFdIDogTk9USElORztcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ByZXYgPSBudWxsO1xuICAgIHRoaXMuX2ZuID0gbnVsbDtcbiAgfSxcbiAgX2hhbmRsZVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fcHJldiAhPT0gTk9USElORykge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgdGhpcy5fZm4odGhpcy5fcHJldiwgeCksIGlzQ3VycmVudCk7XG4gICAgfVxuICAgIHRoaXMuX3ByZXYgPSB4O1xuICB9XG59KTtcblxuXG5cblxuXG4vLyAuc2Nhbihmbiwgc2VlZClcblxud2l0aE9uZVNvdXJjZSgnc2NhbicsIHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl9mbiA9IGFyZ3NbMF07XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgYXJnc1sxXSwgdHJ1ZSk7XG4gICAgfVxuICB9LFxuICBfZnJlZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZm4gPSBudWxsO1xuICB9LFxuICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9jdXJyZW50ICE9PSBOT1RISU5HKSB7XG4gICAgICB4ID0gdGhpcy5fZm4odGhpcy5fY3VycmVudCwgeCk7XG4gICAgfVxuICAgIHRoaXMuX3NlbmQoVkFMVUUsIHgsIGlzQ3VycmVudCk7XG4gIH1cbn0sIHtzdHJlYW1NZXRob2Q6IHByb2R1Y2VQcm9wZXJ0eX0pO1xuXG5cblxuXG5cbi8vIC5yZWR1Y2UoZm4sIHNlZWQpXG5cbndpdGhPbmVTb3VyY2UoJ3JlZHVjZScsIHtcbiAgX2luaXQ6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLl9mbiA9IGFyZ3NbMF07XG4gICAgdGhpcy5fcmVzdWx0ID0gYXJncy5sZW5ndGggPiAxID8gYXJnc1sxXSA6IE5PVEhJTkc7XG4gIH0sXG4gIF9mcmVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9mbiA9IG51bGw7XG4gICAgdGhpcy5fcmVzdWx0ID0gbnVsbDtcbiAgfSxcbiAgX2hhbmRsZVZhbHVlOiBmdW5jdGlvbih4KSB7XG4gICAgdGhpcy5fcmVzdWx0ID0gKHRoaXMuX3Jlc3VsdCA9PT0gTk9USElORykgPyB4IDogdGhpcy5fZm4odGhpcy5fcmVzdWx0LCB4KTtcbiAgfSxcbiAgX2hhbmRsZUVuZDogZnVuY3Rpb24oX18sIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9yZXN1bHQgIT09IE5PVEhJTkcpIHtcbiAgICAgIHRoaXMuX3NlbmQoVkFMVUUsIHRoaXMuX3Jlc3VsdCwgaXNDdXJyZW50KTtcbiAgICB9XG4gICAgdGhpcy5fc2VuZChFTkQsIG51bGwsIGlzQ3VycmVudCk7XG4gIH1cbn0pO1xuXG5cblxuXG4vLyAubWFwRW5kKGZuKVxuXG53aXRoT25lU291cmNlKCdtYXBFbmQnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fZm4gPSBhcmdzWzBdO1xuICB9LFxuICBfZnJlZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZm4gPSBudWxsO1xuICB9LFxuICBfaGFuZGxlRW5kOiBmdW5jdGlvbihfXywgaXNDdXJyZW50KSB7XG4gICAgdGhpcy5fc2VuZChWQUxVRSwgdGhpcy5fZm4oKSwgaXNDdXJyZW50KTtcbiAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgfVxufSk7XG5cblxuXG5cbi8vIC5za2lwVmFsdWUoKVxuXG53aXRoT25lU291cmNlKCdza2lwVmFsdWVzJywge1xuICBfaGFuZGxlVmFsdWU6IGZ1bmN0aW9uKCkge31cbn0pO1xuXG5cblxuLy8gLnNraXBFcnJvcigpXG5cbndpdGhPbmVTb3VyY2UoJ3NraXBFcnJvcnMnLCB7XG4gIF9oYW5kbGVFcnJvcjogZnVuY3Rpb24oKSB7fVxufSk7XG5cblxuXG4vLyAuc2tpcEVuZCgpXG5cbndpdGhPbmVTb3VyY2UoJ3NraXBFbmQnLCB7XG4gIF9oYW5kbGVFbmQ6IGZ1bmN0aW9uKCkge31cbn0pO1xuXG5cblxuLy8gLmVuZE9uRXJyb3IoZm4pXG5cbndpdGhPbmVTb3VyY2UoJ2VuZE9uRXJyb3InLCBleHRlbmQoe1xuICBfaGFuZGxlRXJyb3I6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIHRoaXMuX3NlbmQoRVJST1IsIHgsIGlzQ3VycmVudCk7XG4gICAgdGhpcy5fc2VuZChFTkQsIG51bGwsIGlzQ3VycmVudCk7XG4gIH1cbn0pKTtcblxuXG5cbi8vIC5zbGlkaW5nV2luZG93KG1heFssIG1pbl0pXG5cbndpdGhPbmVTb3VyY2UoJ3NsaWRpbmdXaW5kb3cnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fbWF4ID0gYXJnc1swXTtcbiAgICB0aGlzLl9taW4gPSBhcmdzWzFdIHx8IDA7XG4gICAgdGhpcy5fYnVmZiA9IFtdO1xuICB9LFxuICBfZnJlZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fYnVmZiA9IG51bGw7XG4gIH0sXG4gIF9oYW5kbGVWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgdGhpcy5fYnVmZiA9IHNsaWRlKHRoaXMuX2J1ZmYsIHgsIHRoaXMuX21heCk7XG4gICAgaWYgKHRoaXMuX2J1ZmYubGVuZ3RoID49IHRoaXMuX21pbikge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgdGhpcy5fYnVmZiwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuXG4vLyAuYnVmZmVyV2hpbGUoW3ByZWRpY2F0ZV0sIFtvcHRpb25zXSlcblxud2l0aE9uZVNvdXJjZSgnYnVmZmVyV2hpbGUnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fZm4gPSBhcmdzWzBdIHx8IGlkO1xuICAgIHRoaXMuX2ZsdXNoT25FbmQgPSBnZXQoYXJnc1sxXSwgJ2ZsdXNoT25FbmQnLCB0cnVlKTtcbiAgICB0aGlzLl9idWZmID0gW107XG4gIH0sXG4gIF9mcmVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9idWZmID0gbnVsbDtcbiAgfSxcbiAgX2ZsdXNoOiBmdW5jdGlvbihpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fYnVmZiAhPT0gbnVsbCAmJiB0aGlzLl9idWZmLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgdGhpcy5fYnVmZiwgaXNDdXJyZW50KTtcbiAgICAgIHRoaXMuX2J1ZmYgPSBbXTtcbiAgICB9XG4gIH0sXG4gIF9oYW5kbGVWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgdGhpcy5fYnVmZi5wdXNoKHgpO1xuICAgIGlmICghdGhpcy5fZm4oeCkpIHtcbiAgICAgIHRoaXMuX2ZsdXNoKGlzQ3VycmVudCk7XG4gICAgfVxuICB9LFxuICBfaGFuZGxlRW5kOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fZmx1c2hPbkVuZCkge1xuICAgICAgdGhpcy5fZmx1c2goaXNDdXJyZW50KTtcbiAgICB9XG4gICAgdGhpcy5fc2VuZChFTkQsIG51bGwsIGlzQ3VycmVudCk7XG4gIH1cbn0pO1xuXG5cblxuXG5cbi8vIC5kZWJvdW5jZSh3YWl0LCB7aW1tZWRpYXRlfSlcblxud2l0aE9uZVNvdXJjZSgnZGVib3VuY2UnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fd2FpdCA9IE1hdGgubWF4KDAsIGFyZ3NbMF0pO1xuICAgIHRoaXMuX2ltbWVkaWF0ZSA9IGdldChhcmdzWzFdLCAnaW1tZWRpYXRlJywgZmFsc2UpO1xuICAgIHRoaXMuX2xhc3RBdHRlbXB0ID0gMDtcbiAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuICAgIHRoaXMuX2xhdGVyVmFsdWUgPSBudWxsO1xuICAgIHRoaXMuX2VuZExhdGVyID0gZmFsc2U7XG4gICAgdmFyICQgPSB0aGlzO1xuICAgIHRoaXMuXyRsYXRlciA9IGZ1bmN0aW9uKCkgeyAgJC5fbGF0ZXIoKSAgfTtcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xhdGVyVmFsdWUgPSBudWxsO1xuICAgIHRoaXMuXyRsYXRlciA9IG51bGw7XG4gIH0sXG4gIF9oYW5kbGVWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgaWYgKGlzQ3VycmVudCkge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGFzdEF0dGVtcHQgPSBub3coKTtcbiAgICAgIGlmICh0aGlzLl9pbW1lZGlhdGUgJiYgIXRoaXMuX3RpbWVvdXRJZCkge1xuICAgICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4KTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fdGltZW91dElkKSB7XG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5fJGxhdGVyLCB0aGlzLl93YWl0KTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5faW1tZWRpYXRlKSB7XG4gICAgICAgIHRoaXMuX2xhdGVyVmFsdWUgPSB4O1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgX2hhbmRsZUVuZDogZnVuY3Rpb24oX18sIGlzQ3VycmVudCkge1xuICAgIGlmIChpc0N1cnJlbnQpIHtcbiAgICAgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCBpc0N1cnJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fdGltZW91dElkICYmICF0aGlzLl9pbW1lZGlhdGUpIHtcbiAgICAgICAgdGhpcy5fZW5kTGF0ZXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2VuZChFTkQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgX2xhdGVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGFzdCA9IG5vdygpIC0gdGhpcy5fbGFzdEF0dGVtcHQ7XG4gICAgaWYgKGxhc3QgPCB0aGlzLl93YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgdGhpcy5fdGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLl8kbGF0ZXIsIHRoaXMuX3dhaXQgLSBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdGltZW91dElkID0gbnVsbDtcbiAgICAgIGlmICghdGhpcy5faW1tZWRpYXRlKSB7XG4gICAgICAgIHRoaXMuX3NlbmQoVkFMVUUsIHRoaXMuX2xhdGVyVmFsdWUpO1xuICAgICAgICB0aGlzLl9sYXRlclZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9lbmRMYXRlcikge1xuICAgICAgICB0aGlzLl9zZW5kKEVORCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuXG5cblxuXG4vLyAudGhyb3R0bGUod2FpdCwge2xlYWRpbmcsIHRyYWlsaW5nfSlcblxud2l0aE9uZVNvdXJjZSgndGhyb3R0bGUnLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fd2FpdCA9IE1hdGgubWF4KDAsIGFyZ3NbMF0pO1xuICAgIHRoaXMuX2xlYWRpbmcgPSBnZXQoYXJnc1sxXSwgJ2xlYWRpbmcnLCB0cnVlKTtcbiAgICB0aGlzLl90cmFpbGluZyA9IGdldChhcmdzWzFdLCAndHJhaWxpbmcnLCB0cnVlKTtcbiAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gbnVsbDtcbiAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuICAgIHRoaXMuX2VuZExhdGVyID0gZmFsc2U7XG4gICAgdGhpcy5fbGFzdENhbGxUaW1lID0gMDtcbiAgICB2YXIgJCA9IHRoaXM7XG4gICAgdGhpcy5fJHRyYWlsaW5nQ2FsbCA9IGZ1bmN0aW9uKCkgeyAgJC5fdHJhaWxpbmdDYWxsKCkgIH07XG4gIH0sXG4gIF9mcmVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0gbnVsbDtcbiAgICB0aGlzLl8kdHJhaWxpbmdDYWxsID0gbnVsbDtcbiAgfSxcbiAgX2hhbmRsZVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAoaXNDdXJyZW50KSB7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4LCBpc0N1cnJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY3VyVGltZSA9IG5vdygpO1xuICAgICAgaWYgKHRoaXMuX2xhc3RDYWxsVGltZSA9PT0gMCAmJiAhdGhpcy5fbGVhZGluZykge1xuICAgICAgICB0aGlzLl9sYXN0Q2FsbFRpbWUgPSBjdXJUaW1lO1xuICAgICAgfVxuICAgICAgdmFyIHJlbWFpbmluZyA9IHRoaXMuX3dhaXQgLSAoY3VyVGltZSAtIHRoaXMuX2xhc3RDYWxsVGltZSk7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsVHJhbGluZygpO1xuICAgICAgICB0aGlzLl9sYXN0Q2FsbFRpbWUgPSBjdXJUaW1lO1xuICAgICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdHJhaWxpbmcpIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsVHJhbGluZygpO1xuICAgICAgICB0aGlzLl90cmFpbGluZ1ZhbHVlID0geDtcbiAgICAgICAgdGhpcy5fdGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLl8kdHJhaWxpbmdDYWxsLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgX2hhbmRsZUVuZDogZnVuY3Rpb24oX18sIGlzQ3VycmVudCkge1xuICAgIGlmIChpc0N1cnJlbnQpIHtcbiAgICAgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCBpc0N1cnJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fdGltZW91dElkKSB7XG4gICAgICAgIHRoaXMuX2VuZExhdGVyID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlbmQoRU5EKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIF9jYW5jZWxUcmFsaW5nOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fdGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dElkKTtcbiAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfdHJhaWxpbmdDYWxsOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9zZW5kKFZBTFVFLCB0aGlzLl90cmFpbGluZ1ZhbHVlKTtcbiAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuICAgIHRoaXMuX3RyYWlsaW5nVmFsdWUgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RDYWxsVGltZSA9ICF0aGlzLl9sZWFkaW5nID8gMCA6IG5vdygpO1xuICAgIGlmICh0aGlzLl9lbmRMYXRlcikge1xuICAgICAgdGhpcy5fc2VuZChFTkQpO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG5cblxuLy8gLmRlbGF5KClcblxud2l0aE9uZVNvdXJjZSgnZGVsYXknLCB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fd2FpdCA9IE1hdGgubWF4KDAsIGFyZ3NbMF0pO1xuICAgIHRoaXMuX2J1ZmYgPSBbXTtcbiAgICB2YXIgJCA9IHRoaXM7XG4gICAgdGhpcy5fJHNoaWZ0QnVmZiA9IGZ1bmN0aW9uKCkgeyAgJC5fc2VuZChWQUxVRSwgJC5fYnVmZi5zaGlmdCgpKSAgfVxuICB9LFxuICBfZnJlZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fYnVmZiA9IG51bGw7XG4gICAgdGhpcy5fJHNoaWZ0QnVmZiA9IG51bGw7XG4gIH0sXG4gIF9oYW5kbGVWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgaWYgKGlzQ3VycmVudCkge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYnVmZi5wdXNoKHgpO1xuICAgICAgc2V0VGltZW91dCh0aGlzLl8kc2hpZnRCdWZmLCB0aGlzLl93YWl0KTtcbiAgICB9XG4gIH0sXG4gIF9oYW5kbGVFbmQ6IGZ1bmN0aW9uKF9fLCBpc0N1cnJlbnQpIHtcbiAgICBpZiAoaXNDdXJyZW50KSB7XG4gICAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyICQgPSB0aGlzO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgICQuX3NlbmQoRU5EKSAgfSwgdGhpcy5fd2FpdCk7XG4gICAgfVxuICB9XG59KTtcblxuLy8gS2VmaXIuZnJvbUJpbmRlcihmbilcblxuZnVuY3Rpb24gRnJvbUJpbmRlcihmbikge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcbiAgdGhpcy5fZm4gPSBmbjtcbiAgdGhpcy5fdW5zdWJzY3JpYmUgPSBudWxsO1xufVxuXG5pbmhlcml0KEZyb21CaW5kZXIsIFN0cmVhbSwge1xuXG4gIF9uYW1lOiAnZnJvbUJpbmRlcicsXG5cbiAgX29uQWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyICQgPSB0aGlzXG4gICAgICAsIGlzQ3VycmVudCA9IHRydWVcbiAgICAgICwgZW1pdHRlciA9IHtcbiAgICAgICAgZW1pdDogZnVuY3Rpb24oeCkgeyAgJC5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KSAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHgpIHsgICQuX3NlbmQoRVJST1IsIHgsIGlzQ3VycmVudCkgIH0sXG4gICAgICAgIGVuZDogZnVuY3Rpb24oKSB7ICAkLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KSAgfVxuICAgICAgfTtcbiAgICB0aGlzLl91bnN1YnNjcmliZSA9IHRoaXMuX2ZuKGVtaXR0ZXIpIHx8IG51bGw7XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBodHRwczovL2dpdGh1Yi5jb20vcG96YWRpL2tlZmlyL2lzc3Vlcy8zNVxuICAgIGlmICghdGhpcy5fYWN0aXZlICYmIHRoaXMuX3Vuc3Vic2NyaWJlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIH1cblxuICAgIGlzQ3VycmVudCA9IGZhbHNlO1xuICB9LFxuICBfb25EZWFjdGl2YXRpb246IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl91bnN1YnNjcmliZSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgX2NsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl9jbGVhci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX2ZuID0gbnVsbDtcbiAgfVxuXG59KVxuXG5LZWZpci5mcm9tQmluZGVyID0gZnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIG5ldyBGcm9tQmluZGVyKGZuKTtcbn1cblxuXG5cblxuXG5cbi8vIEtlZmlyLmVtaXR0ZXIoKVxuXG5mdW5jdGlvbiBFbWl0dGVyKCkge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuaW5oZXJpdChFbWl0dGVyLCBTdHJlYW0sIHtcbiAgX25hbWU6ICdlbWl0dGVyJyxcbiAgZW1pdDogZnVuY3Rpb24oeCkge1xuICAgIHRoaXMuX3NlbmQoVkFMVUUsIHgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBlcnJvcjogZnVuY3Rpb24oeCkge1xuICAgIHRoaXMuX3NlbmQoRVJST1IsIHgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3NlbmQoRU5EKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cbktlZmlyLmVtaXR0ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBFbWl0dGVyKCk7XG59XG5cbktlZmlyLkVtaXR0ZXIgPSBFbWl0dGVyO1xuXG5cblxuXG5cblxuXG4vLyBLZWZpci5uZXZlcigpXG5cbnZhciBuZXZlck9iaiA9IG5ldyBTdHJlYW0oKTtcbm5ldmVyT2JqLl9zZW5kKEVORCk7XG5uZXZlck9iai5fbmFtZSA9ICduZXZlcic7XG5LZWZpci5uZXZlciA9IGZ1bmN0aW9uKCkgeyAgcmV0dXJuIG5ldmVyT2JqICB9XG5cblxuXG5cblxuLy8gS2VmaXIuY29uc3RhbnQoeClcblxuZnVuY3Rpb24gQ29uc3RhbnQoeCkge1xuICBQcm9wZXJ0eS5jYWxsKHRoaXMpO1xuICB0aGlzLl9zZW5kKFZBTFVFLCB4KTtcbiAgdGhpcy5fc2VuZChFTkQpO1xufVxuXG5pbmhlcml0KENvbnN0YW50LCBQcm9wZXJ0eSwge1xuICBfbmFtZTogJ2NvbnN0YW50J1xufSlcblxuS2VmaXIuY29uc3RhbnQgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBuZXcgQ29uc3RhbnQoeCk7XG59XG5cblxuXG5cbi8vIEtlZmlyLmNvbnN0YW50RXJyb3IoeClcblxuZnVuY3Rpb24gQ29uc3RhbnRFcnJvcih4KSB7XG4gIFByb3BlcnR5LmNhbGwodGhpcyk7XG4gIHRoaXMuX3NlbmQoRVJST1IsIHgpO1xuICB0aGlzLl9zZW5kKEVORCk7XG59XG5cbmluaGVyaXQoQ29uc3RhbnRFcnJvciwgUHJvcGVydHksIHtcbiAgX25hbWU6ICdjb25zdGFudEVycm9yJ1xufSlcblxuS2VmaXIuY29uc3RhbnRFcnJvciA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIG5ldyBDb25zdGFudEVycm9yKHgpO1xufVxuXG5cbi8vIC5zZXROYW1lXG5cbk9ic2VydmFibGUucHJvdG90eXBlLnNldE5hbWUgPSBmdW5jdGlvbihzb3VyY2VPYnMsIHNlbGZOYW1lIC8qIG9yIGp1c3Qgc2VsZk5hbWUgKi8pIHtcbiAgdGhpcy5fbmFtZSA9IHNlbGZOYW1lID8gc291cmNlT2JzLl9uYW1lICsgJy4nICsgc2VsZk5hbWUgOiBzb3VyY2VPYnM7XG4gIHJldHVybiB0aGlzO1xufVxuXG5cblxuLy8gLm1hcFRvXG5cbk9ic2VydmFibGUucHJvdG90eXBlLm1hcFRvID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkgeyAgcmV0dXJuIHZhbHVlICB9KS5zZXROYW1lKHRoaXMsICdtYXBUbycpO1xufVxuXG5cblxuLy8gLnBsdWNrXG5cbk9ic2VydmFibGUucHJvdG90eXBlLnBsdWNrID0gZnVuY3Rpb24ocHJvcGVydHlOYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHhbcHJvcGVydHlOYW1lXTtcbiAgfSkuc2V0TmFtZSh0aGlzLCAncGx1Y2snKTtcbn1cblxuXG5cbi8vIC5pbnZva2VcblxuT2JzZXJ2YWJsZS5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24obWV0aG9kTmFtZSAvKiwgYXJnMSwgYXJnMi4uLiAqLykge1xuICB2YXIgYXJncyA9IHJlc3QoYXJndW1lbnRzLCAxKTtcbiAgcmV0dXJuIHRoaXMubWFwKGFyZ3MgP1xuICAgIGZ1bmN0aW9uKHgpIHsgIHJldHVybiBhcHBseSh4W21ldGhvZE5hbWVdLCB4LCBhcmdzKSAgfSA6XG4gICAgZnVuY3Rpb24oeCkgeyAgcmV0dXJuIHhbbWV0aG9kTmFtZV0oKSAgfVxuICApLnNldE5hbWUodGhpcywgJ2ludm9rZScpO1xufVxuXG5cblxuXG4vLyAudGltZXN0YW1wXG5cbk9ic2VydmFibGUucHJvdG90eXBlLnRpbWVzdGFtcCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oeCkgeyAgcmV0dXJuIHt2YWx1ZTogeCwgdGltZTogbm93KCl9ICB9KS5zZXROYW1lKHRoaXMsICd0aW1lc3RhbXAnKTtcbn1cblxuXG5cblxuLy8gLnRhcFxuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS50YXAgPSBmdW5jdGlvbihmbikge1xuICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oeCkge1xuICAgIGZuKHgpO1xuICAgIHJldHVybiB4O1xuICB9KS5zZXROYW1lKHRoaXMsICd0YXAnKTtcbn1cblxuXG5cbi8vIC5hbmRcblxuS2VmaXIuYW5kID0gZnVuY3Rpb24ob2JzZXJ2YWJsZXMpIHtcbiAgcmV0dXJuIEtlZmlyLmNvbWJpbmUob2JzZXJ2YWJsZXMsIGFuZCkuc2V0TmFtZSgnYW5kJyk7XG59XG5cbk9ic2VydmFibGUucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmNvbWJpbmUob3RoZXIsIGFuZCkuc2V0TmFtZSgnYW5kJyk7XG59XG5cblxuXG4vLyAub3JcblxuS2VmaXIub3IgPSBmdW5jdGlvbihvYnNlcnZhYmxlcykge1xuICByZXR1cm4gS2VmaXIuY29tYmluZShvYnNlcnZhYmxlcywgb3IpLnNldE5hbWUoJ29yJyk7XG59XG5cbk9ic2VydmFibGUucHJvdG90eXBlLm9yID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuY29tYmluZShvdGhlciwgb3IpLnNldE5hbWUoJ29yJyk7XG59XG5cblxuXG4vLyAubm90XG5cbk9ic2VydmFibGUucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tYXAobm90KS5zZXROYW1lKHRoaXMsICdub3QnKTtcbn1cblxuXG5cbi8vIC5hd2FpdGluZ1xuXG5PYnNlcnZhYmxlLnByb3RvdHlwZS5hd2FpdGluZyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gIHJldHVybiBLZWZpci5tZXJnZShbXG4gICAgdGhpcy5tYXBUbyh0cnVlKSxcbiAgICBvdGhlci5tYXBUbyhmYWxzZSlcbiAgXSkuc2tpcER1cGxpY2F0ZXMoKS50b1Byb3BlcnR5KGZhbHNlKS5zZXROYW1lKHRoaXMsICdhd2FpdGluZycpO1xufVxuXG5cblxuXG4vLyAuZnJvbUNhbGxiYWNrXG5cbktlZmlyLmZyb21DYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrQ29uc3VtZXIpIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gS2VmaXIuZnJvbUJpbmRlcihmdW5jdGlvbihlbWl0dGVyKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxiYWNrQ29uc3VtZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICBlbWl0dGVyLmVtaXQoeCk7XG4gICAgICAgIGVtaXR0ZXIuZW5kKCk7XG4gICAgICB9KTtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgfVxuICB9KS5zZXROYW1lKCdmcm9tQ2FsbGJhY2snKTtcbn1cblxuXG5cblxuLy8gLmZyb21Ob2RlQ2FsbGJhY2tcblxuS2VmaXIuZnJvbU5vZGVDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrQ29uc3VtZXIpIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gS2VmaXIuZnJvbUJpbmRlcihmdW5jdGlvbihlbWl0dGVyKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxiYWNrQ29uc3VtZXIoZnVuY3Rpb24oZXJyb3IsIHgpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgZW1pdHRlci5lcnJvcihlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW1pdHRlci5lbWl0KHgpO1xuICAgICAgICB9XG4gICAgICAgIGVtaXR0ZXIuZW5kKCk7XG4gICAgICB9KTtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgfVxuICB9KS5zZXROYW1lKCdmcm9tTm9kZUNhbGxiYWNrJyk7XG59XG5cblxuXG5cbi8vIC5mcm9tUHJvbWlzZVxuXG5LZWZpci5mcm9tUHJvbWlzZSA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gS2VmaXIuZnJvbUJpbmRlcihmdW5jdGlvbihlbWl0dGVyKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIHZhciBvblZhbHVlID0gZnVuY3Rpb24oeCkge1xuICAgICAgICBlbWl0dGVyLmVtaXQoeCk7XG4gICAgICAgIGVtaXR0ZXIuZW5kKCk7XG4gICAgICB9O1xuICAgICAgdmFyIG9uRXJyb3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgIGVtaXR0ZXIuZXJyb3IoeCk7XG4gICAgICAgIGVtaXR0ZXIuZW5kKCk7XG4gICAgICB9O1xuICAgICAgdmFyIF9wcm9taXNlID0gcHJvbWlzZS50aGVuKG9uVmFsdWUsIG9uRXJyb3IpO1xuXG4gICAgICAvLyBwcmV2ZW50IHByb21pc2UvQSsgbGlicmFyaWVzIGxpa2UgUSB0byBzd2FsbG93IGV4Y2VwdGlvbnNcbiAgICAgIGlmIChfcHJvbWlzZSAmJiBpc0ZuKF9wcm9taXNlLmRvbmUpKSB7XG4gICAgICAgIF9wcm9taXNlLmRvbmUoKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pLnRvUHJvcGVydHkoKS5zZXROYW1lKCdmcm9tUHJvbWlzZScpO1xufVxuXG5cblxuXG5cblxuLy8gLmZyb21TdWJVbnN1YlxuXG5LZWZpci5mcm9tU3ViVW5zdWIgPSBmdW5jdGlvbihzdWIsIHVuc3ViLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gS2VmaXIuZnJvbUJpbmRlcihmdW5jdGlvbihlbWl0dGVyKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB0cmFuc2Zvcm1lciA/IGZ1bmN0aW9uKCkge1xuICAgICAgZW1pdHRlci5lbWl0KGFwcGx5KHRyYW5zZm9ybWVyLCB0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9IDogZW1pdHRlci5lbWl0O1xuICAgIHN1YihoYW5kbGVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7ICB1bnN1YihoYW5kbGVyKSAgfTtcbiAgfSk7XG59XG5cblxuXG5cbi8vIC5mcm9tRXZlbnRcblxudmFyIHN1YlVuc3ViUGFpcnMgPSBbXG4gIFsnYWRkRXZlbnRMaXN0ZW5lcicsICdyZW1vdmVFdmVudExpc3RlbmVyJ10sXG4gIFsnYWRkTGlzdGVuZXInLCAncmVtb3ZlTGlzdGVuZXInXSxcbiAgWydvbicsICdvZmYnXVxuXTtcblxuS2VmaXIuZnJvbUV2ZW50ID0gZnVuY3Rpb24odGFyZ2V0LCBldmVudE5hbWUsIHRyYW5zZm9ybWVyKSB7XG4gIHZhciBwYWlyLCBzdWIsIHVuc3ViO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3ViVW5zdWJQYWlycy5sZW5ndGg7IGkrKykge1xuICAgIHBhaXIgPSBzdWJVbnN1YlBhaXJzW2ldO1xuICAgIGlmIChpc0ZuKHRhcmdldFtwYWlyWzBdXSkgJiYgaXNGbih0YXJnZXRbcGFpclsxXV0pKSB7XG4gICAgICBzdWIgPSBwYWlyWzBdO1xuICAgICAgdW5zdWIgPSBwYWlyWzFdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1YiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0YXJnZXQgZG9uXFwndCBzdXBwb3J0IGFueSBvZiAnICtcbiAgICAgICdhZGRFdmVudExpc3RlbmVyL3JlbW92ZUV2ZW50TGlzdGVuZXIsIGFkZExpc3RlbmVyL3JlbW92ZUxpc3RlbmVyLCBvbi9vZmYgbWV0aG9kIHBhaXInKTtcbiAgfVxuXG4gIHJldHVybiBLZWZpci5mcm9tU3ViVW5zdWIoXG4gICAgZnVuY3Rpb24oaGFuZGxlcikgeyAgdGFyZ2V0W3N1Yl0oZXZlbnROYW1lLCBoYW5kbGVyKSAgfSxcbiAgICBmdW5jdGlvbihoYW5kbGVyKSB7ICB0YXJnZXRbdW5zdWJdKGV2ZW50TmFtZSwgaGFuZGxlcikgIH0sXG4gICAgdHJhbnNmb3JtZXJcbiAgKS5zZXROYW1lKCdmcm9tRXZlbnQnKTtcbn1cblxudmFyIHdpdGhUd29Tb3VyY2VzQW5kQnVmZmVyTWl4aW4gPSB7XG4gIF9pbml0OiBmdW5jdGlvbihhcmdzKSB7XG4gICAgdGhpcy5fYnVmZiA9IFtdO1xuICAgIHRoaXMuX2ZsdXNoT25FbmQgPSBnZXQoYXJnc1swXSwgJ2ZsdXNoT25FbmQnLCB0cnVlKTtcbiAgfSxcbiAgX2ZyZWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2J1ZmYgPSBudWxsO1xuICB9LFxuICBfZmx1c2g6IGZ1bmN0aW9uKGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9idWZmICE9PSBudWxsICYmIHRoaXMuX2J1ZmYubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB0aGlzLl9idWZmLCBpc0N1cnJlbnQpO1xuICAgICAgdGhpcy5fYnVmZiA9IFtdO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlUHJpbWFyeUVuZDogZnVuY3Rpb24oX18sIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9mbHVzaE9uRW5kKSB7XG4gICAgICB0aGlzLl9mbHVzaChpc0N1cnJlbnQpO1xuICAgIH1cbiAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgfVxufTtcblxuXG5cbndpdGhUd29Tb3VyY2VzKCdidWZmZXJCeScsIGV4dGVuZCh7XG5cbiAgX29uQWN0aXZhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcHJpbWFyeS5vbkFueSh0aGlzLl8kaGFuZGxlUHJpbWFyeUFueSk7XG4gICAgaWYgKHRoaXMuX2FsaXZlICYmIHRoaXMuX3NlY29uZGFyeSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fc2Vjb25kYXJ5Lm9uQW55KHRoaXMuXyRoYW5kbGVTZWNvbmRhcnlBbnkpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlUHJpbWFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICB0aGlzLl9idWZmLnB1c2goeCk7XG4gIH0sXG5cbiAgX2hhbmRsZVNlY29uZGFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICB0aGlzLl9mbHVzaChpc0N1cnJlbnQpO1xuICB9LFxuXG4gIF9oYW5kbGVTZWNvbmRhcnlFbmQ6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIGlmICghdGhpcy5fZmx1c2hPbkVuZCkge1xuICAgICAgdGhpcy5fc2VuZChFTkQsIG51bGwsIGlzQ3VycmVudCk7XG4gICAgfVxuICB9XG5cbn0sIHdpdGhUd29Tb3VyY2VzQW5kQnVmZmVyTWl4aW4pKTtcblxuXG5cblxud2l0aFR3b1NvdXJjZXMoJ2J1ZmZlcldoaWxlQnknLCBleHRlbmQoe1xuXG4gIF9oYW5kbGVQcmltYXJ5VmFsdWU6IGZ1bmN0aW9uKHgsIGlzQ3VycmVudCkge1xuICAgIHRoaXMuX2J1ZmYucHVzaCh4KTtcbiAgICBpZiAodGhpcy5fbGFzdFNlY29uZGFyeSAhPT0gTk9USElORyAmJiAhdGhpcy5fbGFzdFNlY29uZGFyeSkge1xuICAgICAgdGhpcy5fZmx1c2goaXNDdXJyZW50KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZVNlY29uZGFyeUVuZDogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgaWYgKCF0aGlzLl9mbHVzaE9uRW5kICYmICh0aGlzLl9sYXN0U2Vjb25kYXJ5ID09PSBOT1RISU5HIHx8IHRoaXMuX2xhc3RTZWNvbmRhcnkpKSB7XG4gICAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cblxufSwgd2l0aFR3b1NvdXJjZXNBbmRCdWZmZXJNaXhpbikpO1xuXG5cblxuXG5cbndpdGhUd29Tb3VyY2VzKCdmaWx0ZXJCeScsIHtcblxuICBfaGFuZGxlUHJpbWFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fbGFzdFNlY29uZGFyeSAhPT0gTk9USElORyAmJiB0aGlzLl9sYXN0U2Vjb25kYXJ5KSB7XG4gICAgICB0aGlzLl9zZW5kKFZBTFVFLCB4LCBpc0N1cnJlbnQpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlU2Vjb25kYXJ5RW5kOiBmdW5jdGlvbihfXywgaXNDdXJyZW50KSB7XG4gICAgaWYgKHRoaXMuX2xhc3RTZWNvbmRhcnkgPT09IE5PVEhJTkcgfHwgIXRoaXMuX2xhc3RTZWNvbmRhcnkpIHtcbiAgICAgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCBpc0N1cnJlbnQpO1xuICAgIH1cbiAgfVxuXG59KTtcblxuXG5cbndpdGhUd29Tb3VyY2VzKCdza2lwVW50aWxCeScsIHtcblxuICBfaGFuZGxlUHJpbWFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fbGFzdFNlY29uZGFyeSAhPT0gTk9USElORykge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZVNlY29uZGFyeUVuZDogZnVuY3Rpb24oX18sIGlzQ3VycmVudCkge1xuICAgIGlmICh0aGlzLl9sYXN0U2Vjb25kYXJ5ID09PSBOT1RISU5HKSB7XG4gICAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH1cblxufSk7XG5cblxuXG53aXRoVHdvU291cmNlcygndGFrZVVudGlsQnknLCB7XG5cbiAgX2hhbmRsZVNlY29uZGFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICB0aGlzLl9zZW5kKEVORCwgbnVsbCwgaXNDdXJyZW50KTtcbiAgfVxuXG59KTtcblxuXG5cbndpdGhUd29Tb3VyY2VzKCd0YWtlV2hpbGVCeScsIHtcblxuICBfaGFuZGxlUHJpbWFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICBpZiAodGhpcy5fbGFzdFNlY29uZGFyeSAhPT0gTk9USElORykge1xuICAgICAgdGhpcy5fc2VuZChWQUxVRSwgeCwgaXNDdXJyZW50KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZVNlY29uZGFyeVZhbHVlOiBmdW5jdGlvbih4LCBpc0N1cnJlbnQpIHtcbiAgICB0aGlzLl9sYXN0U2Vjb25kYXJ5ID0geDtcbiAgICBpZiAoIXRoaXMuX2xhc3RTZWNvbmRhcnkpIHtcbiAgICAgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCBpc0N1cnJlbnQpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlU2Vjb25kYXJ5RW5kOiBmdW5jdGlvbihfXywgaXNDdXJyZW50KSB7XG4gICAgaWYgKHRoaXMuX2xhc3RTZWNvbmRhcnkgPT09IE5PVEhJTkcpIHtcbiAgICAgIHRoaXMuX3NlbmQoRU5ELCBudWxsLCBpc0N1cnJlbnQpO1xuICAgIH1cbiAgfVxuXG59KTtcblxuXG5cblxud2l0aFR3b1NvdXJjZXMoJ3NraXBXaGlsZUJ5Jywge1xuXG4gIF9pbml0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9oYXNGYWxzZXlGcm9tU2Vjb25kYXJ5ID0gZmFsc2U7XG4gIH0sXG5cbiAgX2hhbmRsZVByaW1hcnlWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgaWYgKHRoaXMuX2hhc0ZhbHNleUZyb21TZWNvbmRhcnkpIHtcbiAgICAgIHRoaXMuX3NlbmQoVkFMVUUsIHgsIGlzQ3VycmVudCk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVTZWNvbmRhcnlWYWx1ZTogZnVuY3Rpb24oeCwgaXNDdXJyZW50KSB7XG4gICAgdGhpcy5faGFzRmFsc2V5RnJvbVNlY29uZGFyeSA9IHRoaXMuX2hhc0ZhbHNleUZyb21TZWNvbmRhcnkgfHwgIXg7XG4gIH0sXG5cbiAgX2hhbmRsZVNlY29uZGFyeUVuZDogZnVuY3Rpb24oX18sIGlzQ3VycmVudCkge1xuICAgIGlmICghdGhpcy5faGFzRmFsc2V5RnJvbVNlY29uZGFyeSkge1xuICAgICAgdGhpcy5fc2VuZChFTkQsIG51bGwsIGlzQ3VycmVudCk7XG4gICAgfVxuICB9XG5cbn0pO1xuXG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gS2VmaXI7XG4gICAgfSk7XG4gICAgZ2xvYmFsLktlZmlyID0gS2VmaXI7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS2VmaXI7XG4gICAgS2VmaXIuS2VmaXIgPSBLZWZpcjtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWwuS2VmaXIgPSBLZWZpcjtcbiAgfVxuXG59KHRoaXMpKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2Jvd2VyX2NvbXBvbmVudHMva2VmaXIvZGlzdC9rZWZpci5qc1xuICoqLyIsIi8vIHR3ZWVuLmpzIHYuMC4xNS4wIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2xlL3R3ZWVuLmpzXG52b2lkIDA9PT1EYXRlLm5vdyYmKERhdGUubm93PWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS52YWx1ZU9mKCl9KTt2YXIgVFdFRU49VFdFRU58fGZ1bmN0aW9uKCl7dmFyIG49W107cmV0dXJue1JFVklTSU9OOlwiMTRcIixnZXRBbGw6ZnVuY3Rpb24oKXtyZXR1cm4gbn0scmVtb3ZlQWxsOmZ1bmN0aW9uKCl7bj1bXX0sYWRkOmZ1bmN0aW9uKHQpe24ucHVzaCh0KX0scmVtb3ZlOmZ1bmN0aW9uKHQpe3ZhciByPW4uaW5kZXhPZih0KTstMSE9PXImJm4uc3BsaWNlKHIsMSl9LHVwZGF0ZTpmdW5jdGlvbih0KXtpZigwPT09bi5sZW5ndGgpcmV0dXJuITE7dmFyIHI9MDtmb3IodD12b2lkIDAhPT10P3Q6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmdm9pZCAwIT09d2luZG93LnBlcmZvcm1hbmNlJiZ2b2lkIDAhPT13aW5kb3cucGVyZm9ybWFuY2Uubm93P3dpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTpEYXRlLm5vdygpO3I8bi5sZW5ndGg7KW5bcl0udXBkYXRlKHQpP3IrKzpuLnNwbGljZShyLDEpO3JldHVybiEwfX19KCk7VFdFRU4uVHdlZW49ZnVuY3Rpb24obil7dmFyIHQ9bixyPXt9LGk9e30sdT17fSxvPTFlMyxlPTAsYT0hMSxmPSExLGM9ITEscz0wLGg9bnVsbCxsPVRXRUVOLkVhc2luZy5MaW5lYXIuTm9uZSxwPVRXRUVOLkludGVycG9sYXRpb24uTGluZWFyLEU9W10sZD1udWxsLHY9ITEsST1udWxsLHc9bnVsbCxNPW51bGw7Zm9yKHZhciBPIGluIG4pcltPXT1wYXJzZUZsb2F0KG5bT10sMTApO3RoaXMudG89ZnVuY3Rpb24obix0KXtyZXR1cm4gdm9pZCAwIT09dCYmKG89dCksaT1uLHRoaXN9LHRoaXMuc3RhcnQ9ZnVuY3Rpb24obil7VFdFRU4uYWRkKHRoaXMpLGY9ITAsdj0hMSxoPXZvaWQgMCE9PW4/bjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ2b2lkIDAhPT13aW5kb3cucGVyZm9ybWFuY2UmJnZvaWQgMCE9PXdpbmRvdy5wZXJmb3JtYW5jZS5ub3c/d2luZG93LnBlcmZvcm1hbmNlLm5vdygpOkRhdGUubm93KCksaCs9cztmb3IodmFyIG8gaW4gaSl7aWYoaVtvXWluc3RhbmNlb2YgQXJyYXkpe2lmKDA9PT1pW29dLmxlbmd0aCljb250aW51ZTtpW29dPVt0W29dXS5jb25jYXQoaVtvXSl9cltvXT10W29dLHJbb11pbnN0YW5jZW9mIEFycmF5PT0hMSYmKHJbb10qPTEpLHVbb109cltvXXx8MH1yZXR1cm4gdGhpc30sdGhpcy5zdG9wPWZ1bmN0aW9uKCl7cmV0dXJuIGY/KFRXRUVOLnJlbW92ZSh0aGlzKSxmPSExLG51bGwhPT1NJiZNLmNhbGwodCksdGhpcy5zdG9wQ2hhaW5lZFR3ZWVucygpLHRoaXMpOnRoaXN9LHRoaXMuc3RvcENoYWluZWRUd2VlbnM9ZnVuY3Rpb24oKXtmb3IodmFyIG49MCx0PUUubGVuZ3RoO3Q+bjtuKyspRVtuXS5zdG9wKCl9LHRoaXMuZGVsYXk9ZnVuY3Rpb24obil7cmV0dXJuIHM9bix0aGlzfSx0aGlzLnJlcGVhdD1mdW5jdGlvbihuKXtyZXR1cm4gZT1uLHRoaXN9LHRoaXMueW95bz1mdW5jdGlvbihuKXtyZXR1cm4gYT1uLHRoaXN9LHRoaXMuZWFzaW5nPWZ1bmN0aW9uKG4pe3JldHVybiBsPW4sdGhpc30sdGhpcy5pbnRlcnBvbGF0aW9uPWZ1bmN0aW9uKG4pe3JldHVybiBwPW4sdGhpc30sdGhpcy5jaGFpbj1mdW5jdGlvbigpe3JldHVybiBFPWFyZ3VtZW50cyx0aGlzfSx0aGlzLm9uU3RhcnQ9ZnVuY3Rpb24obil7cmV0dXJuIGQ9bix0aGlzfSx0aGlzLm9uVXBkYXRlPWZ1bmN0aW9uKG4pe3JldHVybiBJPW4sdGhpc30sdGhpcy5vbkNvbXBsZXRlPWZ1bmN0aW9uKG4pe3JldHVybiB3PW4sdGhpc30sdGhpcy5vblN0b3A9ZnVuY3Rpb24obil7cmV0dXJuIE09bix0aGlzfSx0aGlzLnVwZGF0ZT1mdW5jdGlvbihuKXt2YXIgZjtpZihoPm4pcmV0dXJuITA7dj09PSExJiYobnVsbCE9PWQmJmQuY2FsbCh0KSx2PSEwKTt2YXIgTT0obi1oKS9vO009TT4xPzE6TTt2YXIgTz1sKE0pO2ZvcihmIGluIGkpe3ZhciBtPXJbZl18fDAsTj1pW2ZdO04gaW5zdGFuY2VvZiBBcnJheT90W2ZdPXAoTixPKTooXCJzdHJpbmdcIj09dHlwZW9mIE4mJihOPW0rcGFyc2VGbG9hdChOLDEwKSksXCJudW1iZXJcIj09dHlwZW9mIE4mJih0W2ZdPW0rKE4tbSkqTykpfWlmKG51bGwhPT1JJiZJLmNhbGwodCxPKSwxPT1NKXtpZihlPjApe2lzRmluaXRlKGUpJiZlLS07Zm9yKGYgaW4gdSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGlbZl0mJih1W2ZdPXVbZl0rcGFyc2VGbG9hdChpW2ZdLDEwKSksYSl7dmFyIFQ9dVtmXTt1W2ZdPWlbZl0saVtmXT1UfXJbZl09dVtmXX1yZXR1cm4gYSYmKGM9IWMpLGg9bitzLCEwfW51bGwhPT13JiZ3LmNhbGwodCk7Zm9yKHZhciBnPTAsVz1FLmxlbmd0aDtXPmc7ZysrKUVbZ10uc3RhcnQobik7cmV0dXJuITF9cmV0dXJuITB9fSxUV0VFTi5FYXNpbmc9e0xpbmVhcjp7Tm9uZTpmdW5jdGlvbihuKXtyZXR1cm4gbn19LFF1YWRyYXRpYzp7SW46ZnVuY3Rpb24obil7cmV0dXJuIG4qbn0sT3V0OmZ1bmN0aW9uKG4pe3JldHVybiBuKigyLW4pfSxJbk91dDpmdW5jdGlvbihuKXtyZXR1cm4obio9Mik8MT8uNSpuKm46LS41KigtLW4qKG4tMiktMSl9fSxDdWJpYzp7SW46ZnVuY3Rpb24obil7cmV0dXJuIG4qbipufSxPdXQ6ZnVuY3Rpb24obil7cmV0dXJuLS1uKm4qbisxfSxJbk91dDpmdW5jdGlvbihuKXtyZXR1cm4obio9Mik8MT8uNSpuKm4qbjouNSooKG4tPTIpKm4qbisyKX19LFF1YXJ0aWM6e0luOmZ1bmN0aW9uKG4pe3JldHVybiBuKm4qbipufSxPdXQ6ZnVuY3Rpb24obil7cmV0dXJuIDEtIC0tbipuKm4qbn0sSW5PdXQ6ZnVuY3Rpb24obil7cmV0dXJuKG4qPTIpPDE/LjUqbipuKm4qbjotLjUqKChuLT0yKSpuKm4qbi0yKX19LFF1aW50aWM6e0luOmZ1bmN0aW9uKG4pe3JldHVybiBuKm4qbipuKm59LE91dDpmdW5jdGlvbihuKXtyZXR1cm4tLW4qbipuKm4qbisxfSxJbk91dDpmdW5jdGlvbihuKXtyZXR1cm4obio9Mik8MT8uNSpuKm4qbipuKm46LjUqKChuLT0yKSpuKm4qbipuKzIpfX0sU2ludXNvaWRhbDp7SW46ZnVuY3Rpb24obil7cmV0dXJuIDEtTWF0aC5jb3MobipNYXRoLlBJLzIpfSxPdXQ6ZnVuY3Rpb24obil7cmV0dXJuIE1hdGguc2luKG4qTWF0aC5QSS8yKX0sSW5PdXQ6ZnVuY3Rpb24obil7cmV0dXJuLjUqKDEtTWF0aC5jb3MoTWF0aC5QSSpuKSl9fSxFeHBvbmVudGlhbDp7SW46ZnVuY3Rpb24obil7cmV0dXJuIDA9PT1uPzA6TWF0aC5wb3coMTAyNCxuLTEpfSxPdXQ6ZnVuY3Rpb24obil7cmV0dXJuIDE9PT1uPzE6MS1NYXRoLnBvdygyLC0xMCpuKX0sSW5PdXQ6ZnVuY3Rpb24obil7cmV0dXJuIDA9PT1uPzA6MT09PW4/MToobio9Mik8MT8uNSpNYXRoLnBvdygxMDI0LG4tMSk6LjUqKC1NYXRoLnBvdygyLC0xMCoobi0xKSkrMil9fSxDaXJjdWxhcjp7SW46ZnVuY3Rpb24obil7cmV0dXJuIDEtTWF0aC5zcXJ0KDEtbipuKX0sT3V0OmZ1bmN0aW9uKG4pe3JldHVybiBNYXRoLnNxcnQoMS0gLS1uKm4pfSxJbk91dDpmdW5jdGlvbihuKXtyZXR1cm4obio9Mik8MT8tLjUqKE1hdGguc3FydCgxLW4qbiktMSk6LjUqKE1hdGguc3FydCgxLShuLT0yKSpuKSsxKX19LEVsYXN0aWM6e0luOmZ1bmN0aW9uKG4pe3ZhciB0LHI9LjEsaT0uNDtyZXR1cm4gMD09PW4/MDoxPT09bj8xOighcnx8MT5yPyhyPTEsdD1pLzQpOnQ9aSpNYXRoLmFzaW4oMS9yKS8oMipNYXRoLlBJKSwtKHIqTWF0aC5wb3coMiwxMCoobi09MSkpKk1hdGguc2luKDIqKG4tdCkqTWF0aC5QSS9pKSkpfSxPdXQ6ZnVuY3Rpb24obil7dmFyIHQscj0uMSxpPS40O3JldHVybiAwPT09bj8wOjE9PT1uPzE6KCFyfHwxPnI/KHI9MSx0PWkvNCk6dD1pKk1hdGguYXNpbigxL3IpLygyKk1hdGguUEkpLHIqTWF0aC5wb3coMiwtMTAqbikqTWF0aC5zaW4oMioobi10KSpNYXRoLlBJL2kpKzEpfSxJbk91dDpmdW5jdGlvbihuKXt2YXIgdCxyPS4xLGk9LjQ7cmV0dXJuIDA9PT1uPzA6MT09PW4/MTooIXJ8fDE+cj8ocj0xLHQ9aS80KTp0PWkqTWF0aC5hc2luKDEvcikvKDIqTWF0aC5QSSksKG4qPTIpPDE/LS41KnIqTWF0aC5wb3coMiwxMCoobi09MSkpKk1hdGguc2luKDIqKG4tdCkqTWF0aC5QSS9pKTpyKk1hdGgucG93KDIsLTEwKihuLT0xKSkqTWF0aC5zaW4oMioobi10KSpNYXRoLlBJL2kpKi41KzEpfX0sQmFjazp7SW46ZnVuY3Rpb24obil7dmFyIHQ9MS43MDE1ODtyZXR1cm4gbipuKigodCsxKSpuLXQpfSxPdXQ6ZnVuY3Rpb24obil7dmFyIHQ9MS43MDE1ODtyZXR1cm4tLW4qbiooKHQrMSkqbit0KSsxfSxJbk91dDpmdW5jdGlvbihuKXt2YXIgdD0yLjU5NDkwOTU7cmV0dXJuKG4qPTIpPDE/LjUqbipuKigodCsxKSpuLXQpOi41Kigobi09MikqbiooKHQrMSkqbit0KSsyKX19LEJvdW5jZTp7SW46ZnVuY3Rpb24obil7cmV0dXJuIDEtVFdFRU4uRWFzaW5nLkJvdW5jZS5PdXQoMS1uKX0sT3V0OmZ1bmN0aW9uKG4pe3JldHVybiAxLzIuNzU+bj83LjU2MjUqbipuOjIvMi43NT5uPzcuNTYyNSoobi09MS41LzIuNzUpKm4rLjc1OjIuNS8yLjc1Pm4/Ny41NjI1KihuLT0yLjI1LzIuNzUpKm4rLjkzNzU6Ny41NjI1KihuLT0yLjYyNS8yLjc1KSpuKy45ODQzNzV9LEluT3V0OmZ1bmN0aW9uKG4pe3JldHVybi41Pm4/LjUqVFdFRU4uRWFzaW5nLkJvdW5jZS5JbigyKm4pOi41KlRXRUVOLkVhc2luZy5Cb3VuY2UuT3V0KDIqbi0xKSsuNX19fSxUV0VFTi5JbnRlcnBvbGF0aW9uPXtMaW5lYXI6ZnVuY3Rpb24obix0KXt2YXIgcj1uLmxlbmd0aC0xLGk9cip0LHU9TWF0aC5mbG9vcihpKSxvPVRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuTGluZWFyO3JldHVybiAwPnQ/byhuWzBdLG5bMV0saSk6dD4xP28obltyXSxuW3ItMV0sci1pKTpvKG5bdV0sblt1KzE+cj9yOnUrMV0saS11KX0sQmV6aWVyOmZ1bmN0aW9uKG4sdCl7dmFyIHIsaT0wLHU9bi5sZW5ndGgtMSxvPU1hdGgucG93LGU9VFdFRU4uSW50ZXJwb2xhdGlvbi5VdGlscy5CZXJuc3RlaW47Zm9yKHI9MDt1Pj1yO3IrKylpKz1vKDEtdCx1LXIpKm8odCxyKSpuW3JdKmUodSxyKTtyZXR1cm4gaX0sQ2F0bXVsbFJvbTpmdW5jdGlvbihuLHQpe3ZhciByPW4ubGVuZ3RoLTEsaT1yKnQsdT1NYXRoLmZsb29yKGkpLG89VFdFRU4uSW50ZXJwb2xhdGlvbi5VdGlscy5DYXRtdWxsUm9tO3JldHVybiBuWzBdPT09bltyXT8oMD50JiYodT1NYXRoLmZsb29yKGk9ciooMSt0KSkpLG8oblsodS0xK3IpJXJdLG5bdV0sblsodSsxKSVyXSxuWyh1KzIpJXJdLGktdSkpOjA+dD9uWzBdLShvKG5bMF0sblswXSxuWzFdLG5bMV0sLWkpLW5bMF0pOnQ+MT9uW3JdLShvKG5bcl0sbltyXSxuW3ItMV0sbltyLTFdLGktciktbltyXSk6byhuW3U/dS0xOjBdLG5bdV0sblt1KzE+cj9yOnUrMV0sblt1KzI+cj9yOnUrMl0saS11KX0sVXRpbHM6e0xpbmVhcjpmdW5jdGlvbihuLHQscil7cmV0dXJuKHQtbikqcitufSxCZXJuc3RlaW46ZnVuY3Rpb24obix0KXt2YXIgcj1UV0VFTi5JbnRlcnBvbGF0aW9uLlV0aWxzLkZhY3RvcmlhbDtyZXR1cm4gcihuKS9yKHQpL3Iobi10KX0sRmFjdG9yaWFsOmZ1bmN0aW9uKCl7dmFyIG49WzFdO3JldHVybiBmdW5jdGlvbih0KXt2YXIgcixpPTE7aWYoblt0XSlyZXR1cm4gblt0XTtmb3Iocj10O3I+MTtyLS0paSo9cjtyZXR1cm4gblt0XT1pfX0oKSxDYXRtdWxsUm9tOmZ1bmN0aW9uKG4sdCxyLGksdSl7dmFyIG89LjUqKHItbiksZT0uNSooaS10KSxhPXUqdSxmPXUqYTtyZXR1cm4oMip0LTIqcitvK2UpKmYrKC0zKnQrMypyLTIqby1lKSphK28qdSt0fX19LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9VFdFRU4pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYm93ZXJfY29tcG9uZW50cy90d2VlbmpzL2J1aWxkL3R3ZWVuLm1pbi5qc1xuICoqLyIsIjsoZnVuY3Rpb24oZ2xvYmFsKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cblxuXG4gIGZ1bmN0aW9uIGluaXQoS2VmaXIsICQpIHtcblxuXG5cbiAgICAkLmZuLmFzS2VmaXJTdHJlYW0gPSBmdW5jdGlvbihldmVudE5hbWUsIHNlbGVjdG9yLCB0cmFuc2Zvcm1lcikge1xuICAgICAgdmFyICRlbCA9IHRoaXM7XG4gICAgICBpZiAodHJhbnNmb3JtZXIgPT0gbnVsbCAmJiBzZWxlY3RvciAhPSBudWxsICYmICdzdHJpbmcnICE9PSB0eXBlb2Ygc2VsZWN0b3IpIHtcbiAgICAgICAgdHJhbnNmb3JtZXIgPSBzZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3IgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEtlZmlyLmZyb21TdWJVbnN1YihcbiAgICAgICAgZnVuY3Rpb24oaGFuZGxlcikgeyAgJGVsLm9uKGV2ZW50TmFtZSwgc2VsZWN0b3IsIGhhbmRsZXIpICB9LFxuICAgICAgICBmdW5jdGlvbihoYW5kbGVyKSB7ICAkZWwub2ZmKGV2ZW50TmFtZSwgc2VsZWN0b3IsIGhhbmRsZXIpICB9LFxuICAgICAgICB0cmFuc2Zvcm1lclxuICAgICAgKS5zZXROYW1lKCdhc0tlZmlyU3RyZWFtJyk7XG4gICAgfVxuXG5cblxuICAgICQuZm4uYXNLZWZpclByb3BlcnR5ID0gZnVuY3Rpb24oZXZlbnROYW1lLCBzZWxlY3RvciwgZ2V0dGVyKSB7XG4gICAgICBpZiAoZ2V0dGVyID09IG51bGwpIHtcbiAgICAgICAgZ2V0dGVyID0gc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFzS2VmaXJTdHJlYW0oZXZlbnROYW1lLCBzZWxlY3RvciwgZ2V0dGVyKVxuICAgICAgICAudG9Qcm9wZXJ0eShnZXR0ZXIoKSlcbiAgICAgICAgLnNldE5hbWUoJ2FzS2VmaXJQcm9wZXJ0eScpO1xuICAgIH1cblxuXG5cbiAgfVxuXG5cblxuXG4gIHZhciBleHBvcnRzID0ge1xuICAgIGluaXQ6IGluaXRcbiAgfTtcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzO1xuICAgIH0pO1xuICAgIGdsb2JhbC5LZWZpckpRdWVyeSA9IGV4cG9ydHM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWwuS2VmaXJKUXVlcnkgPSBleHBvcnRzO1xuICB9XG5cbn0odGhpcykpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9ib3dlcl9jb21wb25lbnRzL2tlZmlyLWpxdWVyeS9rZWZpci1qcXVlcnkuanNcbiAqKi8iLCJkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBfbmV4dElkID0gMDtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG5cdFx0cmV0dXJuIGAke3ByZWZpeHx8XCJ1bmlxdWUtaWRcIn0tJHtfbmV4dElkKyt9YDtcblx0fTtcbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbC91bmlxdWUtaWQuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuICoqLyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImpzLWdyYXBoXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImpzLWdyYXBoXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkRlbHRhTW9kZWxcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJqcy1ncmFwaFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiRGVsdGFNb2RlbFwiXSA9IGZhY3Rvcnkocm9vdFtcIkpzR3JhcGhcIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX18pIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzshKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbX193ZWJwYWNrX3JlcXVpcmVfXygxKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyKV0sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24oSnNHcmFwaCwgVSkge1xuXHQgICd1c2Ugc3RyaWN0Jztcblx0ICB2YXIga2VlcEZpcnN0ID0gKGZ1bmN0aW9uKCkge30pO1xuXHQgIHZhciBrZWVwU2Vjb25kID0gKGZ1bmN0aW9uKGQxLCBwLCBkMikge1xuXHQgICAgZDEub3BlcmF0aW9uc1twXSA9IGQyO1xuXHQgIH0pO1xuXHQgIHZhciBhcHBseVNlY29uZFRvRmlyc3RWYWx1ZSA9IChmdW5jdGlvbihkMSwgcCwgZDIpIHtcblx0ICAgIGQyLmFwcGx5VG8oZDEub3BlcmF0aW9uc1twXSwgJ3ZhbHVlJyk7XG5cdCAgfSk7XG5cdCAgZnVuY3Rpb24gYXNzZXJ0RnVuY3Rpb24odmFsLCBvcFR5cGUpIHtcblx0ICAgIFUuYXNzZXJ0KHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicsIChcIlRoZSBvcGVyYXRpb24gJ1wiICsgb3BUeXBlICsgXCInIGV4cGVjdHMgdGhlIHByb3BlcnR5IGl0IGFjdHMgb24gdG8gYmUgYSBmdW5jdGlvbi5cIikpO1xuXHQgIH1cblx0ICBmdW5jdGlvbiBhc3NlcnREZWZpbmVkKHZhbCwgb3BUeXBlKSB7XG5cdCAgICBVLmFzc2VydChVLmlzRGVmaW5lZCh2YWwpLCAoXCJUaGUgb3BlcmF0aW9uICdcIiArIG9wVHlwZSArIFwiJyBleHBlY3RzIHRoZSBwcm9wZXJ0eSB0byBiZSBkZWZpbmVkLlwiKSk7XG5cdCAgfVxuXHQgIGZ1bmN0aW9uIGFzc2VydFVuZGVmaW5lZCh2YWwsIG9wVHlwZSkge1xuXHQgICAgVS5hc3NlcnQoVS5pc1VuZGVmaW5lZCh2YWwpLCAoXCJUaGUgb3BlcmF0aW9uICdcIiArIG9wVHlwZSArIFwiJyBleHBlY3RzIHRoZSBwcm9wZXJ0eSB0byBiZSB1bmRlZmluZWQuXCIpKTtcblx0ICB9XG5cdCAgdmFyIERlbHRhTW9kZWwgPSBVLm5ld0NsYXNzKGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyICRfXzAgPSB0aGlzO1xuXHQgICAgdmFyIF9vcFR5cGVzID0ge307XG5cdCAgICB2YXIgX2NvbXBvc2VGbnMgPSBbXTtcblx0ICAgIFUuZXh0ZW5kKHRoaXMsIHtcblx0ICAgICAgX2FkZE9wZXJhdGlvblR5cGU6IGZ1bmN0aW9uKCRfXzQpIHtcblx0ICAgICAgICB2YXIgJF9fNSA9ICRfXzQsXG5cdCAgICAgICAgICAgIG5hbWUgPSAkX181Lm5hbWUsXG5cdCAgICAgICAgICAgIGNvbnN0cnVjdG9yID0gJF9fNS5jb25zdHJ1Y3Rvcixcblx0ICAgICAgICAgICAgYXBwbHlUbyA9ICRfXzUuYXBwbHlUbyxcblx0ICAgICAgICAgICAgcHJvdG90eXBlID0gJF9fNS5wcm90b3R5cGUsXG5cdCAgICAgICAgICAgIG1ldGhvZCA9ICRfXzUubWV0aG9kO1xuXHQgICAgICAgIHZhciBvYmplY3RXaXRoTWV0aG9kID0ge307XG5cdCAgICAgICAgX29wVHlwZXNbbmFtZV0gPSB7XG5cdCAgICAgICAgICBuYW1lOiBuYW1lLFxuXHQgICAgICAgICAgRGVsdGE6IGNvbnN0cnVjdG9yLFxuXHQgICAgICAgICAgbWV0aG9kOiBvYmplY3RXaXRoTWV0aG9kW25hbWVdXG5cdCAgICAgICAgfTtcblx0ICAgICAgICBVLmV4dGVuZChfb3BUeXBlc1tuYW1lXS5EZWx0YS5wcm90b3R5cGUsIHByb3RvdHlwZSwge1xuXHQgICAgICAgICAgY29uc3RydWN0b3I6IGNvbnN0cnVjdG9yLFxuXHQgICAgICAgICAgdHlwZTogbmFtZSxcblx0ICAgICAgICAgIGFwcGx5VG86IGFwcGx5VG9cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBfb3BUeXBlc1snbW9kaWZ5J10uRGVsdGEucHJvdG90eXBlW25hbWVdID0gVS5pc0RlZmluZWQobWV0aG9kKSA/IG1ldGhvZCA6IGZ1bmN0aW9uKHByb3BlcnR5KSB7XG5cdCAgICAgICAgICBmb3IgKHZhciB2YWx1ZXMgPSBbXSxcblx0ICAgICAgICAgICAgICAkX18xID0gMTsgJF9fMSA8IGFyZ3VtZW50cy5sZW5ndGg7ICRfXzErKylcblx0ICAgICAgICAgICAgdmFsdWVzWyRfXzEgLSAxXSA9IGFyZ3VtZW50c1skX18xXTtcblx0ICAgICAgICAgIHRoaXMuX2FkZE9wZXJhdGlvbihfb3BUeXBlc1tuYW1lXSwgcHJvcGVydHksIHZhbHVlcyk7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9O1xuXHQgICAgICB9LFxuXHQgICAgICBfYWRkT3BlcmF0aW9uQWxpYXM6IGZ1bmN0aW9uKCRfXzQpIHtcblx0ICAgICAgICB2YXIgJF9fNSA9ICRfXzQsXG5cdCAgICAgICAgICAgIG5hbWUgPSAkX181Lm5hbWUsXG5cdCAgICAgICAgICAgIHRhcmdldCA9ICRfXzUudGFyZ2V0LFxuXHQgICAgICAgICAgICB0cmFuc2Zvcm0gPSAkX181LnRyYW5zZm9ybTtcblx0ICAgICAgICB2YXIgb2JqZWN0V2l0aE1ldGhvZCA9IHt9O1xuXHQgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3RXaXRoTWV0aG9kLCBuYW1lLCB7dmFsdWU6IGZ1bmN0aW9uKHByb3BlcnR5KSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIHZhbHVlcyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgJF9fMSA9IDE7ICRfXzEgPCBhcmd1bWVudHMubGVuZ3RoOyAkX18xKyspXG5cdCAgICAgICAgICAgICAgdmFsdWVzWyRfXzEgLSAxXSA9IGFyZ3VtZW50c1skX18xXTtcblx0ICAgICAgICAgICAgdGhpcy5fYWRkT3BlcmF0aW9uKF9vcFR5cGVzW3RhcmdldF0sIHByb3BlcnR5LCB0cmFuc2Zvcm0odmFsdWVzKSk7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgICAgfX0pO1xuXHQgICAgICAgIF9vcFR5cGVzW25hbWVdID0ge1xuXHQgICAgICAgICAgbmFtZTogbmFtZSxcblx0ICAgICAgICAgIG1ldGhvZDogb2JqZWN0V2l0aE1ldGhvZFtuYW1lXVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgX29wVHlwZXNbJ21vZGlmeSddLkRlbHRhLnByb3RvdHlwZVtuYW1lXSA9IF9vcFR5cGVzW25hbWVdLm1ldGhvZDtcblx0ICAgICAgfSxcblx0ICAgICAgX2FkZENvbXBvc2l0aW9uUnVsZTogZnVuY3Rpb24ob3AxVHlwZSwgb3AyVHlwZSwgY29tcG9zZUZuKSB7XG5cdCAgICAgICAgX2NvbXBvc2VGbnMucHVzaCh7XG5cdCAgICAgICAgICBvcDFUeXBlOiBvcDFUeXBlLFxuXHQgICAgICAgICAgb3AyVHlwZTogb3AyVHlwZSxcblx0ICAgICAgICAgIGNvbXBvc2VGbjogY29tcG9zZUZuXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0sXG5cdCAgICAgIF9uZXdEZWx0YTogZnVuY3Rpb24odHlwZSkge1xuXHQgICAgICAgIGZvciAodmFyIHZhbHVlcyA9IFtdLFxuXHQgICAgICAgICAgICAkX18xID0gMTsgJF9fMSA8IGFyZ3VtZW50cy5sZW5ndGg7ICRfXzErKylcblx0ICAgICAgICAgIHZhbHVlc1skX18xIC0gMV0gPSBhcmd1bWVudHNbJF9fMV07XG5cdCAgICAgICAgcmV0dXJuIFUuYXBwbHlDb25zdHJ1Y3Rvcihfb3BUeXBlc1t0eXBlXS5EZWx0YSwgdmFsdWVzKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICB2YXIgdGhpc0RNID0gdGhpcztcblx0ICAgIHRoaXMuX2FkZE9wZXJhdGlvblR5cGUoe1xuXHQgICAgICBuYW1lOiAnbW9kaWZ5Jyxcblx0ICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIE1vZGlmeSgpIHtcblx0ICAgICAgICB2YXIgZGVsdGFEZXNjcmlwdGlvbiA9IGFyZ3VtZW50c1swXSAhPT0gKHZvaWQgMCkgPyBhcmd1bWVudHNbMF0gOiB7fTtcblx0ICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IGFyZ3VtZW50c1sxXSAhPT0gKHZvaWQgMCkgPyBhcmd1bWVudHNbMV0gOiB7fTtcblx0ICAgICAgICB2YXIgJF9fMCA9IHRoaXM7XG5cdCAgICAgICAgdGhpcy5vcGVyYXRpb25zID0gb3BlcmF0aW9ucztcblx0ICAgICAgICBPYmplY3Qua2V5cyhkZWx0YURlc2NyaXB0aW9uKS5mb3JFYWNoKChmdW5jdGlvbihrZXkpIHtcblx0ICAgICAgICAgIHZhciBtYXRjaCA9IGtleS5tYXRjaCgvXihcXHcrKVxccysoW1xcd1xcLl0rKSQvKTtcblx0ICAgICAgICAgIGlmIChtYXRjaCkge1xuXHQgICAgICAgICAgICB2YXIgb3BlcmF0aW9uID0gbWF0Y2hbMV07XG5cdCAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IG1hdGNoWzJdO1xuXHQgICAgICAgICAgICBVLmFzc2VydChvcGVyYXRpb24gaW4gX29wVHlwZXMsIChcIkkgZG9uJ3Qga25vdyB0aGUgJ1wiICsgb3BlcmF0aW9uICsgXCInIG9wZXJhdGlvbi5cIikpO1xuXHQgICAgICAgICAgICAkX18wW29wZXJhdGlvbl0ocHJvcGVydHksIGRlbHRhRGVzY3JpcHRpb25ba2V5XSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSkpO1xuXHQgICAgICB9LFxuXHQgICAgICBhcHBseVRvOiBmdW5jdGlvbihvYmosIHByb3BlcnR5KSB7XG5cdCAgICAgICAgdmFyICRfXzAgPSB0aGlzO1xuXHQgICAgICAgIGlmIChVLmlzRGVmaW5lZChwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgIFUuYXNzZXJ0KFUuaXNEZWZpbmVkKG9ialtwcm9wZXJ0eV0pLCBcIlRoZSAnbW9kaWZ5JyBvcGVyYXRpb24gZXhwZWN0cyB0aGUgcHJvcGVydHkgdG8gYmUgYWxyZWFkeSBkZWZpbmVkLlwiKTtcblx0ICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMub3BlcmF0aW9ucykuZm9yRWFjaCgoZnVuY3Rpb24oc3ViUHJvcGVydHkpIHtcblx0ICAgICAgICAgICAgJF9fMC5vcGVyYXRpb25zW3N1YlByb3BlcnR5XS5hcHBseVRvKG9ialtwcm9wZXJ0eV0sIHN1YlByb3BlcnR5KTtcblx0ICAgICAgICAgIH0pKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgVS5hc3NlcnQoVS5pc0RlZmluZWQob2JqKSwgXCJUaGUgJ21vZGlmeScgb3BlcmF0aW9uIGV4cGVjdHMgdGhlIHByb3BlcnR5IHRvIGJlIGFscmVhZHkgZGVmaW5lZC5cIik7XG5cdCAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLm9wZXJhdGlvbnMpLmZvckVhY2goKGZ1bmN0aW9uKHN1YlByb3BlcnR5KSB7XG5cdCAgICAgICAgICAgICRfXzAub3BlcmF0aW9uc1tzdWJQcm9wZXJ0eV0uYXBwbHlUbyhvYmosIHN1YlByb3BlcnR5KTtcblx0ICAgICAgICAgIH0pKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIHByb3RvdHlwZToge1xuXHQgICAgICAgIHNlbGVjdGl2ZWx5QXBwbHlUbzogZnVuY3Rpb24ob2JqLCBzdWJQcm9wZXJ0eSkge1xuXHQgICAgICAgICAgVS5hc3NlcnQoVS5pc0RlZmluZWQob2JqKSwgXCJUaGUgJ21vZGlmeScgb3BlcmF0aW9uIGV4cGVjdHMgdGhlIHByb3BlcnR5IHRvIGJlIGFscmVhZHkgZGVmaW5lZC5cIik7XG5cdCAgICAgICAgICBpZiAoVS5pc0RlZmluZWQodGhpcy5vcGVyYXRpb25zW3N1YlByb3BlcnR5XSkpIHtcblx0ICAgICAgICAgICAgdGhpcy5vcGVyYXRpb25zW3N1YlByb3BlcnR5XS5hcHBseVRvKG9iaiwgc3ViUHJvcGVydHkpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgY29tcG9zZTogZnVuY3Rpb24ocHJvcGVydHksIG9wMikge1xuXHQgICAgICAgICAgdmFyICRfXzAgPSB0aGlzO1xuXHQgICAgICAgICAgaWYgKFUuaXNVbmRlZmluZWQob3AyKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHZhciBmb3VuZENvbXBvc2VGbjtcblx0ICAgICAgICAgIF9jb21wb3NlRm5zLnNvbWUoKGZ1bmN0aW9uKCRfXzQpIHtcblx0ICAgICAgICAgICAgdmFyICRfXzUgPSAkX180LFxuXHQgICAgICAgICAgICAgICAgb3AxVHlwZSA9ICRfXzUub3AxVHlwZSxcblx0ICAgICAgICAgICAgICAgIG9wMlR5cGUgPSAkX181Lm9wMlR5cGUsXG5cdCAgICAgICAgICAgICAgICBjb21wb3NlRm4gPSAkX181LmNvbXBvc2VGbjtcblx0ICAgICAgICAgICAgaWYgKCRfXzAub3BlcmF0aW9uc1twcm9wZXJ0eV0udHlwZSA9PT0gb3AxVHlwZSAmJiBvcDIudHlwZSA9PT0gb3AyVHlwZSkge1xuXHQgICAgICAgICAgICAgIGZvdW5kQ29tcG9zZUZuID0gY29tcG9zZUZuO1xuXHQgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9KSk7XG5cdCAgICAgICAgICBpZiAoZm91bmRDb21wb3NlRm4pIHtcblx0ICAgICAgICAgICAgZm91bmRDb21wb3NlRm4odGhpcywgcHJvcGVydHksIG9wMik7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKChcIllvdSBjYW5ub3QgZm9sbG93IGEgJ1wiICsgdGhpcy5vcGVyYXRpb25zW3Byb3BlcnR5XS50eXBlICsgXCInIG9wZXJhdGlvbiBcIikgKyAoXCJ3aXRoIGEgJ1wiICsgb3AyLnR5cGUgKyBcIicgb3BlcmF0aW9uIG9uIHRoZSBzYW1lIHByb3BlcnR5LlwiKSk7XG5cdCAgICAgICAgICAgIGVyci5vcDEgPSB0aGlzLm9wZXJhdGlvbnNbcHJvcGVydHldLnR5cGU7XG5cdCAgICAgICAgICAgIGVyci5vcDIgPSBvcDIudHlwZTtcblx0ICAgICAgICAgICAgdGhyb3cgZXJyO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgX2FkZE9wZXJhdGlvbjogZnVuY3Rpb24ob3BUeXBlLCBwcm9wZXJ0eSwgdmFsdWVzKSB7XG5cdCAgICAgICAgICB2YXIgZG90SW5kZXggPSBwcm9wZXJ0eS5pbmRleE9mKCcuJyk7XG5cdCAgICAgICAgICBpZiAoZG90SW5kZXggIT09IC0xKSB7XG5cdCAgICAgICAgICAgIHZhciBhY3R1YWxQcm9wZXJ0eSA9IHByb3BlcnR5LnNsaWNlKDAsIGRvdEluZGV4KTtcblx0ICAgICAgICAgICAgdmFyIHJlc3RPZlByb3BlcnR5ID0gcHJvcGVydHkuc2xpY2UoZG90SW5kZXggKyAxKTtcblx0ICAgICAgICAgICAgdmFyIG5ld01vZGlmeURlbHRhID0gdGhpcy5fYWRkT3BlcmF0aW9uKF9vcFR5cGVzWydtb2RpZnknXSwgYWN0dWFsUHJvcGVydHkpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3TW9kaWZ5RGVsdGFbb3BUeXBlLm5hbWVdLmFwcGx5KG5ld01vZGlmeURlbHRhLCBbcmVzdE9mUHJvcGVydHldLmNvbmNhdCh2YWx1ZXMpKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBfbmV3RGVsdGEgPSB0aGlzRE0uX25ld0RlbHRhLmFwcGx5KHRoaXNETSwgW29wVHlwZS5uYW1lXS5jb25jYXQodmFsdWVzKSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm9wZXJhdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIFUuaXNEZWZpbmVkKHRoaXMub3BlcmF0aW9uc1twcm9wZXJ0eV0pKSB7XG5cdCAgICAgICAgICAgICAgdGhpcy5jb21wb3NlKHByb3BlcnR5LCBfbmV3RGVsdGEpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHRoaXMub3BlcmF0aW9uc1twcm9wZXJ0eV0gPSBfbmV3RGVsdGE7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uc1twcm9wZXJ0eV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9LFxuXHQgICAgICBtZXRob2Q6IGZ1bmN0aW9uKHByb3BlcnR5LCBkZWx0YURlc2NyaXB0aW9uKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2FkZE9wZXJhdGlvbihfb3BUeXBlc1snbW9kaWZ5J10sIHByb3BlcnR5LCBbZGVsdGFEZXNjcmlwdGlvbl0pO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHRoaXMuX2FkZE9wZXJhdGlvblR5cGUoe1xuXHQgICAgICBuYW1lOiAnYWRkJyxcblx0ICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIEFkZCh2YWx1ZSkge1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgfSxcblx0ICAgICAgYXBwbHlUbzogZnVuY3Rpb24ob2JqLCBwcm9wZXJ0eSkge1xuXHQgICAgICAgIGFzc2VydFVuZGVmaW5lZChvYmpbcHJvcGVydHldLCAnYWRkJyk7XG5cdCAgICAgICAgb2JqW3Byb3BlcnR5XSA9IHRoaXMudmFsdWU7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgdGhpcy5fYWRkT3BlcmF0aW9uVHlwZSh7XG5cdCAgICAgIG5hbWU6ICdyZXBsYWNlJyxcblx0ICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFJlcGxhY2UodmFsdWUpIHtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgIH0sXG5cdCAgICAgIGFwcGx5VG86IGZ1bmN0aW9uKG9iaiwgcHJvcGVydHkpIHtcblx0ICAgICAgICBhc3NlcnREZWZpbmVkKG9ialtwcm9wZXJ0eV0sICdyZXBsYWNlJyk7XG5cdCAgICAgICAgb2JqW3Byb3BlcnR5XSA9IHRoaXMudmFsdWU7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgdGhpcy5fYWRkT3BlcmF0aW9uVHlwZSh7XG5cdCAgICAgIG5hbWU6ICdyZXBsYWNlQXJvdW5kJyxcblx0ICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFJlcGxhY2VBcm91bmQodmFsdWUpIHtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgIH0sXG5cdCAgICAgIGFwcGx5VG86IGZ1bmN0aW9uKG9iaiwgcHJvcGVydHkpIHtcblx0ICAgICAgICBhc3NlcnREZWZpbmVkKG9ialtwcm9wZXJ0eV0sICdyZXBsYWNlQXJvdW5kJyk7XG5cdCAgICAgICAgb2JqW3Byb3BlcnR5XSA9IHRoaXMudmFsdWUob2JqW3Byb3BlcnR5XSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgdGhpcy5fYWRkT3BlcmF0aW9uVHlwZSh7XG5cdCAgICAgIG5hbWU6ICdyZW1vdmUnLFxuXHQgICAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gUmVtb3ZlKCkge30sXG5cdCAgICAgIGFwcGx5VG86IGZ1bmN0aW9uKG9iaiwgcHJvcGVydHkpIHtcblx0ICAgICAgICBhc3NlcnREZWZpbmVkKG9ialtwcm9wZXJ0eV0sICdyZW1vdmUnKTtcblx0ICAgICAgICBkZWxldGUgb2JqW3Byb3BlcnR5XTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICB0aGlzLl9hZGRPcGVyYXRpb25UeXBlKHtcblx0ICAgICAgbmFtZTogJ2ZvcmJpZCcsXG5cdCAgICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBGb3JiaWQoKSB7fSxcblx0ICAgICAgYXBwbHlUbzogZnVuY3Rpb24ob2JqLCBwcm9wZXJ0eSkge1xuXHQgICAgICAgIGFzc2VydFVuZGVmaW5lZChvYmpbcHJvcGVydHldLCAnZm9yYmlkJyk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgdGhpcy5fYWRkQ29tcG9zaXRpb25SdWxlKCdhZGQnLCAncmVwbGFjZScsIChmdW5jdGlvbihkMSwgcCwgZDIpIHtcblx0ICAgICAgZDEub3BlcmF0aW9uc1twXSA9IERlbHRhTW9kZWwuX25ld0RlbHRhKCdhZGQnLCBkMi52YWx1ZSk7XG5cdCAgICB9KSk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ2FkZCcsICdtb2RpZnknLCBhcHBseVNlY29uZFRvRmlyc3RWYWx1ZSk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ2FkZCcsICdyZW1vdmUnLCAoZnVuY3Rpb24oZDEsIHApIHtcblx0ICAgICAgZDEub3BlcmF0aW9uc1twXSA9IERlbHRhTW9kZWwuX25ld0RlbHRhKCdmb3JiaWQnKTtcblx0ICAgIH0pKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgncmVwbGFjZScsICdyZXBsYWNlJywga2VlcFNlY29uZCk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ3JlcGxhY2UnLCAnbW9kaWZ5JywgYXBwbHlTZWNvbmRUb0ZpcnN0VmFsdWUpO1xuXHQgICAgdGhpcy5fYWRkQ29tcG9zaXRpb25SdWxlKCdyZXBsYWNlJywgJ3JlbW92ZScsIGtlZXBTZWNvbmQpO1xuXHQgICAgdGhpcy5fYWRkQ29tcG9zaXRpb25SdWxlKCdtb2RpZnknLCAncmVwbGFjZScsIGtlZXBTZWNvbmQpO1xuXHQgICAgdGhpcy5fYWRkQ29tcG9zaXRpb25SdWxlKCdtb2RpZnknLCAnbW9kaWZ5JywgKGZ1bmN0aW9uKGQxLCBwLCBkMikge1xuXHQgICAgICBPYmplY3Qua2V5cyhkMi5vcGVyYXRpb25zKS5mb3JFYWNoKChmdW5jdGlvbihwcm9wKSB7XG5cdCAgICAgICAgZDEuY29tcG9zZShwcm9wLCBkMi5vcGVyYXRpb25zW3Byb3BdKTtcblx0ICAgICAgfSkpO1xuXHQgICAgfSkpO1xuXHQgICAgdGhpcy5fYWRkQ29tcG9zaXRpb25SdWxlKCdtb2RpZnknLCAncmVtb3ZlJywga2VlcFNlY29uZCk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ3JlbW92ZScsICdhZGQnLCAoZnVuY3Rpb24oZDEsIHAsIGQyKSB7XG5cdCAgICAgIGQxLm9wZXJhdGlvbnNbcF0gPSBEZWx0YU1vZGVsLl9uZXdEZWx0YSgncmVwbGFjZScsIGQyLnZhbHVlKTtcblx0ICAgIH0pKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgncmVtb3ZlJywgJ2ZvcmJpZCcsIGtlZXBGaXJzdCk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ2ZvcmJpZCcsICdhZGQnLCBrZWVwU2Vjb25kKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgnZm9yYmlkJywgJ2ZvcmJpZCcsIGtlZXBGaXJzdCk7XG5cdCAgICB0aGlzLl9hZGRPcGVyYXRpb25UeXBlKHtcblx0ICAgICAgbmFtZTogJ2FsdGVyJyxcblx0ICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIEFsdGVyKHZhbHVlLCBhbGlhcykge1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCBbXTtcblx0ICAgICAgICB0aGlzLmFsaWFzID0gYWxpYXMgfHwgJ2FsdGVyJztcblx0ICAgICAgfSxcblx0ICAgICAgYXBwbHlUbzogZnVuY3Rpb24ob2JqLCBwcm9wZXJ0eSkge1xuXHQgICAgICAgIGFzc2VydEZ1bmN0aW9uKG9ialtwcm9wZXJ0eV0sIHRoaXMuYWxpYXMpO1xuXHQgICAgICAgIHRoaXMudmFsdWUuZm9yRWFjaCgoZnVuY3Rpb24oc3ViT3ApIHtcblx0ICAgICAgICAgIHZhciBwYXJ0T25lID0gb2JqW3Byb3BlcnR5XTtcblx0ICAgICAgICAgIHZhciBwYXJ0VHdvID0gc3ViT3AudmFsdWU7XG5cdCAgICAgICAgICBpZiAoc3ViT3AudHlwZSA9PT0gJ3ByZXBlbmQnKSB7XG5cdCAgICAgICAgICAgIG9ialtwcm9wZXJ0eV0gPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgICBmb3IgKHZhciBhcmdzID0gW10sXG5cdCAgICAgICAgICAgICAgICAgICRfXzIgPSAwOyAkX18yIDwgYXJndW1lbnRzLmxlbmd0aDsgJF9fMisrKVxuXHQgICAgICAgICAgICAgICAgYXJnc1skX18yXSA9IGFyZ3VtZW50c1skX18yXTtcblx0ICAgICAgICAgICAgICBwYXJ0VHdvLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgICAgICAgIHBhcnRPbmUuYXBwbHkodGhpcywgYXJncyk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBvYmpbcHJvcGVydHldID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgICAgZm9yICh2YXIgYXJncyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgICAkX18zID0gMDsgJF9fMyA8IGFyZ3VtZW50cy5sZW5ndGg7ICRfXzMrKylcblx0ICAgICAgICAgICAgICAgIGFyZ3NbJF9fM10gPSBhcmd1bWVudHNbJF9fM107XG5cdCAgICAgICAgICAgICAgcGFydE9uZS5hcHBseSh0aGlzLCBhcmdzKTtcblx0ICAgICAgICAgICAgICBwYXJ0VHdvLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ2FsdGVyJywgJ2FsdGVyJywgKGZ1bmN0aW9uKGQxLCBwLCBkMikge1xuXHQgICAgICBbXS5wdXNoLmFwcGx5KGQxLm9wZXJhdGlvbnNbcF0udmFsdWUsIGQyLnZhbHVlKTtcblx0ICAgIH0pKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgnYWx0ZXInLCAncmVwbGFjZScsIGtlZXBTZWNvbmQpO1xuXHQgICAgdGhpcy5fYWRkQ29tcG9zaXRpb25SdWxlKCdhbHRlcicsICdyZW1vdmUnLCAoZnVuY3Rpb24oZDEsIHApIHtcblx0ICAgICAgZDEub3BlcmF0aW9uc1twXSA9IERlbHRhTW9kZWwuX25ld0RlbHRhKCdmb3JiaWQnKTtcblx0ICAgIH0pKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgnYWRkJywgJ2FsdGVyJywgKGZ1bmN0aW9uKGQxLCBwLCBkMikge1xuXHQgICAgICBhc3NlcnRGdW5jdGlvbihkMS5vcGVyYXRpb25zW3BdLnZhbHVlLCBkMi5hbGlhcyk7XG5cdCAgICAgIGFwcGx5U2Vjb25kVG9GaXJzdFZhbHVlKGQxLCBwLCBkMik7XG5cdCAgICB9KSk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ3JlcGxhY2UnLCAnYWx0ZXInLCAoZnVuY3Rpb24oZDEsIHAsIGQyKSB7XG5cdCAgICAgIGFzc2VydEZ1bmN0aW9uKGQxLm9wZXJhdGlvbnNbcF0udmFsdWUsIGQyLmFsaWFzKTtcblx0ICAgICAgYXBwbHlTZWNvbmRUb0ZpcnN0VmFsdWUoZDEsIHAsIGQyKTtcblx0ICAgIH0pKTtcblx0ICAgIFsncHJlcGVuZCcsICdpbnNlcnQnLCAnYXBwZW5kJ10uZm9yRWFjaCgoZnVuY3Rpb24ob3BUeXBlKSB7XG5cdCAgICAgICRfXzAuX2FkZE9wZXJhdGlvbkFsaWFzKHtcblx0ICAgICAgICBuYW1lOiBvcFR5cGUsXG5cdCAgICAgICAgdGFyZ2V0OiAnYWx0ZXInLFxuXHQgICAgICAgIHRyYW5zZm9ybTogKGZ1bmN0aW9uKGFyZ3MpIHtcblx0ICAgICAgICAgIHJldHVybiBbW3tcblx0ICAgICAgICAgICAgdHlwZTogb3BUeXBlLFxuXHQgICAgICAgICAgICB2YWx1ZTogYXJnc1swXVxuXHQgICAgICAgICAgfV0sIG9wVHlwZV07XG5cdCAgICAgICAgfSlcblx0ICAgICAgfSk7XG5cdCAgICB9KSk7XG5cdCAgICB0aGlzLl9hZGRPcGVyYXRpb25UeXBlKHtcblx0ICAgICAgbmFtZTogJ2FmdGVyJyxcblx0ICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIEFmdGVyKHZhbHVlKSB7XG5cdCAgICAgICAgVS5hc3NlcnQodHlwZW9mIHJlc29sdmVQcm9taXNlID09PSAnZnVuY3Rpb24nLCBcIkJlZm9yZSBjcmVhdGluZyBhbiAnYWZ0ZXInIG9wZXJhdGlvbiwgeW91IG11c3QgcmVnaXN0ZXIgYSBwcm9taXNlIHJlc29sdmVyIHdpdGggZGVsdGEuanMuXCIpO1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgfSxcblx0ICAgICAgYXBwbHlUbzogZnVuY3Rpb24ob2JqLCBwcm9wZXJ0eSkge1xuXHQgICAgICAgIGFzc2VydEZ1bmN0aW9uKG9ialtwcm9wZXJ0eV0sICdhZnRlcicpO1xuXHQgICAgICAgIHZhciBwYXJ0T25lID0gb2JqW3Byb3BlcnR5XTtcblx0ICAgICAgICB2YXIgcGFydFR3byA9IHRoaXMudmFsdWU7XG5cdCAgICAgICAgb2JqW3Byb3BlcnR5XSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgZm9yICh2YXIgYXJncyA9IFtdLFxuXHQgICAgICAgICAgICAgICRfXzIgPSAwOyAkX18yIDwgYXJndW1lbnRzLmxlbmd0aDsgJF9fMisrKVxuXHQgICAgICAgICAgICBhcmdzWyRfXzJdID0gYXJndW1lbnRzWyRfXzJdO1xuXHQgICAgICAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKHBhcnRPbmUuYXBwbHkodGhpcywgYXJncykpLnRoZW4oZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBwYXJ0VHdvLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0ICAgICAgICB9O1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgnYWZ0ZXInLCAncmVwbGFjZScsIGtlZXBTZWNvbmQpO1xuXHQgICAgdGhpcy5fYWRkQ29tcG9zaXRpb25SdWxlKCdhZnRlcicsICdyZW1vdmUnLCBrZWVwU2Vjb25kKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgnYWRkJywgJ2FmdGVyJywgKGZ1bmN0aW9uKGQxLCBwLCBkMikge1xuXHQgICAgICBhc3NlcnRGdW5jdGlvbihkMS5vcGVyYXRpb25zW3BdLnZhbHVlLCAnYWZ0ZXInKTtcblx0ICAgICAgYXBwbHlTZWNvbmRUb0ZpcnN0VmFsdWUoZDEsIHAsIGQyKTtcblx0ICAgIH0pKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgncmVwbGFjZScsICdhZnRlcicsIChmdW5jdGlvbihkMSwgcCwgZDIpIHtcblx0ICAgICAgYXNzZXJ0RnVuY3Rpb24oZDEub3BlcmF0aW9uc1twXS52YWx1ZSwgJ2FmdGVyJyk7XG5cdCAgICAgIGFwcGx5U2Vjb25kVG9GaXJzdFZhbHVlKGQxLCBwLCBkMik7XG5cdCAgICB9KSk7XG5cdCAgICB0aGlzLl9hZGRDb21wb3NpdGlvblJ1bGUoJ2luc2VydCcsICdhZnRlcicsIGFwcGx5U2Vjb25kVG9GaXJzdFZhbHVlKTtcblx0ICAgIHRoaXMuX2FkZENvbXBvc2l0aW9uUnVsZSgnYWZ0ZXInLCAnaW5zZXJ0JywgYXBwbHlTZWNvbmRUb0ZpcnN0VmFsdWUpO1xuXHQgICAgdmFyIF9ncmFwaCA9IG5ldyBKc0dyYXBoKCk7XG5cdCAgICBVLmV4dGVuZCh0aGlzLCB7Z3JhcGg6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBfZ3JhcGg7XG5cdCAgICAgIH19KTtcblx0ICAgIHZhciBfZGVsdGFDb25kaXRpb25zID0ge307XG5cdCAgICB2YXIgX3NldHRsZWREZWx0YUNvbmRpdGlvbnMgPSB7fTtcblx0ICAgIHZhciBfY29uZGl0aW9uc1Vuc2V0dGxlZCA9IGZhbHNlO1xuXHQgICAgZnVuY3Rpb24gX3JlZ2lzdGVyRGlzanVuY3QoZGVsdGFOYW1lLCBkaXNqdW5jdCkge1xuXHQgICAgICBfY29uZGl0aW9uc1Vuc2V0dGxlZCA9IHRydWU7XG5cdCAgICAgIGlmIChkaXNqdW5jdCA9PT0gdHJ1ZSkge1xuXHQgICAgICAgIF9zZXR0bGVkRGVsdGFDb25kaXRpb25zW2RlbHRhTmFtZV0gPSB0cnVlO1xuXHQgICAgICB9IGVsc2UgaWYgKGRpc2p1bmN0ID09PSBmYWxzZSkge30gZWxzZSBpZiAoX2RlbHRhQ29uZGl0aW9uc1tkZWx0YU5hbWVdICE9PSB0cnVlKSB7XG5cdCAgICAgICAgVS5hcnJheShfZGVsdGFDb25kaXRpb25zLCBkZWx0YU5hbWUpLnB1c2goZGlzanVuY3QpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBmdW5jdGlvbiBfc2V0dGxlQ29uZGl0aW9ucygpIHtcblx0ICAgICAgaWYgKF9jb25kaXRpb25zVW5zZXR0bGVkKSB7XG5cdCAgICAgICAgX2NvbmRpdGlvbnNVbnNldHRsZWQgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgc29tZXRoaW5nQ2hhbmdlZDtcblx0ICAgICAgICBkbyB7XG5cdCAgICAgICAgICBzb21ldGhpbmdDaGFuZ2VkID0gZmFsc2U7XG5cdCAgICAgICAgICBfZ3JhcGguZWFjaFZlcnRleCgoZnVuY3Rpb24oZGVsdGFOYW1lKSB7XG5cdCAgICAgICAgICAgIGlmIChfc2V0dGxlZERlbHRhQ29uZGl0aW9uc1tkZWx0YU5hbWVdKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChVLmlzVW5kZWZpbmVkKF9kZWx0YUNvbmRpdGlvbnNbZGVsdGFOYW1lXSkpIHtcblx0ICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKF9kZWx0YUNvbmRpdGlvbnNbZGVsdGFOYW1lXS5zb21lKChmdW5jdGlvbihkaXNqdW5jdCkge1xuXHQgICAgICAgICAgICAgIHJldHVybiBkaXNqdW5jdC5ldmVyeSgoZnVuY3Rpb24oY29uanVuY3QpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfc2V0dGxlZERlbHRhQ29uZGl0aW9uc1tjb25qdW5jdF07XG5cdCAgICAgICAgICAgICAgfSkpO1xuXHQgICAgICAgICAgICB9KSkpIHtcblx0ICAgICAgICAgICAgICBfc2V0dGxlZERlbHRhQ29uZGl0aW9uc1tkZWx0YU5hbWVdID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICBzb21ldGhpbmdDaGFuZ2VkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSkpO1xuXHQgICAgICAgIH0gd2hpbGUgKHNvbWV0aGluZ0NoYW5nZWQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICB0aGlzLkRlbHRhID0gVS5uZXdTdWJjbGFzcyhfb3BUeXBlc1snbW9kaWZ5J10uRGVsdGEsIGZ1bmN0aW9uIERlbHRhKHN1cGVyRm4sIGRlbHRhTmFtZSkge1xuXHQgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50c1syXSAhPT0gKHZvaWQgMCkgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0ICAgICAgc3VwZXJGbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgICBVLmFzc2VydChvcHRpb25zIGluc3RhbmNlb2YgT2JqZWN0LCBcIkEgZGVsdGEgc2hvdWxkIGJlIGdpdmVuIGFzIGFuIG9iamVjdC5cIik7XG5cdCAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcblx0ICAgICAgICBuYW1lOiB7Z2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGRlbHRhTmFtZTtcblx0ICAgICAgICAgIH19LFxuXHQgICAgICAgIG1hbnVhbGx5U2VsZWN0YWJsZToge2dldDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIGlmIChVLmlzRGVmaW5lZChvcHRpb25zWydtYW51YWxseVNlbGVjdGFibGUnXSkpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gISFvcHRpb25zWydtYW51YWxseVNlbGVjdGFibGUnXTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChVLmlzRGVmaW5lZChvcHRpb25zWydyZXNvbHZlcyddKSAmJiBvcHRpb25zWydyZXNvbHZlcyddLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH19LFxuXHQgICAgICAgIHNlbGVjdGVkOiB7Z2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgX3NldHRsZUNvbmRpdGlvbnMoKTtcblx0ICAgICAgICAgICAgcmV0dXJuICEhX3NldHRsZWREZWx0YUNvbmRpdGlvbnNbZGVsdGFOYW1lXTtcblx0ICAgICAgICAgIH19LFxuXHQgICAgICAgIGlmOiB7Z2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgaWYgKG9wdGlvbnNbJ2lmJ10gPT09IHRydWUgfHwgb3B0aW9uc1snaWYnXSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uc1snaWYnXTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zWydpZiddIHx8IG9wdGlvbnNbJ2lmZiddIHx8IG9wdGlvbnNbJ3Jlc29sdmVzJ10pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KG9wdGlvbnNbJ2lmJ10gfHwgW10sIG9wdGlvbnNbJ2lmZiddIHx8IFtdLCBvcHRpb25zWydyZXNvbHZlcyddIHx8IFtdKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH19LFxuXHQgICAgICAgIG9ubHlJZjoge2dldDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIGlmIChvcHRpb25zWydvbmx5SWYnXSA9PT0gdHJ1ZSB8fCBvcHRpb25zWydvbmx5SWYnXSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uc1snb25seUlmJ107XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9uc1snb25seUlmJ10gfHwgb3B0aW9uc1snaWZmJ10gfHwgb3B0aW9uc1snZXhwZWN0cyddIHx8IG9wdGlvbnNbJ3Jlc29sdmVzJ10pIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KG9wdGlvbnNbJ29ubHlJZiddIHx8IFtdLCBvcHRpb25zWydpZmYnXSB8fCBbXSwgb3B0aW9uc1snZXhwZWN0cyddIHx8IFtdLCBvcHRpb25zWydyZXNvbHZlcyddIHx8IFtdKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfX0sXG5cdCAgICAgICAgYXBwbGllZEFmdGVyOiB7Z2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChvcHRpb25zWydhcHBsaWVkQWZ0ZXInXSB8fCBbXSwgb3B0aW9uc1snZXhwZWN0cyddIHx8IFtdLCBvcHRpb25zWydyZXNvbHZlcyddIHx8IFtdLCBvcHRpb25zWydyZXF1aXJlcyddIHx8IFtdKTtcblx0ICAgICAgICAgIH19LFxuXHQgICAgICAgIHNlbGVjdHM6IHtnZXQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KG9wdGlvbnNbJ3NlbGVjdHMnXSB8fCBbXSwgb3B0aW9uc1sncmVxdWlyZXMnXSB8fCBbXSk7XG5cdCAgICAgICAgICB9fVxuXHQgICAgICB9KTtcblx0ICAgICAgX2NvbmRpdGlvbnNVbnNldHRsZWQgPSB0cnVlO1xuXHQgICAgICBpZiAoVS5pc0RlZmluZWQodGhpcy5pZikpIHtcblx0ICAgICAgICBfcmVnaXN0ZXJEaXNqdW5jdChkZWx0YU5hbWUsIHRoaXMuaWYpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuc2VsZWN0cy5mb3JFYWNoKChmdW5jdGlvbihvdGhlckRlbHRhTmFtZSkge1xuXHQgICAgICAgIF9yZWdpc3RlckRpc2p1bmN0KG90aGVyRGVsdGFOYW1lLCBbZGVsdGFOYW1lXSk7XG5cdCAgICAgIH0pKTtcblx0ICAgICAgX2dyYXBoLmFkZFZlcnRleChkZWx0YU5hbWUsIHRoaXMpO1xuXHQgICAgICB0aGlzLmFwcGxpZWRBZnRlci5mb3JFYWNoKChmdW5jdGlvbihvdGhlckRlbHRhTmFtZSkge1xuXHQgICAgICAgIF9ncmFwaC5jcmVhdGVFZGdlKG90aGVyRGVsdGFOYW1lLCBkZWx0YU5hbWUpO1xuXHQgICAgICB9KSk7XG5cdCAgICAgIFUuYXNzZXJ0KCFfZ3JhcGguaGFzQ3ljbGUoKSwgKFwiVGhlIGRlbHRhIFwiICsgZGVsdGFOYW1lICsgXCIgaW50cm9kdWNlZCBhIGN5Y2xlIGluIHRoZSBhcHBsaWNhdGlvbiBvcmRlci5cIikpO1xuXHQgICAgfSk7XG5cdCAgICBVLmV4dGVuZCh0aGlzLCB7XG5cdCAgICAgIHNlbGVjdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgZm9yICh2YXIgZGVsdGFOYW1lcyA9IFtdLFxuXHQgICAgICAgICAgICAkX18yID0gMDsgJF9fMiA8IGFyZ3VtZW50cy5sZW5ndGg7ICRfXzIrKylcblx0ICAgICAgICAgIGRlbHRhTmFtZXNbJF9fMl0gPSBhcmd1bWVudHNbJF9fMl07XG5cdCAgICAgICAgZGVsdGFOYW1lcy5mb3JFYWNoKChmdW5jdGlvbihkZWx0YU5hbWUpIHtcblx0ICAgICAgICAgIF9yZWdpc3RlckRpc2p1bmN0KGRlbHRhTmFtZSwgdHJ1ZSk7XG5cdCAgICAgICAgfSkpO1xuXHQgICAgICB9LFxuXHQgICAgICB2cDogZnVuY3Rpb24odnBOYW1lLCB2YWwpIHtcblx0ICAgICAgICB2YXIgb2JqID0ge307XG5cdCAgICAgICAgb2JqW3ZwTmFtZV0gPSB2YWw7XG5cdCAgICAgICAgX3NldHRsZUNvbmRpdGlvbnMoKTtcblx0ICAgICAgICBfZ3JhcGguZWFjaFZlcnRleCgoZnVuY3Rpb24obmFtZSwgZGVsdGEpIHtcblx0ICAgICAgICAgIFUuYXNzZXJ0KCFkZWx0YS5zZWxlY3RlZCB8fCBkZWx0YS5vbmx5SWYgPT09IHRydWUgfHwgZGVsdGEub25seUlmLmV2ZXJ5KChmdW5jdGlvbihkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfZ3JhcGgudmVydGV4VmFsdWUoZCkuc2VsZWN0ZWQ7XG5cdCAgICAgICAgICB9KSksIChcIlRoZSAnb25seUlmJyBjb25kaXRpb24gb2YgZGVsdGEgJ1wiICsgZGVsdGEubmFtZSArIFwiJyB3YXMgdmlvbGF0ZWQuXCIpKTtcblx0ICAgICAgICB9KSk7XG5cdCAgICAgICAgX2dyYXBoLnRvcG9sb2dpY2FsbHkoKGZ1bmN0aW9uKG5hbWUsIGRlbHRhKSB7XG5cdCAgICAgICAgICBpZiAoZGVsdGEuc2VsZWN0ZWQpIHtcblx0ICAgICAgICAgICAgZGVsdGEuc2VsZWN0aXZlbHlBcHBseVRvKG9iaiwgdnBOYW1lKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KSk7XG5cdCAgICAgICAgcmV0dXJuIG9ialt2cE5hbWVdO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9KTtcblx0ICB2YXIgcmVzb2x2ZVByb21pc2UgPSBudWxsO1xuXHQgIFUuZXh0ZW5kKERlbHRhTW9kZWwsIHtyZWdpc3RlclByb21pc2VSZXNvbHZlcjogZnVuY3Rpb24ocHJvbWlzZVJlc29sdmVyRm4pIHtcblx0ICAgICAgcmVzb2x2ZVByb21pc2UgPSBwcm9taXNlUmVzb2x2ZXJGbjtcblx0ICAgIH19KTtcblx0ICByZXR1cm4gRGVsdGFNb2RlbDtcblx0fS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHRcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9PGNvbXBpbGVPdXRwdXQ+XG5cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX187XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187IShfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uKCkge1xuXHQgICd1c2Ugc3RyaWN0Jztcblx0ICB2YXIgVSA9IHtcblx0ICAgIG5ld0NsYXNzOiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgcHJvdG90eXBlKSB7XG5cdCAgICAgIHByb3RvdHlwZSA9IHByb3RvdHlwZSB8fCB7fTtcblx0ICAgICAgdmFyIGNscyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGZvciAodmFyIGFyZ3MgPSBbXSxcblx0ICAgICAgICAgICAgJF9fMCA9IDA7ICRfXzAgPCBhcmd1bWVudHMubGVuZ3RoOyAkX18wKyspXG5cdCAgICAgICAgICBhcmdzWyRfXzBdID0gYXJndW1lbnRzWyRfXzBdO1xuXHQgICAgICAgIGNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICB9O1xuXHQgICAgICBjbHMucHJvdG90eXBlID0gcHJvdG90eXBlO1xuXHQgICAgICBjbHMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY2xzO1xuXHQgICAgICByZXR1cm4gY2xzO1xuXHQgICAgfSxcblx0ICAgIG5ld1N1YmNsYXNzOiBmdW5jdGlvbihzdXBlckNsYXNzLCBjb25zdHJ1Y3RvciwgcHJvdG90eXBlKSB7XG5cdCAgICAgIHByb3RvdHlwZSA9IHByb3RvdHlwZSB8fCB7fTtcblx0ICAgICAgdmFyIGNscyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGZvciAodmFyIGFyZ3MgPSBbXSxcblx0ICAgICAgICAgICAgJF9fMCA9IDA7ICRfXzAgPCBhcmd1bWVudHMubGVuZ3RoOyAkX18wKyspXG5cdCAgICAgICAgICBhcmdzWyRfXzBdID0gYXJndW1lbnRzWyRfXzBdO1xuXHQgICAgICAgIGNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIFtzdXBlckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcl0uY29uY2F0KGFyZ3MpKTtcblx0ICAgICAgfTtcblx0ICAgICAgY2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUsIHByb3RvdHlwZSk7XG5cdCAgICAgIGNscy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjbHM7XG5cdCAgICAgIHJldHVybiBjbHM7XG5cdCAgICB9LFxuXHQgICAgZXh0ZW5kOiBmdW5jdGlvbihvYmoxKSB7XG5cdCAgICAgIGZvciAodmFyIHJlc3QgPSBbXSxcblx0ICAgICAgICAgICRfXzAgPSAxOyAkX18wIDwgYXJndW1lbnRzLmxlbmd0aDsgJF9fMCsrKVxuXHQgICAgICAgIHJlc3RbJF9fMCAtIDFdID0gYXJndW1lbnRzWyRfXzBdO1xuXHQgICAgICByZXN0LmZvckVhY2goKGZ1bmN0aW9uKG9iaikge1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0ICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHQgICAgICAgICAgICBvYmoxW2tleV0gPSBvYmpba2V5XTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0pKTtcblx0ICAgICAgcmV0dXJuIG9iajE7XG5cdCAgICB9LFxuXHQgICAgYXJyYXk6IGZ1bmN0aW9uKG9iaiwgbmFtZSkge1xuXHQgICAgICBpZiAoVS5pc1VuZGVmaW5lZChvYmpbbmFtZV0pKSB7XG5cdCAgICAgICAgb2JqW25hbWVdID0gW107XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG9ialtuYW1lXTtcblx0ICAgIH0sXG5cdCAgICBiaW5kQTogZnVuY3Rpb24oZm4sIGN0eCwgYXJncykge1xuXHQgICAgICByZXR1cm4gZm4uYmluZC5hcHBseShmbiwgW2N0eF0uY29uY2F0KGFyZ3MpKTtcblx0ICAgIH0sXG5cdCAgICBiaW5kOiBmdW5jdGlvbihvYmosIG0pIHtcblx0ICAgICAgZm9yICh2YXIgYXJncyA9IFtdLFxuXHQgICAgICAgICAgJF9fMSA9IDI7ICRfXzEgPCBhcmd1bWVudHMubGVuZ3RoOyAkX18xKyspXG5cdCAgICAgICAgYXJnc1skX18xIC0gMl0gPSBhcmd1bWVudHNbJF9fMV07XG5cdCAgICAgIHJldHVybiBVLmJpbmRBKG9ialttXSwgb2JqLCBhcmdzKTtcblx0ICAgIH0sXG5cdCAgICBhcHBseUNvbnN0cnVjdG9yOiBmdW5jdGlvbihDb25zdHJ1Y3RvckZuLCBhcmdzKSB7XG5cdCAgICAgIHZhciBOZXdDb25zdHJ1Y3RvckZuID0gQ29uc3RydWN0b3JGbi5iaW5kLmFwcGx5KENvbnN0cnVjdG9yRm4sIFtudWxsXS5jb25jYXQoYXJncykpO1xuXHQgICAgICByZXR1cm4gbmV3IE5ld0NvbnN0cnVjdG9yRm4oKTtcblx0ICAgIH0sXG5cdCAgICBhc3NlcnQ6IGZ1bmN0aW9uKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuXHQgICAgICBpZiAoIWNvbmRpdGlvbikge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8IFwiQXNzZXJ0aW9uIGZhaWxlZFwiKTtcblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGlzVW5kZWZpbmVkOiBmdW5jdGlvbih2YWwpIHtcblx0ICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xuXHQgICAgfSxcblx0ICAgIGlzRGVmaW5lZDogZnVuY3Rpb24odmFsKSB7XG5cdCAgICAgIHJldHVybiB0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJztcblx0ICAgIH1cblx0ICB9O1xuXHQgIHJldHVybiBVO1xuXHR9LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXywgZXhwb3J0cywgbW9kdWxlKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHRcblx0Ly8jIHNvdXJjZU1hcHBpbmdVUkw9PGNvbXBpbGVPdXRwdXQ+XG5cblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dmQyVmljR0ZqYXk5MWJtbDJaWEp6WVd4TmIyUjFiR1ZFWldacGJtbDBhVzl1SWl3aWQyVmljR0ZqYXpvdkx5OTNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQm1NamszTjJOaU9HWTBObUkzTWpkbVpUY3laQ0lzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12WkdWc2RHRXVhbk1pTENKM1pXSndZV05yT2k4dkwwQjBjbUZqWlhWeUwyZGxibVZ5WVhSbFpDOVVaVzF3YkdGMFpWQmhjbk5sY2k4d0lpd2lkMlZpY0dGamF6b3ZMeTlBZEhKaFkyVjFjaTluWlc1bGNtRjBaV1F2VkdWdGNHeGhkR1ZRWVhKelpYSXZNU0lzSW5kbFluQmhZMnM2THk4dlpYaDBaWEp1WVd3Z2Uxd2ljbTl2ZEZ3aU9sd2lTbk5IY21Gd2FGd2lMRndpWTI5dGJXOXVhbk15WENJNlhDSnFjeTFuY21Gd2FGd2lMRndpWTI5dGJXOXVhbk5jSWpwY0ltcHpMV2R5WVhCb1hDSXNYQ0poYldSY0lqcGNJbXB6TFdkeVlYQm9YQ0o5SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5dGFYTmpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJDeFBPMEZEVmtFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNkVUpCUVdVN1FVRkRaanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN08wRkJSMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4M1F6czdPenM3T3p0cFJVTjBRMEVzYVVOQlFWRXNkVUpCUVZrc2QwSkJRVmNzUTBGQlJ5d3dRMEZCVlN4UFFVRk5MRU5CUVVjN1FVRkRjRVFzWTBGQlZ5eERRVUZETzBGQlQxSXNaVUZCVVN4SlFVRkpMRk5CUVVNc1EwRkJTeXhIUVVGRExFVkJRVU03UVVGRGNFSXNaMEpCUVZNc1NVRkJTU3hUUVVGRExFVkJRVU1zUTBGQlJ5eEhRVUZITEVkQlFVTXNRMEZCVFR0QlFVRkZMRTFCUVVNc1YwRkJWeXhEUVVGRkxFVkJRVU1zUlVGQlNTeEhRVUZETzBkQlFVVXNSVUZCUXp0QlFVTnlSQ3cyUWtGQmMwSXNTVUZCU1N4VFFVRkRMRVZCUVVNc1EwRkJSeXhIUVVGSExFZEJRVU1zUTBGQlRUdEJRVUZGTEUxQlFVTXNVVUZCVXl4RFFVRkRMRVZCUVVNc1YwRkJWeXhEUVVGRkxFVkJRVU1zUTBGQlJ5eFJRVUZOTEVOQlFVTTdSMEZCUlN4RlFVRkRPMEZCUlhSR0xGVkJRVk1zWlVGQllTeERRVUZGTEVkQlFVVXNRMEZCUnl4UFFVRkxMRU5CUVVjN1FVRkRjRU1zV1VGQlVTeERRVUZETEUxQlFVOHNTVUZCUlN4SlFVRk5MRmRCUVZNc1IwRkRMMElzYVVKQlFXbENMRVZCUVVNc1QwRkJTeXhGUVVGRExITkVRVUZ2UkN4RlFVRkRMRU5CUVVNN1IwRkRha1k3UVVGRlFTeFZRVUZUTEdOQlFWa3NRMEZCUlN4SFFVRkZMRU5CUVVjc1QwRkJTeXhEUVVGSE8wRkJRMjVETEZsQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSU3hEUVVGRExFZEJRM1JDTEdsQ1FVRnBRaXhGUVVGRExFOUJRVXNzUlVGQlF5eDNRMEZCYzBNc1JVRkJReXhEUVVGRE8wZEJRMjVGTzBGQlJVRXNWVUZCVXl4blFrRkJZeXhEUVVGRkxFZEJRVVVzUTBGQlJ5eFBRVUZMTEVOQlFVYzdRVUZEY2tNc1dVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eEhRVUZGTEVOQlFVTXNSMEZEZUVJc2FVSkJRV2xDTEVWQlFVTXNUMEZCU3l4RlFVRkRMREJEUVVGM1F5eEZRVUZETEVOQlFVTTdSMEZEY2tVN1FVRlJTU3huUWtGQlV5eEZRVUZKTEZkQlFWVXNRMEZCUXl4VFFVRlZPenRCUVVkcVF5eG5Ra0ZCVHl4RlFVRkpMRWRCUVVNc1EwRkJRenRCUVVOaUxHMUNRVUZWTEVWQlFVa3NSMEZCUXl4RFFVRkRPMEZCUlhCQ0xGbEJRVkVzUTBGQlF5eEpRVUZITEVOQlFVYzdRVUZIWkN4MVFrRkJaMElzUTBGQmFFSXNWVUZCYTBJc1NVRkJPRU03TzBGQlFUZERMR2RDUVVGSE8wRkJRVWNzZFVKQlFWVTdRVUZCUnl4dFFrRkJUVHRCUVVGSExIRkNRVUZSTzBGQlFVY3NhMEpCUVVzN1FVRkhNVVFzTkVKQlFXVXNSVUZCU1N4SFFVRkRMRU5CUVVNN1FVRkhla0lzWjBKQlFVOHNRMEZCUlN4SlFVRkhMRU5CUVVNc1JVRkJTVHRCUVVOb1FpeGpRVUZITEVOQlFVY3NTMEZCUnp0QlFVTlVMR1ZCUVVrc1EwRkJSeXhaUVVGVk8wRkJRMnBDTEdkQ1FVRkxMRU5CUVVjc2FVSkJRV1VzUTBGQlJTeEpRVUZITEVOQlFVTTdRVUZCUVN4VFFVTTVRaXhEUVVGRE8wRkJSMFFzWjBKQlFWRXNRMEZCUXl4UlFVRlBMRU5CUVVVc1NVRkJSeXhEUVVGRExFMUJRVTBzVlVGQlZTeERRVUZITEZWQlFWRXNRMEZCUnp0QlFVTnVSQ3h4UWtGQlZTeERRVUZITEZsQlFWVTdRVUZEZGtJc1kwRkJSeXhEUVVGSExFdEJRVWM3UVVGRFZDeHBRa0ZCVFN4RFFVRkhMRkZCUVUwN1FVRkJRU3hUUVVOb1FpeERRVUZETEVOQlFVTTdRVUZKUml4blFrRkJUeXhEUVVGRkxGRkJRVThzUTBGQlF5eE5RVUZOTEZWQlFWVXNRMEZCUlN4SlFVRkhMRU5CUVVNc1JVRkRja01zV1VGQlZ5eERRVUZETEUxQlFVc3NRMEZCUXl4RlFVRkpMRTlCUVVzc1JVRkRla0lzVlVGQlZTeFJRVUZyUWl4RFFVRkhPMEZEYUVVelFpeGxRVUZUTEZsQlFXOUNMRWRCUVVNN1FVRkJSeXh6UWtGQmIwTXNRMEZEYUVVc1QwRkJiMElzVlVGQlVTeFBRVUZQTEVOQlFVY3NUMEZCYTBJN1FVRkRNMFFzYlVKQlFXdENMRkZCUVc5RExFTkJRVU1zUlVGQlNTeFZRVUZSTEUxQlFXMUNMRU5CUVVNN1FVRkJRU3hqUkN0RWVrWXNZMEZCWlN4RFFVRkRMRkZCUVU4c1EwRkJSU3hKUVVGSExFTkJRVU1zUTBGQlJ5eFRRVUZQTEVOQlFVY3NUMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRjRVFzWjBKQlFVOHNTMEZCUnl4RFFVRkRPMU5CUTFvc1EwRkJRenRQUVVWT08wRkJSMEVzZDBKQlFXbENMRU5CUVdwQ0xGVkJRVzFDTEVsQlFYZENPenRCUVVGMlFpeG5Ra0ZCUnp0QlFVRkhMR3RDUVVGTE8wRkJRVWNzY1VKQlFWRTdRVUZIY2tNc05FSkJRV1VzUlVGQlNTeEhRVUZETEVOQlFVTTdRVUZEZWtJc1kwRkJTeXhsUVVGblFpeERRVUZETEdkQ1FVRmxMRU5CUVVjc1MwRkJSeXhEUVVGSExFVkJRemRETEV0QlFVa3NRMEZCU2l4VlFVRk5MRkZCUVd0Q0xFTkJRVWM3UVVNM1JYQkNMR2xDUVVGVExGbEJRVzlDTEVkQlFVTTdRVUZCUnl4M1FrRkJiME1zUTBGRGFFVXNUMEZCYjBJc1ZVRkJVU3hQUVVGUExFTkJRVWNzVDBGQmEwSTdRVUZETTBRc2NVSkJRV3RDTEZGQlFXOURMRU5CUVVNc1JVRkJTU3hWUVVGUkxFMUJRVzFDTEVOQlFVTTdRVUZCUVN4blFrUTBSVFZHTEdOQlFXVXNRMEZCUXl4UlFVRlBMRU5CUVVVc1RVRkJTeXhEUVVGRExFTkJRVWNzVTBGQlR5eERRVUZITEZWQlFWTXNRMEZCUXl4TlFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnBGTEd0Q1FVRlBMRXRCUVVjc1EwRkJRenRYUVVOYUxFTkJRMFFzUTBGQlF5eERRVUZETzBGQlIwWXNaMEpCUVU4c1EwRkJSU3hKUVVGSExFTkJRVU1zUlVGQlNUdEJRVU5vUWl4alFVRkhMRU5CUVVjc1MwRkJSenRCUVVOVUxHZENRVUZMTEVOQlFVY3NhVUpCUVdVc1EwRkJSU3hKUVVGSExFTkJRVU03UVVGQlFTeFRRVU01UWl4RFFVRkRPMEZCUjBRc1owSkJRVThzUTBGQlJTeFJRVUZQTEVOQlFVTXNUVUZCVFN4VlFVRlZMRU5CUVVVc1NVRkJSeXhEUVVGRExFVkJRVWtzVTBGQlR5eERRVUZGTEVsQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNN1QwRkZha1U3UVVGSFFTeDVRa0ZCYTBJc1EwRkJiRUlzVlVGQmIwSXNUMEZCVFN4RFFVRkhMRkZCUVUwc1EwRkJSeXhWUVVGUkxFTkJRVWM3UVVGRGFFUXNiVUpCUVZVc1MwRkJUU3hEUVVGRE8wRkJRVVVzYVVKQlFVMHNRMEZCVGl4UlFVRk5PMEZCUVVjc2FVSkJRVTBzUTBGQlRpeFJRVUZOTzBGQlFVY3NiVUpCUVZFc1EwRkJVaXhWUVVGUk8wRkJRVUVzVTBGQlJTeERRVUZETEVOQlFVTTdUMEZEYkVRN1FVRkhRU3hsUVVGUkxFTkJRVklzVlVGQlZTeEpRVUZqTEVOQlFVYzdRVU53UjJ4Q0xHRkJRVk1zV1VGQmIwSXNSMEZCUXp0QlFVRkhMRzlDUVVGdlF5eERRVU5vUlN4UFFVRnZRaXhWUVVGUkxFOUJRVThzUTBGQlJ5eFBRVUZyUWp0QlFVTXpSQ3hwUWtGQmEwSXNVVUZCYjBNc1EwRkJReXhGUVVGSkxGVkJRVkVzVFVGQmJVSXNRMEZCUXp0QlFVRkJMR05FYlVjeFJpeHRRa0ZCYTBJc1EwRkJReXhSUVVGUExFTkJRVVVzU1VGQlJ5eERRVUZETEUxQlFVMHNRMEZCUnl4UFFVRkxMRU5CUVVNc1EwRkJRenRQUVVONFJEdEJRVUZCTEV0QlEwUXNRMEZCUXl4RFFVRkRPMEZCUjBVc1kwRkJTeXhGUVVGSkxFdEJRVWNzUTBGQlF6dEJRVU5xUWl4UlFVRkhMR3RDUVVGdFFpeERRVUZETzBGQlEzUkNMRlZCUVVjc1EwRkJSeXhUUVVGUE8wRkJRMklzYVVKQlFWVXNRMEZCUnl4VFFVRlRMRTlCUVVzc1EwRkJkVU03VjBGQmNrTXNhVUpCUVdVc05rTkJRVWtzUjBGQlF6dFhRVUZITEZkQlFWTXNOa05CUVVrc1IwRkJRenM3UVVGRGFrVXNXVUZCUnl4WFFVRlhMRVZCUVVrc1YwRkJVeXhEUVVGRE8wRkJSVFZDTEdOQlFVc3NTMEZCVFN4RFFVRkRMR2RDUVVGbExFTkJRVU1zVVVGQlV5eEZRVUZETEZOQlFVTXNSMEZCUlN4RFFVRk5PMEZCUXpGRExHMUNRVUZKTEVWQlFVa3NTVUZCUlN4TlFVRlBMRU5CUVVNc2NVSkJRVzlDTEVOQlFVTXNRMEZCUXp0QlFVTTFReXhqUVVGSkxFdEJRVWtzUTBGQlJ6dEJRVU5PTEhsQ1FVRlJMRVZCUVVrc1RVRkJTU3hEUVVGRkxFVkJRVU1zUTBGQlF6dEJRVU53UWl4M1FrRkJUeXhGUVVGSkxFMUJRVWtzUTBGQlJTeEZRVUZETEVOQlFVTTdRVUZEZGtJc2IwSkJRVkVzUTBGQlF5eFRRVUZSTEVkQlFVc3NVMEZCVHl4SFFVTXpRaXh2UWtGQmIwSXNSVUZCUXl4VlFVRlJMRVZCUVVNc1pVRkJZU3hGUVVGRExFTkJRVU03UVVGREwwTXNhVUpCUVVzc1UwRkJVU3hEUVVGRkxFTkJRVU1zVVVGQlR5eERRVUZITEdsQ1FVRmxMRU5CUVVVc1IwRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFhRVU5xUkR0QlFVRkJMRk5CUTBRc1JVRkJReXhEUVVGRE8wOUJRMGc3UVVGRFFTeGhRVUZOTEVOQlFVNHNWVUZCVVN4SFFVRkZMRU5CUVVjc1UwRkJUenM3UVVGRGJrSXNXVUZCU1N4WFFVRlhMRU5CUVVNc1VVRkJUeXhEUVVGRExFTkJRVWM3UVVGRk1VSXNhMEpCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJTeERRVUZGTEZGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUTJoRExIRkZRVUZ0UlN4RFFVRkRMRU5CUVVNN1FVRkRka1VzWjBKQlFVc3NTMEZCVFN4RFFVRkRMRWxCUVVjc1YwRkJWeXhEUVVGRExGRkJRVk1zUlVGQlF5eFRRVUZETEZkQlFWVXNRMEZCVFR0QlFVTnlSQ3d5UWtGQll5eERRVUZGTEZkQlFWVXNRMEZCUXl4UlFVRlRMRU5CUVVNc1IwRkJSU3hEUVVGRkxGRkJRVThzUTBGQlF5eERRVUZITEZsQlFWVXNRMEZCUXl4RFFVRkRPMWRCUTJwRkxFVkJRVU1zUTBGQlF6dFRRVU5JTEV0QlFVODdRVUZGVGl4clFrRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZGTEVOQlFVTXNRMEZEZEVJc2NVVkJRVzFGTEVOQlFVTXNRMEZCUXp0QlFVTjJSU3huUWtGQlN5eExRVUZOTEVOQlFVTXNTVUZCUnl4WFFVRlhMRU5CUVVNc1VVRkJVeXhGUVVGRExGTkJRVU1zVjBGQlZTeERRVUZOTzBGQlEzSkVMREpDUVVGakxFTkJRVVVzVjBGQlZTeERRVUZETEZGQlFWTXNRMEZCUXl4SFFVRkZMRU5CUVVjc1dVRkJWU3hEUVVGRExFTkJRVU03VjBGRGRrUXNSVUZCUXl4RFFVRkRPMU5CUTBnN1FVRkJRU3hQUVVORU8wRkJRMEVzWlVGQlVTeERRVUZITzBGQlExWXNNRUpCUVdsQ0xFTkJRV3BDTEZWQlFXMUNMRWRCUVVVc1EwRkJSeXhaUVVGVkxFTkJRVWM3UVVGRmNFTXNhMEpCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJTeERRVUZETEVOQlEzUkNMSEZGUVVGdFJTeERRVUZETEVOQlFVTTdRVUZEZGtVc1kwRkJTU3hYUVVGWExFTkJRVU1zU1VGQlJ5eFhRVUZYTEVOQlFVVXNWMEZCVlN4RFFVRkRMRU5CUVVNc1EwRkJSenRCUVVNNVF5eG5Ra0ZCUnl4WFFVRlhMRU5CUVVVc1YwRkJWU3hEUVVGRExGRkJRVk1zUTBGQlF5eEhRVUZGTEVOQlFVY3NXVUZCVlN4RFFVRkRMRU5CUVVNN1YwRkRka1E3UVVGQlFTeFRRVU5FTzBGQlEwRXNaVUZCVFN4RFFVRk9MRlZCUVZFc1VVRkJUeXhEUVVGSExFbEJRVVU3TzBGQlEyNUNMR05CUVVrc1lVRkJZU3hEUVVGRExFZEJRVVVzUTBGQlF5eERRVUZITzBGQlFVVXNhMEpCUVU4c1MwRkJSenRYUVVGRk8wRkJRMnhETERSQ1FVRmhMRU5CUVVNN1FVRkRiRUlzY1VKQlFWVXNTMEZCVFN4RlFVRkRMRk5CUVVNc1NVRkJORUk3TzBGQlFUTkNMSFZDUVVGTk8wRkJRVWNzZFVKQlFVMDdRVUZCUnl4NVFrRkJVVHRCUVVNMVF5eG5Ra0ZCU1N4bFFVRmpMRU5CUVVVc1VVRkJUeXhEUVVGRExFdEJRVXNzU1VGQlRTeFJRVUZOTEVkQlFVc3NTVUZCUlN4TFFVRkxMRWxCUVUwc1VVRkJUU3hEUVVGSE8wRkJRM1pGTERSQ1FVRmhMRVZCUVVrc1ZVRkJVU3hEUVVGRE8wRkJRekZDTEc5Q1FVRlBMRXRCUVVjc1EwRkJRenRoUVVOYU8wRkJRVUVzVjBGRFJDeEZRVUZETEVOQlFVTTdRVUZEUml4alFVRkpMR05CUVdFc1EwRkJSenRCUVVOdVFpd3dRa0ZCWXl4RFFVRkRMRWxCUVVjc1EwRkJSeXhUUVVGUExFTkJRVWNzU1VGQlJTeERRVUZETEVOQlFVTTdWMEZEY0VNc1MwRkJUenRCUVVOR0xHMUNRVUZGTEVWQlFVa3NTVUZCU1N4TlFVRkxMRU5CUTJwQ0xIZENRVUYxUWl4RlFVRkRMRXRCUVVjc1YwRkJWeXhEUVVGRkxGRkJRVThzUTBGQlF5eExRVUZMTEVWQlFVTXNaVUZCWVN4TFFVTnVSU3hWUVVGVkxFVkJRVU1zU1VGQlJTeExRVUZMTEVWQlFVTXNiME5CUVd0RExFVkJRM1pFTEVOQlFVTTdRVUZEUkN4bFFVRkZMRWxCUVVrc1JVRkJTU3hMUVVGSExGZEJRVmNzUTBGQlJTeFJRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUTNoRExHVkJRVVVzU1VGQlNTeEZRVUZKTEVsQlFVVXNTMEZCU3l4RFFVRkRPMEZCUTJ4Q0xHbENRVUZOTEVsQlFVVXNRMEZCUXp0WFFVTldPMEZCUVVFc1UwRkRSRHRCUVVOQkxIRkNRVUZaTEVOQlFWb3NWVUZCWXl4TlFVRkxMRU5CUVVjc1UwRkJUeXhEUVVGSExFOUJRVXNzUTBGQlJ6dEJRVU51UXl4elFrRkJUeXhGUVVGSkxGTkJRVThzVVVGQlV5eERRVUZETEVkQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTNCRExHTkJRVWtzVVVGQlR5eEpRVUZOTEVWQlFVTXNSVUZCUnp0QlFVVm9RaXc0UWtGQllTeEZRVUZKTEZOQlFVOHNUVUZCVHl4RFFVRkRMRVZCUVVjc1UwRkJUeXhEUVVGRExFTkJRVU03UVVGRE5VTXNPRUpCUVdFc1JVRkJTU3hUUVVGUExFMUJRVThzUTBGQlF5eFJRVUZQTEVWQlFVa3NSMEZCUXl4RFFVRkRPMEZCUXpkRExEaENRVUZoTEVWQlFVa3NTMEZCUnl4alFVRmxMRU5CUVVNc1VVRkJUeXhEUVVGRkxGRkJRVThzUTBGQlF5eERRVUZITEdWQlFXRXNRMEZCUXl4RFFVRkRPMEZCUXpORkxHdENRVUZQTEdWQlFXRXNRMEZCUlN4TlFVRkxMRXRCUVVzc1EwRkJReXhOUVVGUExFTkJRVU1zWTBGQllTeERRVUZITEVWQlFVTXNZMEZCWVN4RFFVRkRMRTlCUVZFc1EwRkJReXhOUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFkQlF6RkdMRXRCUVU4N1FVRkhSaXg1UWtGQlVTeEZRVUZKTEU5QlFVc3NWVUZCVlN4TlFVRlBMRU5CUVVNc1RVRkJTeXhEUVVGSExFVkJRVU1zVFVGQlN5eExRVUZMTEVOQlFVTXNUMEZCVVN4RFFVRkRMRTFCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE5VVXNaMEpCUVVrc1NVRkJSeXhYUVVGWExHVkJRV2RDTEVOQlFVTXNVVUZCVHl4RFFVRkRMRWRCUVVzc1dVRkJWeXhEUVVGRExFbEJRVWNzVjBGQlZ5eERRVUZGTEZGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVjN1FVRkRka1lzYTBKQlFVY3NVVUZCVXl4RFFVRkRMRkZCUVU4c1EwRkJSeXhWUVVGUkxFTkJRVU1zUTBGQlF6dGhRVU5zUXl4TFFVRlBPMEZCUTA0c2EwSkJRVWNzVjBGQlZ5eERRVUZGTEZGQlFVOHNRMEZCUXl4RlFVRkpMRlZCUVZFc1EwRkJRenRoUVVOMFF6dEJRVU5CTEd0Q1FVRlBMRXRCUVVjc1YwRkJWeXhEUVVGRkxGRkJRVThzUTBGQlF5eERRVUZETzFkQlEycERPMEZCUVVFc1UwRkRSRHRCUVVGQkxFOUJRMFE3UVVGRFFTeFpRVUZMTEVOQlFVd3NWVUZCVHl4UlFVRlBMRU5CUVVjc2FVSkJRV1VzUTBGQlJ6dEJRVU5zUXl4alFVRlBMRXRCUVVjc1kwRkJaU3hEUVVGRExGRkJRVThzUTBGQlJTeFJRVUZQTEVOQlFVTXNRMEZCUnl4VFFVRlBMRU5CUVVjc1JVRkJReXhuUWtGQlpTeERRVUZETEVOQlFVTXNRMEZCUXp0UFFVTTFSVHRCUVVGQkxFdEJRMFFzUTBGQlF5eERRVUZETzBGQlRVWXNVVUZCUnl4clFrRkJiVUlzUTBGQlF6dEJRVU4wUWl4VlFVRkhMRU5CUVVjc1RVRkJTVHRCUVVOV0xHbENRVUZWTEVOQlFVY3NVMEZCVXl4SlFVRkZMRU5CUVVVc1MwRkJTU3hEUVVGSE8wRkJRVVVzV1VGQlJ5eE5RVUZOTEVWQlFVa3NUVUZCU1R0UFFVRkZPMEZCUTNSRUxHRkJRVTBzUTBGQlRpeFZRVUZSTEVkQlFVVXNRMEZCUnl4VFFVRlBMRU5CUVVjN1FVRkRkRUlzZFVKQlFXVXNRMEZCUXl4SFFVRkZMRU5CUVVVc1VVRkJUeXhEUVVGRExFTkJRVWNzVFVGQlNTeERRVUZETEVOQlFVTTdRVUZEY2tNc1YwRkJSU3hEUVVGRkxGRkJRVThzUTBGQlF5eEZRVUZKTEV0QlFVY3NUVUZCVFN4RFFVRkRPMDlCUXpOQ08wRkJRVUVzUzBGRFJDeERRVUZETEVOQlFVTTdRVUZEUml4UlFVRkhMR3RDUVVGdFFpeERRVUZETzBGQlEzUkNMRlZCUVVjc1EwRkJSeXhWUVVGUk8wRkJRMlFzYVVKQlFWVXNRMEZCUnl4VFFVRlRMRkZCUVUwc1EwRkJSU3hMUVVGSkxFTkJRVWM3UVVGQlJTeFpRVUZITEUxQlFVMHNSVUZCU1N4TlFVRkpPMDlCUVVVN1FVRkRNVVFzWVVGQlRTeERRVUZPTEZWQlFWRXNSMEZCUlN4RFFVRkhMRk5CUVU4c1EwRkJSenRCUVVOMFFpeHhRa0ZCWVN4RFFVRkRMRWRCUVVVc1EwRkJSU3hSUVVGUExFTkJRVU1zUTBGQlJ5eFZRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTjJReXhYUVVGRkxFTkJRVVVzVVVGQlR5eERRVUZETEVWQlFVa3NTMEZCUnl4TlFVRk5MRU5CUVVNN1QwRkRNMEk3UVVGQlFTeExRVU5FTEVOQlFVTXNRMEZCUXp0QlFVTkdMRkZCUVVjc2EwSkJRVzFDTEVOQlFVTTdRVUZEZEVJc1ZVRkJSeXhEUVVGSExHZENRVUZqTzBGQlEzQkNMR2xDUVVGVkxFTkJRVWNzVTBGQlV5eGpRVUZaTEVOQlFVVXNTMEZCU1N4RFFVRkhPMEZCUVVVc1dVRkJSeXhOUVVGTkxFVkJRVWtzVFVGQlNUdFBRVUZGTzBGQlEyaEZMR0ZCUVUwc1EwRkJUaXhWUVVGUkxFZEJRVVVzUTBGQlJ5eFRRVUZQTEVOQlFVYzdRVUZEZEVJc2NVSkJRV0VzUTBGQlF5eEhRVUZGTEVOQlFVVXNVVUZCVHl4RFFVRkRMRU5CUVVjc1owSkJRV01zUTBGQlF5eERRVUZETzBGQlF6ZERMRmRCUVVVc1EwRkJSU3hSUVVGUExFTkJRVU1zUlVGQlNTeExRVUZITEUxQlFVOHNRMEZCUXl4SFFVRkZMRU5CUVVVc1VVRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dFBRVU14UXp0QlFVRkJMRXRCUTBRc1EwRkJReXhEUVVGRE8wRkJRMFlzVVVGQlJ5eHJRa0ZCYlVJc1EwRkJRenRCUVVOMFFpeFZRVUZITEVOQlFVY3NVMEZCVHp0QlFVTmlMR2xDUVVGVkxFTkJRVWNzVTBGQlV5eFBRVUZMTEVOQlFVVXNRMEZCUlN4SFFVRkRPMEZCUTJoRExHRkJRVTBzUTBGQlRpeFZRVUZSTEVkQlFVVXNRMEZCUnl4VFFVRlBMRU5CUVVjN1FVRkRkRUlzY1VKQlFXRXNRMEZCUXl4SFFVRkZMRU5CUVVVc1VVRkJUeXhEUVVGRExFTkJRVWNzVTBGQlR5eERRVUZETEVOQlFVTTdRVUZEZEVNc1kwRkJUeXhKUVVGRkxFTkJRVVVzVVVGQlR5eERRVUZETEVOQlFVTTdUMEZEY2tJN1FVRkJRU3hMUVVORUxFTkJRVU1zUTBGQlF6dEJRVU5HTEZGQlFVY3NhMEpCUVcxQ0xFTkJRVU03UVVGRGRFSXNWVUZCUnl4RFFVRkhMRk5CUVU4N1FVRkRZaXhwUWtGQlZTeERRVUZITEZOQlFWTXNUMEZCU3l4RFFVRkZMRU5CUVVVc1IwRkJRenRCUVVOb1F5eGhRVUZOTEVOQlFVNHNWVUZCVVN4SFFVRkZMRU5CUVVjc1UwRkJUeXhEUVVGSE8wRkJRVVVzZFVKQlFXVXNRMEZCUXl4SFFVRkZMRU5CUVVVc1VVRkJUeXhEUVVGRExFTkJRVWNzVTBGQlR5eERRVUZETzA5QlFVVTdRVUZCUVN4TFFVTnVSU3hEUVVGRExFTkJRVU03UVVGSlJpeFJRVUZITEc5Q1FVRnhRaXhEUVVGRExFdEJRVWtzUTBGQlJ5eFZRVUZSTEVkQlFVY3NVMEZCUXl4RlFVRkRMRU5CUVVjc1IwRkJSeXhIUVVGRExFTkJRVTA3UVVGQlJTeFJRVUZETEZkQlFWY3NRMEZCUlN4RlFVRkRMRVZCUVVrc1YwRkJVeXhWUVVGWExFTkJRVU1zUzBGQlNTeERRVUZITEVkQlFVTXNUVUZCVFN4RFFVRkRPMHRCUVVVc1JVRkJReXhEUVVGRE8wRkJRM1pJTEZGQlFVY3NiMEpCUVhGQ0xFTkJRVU1zUzBGQlNTeERRVUZITEZOQlFVOHNRMEZCUnl4M1FrRkJjMElzUTBGQlF5eERRVUZETzBGQlEyeEZMRkZCUVVjc2IwSkJRWEZDTEVOQlFVTXNTMEZCU1N4RFFVRkhMRk5CUVU4c1IwRkJSeXhUUVVGRExFVkJRVU1zUTBGQlJ5eEhRVUZOTzBGQlFVVXNVVUZCUXl4WFFVRlhMRU5CUVVVc1JVRkJReXhGUVVGSkxGZEJRVk1zVlVGQlZ5eERRVUZETEZGQlFVOHNRMEZCUXp0TFFVRkZMRVZCUVVNc1EwRkJRenRCUVVNelJ5eFJRVUZITEc5Q1FVRnhRaXhEUVVGRExGTkJRVkVzUTBGQlJ5eFZRVUZSTEVOQlFVY3NWMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRNVVFzVVVGQlJ5eHZRa0ZCY1VJc1EwRkJReXhUUVVGUkxFTkJRVWNzVTBGQlR5eERRVUZITEhkQ1FVRnpRaXhEUVVGRExFTkJRVU03UVVGRGRFVXNVVUZCUnl4dlFrRkJjVUlzUTBGQlF5eFRRVUZSTEVOQlFVY3NVMEZCVHl4RFFVRkhMRmRCUVZNc1EwRkJReXhEUVVGRE8wRkJVWHBFTEZGQlFVY3NiMEpCUVhGQ0xFTkJRVU1zVVVGQlR5eERRVUZITEZWQlFWRXNRMEZCUnl4WFFVRlRMRU5CUVVNc1EwRkJRenRCUVVONlJDeFJRVUZITEc5Q1FVRnhRaXhEUVVGRExGRkJRVThzUTBGQlJ5eFRRVUZQTEVkQlFVY3NVMEZCUXl4RlFVRkRMRU5CUVVjc1IwRkJSeXhIUVVGRE8wRkJRM0pFTEZsQlFVc3NTMEZCVFN4RFFVRkRMRVZCUVVNc1YwRkJWeXhEUVVGRExGRkJRVk1zUlVGQlF5eFRRVUZETEVsQlFVY3NRMEZCVFR0QlFVTTFReXhWUVVGRExGRkJRVk1zUTBGQlF5eEpRVUZITEVOQlFVY3NSMEZCUXl4WFFVRlhMRU5CUVVVc1NVRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFBRVU4wUXl4RlFVRkRMRU5CUVVNN1MwRkRTQ3hGUVVGRExFTkJRVU03UVVGRFJpeFJRVUZITEc5Q1FVRnhRaXhEUVVGRExGRkJRVThzUTBGQlJ5eFRRVUZQTEVOQlFVY3NWMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRlRVFzVVVGQlJ5eHZRa0ZCY1VJc1EwRkJReXhSUVVGUExFTkJRVWNzVFVGQlNTeEhRVUZITEZOQlFVTXNSVUZCUXl4RFFVRkhMRWRCUVVjc1IwRkJReXhEUVVGTk8wRkJRVVVzVVVGQlF5eFhRVUZYTEVOQlFVVXNSVUZCUXl4RlFVRkpMRmRCUVZNc1ZVRkJWeXhEUVVGRExGTkJRVkVzUTBGQlJ5eEhRVUZETEUxQlFVMHNRMEZCUXp0TFFVRkZMRVZCUVVNc1EwRkJRenRCUVVNeFNDeFJRVUZITEc5Q1FVRnhRaXhEUVVGRExGRkJRVThzUTBGQlJ5eFRRVUZQTEVOQlFVY3NWVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRka1FzVVVGQlJ5eHZRa0ZCY1VJc1EwRkJReXhSUVVGUExFTkJRVWNzVFVGQlNTeERRVUZITEZkQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxGRkJRVWNzYjBKQlFYRkNMRU5CUVVNc1VVRkJUeXhEUVVGSExGTkJRVThzUTBGQlJ5eFZRVUZSTEVOQlFVTXNRMEZCUXp0QlFVbDJSQ3hSUVVGSExHdENRVUZ0UWl4RFFVRkRPMEZCUTNSQ0xGVkJRVWNzUTBGQlJ5eFJRVUZOTzBGQlExb3NhVUpCUVZVc1EwRkJSeXhUUVVGVExFMUJRVWtzUTBGQlJTeExRVUZKTEVOQlFVY3NUVUZCU1N4RFFVRkhPMEZCUTNwRExGbEJRVWNzVFVGQlRTeEZRVUZKTEUxQlFVa3NSMEZCU3l4SFFVRkRMRU5CUVVNN1FVRkRlRUlzV1VGQlJ5eE5RVUZOTEVWQlFVa3NUVUZCU1N4SFFVRkxMRkZCUVUwc1EwRkJRenRQUVVNNVFqdEJRVU5CTEdGQlFVMHNRMEZCVGl4VlFVRlJMRWRCUVVVc1EwRkJSeXhUUVVGUE8wRkJRMjVDTEhOQ1FVRmpMRU5CUVVNc1IwRkJSU3hEUVVGRkxGRkJRVThzUTBGQlF5eERRVUZITEV0QlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRla01zV1VGQlJ5eE5RVUZOTEZGQlFWTXNSVUZCUXl4VFFVRkRMRXRCUVVrN1FVRkRia0lzY1VKQlFVMHNSVUZCU1N4SlFVRkZMRU5CUVVVc1VVRkJUeXhEUVVGRExFTkJRVU03UVVGRGRrSXNjVUpCUVUwc1JVRkJTU3hOUVVGSkxFMUJRVTBzUTBGQlF6dEJRVU42UWl4alFVRkpMRXRCUVVrc1MwRkJTeXhKUVVGTkxGVkJRVkVzUTBGQlJ6dEJRVU0zUWl4bFFVRkZMRU5CUVVVc1VVRkJUeXhEUVVGRExFVkJRVWtzVlVGQlowSXNRMEZCUnp0QlJYWlNOMElzYlVKQlFWTXNWVUZCYjBJc1IwRkJRenRCUVVGSExIZENRVUZ2UWl4SFFVTm9SQ3hQUVVGdlFpeFZRVUZSTEU5QlFVOHNRMEZCUnl4UFFVRnJRanRCUVVNelJDd3dRa0ZCYlVNc1JVRkJTU3hWUVVGUkxFMUJRVzFDTEVOQlFVTTdRVUZCUVN4eFFrWnpVbkJGTEUxQlFVOHNRMEZCUXl4SlFVRkhMRU5CUVVjc1MwRkJSeXhEUVVGRExFTkJRVU03UVVGRGVrSXNjVUpCUVUwc1RVRkJUeXhEUVVGRExFbEJRVWNzUTBGQlJ5eExRVUZITEVOQlFVTXNRMEZCUXp0aFFVTXhRaXhEUVVGRE8xZEJRMFlzUzBGQlR6dEJRVU5PTEdWQlFVVXNRMEZCUlN4UlFVRlBMRU5CUVVNc1JVRkJTU3hWUVVGblFpeERRVUZITzBGRk5WSTNRaXh0UWtGQlV5eFZRVUZ2UWl4SFFVRkRPMEZCUVVjc2QwSkJRVzlDTEVkQlEyaEVMRTlCUVc5Q0xGVkJRVkVzVDBGQlR5eERRVUZITEU5QlFXdENPMEZCUXpORUxEQkNRVUZ0UXl4RlFVRkpMRlZCUVZFc1RVRkJiVUlzUTBGQlF6dEJRVUZCTEhGQ1JqSlNjRVVzVFVGQlR5eERRVUZETEVsQlFVY3NRMEZCUnl4TFFVRkhMRU5CUVVNc1EwRkJRenRCUVVONlFpeHhRa0ZCVFN4TlFVRlBMRU5CUVVNc1NVRkJSeXhEUVVGSExFdEJRVWNzUTBGQlF5eERRVUZETzJGQlF6RkNMRU5CUVVNN1YwRkRSanRCUVVGQkxGTkJRMFFzUlVGQlF5eERRVUZETzA5QlEwZzdTMEZEUkN4RFFVRkRMRU5CUVVNN1FVRkRSaXhSUVVGSExHOUNRVUZ4UWl4RFFVRkRMRTlCUVUwc1EwRkJSeXhSUVVGTkxFZEJRVWNzVTBGQlF5eEZRVUZETEVOQlFVY3NSMEZCUnl4SFFVRkRMRU5CUVUwN1FVRkRla1FzVVVGQlF5eExRVUZMTEUxQlFVOHNRMEZCUXl4RlFVRkRMRmRCUVZjc1EwRkJSU3hGUVVGRExFMUJRVTBzUTBGQlJ5eEhRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMHRCUTJoRUxFVkJRVU1zUTBGQlF6dEJRVU5HTEZGQlFVY3NiMEpCUVhGQ0xFTkJRVU1zVDBGQlRTeERRVUZITEZWQlFWRXNRMEZCUnl4WFFVRlRMRU5CUVVNc1EwRkJRenRCUVVONFJDeFJRVUZITEc5Q1FVRnhRaXhEUVVGRExFOUJRVTBzUTBGQlJ5eFRRVUZQTEVkQlFVY3NVMEZCUXl4RlFVRkRMRU5CUVVjc1IwRkJUVHRCUVVGRkxGRkJRVU1zVjBGQlZ5eERRVUZGTEVWQlFVTXNSVUZCU1N4WFFVRlRMRlZCUVZjc1EwRkJReXhSUVVGUExFTkJRVU03UzBGQlJTeEZRVUZETEVOQlFVTTdRVUZETjBjc1VVRkJSeXh2UWtGQmNVSXNRMEZCUXl4TFFVRkpMRU5CUVVjc1VVRkJUU3hIUVVGSExGTkJRVU1zUlVGQlF5eERRVUZITEVkQlFVY3NSMEZCUXl4RFFVRk5PMEZCUTNaRUxHOUNRVUZqTEVOQlFVTXNSVUZCUXl4WFFVRlhMRU5CUVVVc1JVRkJReXhOUVVGTkxFTkJRVWNzUjBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3cyUWtGQmRVSXNRMEZCUXl4RlFVRkRMRU5CUVVjc1IwRkJSeXhIUVVGRExFTkJRVU1zUTBGQlF6dExRVU51UXl4RlFVRkRMRU5CUVVNN1FVRkRSaXhSUVVGSExHOUNRVUZ4UWl4RFFVRkRMRk5CUVZFc1EwRkJSeXhSUVVGTkxFZEJRVWNzVTBGQlF5eEZRVUZETEVOQlFVY3NSMEZCUnl4SFFVRkRMRU5CUVUwN1FVRkRNMFFzYjBKQlFXTXNRMEZCUXl4RlFVRkRMRmRCUVZjc1EwRkJSU3hGUVVGRExFMUJRVTBzUTBGQlJ5eEhRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTJoRUxEWkNRVUYxUWl4RFFVRkRMRVZCUVVNc1EwRkJSeXhIUVVGSExFZEJRVU1zUTBGQlF5eERRVUZETzB0QlEyNURMRVZCUVVNc1EwRkJRenRCUVVsR0xFdEJRVU1zVTBGQlVTeERRVUZITEZOQlFVOHNRMEZCUnl4VFFVRlBMRU5CUVVNc1VVRkJVeXhGUVVGRExGTkJRVU1zVFVGQlN6dEJRVU0zUXl3MlFrRkJkVUlzUTBGQlF6dEJRVU4yUWl4WlFVRkhMRU5CUVVjc1QwRkJTenRCUVVOWUxHTkJRVXNzUTBGQlJ5eFJRVUZOTzBGQlEyUXNhVUpCUVZFc1IwRkJSeXhUUVVGRExFbEJRVWM3WjBKQlFVMHNSVUZCUXl4RFFVRkRPMEZCUVVVc1owSkJRVWNzUTBGQlJ5eFBRVUZMTzBGQlFVY3NhVUpCUVVrc1EwRkJSeXhMUVVGSExFTkJRVVVzUlVGQlF6dEJRVUZCTEZkQlFVVXNRMEZCUXl4RFFVRkhMRTlCUVVzc1EwRkJRenRUUVVGQk8wOUJRMnBGTEVOQlFVTXNRMEZCUXp0TFFVTklMRVZCUVVNc1EwRkJRenRCUVVsR0xGRkJRVWNzYTBKQlFXMUNMRU5CUVVNN1FVRkRkRUlzVlVGQlJ5eERRVUZITEZGQlFVMDdRVUZEV2l4cFFrRkJWU3hEUVVGSExGTkJRVk1zVFVGQlNTeERRVUZGTEV0QlFVa3NRMEZCUnp0QlFVTnNReXhuUWtGQlVTeERRVUZETEUxQlFVOHNaVUZCWVN4SlFVRk5MRmRCUVZNc1EwRkRNVU1zTkVaQlFUQkdMRU5CUVVNc1EwRkJRenRCUVVNNVJpeFpRVUZITEUxQlFVMHNSVUZCU1N4TlFVRkpMRU5CUVVNN1QwRkRia0k3UVVGRFFTeGhRVUZOTEVOQlFVNHNWVUZCVVN4SFFVRkZMRU5CUVVjc1UwRkJUenRCUVVOdVFpeHpRa0ZCWXl4RFFVRkRMRWRCUVVVc1EwRkJSU3hSUVVGUExFTkJRVU1zUTBGQlJ5eFJRVUZOTEVOQlFVTXNRMEZCUXp0QlFVTnNReXh0UWtGQlRTeEZRVUZKTEVsQlFVVXNRMEZCUlN4UlFVRlBMRU5CUVVNc1EwRkJRenRCUVVOMlFpeHRRa0ZCVFN4RlFVRkpMRXRCUVVjc1RVRkJUU3hEUVVGRE8wRkJRM2hDTEZkQlFVVXNRMEZCUlN4UlFVRlBMRU5CUVVNc1JVRkJTU3hWUVVGblFpeERRVUZITzBGRmVsVXpRaXhsUVVGVExGVkJRVzlDTEVkQlFVTTdRVUZCUnl4dlFrRkJiMElzUjBGRGFFUXNUMEZCYjBJc1ZVRkJVU3hQUVVGUExFTkJRVWNzVDBGQmEwSTdRVUZETTBRc2MwSkJRVzFETEVWQlFVa3NWVUZCVVN4TlFVRnRRaXhEUVVGRE8wRkJRVUVzWjBKR2QxVnlSU3hsUVVGakxFTkJRVU1zVDBGQlRTeE5RVUZQTEVOQlFVTXNTVUZCUnl4RFFVRkhMRXRCUVVjc1EwRkJReXhEUVVGRExFdEJRVTBzUTBGQlF5eFRRVUZWTEVOQlFVVTdRVUZEYWtVc2EwSkJRVThzVVVGQlRTeE5RVUZQTEVOQlFVTXNTVUZCUnl4RFFVRkhMRXRCUVVjc1EwRkJReXhEUVVGRE8xZEJRMnBETEV0QlFVMHNRMEZCUXl4SlFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMlFzUTBGQlF6dFBRVU5HTzB0QlEwUXNRMEZCUXl4RFFVRkRPMEZCUTBZc1VVRkJSeXh2UWtGQmNVSXNRMEZCUXl4UFFVRk5MRU5CUVVjc1ZVRkJVU3hEUVVGSExGZEJRVk1zUTBGQlF5eERRVUZETzBGQlEzaEVMRkZCUVVjc2IwSkJRWEZDTEVOQlFVTXNUMEZCVFN4RFFVRkhMRk5CUVU4c1EwRkJSeXhYUVVGVExFTkJRVU1zUTBGQlF6dEJRVU4yUkN4UlFVRkhMRzlDUVVGeFFpeERRVUZETEV0QlFVa3NRMEZCUnl4UlFVRk5MRWRCUVVjc1UwRkJReXhGUVVGRExFTkJRVWNzUjBGQlJ5eEhRVUZETEVOQlFVMDdRVUZEZGtRc2IwSkJRV01zUTBGQlF5eEZRVUZETEZkQlFWY3NRMEZCUlN4RlFVRkRMRTFCUVUwc1EwRkJSeXhSUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU12UXl3MlFrRkJkVUlzUTBGQlF5eEZRVUZETEVOQlFVY3NSMEZCUnl4SFFVRkRMRU5CUVVNc1EwRkJRenRMUVVOdVF5eEZRVUZETEVOQlFVTTdRVUZEUml4UlFVRkhMRzlDUVVGeFFpeERRVUZETEZOQlFWRXNRMEZCUnl4UlFVRk5MRWRCUVVjc1UwRkJReXhGUVVGRExFTkJRVWNzUjBGQlJ5eEhRVUZETEVOQlFVMDdRVUZETTBRc2IwSkJRV01zUTBGQlF5eEZRVUZETEZkQlFWY3NRMEZCUlN4RlFVRkRMRTFCUVUwc1EwRkJSeXhSUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU12UXl3MlFrRkJkVUlzUTBGQlF5eEZRVUZETEVOQlFVY3NSMEZCUnl4SFFVRkRMRU5CUVVNc1EwRkJRenRMUVVOdVF5eEZRVUZETEVOQlFVTTdRVUZEUml4UlFVRkhMRzlDUVVGeFFpeERRVUZETEZGQlFVOHNRMEZCUnl4UlFVRk5MRU5CUVVjc2QwSkJRWE5DTEVOQlFVTXNRMEZCUXp0QlFVTndSU3hSUVVGSExHOUNRVUZ4UWl4RFFVRkRMRTlCUVUwc1EwRkJSeXhUUVVGUExFTkJRVWNzZDBKQlFYTkNMRU5CUVVNc1EwRkJRenRCUVU5b1JTeGpRVUZMTEVWQlFVa3NTVUZCU1N4UlFVRlBMRVZCUVVNc1EwRkJRenRCUVVNeFFpeFpRVUZSTEVOQlFVTXNTVUZCUnl4RFFVRkhMRVZCUldRc1MwRkJTU3hEUVVGS0xGVkJRVTBzUTBGQlJUdEJRVUZGTEdOQlFVOHNUMEZCU3p0UFFVRkZMRU5CUTNwQ0xFTkJRVU1zUTBGQlF6dEJRVVZGTEhkQ1FVRmxMRVZCUVVrc1IwRkJReXhEUVVGRE8wRkJRM0pDTEN0Q1FVRnpRaXhGUVVGSkxFZEJRVU1zUTBGQlF6dEJRVU0xUWl3MFFrRkJiVUlzUlVGQlNTeE5RVUZKTEVOQlFVTTdRVUZGYUVNc1dVRkJVeXhyUWtGQlowSXNRMEZCUlN4VFFVRlJMRU5CUVVjc1UwRkJUeXhEUVVGSE8wRkJReTlETERCQ1FVRnRRaXhGUVVGSkxFdEJRVWNzUTBGQlF6dEJRVU16UWl4VlFVRkpMRkZCUVU4c1NVRkJUU3hMUVVGSExFTkJRVWM3UVVGRGRFSXNLMEpCUVhOQ0xFTkJRVVVzVTBGQlVTeERRVUZETEVWQlFVa3NTMEZCUnl4RFFVRkRPMDlCUXpGRExFdEJRVThzUzBGQlNTeFJRVUZQTEVsQlFVMHNUVUZCU1N4RFFVRkhMRWRCUlM5Q0xFdEJRVThzUzBGQlNTeG5Ra0ZCWlN4RFFVRkZMRk5CUVZFc1EwRkJReXhKUVVGTkxFdEJRVWNzUTBGQlJ6dEJRVU5vUkN4bFFVRlBMRU5CUVVNc1owSkJRV1VzUTBGQlJ5eFZRVUZSTEVOQlFVTXNTMEZCVFN4RFFVRkRMRkZCUVU4c1EwRkJReXhEUVVGRE8wOUJRM0JFTzBGQlFVRXNTMEZEUkR0QlFVVkJMRmxCUVZNc2EwSkJRV2RDTEVOQlFVVTdRVUZETVVJc1ZVRkJTU3h2UWtGQmJVSXNRMEZCUnp0QlFVTjZRaXcwUWtGQmJVSXNSVUZCU1N4TlFVRkpMRU5CUVVNN1FVRkRlRUlzTkVKQlFXVXNRMEZCUXp0QlFVTndRaXhWUVVGSE8wRkJRMFlzTUVKQlFXVXNSVUZCU1N4TlFVRkpMRU5CUVVNN1FVRkRlRUlzWjBKQlFVc3NWMEZCV1N4RlFVRkRMRk5CUVVNc1UwRkJVVHRCUVVNeFFpeG5Ra0ZCU1N4MVFrRkJjMElzUTBGQlJTeFRRVUZSTEVOQlFVTXNRMEZCUnp0QlFVRkZMSEZDUVVGTE8yRkJRVVU3UVVGRGFrUXNaMEpCUVVrc1lVRkJZU3hEUVVGRExHZENRVUZsTEVOQlFVVXNVMEZCVVN4RFFVRkRMRU5CUVVNc1EwRkJSenRCUVVGRkxIRkNRVUZMTzJGQlFVVTdRVUZEZWtRc1owSkJRVWtzWjBKQlFXVXNRMEZCUlN4VFFVRlJMRU5CUVVNc1MwRkJUU3hGUVVGRExGTkJRVU1zVVVGQlR6dHZRa0ZEZWtNc1UwRkJUeXhOUVVGUExFVkJRVU1zVTBGQlF5eFJRVUZQTzNOQ1FVTnlRaXgzUWtGQmMwSXNRMEZCUlN4UlFVRlBMRU5CUVVNN1pVRkJRU3hGUVVGRE8yRkJRVUVzUlVGQlF5eERRVUZITzBGQlF6RkRMSEZEUVVGelFpeERRVUZGTEZOQlFWRXNRMEZCUXl4RlFVRkpMRXRCUVVjc1EwRkJRenRCUVVONlF5dzRRa0ZCWlN4RlFVRkpMRXRCUVVjc1EwRkJRenRoUVVONFFqdEJRVUZCTEZkQlEwUXNSVUZCUXl4RFFVRkRPMU5CUTBnc1VVRkJVeXhuUWtGQlpTeEZRVUZGTzA5QlF6TkNPMEZCUVVFc1MwRkRSRHRCUVVsQkxGRkJRVWNzVFVGQlRTeEZRVUZKTEdOQlFXRXNRMEZCUXl4UlFVRlBMRU5CUVVVc1VVRkJUeXhEUVVGRExFMUJRVTBzUTBGQlJ5eFRRVUZUTEUxQlFVa3NRMEZCUlN4UFFVRk5MRU5CUVVjc1ZVRkJjMEk3VTBGQldDeFJRVUZOTERaRFFVRkpMRWRCUVVNN1FVRkZiRWNzWVVGQlRTeExRVUZOTEVOQlFVTXNTVUZCUnl4RFFVRkhMRkZCUVUwc1EwRkJReXhEUVVGRE8wRkJSek5DTEdOQlFWRXNRMEZCUXl4UFFVRk5MRmRCUVdFc1QwRkJTeXhEUVVNdlFpeDNRMEZCYzBNc1EwRkJReXhEUVVGRE8wRkJVVEZETEZsQlFVc3NhVUpCUVd0Q0xFTkJRVU1zU1VGQlJ5eERRVUZITzBGQlF6ZENMRmxCUVVjc1EwRkJSeXhGUVVGRkxFZEJRVVVzUTBGQlJpeFZRVUZKTEVOQlFVVTdRVUZCUlN4clFrRkJUeXhWUVVGUk8xZEJRVVVzUTBGQlJUdEJRVU51UXl3d1FrRkJhVUlzUTBGQlJ5eEZRVU51UWl4SFFVRkZMRU5CUVVZc1ZVRkJTU3hEUVVGRk8wRkJRMHdzWjBKQlFVa3NWMEZCVnl4RFFVRkRMRTlCUVUwc1EwRkJSU3h2UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVjN1FVRkRMME1zYjBKQlFVOHNSVUZCUXl4RFFVRkRMRTlCUVUwc1EwRkJSU3h2UWtGQmJVSXNRMEZCUXl4RFFVRkRPMkZCUTNaRExFdEJRVThzUzBGQlNTeFhRVUZYTEVOQlFVTXNUMEZCVFN4RFFVRkZMRlZCUVZNc1EwRkJReXhEUVVGRExFZEJRVXNzVVVGQlRTeERRVUZGTEZWQlFWTXNRMEZCUXl4UFFVRlBMRVZCUVVrc1IwRkJSenRCUVVNNVJTeHZRa0ZCVHl4TlFVRkpMRU5CUVVNN1lVRkRZaXhMUVVGUE8wRkJRMDRzYjBKQlFVOHNTMEZCUnl4RFFVRkRPMkZCUTFvN1FVRkJRU3hYUVVORUxFTkJRMFE3UVVGRFFTeG5Ra0ZCVHl4RFFVRkhMRVZCUTFRc1IwRkJSU3hEUVVGR0xGVkJRVWtzUTBGQlJUdEJRVU5NTERaQ1FVRnBRaXhGUVVGRExFTkJRVU03UVVGRGJrSXNhMEpCUVU4c1JVRkJReXhEUVVGRExIVkNRVUZ6UWl4RFFVRkZMRk5CUVZFc1EwRkJReXhEUVVGRE8xZEJRelZETEVOQlEwUTdRVUZEUVN4VlFVRkRMRU5CUVVjc1JVRkRTQ3hIUVVGRkxFTkJRVVlzVlVGQlNTeERRVUZGTzBGQlEwd3NaMEpCUVVrc1QwRkJUU3hEUVVGRkxFbEJRVWNzUTBGQlF5eEpRVUZOTEV0QlFVY3NSMEZCU3l4UlFVRk5MRU5CUVVVc1NVRkJSeXhEUVVGRExFbEJRVTBzVFVGQlNTeERRVUZITzBGQlEzUkVMRzlDUVVGUExGRkJRVTBzUTBGQlJTeEpRVUZITEVOQlFVTXNRMEZCUXp0aFFVTnlRaXhMUVVGUExFdEJRVWtzVDBGQlRTeERRVUZGTEVsQlFVY3NRMEZCUXl4SFFVRkxMRkZCUVUwc1EwRkJSU3hMUVVGSkxFTkJRVU1zUjBGQlN5eFJRVUZOTEVOQlFVVXNWVUZCVXl4RFFVRkRMRU5CUVVjN1FVRkRiRVVzYjBKQlFVOHNSMEZCUXl4UFFVRlJMRU5CUTJRc1QwRkJUU3hEUVVGRkxFbEJRVWNzUTBGQlF5eEhRVUZMTEVkQlFVTXNRMEZEYkVJc1VVRkJUU3hEUVVGRkxFdEJRVWtzUTBGQlF5eEhRVUZMTEVkQlFVTXNRMEZEYmtJc1VVRkJUU3hEUVVGRkxGVkJRVk1zUTBGQlF5eEhRVUZMTEVkQlFVTXNRMEZETVVJc1EwRkJRenRoUVVOR0xFdEJRVTg3UVVGRFRpeHZRa0ZCVHl4TlFVRkpMRU5CUVVNN1lVRkRZanRCUVVGQkxGZEJRMFFzUTBGRFJEdEJRVU5CTEdOQlFVc3NRMEZCUnl4RlFVTlFMRWRCUVVVc1EwRkJSaXhWUVVGSkxFTkJRVVU3UVVGRFRDeG5Ra0ZCU1N4UFFVRk5MRU5CUVVVc1VVRkJUeXhEUVVGRExFbEJRVTBzUzBGQlJ5eEhRVUZMTEZGQlFVMHNRMEZCUlN4UlFVRlBMRU5CUVVNc1NVRkJUU3hOUVVGSkxFTkJRVWM3UVVGRE9VUXNiMEpCUVU4c1VVRkJUU3hEUVVGRkxGRkJRVThzUTBGQlF5eERRVUZETzJGQlEzcENMRXRCUVU4c1MwRkJTU3hQUVVGTkxFTkJRVVVzVVVGQlR5eERRVUZETEVkQlFVc3NVVUZCVFN4RFFVRkZMRXRCUVVrc1EwRkJReXhIUVVGTExGRkJRVTBzUTBGQlJTeFRRVUZSTEVOQlFVTXNSMEZCVFN4UlFVRk5MRU5CUVVVc1ZVRkJVeXhEUVVGRExFTkJRVWM3UVVGRE4wWXNiMEpCUVU4c1IwRkJReXhQUVVGUkxFTkJRMlFzVDBGQlRTeERRVUZGTEZGQlFVOHNRMEZCUXl4SFFVRkxMRWRCUVVNc1EwRkRkRUlzVVVGQlRTeERRVUZGTEV0QlFVa3NRMEZCUXl4SFFVRkxMRWRCUVVNc1EwRkRia0lzVVVGQlRTeERRVUZGTEZOQlFWRXNRMEZCUXl4SFFVRkxMRWRCUVVNc1EwRkRka0lzVVVGQlRTeERRVUZGTEZWQlFWTXNRMEZCUXl4SFFVRkxMRWRCUVVNc1EwRkRNVUlzUTBGQlF6dGhRVU5HTEV0QlFVODdRVUZEVGl4dlFrRkJUeXhMUVVGSExFTkJRVU03WVVGRFdqdEJRVUZCTEZkQlEwUXNRMEZEUkR0QlFVTkJMRzlDUVVGWExFTkJRVWNzUlVGRFlpeEhRVUZGTEVOQlFVWXNWVUZCU1N4RFFVRkZPMEZCUTB3c2EwSkJRVThzUjBGQlF5eFBRVUZSTEVOQlEyUXNUMEZCVFN4RFFVRkZMR05CUVdFc1EwRkJReXhIUVVGTExFZEJRVU1zUTBGRE5VSXNVVUZCVFN4RFFVRkZMRk5CUVZFc1EwRkJReXhIUVVGTExFZEJRVU1zUTBGRGRrSXNVVUZCVFN4RFFVRkZMRlZCUVZNc1EwRkJReXhIUVVGTExFZEJRVU1zUTBGRGVFSXNVVUZCVFN4RFFVRkZMRlZCUVZNc1EwRkJReXhIUVVGTExFZEJRVU1zUTBGRE1VSXNRMEZCUXp0WFFVTkdMRU5CUTBRN1FVRkRRU3hsUVVGTkxFTkJRVWNzUlVGRFVpeEhRVUZGTEVOQlFVWXNWVUZCU1N4RFFVRkZPMEZCUTB3c2EwSkJRVThzUjBGQlF5eFBRVUZSTEVOQlEyUXNUMEZCVFN4RFFVRkZMRk5CUVZFc1EwRkJReXhIUVVGTExFZEJRVU1zUTBGRGRrSXNVVUZCVFN4RFFVRkZMRlZCUVZNc1EwRkJReXhIUVVGTExFZEJRVU1zUTBGRE1VSXNRMEZCUXp0WFFVTkdMRU5CUTBRN1FVRkJRU3hQUVVORUxFTkJRVU1zUTBGQlF6dEJRVWRHTERCQ1FVRnRRaXhGUVVGSkxFdEJRVWNzUTBGQlF6dEJRVU16UWl4VlFVRkpMRmRCUVZjc1EwRkJReXhKUVVGSExFZEJRVWNzUTBGQlF5eERRVUZITzBGQlFVVXNlVUpCUVdsQ0xFTkJRVU1zVTBGQlVTeERRVUZITEV0QlFVY3NSMEZCUnl4RFFVRkRPMDlCUVVVN1FVRkRiRVVzVlVGQlJ5eFJRVUZSTEZGQlFWTXNSVUZCUXl4VFFVRkRMR05CUVdFc1EwRkJUVHRCUVVONFF5eDVRa0ZCYVVJc1EwRkJReXhqUVVGaExFTkJRVWNzUlVGQlF5eFRRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMDlCUXk5RExFVkJRVU1zUTBGQlF6dEJRVWRHTEZsQlFVc3NWVUZCVnl4RFFVRkRMRk5CUVZFc1EwRkJSeXhMUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5xUXl4VlFVRkhMR0ZCUVdFc1VVRkJVeXhGUVVGRExGTkJRVU1zWTBGQllTeERRVUZOTzBGQlF6ZERMR05CUVVzc1YwRkJXU3hEUVVGRExHTkJRV0VzUTBGQlJ5eFZRVUZSTEVOQlFVTXNRMEZCUXp0UFFVTTNReXhGUVVGRExFTkJRVU03UVVGRFJpeGpRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRkxMRk5CUVZVc1JVRkJReXhIUVVONFFpeFpRVUZaTEVWQlFVTXNWVUZCVVN4RlFVRkRMR2RFUVVFNFF5eEZRVUZETEVOQlFVTTdTMEZGZWtVc1EwRkJReXhEUVVGRE8wRkJSMFlzV1VGQlVTeERRVUZETEVsQlFVY3NRMEZCUnp0QlFVVmtMRmxCUVVzc1EwRkJUQ3hWUVVGdFFqdEJSWEptVml4aFFVRlRMR2RDUVVGdlFpeEhRVUZETzBGQlFVY3NhMEpCUVc5Q0xFZEJRMmhFTEU5QlFXOUNMRlZCUVZFc1QwRkJUeXhEUVVGSExFOUJRV3RDTzBGQlF6TkVMREJDUVVGdFF5eEZRVUZKTEZWQlFWRXNUVUZCYlVJc1EwRkJRenRCUVVGQkxHdENSbTltY0VVc1VVRkJVeXhGUVVGRExGTkJRVU1zVTBGQlVTeERRVUZOTzBGQlEycERMREpDUVVGcFFpeERRVUZETEZOQlFWRXNRMEZCUnl4TFFVRkhMRU5CUVVNc1EwRkJRenRUUVVOdVF5eEZRVUZETEVOQlFVTTdUMEZEU0R0QlFVbEJMRkZCUVVNc1EwRkJSQ3hWUVVGSExFMUJRVXNzUTBGQlJ5eEpRVUZGTzBGQlIxSXNaVUZCUlN4RlFVRkpMRWRCUVVNc1EwRkJRenRCUVVOYUxGZEJRVVVzUTBGQlJTeE5RVUZMTEVOQlFVTXNSVUZCU1N4SlFVRkZMRU5CUVVNN1FVRkhha0lzZVVKQlFXbENMRVZCUVVNc1EwRkJRenRCUVVOdVFpeGpRVUZMTEZkQlFWa3NSVUZCUXl4VFFVRkRMRWxCUVVjc1EwRkJSeXhOUVVGSk8wRkJRelZDTEd0Q1FVRlJMRU5CUVVNc1EwRkJReXhMUVVGSkxGTkJRVk1zUjBGQlN5eE5RVUZKTEU5QlFVOHNTVUZCVFN4TFFVRkhMRWRCUVVzc1RVRkJTU3hQUVVGUExFMUJRVThzUlVGQlF5eFRRVUZETzJ0Q1FVRk5MRTlCUVVzc1dVRkJZU3hEUVVGRExFVkJRVU1zVTBGQlV6dFhRVUZCTEVWQlFVTXNSMEZETTBjc2JVTkJRVzFETEVWQlFVTXNUVUZCU1N4TFFVRkxMRVZCUVVNc2EwSkJRV2RDTEVWQlFVTXNRMEZCUXp0VFFVTnVSU3hGUVVGRExFTkJRVU03UVVGSFJpeGpRVUZMTEdOQlFXVXNSVUZCUXl4VFFVRkRMRWxCUVVjc1EwRkJSeXhOUVVGSkxFTkJRVTA3UVVGRGNrTXNZMEZCU1N4TFFVRkpMRk5CUVZNc1EwRkJSenRCUVVOdVFpeHBRa0ZCU1N4dFFrRkJiMElzUTBGQlF5eEhRVUZGTEVOQlFVY3NUMEZCU3l4RFFVRkRMRU5CUVVNN1YwRkRkRU03UVVGQlFTeFRRVU5FTEVWQlFVTXNRMEZCUXp0QlFVZEdMR05CUVU4c1NVRkJSU3hEUVVGRkxFMUJRVXNzUTBGQlF5eERRVUZETzA5QlJXNUNPMHRCUTBRc1EwRkJReXhEUVVGRE8wZEJSVWdzUTBGQlF5eERRVUZETzBGQlRVVXNiMEpCUVdFc1JVRkJTU3hMUVVGSExFTkJRVU03UVVGRGVrSXNWVUZCVVN4RFFVRkRMRlZCUVZNc1EwRkJSeXhGUVVOd1FpeDFRa0ZCYzBJc1EwRkJkRUlzVlVGQmQwSXNhVUpCUVdkQ0xFTkJRVWM3UVVGRE1VTXNiMEpCUVdFc1JVRkJTU3hyUWtGQlowSXNRMEZCUXp0TFFVTnVReXhEUVVORUxFTkJRVU1zUTBGQlF6dEJRVTlHTEZGQlFVOHNWMEZCVXl4RFFVRkRPMEZCUjJ4Q0xFVkJRVU1zSzBsQlFVTTdRVUZEUmpzN096czdPenM3UVVjNWFVSkJMR2RFT3pzN096czdiVU5EUVVFc2EwTkJRVThzVVVGQlF6dEJRVU5RTEdOQlFWY3NRMEZCUXp0QlFVVlNMRk5CUVVrN1FVRkhVQ3haUVVGUExFTkJRVkFzVlVGQlV5eFhRVUZWTEVOQlFVY3NWVUZCVVR0QlFVTTNRaXhsUVVGUkxFVkJRVWtzVlVGQlVTeEhRVUZMTEVkQlFVTXNRMEZCUXp0QlFVTjJRaXhoUVVGRkxFVkJRVWtzVlVGQlowSXNRMEZCUnp0QlJsQndRaXhoUVVGVExGVkJRVzlDTEVkQlFVTTdRVUZCUnl4clFrRkJiMElzUjBGRGFFUXNUMEZCYjBJc1ZVRkJVU3hQUVVGUExFTkJRVWNzVDBGQmEwSTdRVUZETTBRc2IwSkJRVzFETEVWQlFVa3NWVUZCVVN4TlFVRnRRaXhEUVVGRE8wRkJRVUVzYlVKRlRXNUZMRTFCUVU4c1EwRkJReXhKUVVGSExFTkJRVWNzUzBGQlJ5eERRVUZETEVOQlFVTTdUMEZET1VJc1EwRkJRenRCUVVORUxGTkJRVVVzVlVGQlZTeEZRVUZKTEZWQlFWRXNRMEZCUXp0QlFVTjZRaXhUUVVGRkxGVkJRVlVzV1VGQldTeEZRVUZKTEVsQlFVVXNRMEZCUXp0QlFVTXZRaXhaUVVGUExFbEJRVVVzUTBGQlF6dExRVU5ZTzBGQlIwRXNaVUZCVlN4RFFVRldMRlZCUVZrc1ZVRkJVeXhEUVVGSExGbEJRVlVzUTBGQlJ5eFZRVUZSTzBGQlF6VkRMR1ZCUVZFc1JVRkJTU3hWUVVGUkxFZEJRVXNzUjBGQlF5eERRVUZETzBGQlEzWkNMR0ZCUVVVc1JVRkJTU3hWUVVGblFpeERRVUZITzBGR2JFSndRaXhoUVVGVExGVkJRVzlDTEVkQlFVTTdRVUZCUnl4clFrRkJiMElzUjBGRGFFUXNUMEZCYjBJc1ZVRkJVU3hQUVVGUExFTkJRVWNzVDBGQmEwSTdRVUZETTBRc2IwSkJRVzFETEVWQlFVa3NWVUZCVVN4TlFVRnRRaXhEUVVGRE8wRkJRVUVzYlVKRmFVSnVSU3hOUVVGUExFTkJRVU1zU1VGQlJ5eERRVUZITEVWQlFVTXNWVUZCVXl4VlFVRlZMRmxCUVZrc1EwRkJReXhQUVVGUkxFTkJRVU1zU1VGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0UFFVTjZSU3hEUVVGRE8wRkJRMFFzVTBGQlJTeFZRVUZWTEVWQlFVa3NUMEZCU3l4UFFVRlJMRU5CUVVNc1ZVRkJVeXhWUVVGVkxFTkJRVWNzVlVGQlVTeERRVUZETEVOQlFVTTdRVUZET1VRc1UwRkJSU3hWUVVGVkxGbEJRVmtzUlVGQlNTeEpRVUZGTEVOQlFVTTdRVUZETDBJc1dVRkJUeXhKUVVGRkxFTkJRVU03UzBGRFdEdEJRVXRCTEZWQlFVc3NRMEZCVEN4VlFVRlBMRWxCUVZrN1FVZzNRbFFzVjBGQlV5eFZRVUZ2UWl4SFFVRkRPMEZCUVVjc2EwSkJRVzlETEVOQlEyaEZMRTlCUVc5Q0xGVkJRVkVzVDBGQlR5eERRVUZITEU5QlFXdENPMEZCUXpORUxHRkJRV3RDTEZGQlFXOURMRU5CUVVNc1JVRkJTU3hWUVVGUkxFMUJRVzFDTEVOQlFVTTdRVUZCUVN4VlJ6UkNMMFlzVVVGQlV5eEZRVUZETEZOQlFVTXNSMEZCUlN4RFFVRk5PMEZCUTNKQ0xHRkJRVk1zVDBGQlJTeEhRVUZMTEVsQlFVVXNRMEZCUnp0QlFVTndRaXhqUVVGSkxFZEJRVVVzWlVGQlowSXNRMEZCUXl4SFFVRkZMRU5CUVVNc1EwRkJSenRCUVVNMVFpeG5Ra0ZCUnl4RFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSkxFbEJRVVVzUTBGQlJTeEhRVUZGTEVOQlFVTXNRMEZCUXp0WFFVTnlRanRCUVVGQkxGTkJRMFE3UVVGQlFTeFBRVU5FTEVWQlFVTXNRMEZCUXp0QlFVTkdMRmxCUVU4c1MwRkJSeXhEUVVGRE8wdEJRMW83UVVGSlFTeFRRVUZKTEVOQlFVb3NWVUZCVFN4SFFVRkZMRU5CUVVjc1MwRkJSeXhEUVVGSE8wRkJRMmhDTEZWQlFVa3NZVUZCWVN4RFFVRkRMRWRCUVVVc1EwRkJSU3hKUVVGSExFTkJRVU1zUTBGQlF5eERRVUZITzBGQlFVVXNWMEZCUlN4RFFVRkZMRWxCUVVjc1EwRkJReXhGUVVGSkxFZEJRVU03VDBGQlJUdEJRVU12UXl4WlFVRlBMRWxCUVVVc1EwRkJSU3hKUVVGSExFTkJRVU1zUTBGQlF6dExRVU5xUWp0QlFVZEJMRk5CUVVrc1EwRkJTaXhWUVVGTkxFVkJRVU1zUTBGQlJ5eEpRVUZGTEVOQlFVY3NTMEZCUnl4RFFVRkhPMEZCUVVVc1dVRkJUeXhIUVVGRExFdEJRVXNzVFVGQlR5eERRVUZETEVWQlFVTXNRMEZCUnl4RlFVRkRMRWRCUVVVc1EwRkJReXhQUVVGUkxFTkJRVU1zU1VGQlJ5eERRVUZETEVOQlFVTTdTMEZCUlR0QlFVZHdSU3hSUVVGSExFTkJRVWdzVlVGQlN5eEhRVUZGTEVOQlFVY3NSVUZCVXl4RFFVRkhPMEZJYmtSYUxGZEJRVk1zVlVGQmIwSXNSMEZCUXp0QlFVRkhMR3RDUVVGdlF5eERRVU5vUlN4UFFVRnZRaXhWUVVGUkxFOUJRVThzUTBGQlJ5eFBRVUZyUWp0QlFVTXpSQ3hoUVVGclFpeFJRVUZ2UXl4RFFVRkRMRVZCUVVrc1ZVRkJVU3hOUVVGdFFpeERRVUZETzBGQlFVRXNXVWRwUkhCRkxGRkJRVThzUTBGQlF5eEhRVUZGTEVOQlFVVXNSVUZCUXl4RFFVRkhMRWxCUVVVc1EwRkJSeXhMUVVGSExFTkJRVU03UzBGQlJUdEJRVWt4UkN4dlFrRkJaU3hEUVVGbUxGVkJRV2xDTEdGQlFWa3NRMEZCUnl4TFFVRkhMRU5CUVVjN1FVRkRha01zTUVKQlFXVXNSVUZCU1N4alFVRlpMRXRCUVVzc1RVRkJUeXhEUVVGRExHRkJRVmtzUTBGQlJ5eEZRVUZETEVsQlFVY3NRMEZCUXl4UFFVRlJMRU5CUVVNc1NVRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU51Uml4WlFVRlBMRWxCUVVrc2FVSkJRV2RDTEVWQlFVTXNRMEZCUXp0TFFVTTVRanRCUVVsQkxGVkJRVXNzUTBGQlRDeFZRVUZQTEZOQlFWRXNRMEZCUnl4UlFVRk5MRU5CUVVjN1FVRkRNVUlzVlVGQlNTeERRVUZETEZOQlFWRXNRMEZCUnp0QlFVRkZMR0ZCUVUwc1NVRkJTU3hOUVVGTExFTkJRVU1zVDBGQlRTeEhRVUZMTEcxQ1FVRnBRaXhEUVVGRE8wOUJRVVU3UVVGQlFTeExRVU5zUlR0QlFVZEJMR1ZCUVZVc1EwRkJWaXhWUVVGWkxFZEJRVVVzUTBGQlJ6dEJRVUZGTEZsQlFVOHNUMEZCVHl4SlFVRkZMRWxCUVUwc1dVRkJWVHRMUVVGRk8wRkJSM0pFTEdGQlFWRXNRMEZCVWl4VlFVRlZMRWRCUVVVc1EwRkJSenRCUVVGRkxGbEJRVThzVDBGQlR5eEpRVUZGTEVsQlFVMHNXVUZCVlR0TFFVRkZPMEZCUVVFc1IwRkRjRVFzUTBGQlF6dEJRVVZFTEZGQlFVOHNSMEZCUXp0QlFVTlVMSGRLUVVGRk8wRkJRMFlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0Z2QyVmljR0ZqYTFWdWFYWmxjbk5oYkUxdlpIVnNaVVJsWm1sdWFYUnBiMjRvY205dmRDd2dabUZqZEc5eWVTa2dlMXh1WEhScFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY2dKaVlnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnSjI5aWFtVmpkQ2NwWEc1Y2RGeDBiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1ZV04wYjNKNUtISmxjWFZwY21Vb1hDSnFjeTFuY21Gd2FGd2lLU2s3WEc1Y2RHVnNjMlVnYVdZb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVXVZVzFrS1Z4dVhIUmNkR1JsWm1sdVpTaGJYQ0pxY3kxbmNtRndhRndpWFN3Z1ptRmpkRzl5ZVNrN1hHNWNkR1ZzYzJVZ2FXWW9kSGx3Wlc5bUlHVjRjRzl5ZEhNZ1BUMDlJQ2R2WW1wbFkzUW5LVnh1WEhSY2RHVjRjRzl5ZEhOYlhDSkVaV3gwWVUxdlpHVnNYQ0pkSUQwZ1ptRmpkRzl5ZVNoeVpYRjFhWEpsS0Z3aWFuTXRaM0poY0doY0lpa3BPMXh1WEhSbGJITmxYRzVjZEZ4MGNtOXZkRnRjSWtSbGJIUmhUVzlrWld4Y0lsMGdQU0JtWVdOMGIzSjVLSEp2YjNSYlhDSktjMGR5WVhCb1hDSmRLVHRjYm4wcEtIUm9hWE1zSUdaMWJtTjBhVzl1S0Y5ZlYwVkNVRUZEUzE5RldGUkZVazVCVEY5TlQwUlZURVZmTVY5ZktTQjdYRzV5WlhSMWNtNGdYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ2QyVmljR0ZqYXk5MWJtbDJaWEp6WVd4TmIyUjFiR1ZFWldacGJtbDBhVzl1WEc0Z0tpb3ZJaXdpSUZ4MEx5OGdWR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwZG1GeUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhNZ1BTQjdmVHRjYmx4dUlGeDBMeThnVkdobElISmxjWFZwY21VZ1puVnVZM1JwYjI1Y2JpQmNkR1oxYm1OMGFXOXVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvYlc5a2RXeGxTV1FwSUh0Y2JseHVJRngwWEhRdkx5QkRhR1ZqYXlCcFppQnRiMlIxYkdVZ2FYTWdhVzRnWTJGamFHVmNiaUJjZEZ4MGFXWW9hVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMHBYRzRnWEhSY2RGeDBjbVYwZFhKdUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtVjRjRzl5ZEhNN1hHNWNiaUJjZEZ4MEx5OGdRM0psWVhSbElHRWdibVYzSUcxdlpIVnNaU0FvWVc1a0lIQjFkQ0JwZENCcGJuUnZJSFJvWlNCallXTm9aU2xjYmlCY2RGeDBkbUZ5SUcxdlpIVnNaU0E5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkSUQwZ2UxeHVJRngwWEhSY2RHVjRjRzl5ZEhNNklIdDlMRnh1SUZ4MFhIUmNkR2xrT2lCdGIyUjFiR1ZKWkN4Y2JpQmNkRngwWEhSc2IyRmtaV1E2SUdaaGJITmxYRzRnWEhSY2RIMDdYRzVjYmlCY2RGeDBMeThnUlhobFkzVjBaU0IwYUdVZ2JXOWtkV3hsSUdaMWJtTjBhVzl1WEc0Z1hIUmNkRzF2WkhWc1pYTmJiVzlrZFd4bFNXUmRMbU5oYkd3b2JXOWtkV3hsTG1WNGNHOXlkSE1zSUcxdlpIVnNaU3dnYlc5a2RXeGxMbVY0Y0c5eWRITXNJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThwTzF4dVhHNGdYSFJjZEM4dklFWnNZV2NnZEdobElHMXZaSFZzWlNCaGN5QnNiMkZrWldSY2JpQmNkRngwYlc5a2RXeGxMbXh2WVdSbFpDQTlJSFJ5ZFdVN1hHNWNiaUJjZEZ4MEx5OGdVbVYwZFhKdUlIUm9aU0JsZUhCdmNuUnpJRzltSUhSb1pTQnRiMlIxYkdWY2JpQmNkRngwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVJRngwZlZ4dVhHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bGN5QnZZbXBsWTNRZ0tGOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOHBYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1WEc0Z1hIUXZMeUJsZUhCdmMyVWdkR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1aklEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdYMTkzWldKd1lXTnJYM0IxWW14cFkxOXdZWFJvWDE5Y2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y0NBOUlGd2lYQ0k3WEc1Y2JpQmNkQzh2SUV4dllXUWdaVzUwY25rZ2JXOWtkV3hsSUdGdVpDQnlaWFIxY200Z1pYaHdiM0owYzF4dUlGeDBjbVYwZFhKdUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9NQ2s3WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dkMlZpY0dGamF5OWliMjkwYzNSeVlYQWdaakk1TnpkallqaG1ORFppTnpJM1ptVTNNbVJjYmlBcUtpOGlMQ0prWldacGJtVW9XeWRxY3kxbmNtRndhQ2NzSUNjdUwyMXBjMk11YW5NblhTd2dablZ1WTNScGIyNGdLRXB6UjNKaGNHZ3NJRlVwSUh0Y2JseDBKM1Z6WlNCemRISnBZM1FuTzF4dVhHNWNibHgwTHk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4dVhHNWNkQzhxSUdOdmJuWmxibWxsYm1ObElHUmxabWx1YVhScGIyNXpJR1p2Y2lCMGFHVWdZWEJ3YkdsallYUnBiMjRnWVc1a0lHTnZiWEJ2YzJsMGFXOXVJR1oxYm1OMGFXOXVjeUJpWld4dmR5QXFMMXh1WEhSMllYSWdhMlZsY0VacGNuTjBJRDBnS0NrZ1BUNGdlMzA3WEc1Y2RIWmhjaUJyWldWd1UyVmpiMjVrSUQwZ0tHUXhMQ0J3TENCa01pa2dQVDRnZXlCa01TNXZjR1Z5WVhScGIyNXpXM0JkSUQwZ1pESWdmVHRjYmx4MGRtRnlJR0Z3Y0d4NVUyVmpiMjVrVkc5R2FYSnpkRlpoYkhWbElEMGdLR1F4TENCd0xDQmtNaWtnUFQ0Z2V5QmtNaTVoY0hCc2VWUnZLR1F4TG05d1pYSmhkR2x2Ym5OYmNGMHNJQ2QyWVd4MVpTY3BJSDA3WEc1Y2JseDBablZ1WTNScGIyNGdZWE56WlhKMFJuVnVZM1JwYjI0b2RtRnNMQ0J2Y0ZSNWNHVXBJSHRjYmx4MFhIUlZMbUZ6YzJWeWRDaDBlWEJsYjJZZ2RtRnNJRDA5UFNBblpuVnVZM1JwYjI0bkxGeHVYSFJjZEZ4MFhIUmdWR2hsSUc5d1pYSmhkR2x2YmlBbkpIdHZjRlI1Y0dWOUp5QmxlSEJsWTNSeklIUm9aU0J3Y205d1pYSjBlU0JwZENCaFkzUnpJRzl1SUhSdklHSmxJR0VnWm5WdVkzUnBiMjR1WUNrN1hHNWNkSDFjYmx4dVhIUm1kVzVqZEdsdmJpQmhjM05sY25SRVpXWnBibVZrS0haaGJDd2diM0JVZVhCbEtTQjdYRzVjZEZ4MFZTNWhjM05sY25Rb1ZTNXBjMFJsWm1sdVpXUW9kbUZzS1N4Y2JseDBYSFJjZEZ4MFlGUm9aU0J2Y0dWeVlYUnBiMjRnSnlSN2IzQlVlWEJsZlNjZ1pYaHdaV04wY3lCMGFHVWdjSEp2Y0dWeWRIa2dkRzhnWW1VZ1pHVm1hVzVsWkM1Z0tUdGNibHgwZlZ4dVhHNWNkR1oxYm1OMGFXOXVJR0Z6YzJWeWRGVnVaR1ZtYVc1bFpDaDJZV3dzSUc5d1ZIbHdaU2tnZTF4dVhIUmNkRlV1WVhOelpYSjBLRlV1YVhOVmJtUmxabWx1WldRb2RtRnNLU3hjYmx4MFhIUmNkRngwWUZSb1pTQnZjR1Z5WVhScGIyNGdKeVI3YjNCVWVYQmxmU2NnWlhod1pXTjBjeUIwYUdVZ2NISnZjR1Z5ZEhrZ2RHOGdZbVVnZFc1a1pXWnBibVZrTG1BcE8xeHVYSFI5WEc1Y2JseHVYSFF2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1WEc1Y2JseDBMeThnZEdobElHUmxiSFJoTFcxdlpHVnNJR05zWVhOekxDQjNhR2xqYUNCcGN5QjBhR1VnWTI5dWRHRnBibVZ5SUc5bUlHRnNiQ0J2Y0dWeVlYUnBiMjRnZEhsd1pYTXNYRzVjZEM4dklHRnNiQ0JrWld4MFlYTXNJSFJvWldseUlHOXlaR1Z5YVc1bklHRnVaQ0J5ZFd4bGMxeHVYSFIyWVhJZ1JHVnNkR0ZOYjJSbGJDQTlJRlV1Ym1WM1EyeGhjM01vWm5WdVkzUnBiMjRnS0NrZ2UxeHVYRzVjZEZ4MEx5OGdRV05qZFcxMWJHRjBaV1FnWkdGMFlTQm1iM0lnZEdobElHRjJZV2xzWVdKc1pTQmtaV3gwWVNCdmNHVnlZWFJwYjI0Z2RIbHdaWE5jYmx4MFhIUjJZWElnWDI5d1ZIbHdaWE1nUFNCN2ZUc2dMeThnZEdobElHNWhiV1VnWVc1a0lHUmxiSFJoSUdOc1lYTnpaWE5jYmx4MFhIUjJZWElnWDJOdmJYQnZjMlZHYm5NZ1BTQmJYVHNnTHk4Z2RHaGxJR05oYzJVZ1pHbHpkR2x1WTNScGIyNXpJRzltSUdSbGJIUmhJR052YlhCdmMybDBhVzl1WEc1Y2JseDBYSFJWTG1WNGRHVnVaQ2gwYUdsekxDQjdYRzVjYmx4MFhIUmNkQzh2SUdFZ1puVnVZM1JwYjI0Z2RHOGdablZzYkhrZ1pHVm1hVzVsSUdFZ2JtVjNJR1JsYkhSaElHOXdaWEpoZEdsdmJpQjBlWEJsWEc1Y2RGeDBYSFJmWVdSa1QzQmxjbUYwYVc5dVZIbHdaU2g3Ym1GdFpTd2dZMjl1YzNSeWRXTjBiM0lzSUdGd2NHeDVWRzhzSUhCeWIzUnZkSGx3WlN3Z2JXVjBhRzlrZlNrZ2UxeHVYSFJjZEZ4MFhIUXZMeUJrWldacGJtVWdkR2hsSUcxbGRHaHZaQ0JtYjNJZ1lXUmthVzVuSUhSb1pTQnVaWGNnYjNCbGNtRjBhVzl1SUhSdklHRWdUVzlrYVdaNUlHUmxiSFJoTGx4dVhIUmNkRngwWEhRdkx5QkpkQ0JwY3lCd2RYUWdiMjRnWVNCMFpXMXdiM0poY25rZ2IySnFaV04wWEc1Y2RGeDBYSFJjZEhaaGNpQnZZbXBsWTNSWGFYUm9UV1YwYUc5a0lEMGdlMzA3WEc1Y2JseDBYSFJjZEZ4MEx5OGdaR1ZtYVc1bElIUm9aU0J2Y0dWeVlYUnBiMjRnZEhsd1pWeHVYSFJjZEZ4MFhIUmZiM0JVZVhCbGMxdHVZVzFsWFNBOUlIdGNibHgwWEhSY2RGeDBYSFJ1WVcxbE9pQnVZVzFsTEZ4dVhIUmNkRngwWEhSY2RFUmxiSFJoT2lCamIyNXpkSEoxWTNSdmNpeGNibHgwWEhSY2RGeDBYSFJ0WlhSb2IyUTZJRzlpYW1WamRGZHBkR2hOWlhSb2IyUmJibUZ0WlYxY2JseDBYSFJjZEZ4MGZUdGNibHh1WEhSY2RGeDBYSFF2THlCa1pXWnBibVVnZEdobElITndaV05wWm1saklFUmxiSFJoSUdOc1lYTnpYRzVjZEZ4MFhIUmNkRlV1WlhoMFpXNWtLRjl2Y0ZSNWNHVnpXMjVoYldWZExrUmxiSFJoTG5CeWIzUnZkSGx3WlN3Z2NISnZkRzkwZVhCbExDQjdYRzVjZEZ4MFhIUmNkRngwWTI5dWMzUnlkV04wYjNJNklHTnZibk4wY25WamRHOXlMRnh1WEhSY2RGeDBYSFJjZEhSNWNHVTZJRzVoYldVc1hHNWNkRngwWEhSY2RGeDBZWEJ3YkhsVWJ6b2dZWEJ3YkhsVWIxeHVYSFJjZEZ4MFhIUjlLVHRjYmx4dVhIUmNkRngwWEhRdkx5QnRZV3RsSUhSb1pTQnZjR1Z5WVhScGIyNGdiV1YwYUc5a0lHRjJZV2xzWVdKc1pTQnZiaUIwYUdVZ0oyMXZaR2xtZVNjZ1pHVnNkR0ZjYmx4MFhIUmNkRngwTHk4Z0tHRnpjM1Z0WlhNZ2RHaGhkQ0FuYlc5a2FXWjVKeUJwY3lCMGFHVWdabWx5YzNRZ1pHVnNkR0VnZEhsd1pTQjBieUJpWlNCa1pXWnBibVZrS1Z4dVhIUmNkRngwWEhSZmIzQlVlWEJsYzFzbmJXOWthV1o1SjEwdVJHVnNkR0V1Y0hKdmRHOTBlWEJsVzI1aGJXVmRJRDFjYmx4MFhIUmNkRngwWEhSY2RGVXVhWE5FWldacGJtVmtLRzFsZEdodlpDa2dQeUJ0WlhSb2IyUWdPbHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR1oxYm1OMGFXOXVJQ2h3Y205d1pYSjBlU3dnTGk0dWRtRnNkV1Z6S1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjBhR2x6TGw5aFpHUlBjR1Z5WVhScGIyNG9YMjl3Vkhsd1pYTmJibUZ0WlYwc0lIQnliM0JsY25SNUxDQjJZV3gxWlhNcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwZlR0Y2JseHVYSFJjZEZ4MGZTeGNibHh1WEhSY2RGeDBMeThnWVNCbWRXNWpkR2x2YmlCMGJ5Qm5hWFpsSUdFZ2JtVjNJRzVoYldVZ2RHOGdLR0VnZG1GeWFXRjBhVzl1SUc5bUtTQmhiaUJsZUdsemRHbHVaeUJrWld4MFlTQnZjR1Z5WVhScGIyNGdkSGx3WlZ4dVhIUmNkRngwWDJGa1pFOXdaWEpoZEdsdmJrRnNhV0Z6S0h0dVlXMWxMQ0IwWVhKblpYUXNJSFJ5WVc1elptOXliWDBwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJrWldacGJtVWdkR2hsSUcxbGRHaHZaQ0JtYjNJZ1lXUmthVzVuSUhSb1pTQnVaWGNnYjNCbGNtRjBhVzl1SUhSdklHRWdUVzlrYVdaNUlHUmxiSFJoWEc1Y2RGeDBYSFJjZEhaaGNpQnZZbXBsWTNSWGFYUm9UV1YwYUc5a0lEMGdlMzA3WEc1Y2RGeDBYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZZbXBsWTNSWGFYUm9UV1YwYUc5a0xDQnVZVzFsTENCN1hHNWNkRngwWEhSY2RGeDBkbUZzZFdVb2NISnZjR1Z5ZEhrc0lDNHVMblpoYkhWbGN5a2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHaHBjeTVmWVdSa1QzQmxjbUYwYVc5dUtGOXZjRlI1Y0dWelczUmhjbWRsZEYwc0lIQnliM0JsY25SNUxDQjBjbUZ1YzJadmNtMG9kbUZzZFdWektTazdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgwcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUdSbFptbHVaU0IwYUdVZ2IzQmxjbUYwYVc5dUlIUjVjR1ZjYmx4MFhIUmNkRngwWDI5d1ZIbHdaWE5iYm1GdFpWMGdQU0I3WEc1Y2RGeDBYSFJjZEZ4MGJtRnRaVG9nYm1GdFpTeGNibHgwWEhSY2RGeDBYSFJ0WlhSb2IyUTZJRzlpYW1WamRGZHBkR2hOWlhSb2IyUmJibUZ0WlYxY2JseDBYSFJjZEZ4MGZUdGNibHh1WEhSY2RGeDBYSFF2THlCdFlXdGxJSFJvWlNCdmNHVnlZWFJwYjI0Z2JXVjBhRzlrSUdGMllXbHNZV0pzWlNCdmJpQjBhR1VnSjIxdlpHbG1lU2NnWkdWc2RHRWdLR0Z6YzNWdFpYTWdkR2hoZENBbmJXOWthV1o1SnlCcGN5QmtaV1pwYm1Wa0lHWnBjbk4wS1Z4dVhIUmNkRngwWEhSZmIzQlVlWEJsYzFzbmJXOWthV1o1SjEwdVJHVnNkR0V1Y0hKdmRHOTBlWEJsVzI1aGJXVmRJRDBnWDI5d1ZIbHdaWE5iYm1GdFpWMHViV1YwYUc5a08xeHVYRzVjZEZ4MFhIUjlMRnh1WEc1Y2RGeDBYSFF2THlCaElHWjFibU4wYVc5dUlIUnZJR0ZrWkNCaElHNWxkeUIyWVd4cFpDQmpZWE5sSUdScGMzUnBibU4wYVc5dUlHWnZjaUJrWld4MFlTQmpiMjF3YjNOcGRHbHZibHh1WEhSY2RGeDBYMkZrWkVOdmJYQnZjMmwwYVc5dVVuVnNaU2h2Y0RGVWVYQmxMQ0J2Y0RKVWVYQmxMQ0JqYjIxd2IzTmxSbTRwSUh0Y2JseDBYSFJjZEZ4MFgyTnZiWEJ2YzJWR2JuTXVjSFZ6YUNoN0lHOXdNVlI1Y0dVc0lHOXdNbFI1Y0dVc0lHTnZiWEJ2YzJWR2JpQjlLVHRjYmx4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEM4dklHZGxkQ0JoSUc1bGR5QmtaV3gwWVNCdlppQmhJR2RwZG1WdUlIUjVjR1VzSUdOdmJuTjBjblZqZEdWa0lIZHBkR2dnZEdobElHZHBkbVZ1SUhaaGJIVmxjMXh1WEhSY2RGeDBYMjVsZDBSbGJIUmhLSFI1Y0dVc0lDNHVMblpoYkhWbGN5a2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdWUzVoY0hCc2VVTnZibk4wY25WamRHOXlLRjl2Y0ZSNWNHVnpXM1I1Y0dWZExrUmxiSFJoTENCMllXeDFaWE1wTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBwTzF4dVhHNWNkRngwTHk4Z2RHaGxJRzF2WkdsbWVTQnZjR1Z5WVhScGIyNGdLRTFWVTFRZ1FrVWdWRWhGSUVaSlVsTlVJRTlRUlZKQlZFbFBUaUJVV1ZCRklGUlBJRUpGSUVSRlJrbE9SVVFwWEc1Y2RGeDBkbUZ5SUhSb2FYTkVUU0E5SUhSb2FYTTdYRzVjZEZ4MGRHaHBjeTVmWVdSa1QzQmxjbUYwYVc5dVZIbHdaU2g3WEc1Y2RGeDBYSFJ1WVcxbE9pQW5iVzlrYVdaNUp5eGNibHgwWEhSY2RHTnZibk4wY25WamRHOXlPaUJtZFc1amRHbHZiaUJOYjJScFpua29aR1ZzZEdGRVpYTmpjbWx3ZEdsdmJpQTlJSHQ5TENCdmNHVnlZWFJwYjI1eklEMGdlMzBwSUh0Y2JseDBYSFJjZEZ4MGRHaHBjeTV2Y0dWeVlYUnBiMjV6SUQwZ2IzQmxjbUYwYVc5dWN6dGNibHgwWEhSY2RGeDBMeThnY0hKdlkyVnpjeUJ3YjNOemFXSnNaU0JrWld4MFlTQmtaWE5qY21sd2RHbHZibHh1WEhSY2RGeDBYSFJQWW1wbFkzUXVhMlY1Y3loa1pXeDBZVVJsYzJOeWFYQjBhVzl1S1M1bWIzSkZZV05vS0NoclpYa3BJRDArSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnYldGMFkyZ2dQU0JyWlhrdWJXRjBZMmdvTDE0b1hGeDNLeWxjWEhNcktGdGNYSGRjWEM1ZEt5a2tMeWs3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLRzFoZEdOb0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSMllYSWdiM0JsY21GMGFXOXVJRDBnYldGMFkyaGJNVjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUjJZWElnY0hKdmNHVnlkSGtnUFNCdFlYUmphRnN5WFR0Y2JseDBYSFJjZEZ4MFhIUmNkRlV1WVhOelpYSjBLRzl3WlhKaGRHbHZiaUJwYmlCZmIzQlVlWEJsY3l4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSZ1NTQmtiMjRuZENCcmJtOTNJSFJvWlNBbkpIdHZjR1Z5WVhScGIyNTlKeUJ2Y0dWeVlYUnBiMjR1WUNrN1hHNWNkRngwWEhSY2RGeDBYSFIwYUdselcyOXdaWEpoZEdsdmJsMG9jSEp2Y0dWeWRIa3NJR1JsYkhSaFJHVnpZM0pwY0hScGIyNWJhMlY1WFNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEgwc1hHNWNkRngwWEhSaGNIQnNlVlJ2S0c5aWFpd2djSEp2Y0dWeWRIa3BJSHRjYmx4MFhIUmNkRngwYVdZZ0tGVXVhWE5FWldacGJtVmtLSEJ5YjNCbGNuUjVLU2tnZTF4dVhIUmNkRngwWEhSY2RDOHZJR2xtSUhSb1pTQndjbTl3WlhKMGVTQnBjeUJ3WVhOelpXUXNJR0Z3Y0d4NUlIUm9hWE1nWkdWc2RHRWdkRzhnWUc5aWFsdHdjbTl3WlhKMGVWMWdYRzVjZEZ4MFhIUmNkRngwVlM1aGMzTmxjblFvVlM1cGMwUmxabWx1WldRb2IySnFXM0J5YjNCbGNuUjVYU2tzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR0JVYUdVZ0oyMXZaR2xtZVNjZ2IzQmxjbUYwYVc5dUlHVjRjR1ZqZEhNZ2RHaGxJSEJ5YjNCbGNuUjVJSFJ2SUdKbElHRnNjbVZoWkhrZ1pHVm1hVzVsWkM1Z0tUdGNibHgwWEhSY2RGeDBYSFJQWW1wbFkzUXVhMlY1Y3loMGFHbHpMbTl3WlhKaGRHbHZibk1wTG1admNrVmhZMmdvS0hOMVlsQnliM0JsY25SNUtTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUjBhR2x6TG05d1pYSmhkR2x2Ym5OYmMzVmlVSEp2Y0dWeWRIbGRMbUZ3Y0d4NVZHOG9iMkpxVzNCeWIzQmxjblI1WFN3Z2MzVmlVSEp2Y0dWeWRIa3BPMXh1WEhSY2RGeDBYSFJjZEgwcE8xeHVYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkQzh2SUdsbUlIUm9aU0J3Y205d1pYSjBlU0JwY3lCdWIzUWdjR0Z6YzJWa0xDQmhjSEJzZVNCMGFHbHpJR1JsYkhSaElIUnZJR0J2WW1wZ1hHNWNkRngwWEhSY2RGeDBWUzVoYzNObGNuUW9WUzVwYzBSbFptbHVaV1FvYjJKcUtTeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFlGUm9aU0FuYlc5a2FXWjVKeUJ2Y0dWeVlYUnBiMjRnWlhod1pXTjBjeUIwYUdVZ2NISnZjR1Z5ZEhrZ2RHOGdZbVVnWVd4eVpXRmtlU0JrWldacGJtVmtMbUFwTzF4dVhIUmNkRngwWEhSY2RFOWlhbVZqZEM1clpYbHpLSFJvYVhNdWIzQmxjbUYwYVc5dWN5a3VabTl5UldGamFDZ29jM1ZpVUhKdmNHVnlkSGtwSUQwK0lIdGNibHgwWEhSY2RGeDBYSFJjZEhSb2FYTXViM0JsY21GMGFXOXVjMXR6ZFdKUWNtOXdaWEowZVYwdVlYQndiSGxVYnlodlltb3NJSE4xWWxCeWIzQmxjblI1S1R0Y2JseDBYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlN4Y2JseDBYSFJjZEhCeWIzUnZkSGx3WlRvZ2UxeHVYSFJjZEZ4MFhIUnpaV3hsWTNScGRtVnNlVUZ3Y0d4NVZHOG9iMkpxTENCemRXSlFjbTl3WlhKMGVTa2dlMXh1WEhSY2RGeDBYSFJjZEM4dklHbG1JSFJvWlNCd2NtOXdaWEowZVNCcGN5QnViM1FnY0dGemMyVmtMQ0JoY0hCc2VTQjBhR2x6SUdSbGJIUmhJSFJ2SUdCdlltcGdYRzVjZEZ4MFhIUmNkRngwVlM1aGMzTmxjblFvVlM1cGMwUmxabWx1WldRb2IySnFLU3hjYmx4MFhIUmNkRngwWEhSY2RGeDBZRlJvWlNBbmJXOWthV1o1SnlCdmNHVnlZWFJwYjI0Z1pYaHdaV04wY3lCMGFHVWdjSEp2Y0dWeWRIa2dkRzhnWW1VZ1lXeHlaV0ZrZVNCa1pXWnBibVZrTG1BcE8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNoVkxtbHpSR1ZtYVc1bFpDaDBhR2x6TG05d1pYSmhkR2x2Ym5OYmMzVmlVSEp2Y0dWeWRIbGRLU2tnZTF4dVhIUmNkRngwWEhSY2RGeDBkR2hwY3k1dmNHVnlZWFJwYjI1elczTjFZbEJ5YjNCbGNuUjVYUzVoY0hCc2VWUnZLRzlpYWl3Z2MzVmlVSEp2Y0dWeWRIa3BPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZTeGNibHgwWEhSY2RGeDBZMjl0Y0c5elpTaHdjbTl3WlhKMGVTd2diM0F5S1NCN1hHNWNkRngwWEhSY2RGeDBhV1lnS0ZVdWFYTlZibVJsWm1sdVpXUW9iM0F5S1NrZ2V5QnlaWFIxY200Z2RHaHBjeUI5WEc1Y2RGeDBYSFJjZEZ4MGRtRnlJR1p2ZFc1a1EyOXRjRzl6WlVadU8xeHVYSFJjZEZ4MFhIUmNkRjlqYjIxd2IzTmxSbTV6TG5OdmJXVW9LSHR2Y0RGVWVYQmxMQ0J2Y0RKVWVYQmxMQ0JqYjIxd2IzTmxSbTU5S1NBOVBpQjdYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9kR2hwY3k1dmNHVnlZWFJwYjI1elczQnliM0JsY25SNVhTNTBlWEJsSUQwOVBTQnZjREZVZVhCbElDWW1JRzl3TWk1MGVYQmxJRDA5UFNCdmNESlVlWEJsS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEdadmRXNWtRMjl0Y0c5elpVWnVJRDBnWTI5dGNHOXpaVVp1TzF4dVhIUmNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkSEoxWlR0Y2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOUtUdGNibHgwWEhSY2RGeDBYSFJwWmlBb1ptOTFibVJEYjIxd2IzTmxSbTRwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR1p2ZFc1a1EyOXRjRzl6WlVadUtIUm9hWE1zSUhCeWIzQmxjblI1TENCdmNESXBPMXh1WEhSY2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUjJZWElnWlhKeUlEMGdibVYzSUVWeWNtOXlLRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR0JaYjNVZ1kyRnVibTkwSUdadmJHeHZkeUJoSUNja2UzUm9hWE11YjNCbGNtRjBhVzl1YzF0d2NtOXdaWEowZVYwdWRIbHdaWDBuSUc5d1pYSmhkR2x2YmlCZ0lDdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmdkMmwwYUNCaElDY2tlMjl3TWk1MGVYQmxmU2NnYjNCbGNtRjBhVzl1SUc5dUlIUm9aU0J6WVcxbElIQnliM0JsY25SNUxtQmNibHgwWEhSY2RGeDBYSFJjZENrN1hHNWNkRngwWEhSY2RGeDBYSFJsY25JdWIzQXhJRDBnZEdocGN5NXZjR1Z5WVhScGIyNXpXM0J5YjNCbGNuUjVYUzUwZVhCbE8xeHVYSFJjZEZ4MFhIUmNkRngwWlhKeUxtOXdNaUE5SUc5d01pNTBlWEJsTzF4dVhIUmNkRngwWEhSY2RGeDBkR2h5YjNjZ1pYSnlPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZTeGNibHgwWEhSY2RGeDBYMkZrWkU5d1pYSmhkR2x2YmlodmNGUjVjR1VzSUhCeWIzQmxjblI1TENCMllXeDFaWE1wSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnWkc5MFNXNWtaWGdnUFNCd2NtOXdaWEowZVM1cGJtUmxlRTltS0NjdUp5azdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tHUnZkRWx1WkdWNElDRTlQU0F0TVNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwTHk4Z2RHaGxJSEJ5YjNCbGNuUjVJR2x6SUdFZ1pHOTBMWE5sY0dGeVlYUmxaQ0J3WVhSb095QnlaV04xY25OcGRtVnNlU0JqY21WaGRHVWdZU0J0YjJScFpua3RZMmhoYVc1Y2JseDBYSFJjZEZ4MFhIUmNkSFpoY2lCaFkzUjFZV3hRY205d1pYSjBlU0E5SUhCeWIzQmxjblI1TG5Oc2FXTmxLREFzSUdSdmRFbHVaR1Y0S1R0Y2JseDBYSFJjZEZ4MFhIUmNkSFpoY2lCeVpYTjBUMlpRY205d1pYSjBlU0E5SUhCeWIzQmxjblI1TG5Oc2FXTmxLR1J2ZEVsdVpHVjRJQ3NnTVNrN1hHNWNkRngwWEhSY2RGeDBYSFIyWVhJZ2JtVjNUVzlrYVdaNVJHVnNkR0VnUFNCMGFHbHpMbDloWkdSUGNHVnlZWFJwYjI0b1gyOXdWSGx3WlhOYkoyMXZaR2xtZVNkZExDQmhZM1IxWVd4UWNtOXdaWEowZVNrN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdibVYzVFc5a2FXWjVSR1ZzZEdGYmIzQlVlWEJsTG01aGJXVmRMbUZ3Y0d4NUtHNWxkMDF2WkdsbWVVUmxiSFJoTENCYmNtVnpkRTltVUhKdmNHVnlkSGxkTG1OdmJtTmhkQ2gyWVd4MVpYTXBLVHRjYmx4MFhIUmNkRngwWEhSOUlHVnNjMlVnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFF2THlCMGFHVWdjSEp2Y0dWeWRIa2dhWE1nWVNCemFXNW5iR1VnYm1GdFpUc2dZV1JrSUhSb1pTQnVaWGNnWkdWc2RHRWdaR2x5WldOMGJIbGNibHgwWEhSY2RGeDBYSFJjZEhaaGNpQmZibVYzUkdWc2RHRWdQU0IwYUdselJFMHVYMjVsZDBSbGJIUmhMbUZ3Y0d4NUtIUm9hWE5FVFN3Z1cyOXdWSGx3WlM1dVlXMWxYUzVqYjI1allYUW9kbUZzZFdWektTazdYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9kR2hwY3k1dmNHVnlZWFJwYjI1ekxtaGhjMDkzYmxCeWIzQmxjblI1S0hCeWIzQmxjblI1S1NBbUppQlZMbWx6UkdWbWFXNWxaQ2gwYUdsekxtOXdaWEpoZEdsdmJuTmJjSEp2Y0dWeWRIbGRLU2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFIwYUdsekxtTnZiWEJ2YzJVb2NISnZjR1Z5ZEhrc0lGOXVaWGRFWld4MFlTazdYRzVjZEZ4MFhIUmNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFIwYUdsekxtOXdaWEpoZEdsdmJuTmJjSEp2Y0dWeWRIbGRJRDBnWDI1bGQwUmxiSFJoTzF4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTXViM0JsY21GMGFXOXVjMXR3Y205d1pYSjBlVjA3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlMRnh1WEhSY2RGeDBiV1YwYUc5a0tIQnliM0JsY25SNUxDQmtaV3gwWVVSbGMyTnlhWEIwYVc5dUtTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TGw5aFpHUlBjR1Z5WVhScGIyNG9YMjl3Vkhsd1pYTmJKMjF2WkdsbWVTZGRMQ0J3Y205d1pYSjBlU3dnVzJSbGJIUmhSR1Z6WTNKcGNIUnBiMjVkS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseHVYRzVjZEZ4MEx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1WEc1Y2JseDBYSFIwYUdsekxsOWhaR1JQY0dWeVlYUnBiMjVVZVhCbEtIdGNibHgwWEhSY2RHNWhiV1U2SUNkaFpHUW5MRnh1WEhSY2RGeDBZMjl1YzNSeWRXTjBiM0k2SUdaMWJtTjBhVzl1SUVGa1pDaDJZV3gxWlNrZ2V5QjBhR2x6TG5aaGJIVmxJRDBnZG1Gc2RXVWdmU3hjYmx4MFhIUmNkR0Z3Y0d4NVZHOG9iMkpxTENCd2NtOXdaWEowZVNrZ2UxeHVYSFJjZEZ4MFhIUmhjM05sY25SVmJtUmxabWx1WldRb2IySnFXM0J5YjNCbGNuUjVYU3dnSjJGa1pDY3BPMXh1WEhSY2RGeDBYSFJ2WW1wYmNISnZjR1Z5ZEhsZElEMGdkR2hwY3k1MllXeDFaVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUlBjR1Z5WVhScGIyNVVlWEJsS0h0Y2JseDBYSFJjZEc1aGJXVTZJQ2R5WlhCc1lXTmxKeXhjYmx4MFhIUmNkR052Ym5OMGNuVmpkRzl5T2lCbWRXNWpkR2x2YmlCU1pYQnNZV05sS0haaGJIVmxLU0I3SUhSb2FYTXVkbUZzZFdVZ1BTQjJZV3gxWlNCOUxGeHVYSFJjZEZ4MFlYQndiSGxVYnlodlltb3NJSEJ5YjNCbGNuUjVLU0I3WEc1Y2RGeDBYSFJjZEdGemMyVnlkRVJsWm1sdVpXUW9iMkpxVzNCeWIzQmxjblI1WFN3Z0ozSmxjR3hoWTJVbktUdGNibHgwWEhSY2RGeDBiMkpxVzNCeWIzQmxjblI1WFNBOUlIUm9hWE11ZG1Gc2RXVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTazdYRzVjZEZ4MGRHaHBjeTVmWVdSa1QzQmxjbUYwYVc5dVZIbHdaU2g3SUM4dklGUlBSRTg2SUdSdlkzVnRaVzUwSUhSb2FYTWdiM0JsY21GMGFXOXVYRzVjZEZ4MFhIUnVZVzFsT2lBbmNtVndiR0ZqWlVGeWIzVnVaQ2NzWEc1Y2RGeDBYSFJqYjI1emRISjFZM1J2Y2pvZ1puVnVZM1JwYjI0Z1VtVndiR0ZqWlVGeWIzVnVaQ2gyWVd4MVpTa2dleUIwYUdsekxuWmhiSFZsSUQwZ2RtRnNkV1VnZlN4Y2JseDBYSFJjZEdGd2NHeDVWRzhvYjJKcUxDQndjbTl3WlhKMGVTa2dlMXh1WEhSY2RGeDBYSFJoYzNObGNuUkVaV1pwYm1Wa0tHOWlhbHR3Y205d1pYSjBlVjBzSUNkeVpYQnNZV05sUVhKdmRXNWtKeWs3WEc1Y2RGeDBYSFJjZEc5aWFsdHdjbTl3WlhKMGVWMGdQU0IwYUdsekxuWmhiSFZsS0c5aWFsdHdjbTl3WlhKMGVWMHBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEhSY2RIUm9hWE11WDJGa1pFOXdaWEpoZEdsdmJsUjVjR1VvZTF4dVhIUmNkRngwYm1GdFpUb2dKM0psYlc5MlpTY3NYRzVjZEZ4MFhIUmpiMjV6ZEhKMVkzUnZjam9nWm5WdVkzUnBiMjRnVW1WdGIzWmxLQ2tnZTMwc1hHNWNkRngwWEhSaGNIQnNlVlJ2S0c5aWFpd2djSEp2Y0dWeWRIa3BJSHRjYmx4MFhIUmNkRngwWVhOelpYSjBSR1ZtYVc1bFpDaHZZbXBiY0hKdmNHVnlkSGxkTENBbmNtVnRiM1psSnlrN1hHNWNkRngwWEhSY2RHUmxiR1YwWlNCdlltcGJjSEp2Y0dWeWRIbGRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEhSY2RIUm9hWE11WDJGa1pFOXdaWEpoZEdsdmJsUjVjR1VvZTF4dVhIUmNkRngwYm1GdFpUb2dKMlp2Y21KcFpDY3NYRzVjZEZ4MFhIUmpiMjV6ZEhKMVkzUnZjam9nWm5WdVkzUnBiMjRnUm05eVltbGtLQ2tnZTMwc1hHNWNkRngwWEhSaGNIQnNlVlJ2S0c5aWFpd2djSEp2Y0dWeWRIa3BJSHNnWVhOelpYSjBWVzVrWldacGJtVmtLRzlpYWx0d2NtOXdaWEowZVYwc0lDZG1iM0ppYVdRbktTQjlYRzVjZEZ4MGZTazdYRzVjYmx4dVhIUmNkQzh2SUdOdmJYQnZjMmwwYVc5dUlHOW1JSFJvWlNCemRHRnVaR0Z5WkNCdmNHVnlZWFJwYjI0Z2RIbHdaWE5jYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0oyRmtaQ2NzSUNkeVpYQnNZV05sSnl3Z0tHUXhMQ0J3TENCa01pa2dQVDRnZXlCa01TNXZjR1Z5WVhScGIyNXpXM0JkSUQwZ1JHVnNkR0ZOYjJSbGJDNWZibVYzUkdWc2RHRW9KMkZrWkNjc0lHUXlMblpoYkhWbEtTQjlLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0oyRmtaQ2NzSUNkdGIyUnBabmtuTENCaGNIQnNlVk5sWTI5dVpGUnZSbWx5YzNSV1lXeDFaU2s3WEc1Y2RGeDBkR2hwY3k1ZllXUmtRMjl0Y0c5emFYUnBiMjVTZFd4bEtDZGhaR1FuTENBbmNtVnRiM1psSnl3Z0tHUXhMQ0J3S1NBOVBpQjdJR1F4TG05d1pYSmhkR2x2Ym5OYmNGMGdQU0JFWld4MFlVMXZaR1ZzTGw5dVpYZEVaV3gwWVNnblptOXlZbWxrSnlrZ2ZTazdYRzVjZEZ4MGRHaHBjeTVmWVdSa1EyOXRjRzl6YVhScGIyNVNkV3hsS0NkeVpYQnNZV05sSnl3Z0ozSmxjR3hoWTJVbkxDQnJaV1Z3VTJWamIyNWtLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0ozSmxjR3hoWTJVbkxDQW5iVzlrYVdaNUp5d2dZWEJ3YkhsVFpXTnZibVJVYjBacGNuTjBWbUZzZFdVcE8xeHVYSFJjZEhSb2FYTXVYMkZrWkVOdmJYQnZjMmwwYVc5dVVuVnNaU2duY21Wd2JHRmpaU2NzSUNkeVpXMXZkbVVuTENCclpXVndVMlZqYjI1a0tUdGNibHh1WEhSY2RDOHZkR2hwY3k1ZllXUmtRMjl0Y0c5emFYUnBiMjVTZFd4bEtDZGhaR1FuTENBbmNtVndiR0ZqWlVGeWIzVnVaQ2NzSUdGd2NHeDVVMlZqYjI1a1ZHOUdhWEp6ZEZaaGJIVmxLVHNnTHk4Z2RHOXZJSFJ5YVdOcmVTQnlhV2RvZENCdWIzYzdJRzExYzNRZ2NtVm1ZV04wYjNKY2JseDBYSFF2TDNSb2FYTXVYMkZrWkVOdmJYQnZjMmwwYVc5dVVuVnNaU2duY21Wd2JHRmpaVUZ5YjNWdVpDY3NJQ2R5WlhCc1lXTmxKeXdnYTJWbGNGTmxZMjl1WkNrN1hHNWNkRngwTHk5MGFHbHpMbDloWkdSRGIyMXdiM05wZEdsdmJsSjFiR1VvSjNKbGNHeGhZMlZCY205MWJtUW5MQ0FuYlc5a2FXWjVKeXdnWVhCd2JIbFRaV052Ym1SVWIwWnBjbk4wVm1Gc2RXVXBPMXh1WEhSY2RDOHZkR2hwY3k1ZllXUmtRMjl0Y0c5emFYUnBiMjVTZFd4bEtDZHlaWEJzWVdObFFYSnZkVzVrSnl3Z0ozSmxiVzkyWlNjc0lHdGxaWEJUWldOdmJtUXBPMXh1WEhSY2RDOHZkR2hwY3k1ZllXUmtRMjl0Y0c5emFYUnBiMjVTZFd4bEtDZHlaWEJzWVdObFFYSnZkVzVrSnl3Z0ozSmxjR3hoWTJWQmNtOTFibVFuTENCclpXVndVMlZqYjI1a0tUdGNibHh1WEhSY2RIUm9hWE11WDJGa1pFTnZiWEJ2YzJsMGFXOXVVblZzWlNnbmJXOWthV1o1Snl3Z0ozSmxjR3hoWTJVbkxDQnJaV1Z3VTJWamIyNWtLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0oyMXZaR2xtZVNjc0lDZHRiMlJwWm5rbkxDQW9aREVzSUhBc0lHUXlLU0E5UGlCN1hHNWNkRngwWEhSUFltcGxZM1F1YTJWNWN5aGtNaTV2Y0dWeVlYUnBiMjV6S1M1bWIzSkZZV05vS0Nod2NtOXdLU0E5UGlCN1hHNWNkRngwWEhSY2RHUXhMbU52YlhCdmMyVW9jSEp2Y0N3Z1pESXViM0JsY21GMGFXOXVjMXR3Y205d1hTazdYRzVjZEZ4MFhIUjlLVHRjYmx4MFhIUjlLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0oyMXZaR2xtZVNjc0lDZHlaVzF2ZG1VbkxDQnJaV1Z3VTJWamIyNWtLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0ozSmxiVzkyWlNjc0lDZGhaR1FuTENBb1pERXNJSEFzSUdReUtTQTlQaUI3SUdReExtOXdaWEpoZEdsdmJuTmJjRjBnUFNCRVpXeDBZVTF2WkdWc0xsOXVaWGRFWld4MFlTZ25jbVZ3YkdGalpTY3NJR1F5TG5aaGJIVmxLU0I5S1R0Y2JseDBYSFIwYUdsekxsOWhaR1JEYjIxd2IzTnBkR2x2YmxKMWJHVW9KM0psYlc5MlpTY3NJQ2RtYjNKaWFXUW5MQ0JyWldWd1JtbHljM1FwTzF4dVhIUmNkSFJvYVhNdVgyRmtaRU52YlhCdmMybDBhVzl1VW5Wc1pTZ25abTl5WW1sa0p5d2dKMkZrWkNjc0lHdGxaWEJUWldOdmJtUXBPMXh1WEhSY2RIUm9hWE11WDJGa1pFTnZiWEJ2YzJsMGFXOXVVblZzWlNnblptOXlZbWxrSnl3Z0oyWnZjbUpwWkNjc0lHdGxaWEJHYVhKemRDazdYRzVjYmx4dVhIUmNkQzh2SUNkaGJIUmxjaWNnYjNCbGNtRjBhVzl1SUhSNWNHVmNibHgwWEhSMGFHbHpMbDloWkdSUGNHVnlZWFJwYjI1VWVYQmxLSHRjYmx4MFhIUmNkRzVoYldVNklDZGhiSFJsY2ljc1hHNWNkRngwWEhSamIyNXpkSEoxWTNSdmNqb2dablZ1WTNScGIyNGdRV3gwWlhJb2RtRnNkV1VzSUdGc2FXRnpLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVkbUZzZFdVZ1BTQjJZV3gxWlNCOGZDQmJYVHRjYmx4MFhIUmNkRngwZEdocGN5NWhiR2xoY3lBOUlHRnNhV0Z6SUh4OElDZGhiSFJsY2ljN1hHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MFlYQndiSGxVYnlodlltb3NJSEJ5YjNCbGNuUjVLU0I3WEc1Y2RGeDBYSFJjZEdGemMyVnlkRVoxYm1OMGFXOXVLRzlpYWx0d2NtOXdaWEowZVYwc0lIUm9hWE11WVd4cFlYTXBPMXh1WEhSY2RGeDBYSFIwYUdsekxuWmhiSFZsTG1admNrVmhZMmdvS0hOMVlrOXdLU0E5UGlCN1hHNWNkRngwWEhSY2RGeDBkbUZ5SUhCaGNuUlBibVVnUFNCdlltcGJjSEp2Y0dWeWRIbGRPMXh1WEhSY2RGeDBYSFJjZEhaaGNpQndZWEowVkhkdklEMGdjM1ZpVDNBdWRtRnNkV1U3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLSE4xWWs5d0xuUjVjR1VnUFQwOUlDZHdjbVZ3Wlc1a0p5a2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGIySnFXM0J5YjNCbGNuUjVYU0E5SUdaMWJtTjBhVzl1SUNndUxpNWhjbWR6S1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhCaGNuUlVkMjh1WVhCd2JIa29kR2hwY3l3Z1lYSm5jeWs3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEJoY25SUGJtVXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmN5azdYRzVjZEZ4MFhIUmNkRngwWEhSOU8xeHVYSFJjZEZ4MFhIUmNkSDBnWld4elpTQjdJQzhxSUNkaGNIQmxibVFuSUc5eUlDZHBibk5sY25RbklDb3ZYRzVjZEZ4MFhIUmNkRngwWEhSdlltcGJjSEp2Y0dWeWRIbGRJRDBnWm5WdVkzUnBiMjRnS0M0dUxtRnlaM01wSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwY0dGeWRFOXVaUzVoY0hCc2VTaDBhR2x6TENCaGNtZHpLVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjR0Z5ZEZSM2J5NWhjSEJzZVNoMGFHbHpMQ0JoY21kektUdGNibHgwWEhSY2RGeDBYSFJjZEgwN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseDBYSFIwYUdsekxsOWhaR1JEYjIxd2IzTnBkR2x2YmxKMWJHVW9KMkZzZEdWeUp5d2dKMkZzZEdWeUp5d2dLR1F4TENCd0xDQmtNaWtnUFQ0Z2UxeHVYSFJjZEZ4MFcxMHVjSFZ6YUM1aGNIQnNlU2hrTVM1dmNHVnlZWFJwYjI1elczQmRMblpoYkhWbExDQmtNaTUyWVd4MVpTazdYRzVjZEZ4MGZTazdYRzVjZEZ4MGRHaHBjeTVmWVdSa1EyOXRjRzl6YVhScGIyNVNkV3hsS0NkaGJIUmxjaWNzSUNkeVpYQnNZV05sSnl3Z2EyVmxjRk5sWTI5dVpDazdYRzVjZEZ4MGRHaHBjeTVmWVdSa1EyOXRjRzl6YVhScGIyNVNkV3hsS0NkaGJIUmxjaWNzSUNkeVpXMXZkbVVuTENBb1pERXNJSEFwSUQwK0lIc2daREV1YjNCbGNtRjBhVzl1YzF0d1hTQTlJRVJsYkhSaFRXOWtaV3d1WDI1bGQwUmxiSFJoS0NkbWIzSmlhV1FuS1NCOUtUdGNibHgwWEhSMGFHbHpMbDloWkdSRGIyMXdiM05wZEdsdmJsSjFiR1VvSjJGa1pDY3NJQ2RoYkhSbGNpY3NJQ2hrTVN3Z2NDd2daRElwSUQwK0lIdGNibHgwWEhSY2RHRnpjMlZ5ZEVaMWJtTjBhVzl1S0dReExtOXdaWEpoZEdsdmJuTmJjRjB1ZG1Gc2RXVXNJR1F5TG1Gc2FXRnpLVHRjYmx4MFhIUmNkR0Z3Y0d4NVUyVmpiMjVrVkc5R2FYSnpkRlpoYkhWbEtHUXhMQ0J3TENCa01pazdYRzVjZEZ4MGZTazdYRzVjZEZ4MGRHaHBjeTVmWVdSa1EyOXRjRzl6YVhScGIyNVNkV3hsS0NkeVpYQnNZV05sSnl3Z0oyRnNkR1Z5Snl3Z0tHUXhMQ0J3TENCa01pa2dQVDRnZTF4dVhIUmNkRngwWVhOelpYSjBSblZ1WTNScGIyNG9aREV1YjNCbGNtRjBhVzl1YzF0d1hTNTJZV3gxWlN3Z1pESXVZV3hwWVhNcE8xeHVYSFJjZEZ4MFlYQndiSGxUWldOdmJtUlViMFpwY25OMFZtRnNkV1VvWkRFc0lIQXNJR1F5S1R0Y2JseDBYSFI5S1R0Y2JseHVYRzVjZEZ4MEx5OGdkR2hsSUNkd2NtVndaVzVrSnl3Z0oybHVjMlZ5ZENjZ1lXNWtJQ2RoY0hCbGJtUW5JRzl3WlhKaGRHbHZiaUIwZVhCbElHRnNhV0Z6WlhOY2JseDBYSFJiSjNCeVpYQmxibVFuTENBbmFXNXpaWEowSnl3Z0oyRndjR1Z1WkNkZExtWnZja1ZoWTJnb0tHOXdWSGx3WlNrZ1BUNGdlMXh1WEhSY2RGeDBkR2hwY3k1ZllXUmtUM0JsY21GMGFXOXVRV3hwWVhNb2UxeHVYSFJjZEZ4MFhIUnVZVzFsT2lCdmNGUjVjR1VzWEc1Y2RGeDBYSFJjZEhSaGNtZGxkRG9nSjJGc2RHVnlKeXhjYmx4MFhIUmNkRngwZEhKaGJuTm1iM0p0T2lBb1lYSm5jeWtnUFQ0Z1cxdDdJSFI1Y0dVNklHOXdWSGx3WlN3Z2RtRnNkV1U2SUdGeVozTmJNRjBnZlYwc0lHOXdWSGx3WlYxY2JseDBYSFJjZEgwcE8xeHVYSFJjZEgwcE8xeHVYRzVjYmx4MFhIUXZMeUFuWVdaMFpYSW5JRzl3WlhKaGRHbHZiaUIwZVhCbFhHNWNkRngwZEdocGN5NWZZV1JrVDNCbGNtRjBhVzl1Vkhsd1pTaDdYRzVjZEZ4MFhIUnVZVzFsT2lBbllXWjBaWEluTEZ4dVhIUmNkRngwWTI5dWMzUnlkV04wYjNJNklHWjFibU4wYVc5dUlFRm1kR1Z5S0haaGJIVmxLU0I3WEc1Y2RGeDBYSFJjZEZVdVlYTnpaWEowS0hSNWNHVnZaaUJ5WlhOdmJIWmxVSEp2YldselpTQTlQVDBnSjJaMWJtTjBhVzl1Snl4Y2JseDBYSFJjZEZ4MFhIUmNkR0JDWldadmNtVWdZM0psWVhScGJtY2dZVzRnSjJGbWRHVnlKeUJ2Y0dWeVlYUnBiMjRzSUhsdmRTQnRkWE4wSUhKbFoybHpkR1Z5SUdFZ2NISnZiV2x6WlNCeVpYTnZiSFpsY2lCM2FYUm9JR1JsYkhSaExtcHpMbUFwTzF4dVhIUmNkRngwWEhSMGFHbHpMblpoYkhWbElEMGdkbUZzZFdVN1hHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MFlYQndiSGxVYnlodlltb3NJSEJ5YjNCbGNuUjVLU0I3WEc1Y2RGeDBYSFJjZEdGemMyVnlkRVoxYm1OMGFXOXVLRzlpYWx0d2NtOXdaWEowZVYwc0lDZGhablJsY2ljcE8xeHVYSFJjZEZ4MFhIUjJZWElnY0dGeWRFOXVaU0E5SUc5aWFsdHdjbTl3WlhKMGVWMDdYRzVjZEZ4MFhIUmNkSFpoY2lCd1lYSjBWSGR2SUQwZ2RHaHBjeTUyWVd4MVpUdGNibHgwWEhSY2RGeDBiMkpxVzNCeWIzQmxjblI1WFNBOUlHWjFibU4wYVc5dUlDZ3VMaTVoY21kektTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJSEpsYzI5c2RtVlFjbTl0YVhObEtIQmhjblJQYm1VdVlYQndiSGtvZEdocGN5d2dZWEpuY3lrcExuUm9aVzRvWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJSEJoY25SVWQyOHVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmN5azdYRzVjZEZ4MFhIUmNkRngwZlM1aWFXNWtLSFJvYVhNcEtUdGNibHgwWEhSY2RGeDBmVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0oyRm1kR1Z5Snl3Z0ozSmxjR3hoWTJVbkxDQnJaV1Z3VTJWamIyNWtLVHRjYmx4MFhIUjBhR2x6TGw5aFpHUkRiMjF3YjNOcGRHbHZibEoxYkdVb0oyRm1kR1Z5Snl3Z0ozSmxiVzkyWlNjc0lHdGxaWEJUWldOdmJtUXBPMXh1WEhSY2RIUm9hWE11WDJGa1pFTnZiWEJ2YzJsMGFXOXVVblZzWlNnbllXUmtKeXdnSjJGbWRHVnlKeXdnS0dReExDQndMQ0JrTWlrZ1BUNGdlMXh1WEhSY2RGeDBZWE56WlhKMFJuVnVZM1JwYjI0b1pERXViM0JsY21GMGFXOXVjMXR3WFM1MllXeDFaU3dnSjJGbWRHVnlKeWs3WEc1Y2RGeDBYSFJoY0hCc2VWTmxZMjl1WkZSdlJtbHljM1JXWVd4MVpTaGtNU3dnY0N3Z1pESXBPMXh1WEhSY2RIMHBPMXh1WEhSY2RIUm9hWE11WDJGa1pFTnZiWEJ2YzJsMGFXOXVVblZzWlNnbmNtVndiR0ZqWlNjc0lDZGhablJsY2ljc0lDaGtNU3dnY0N3Z1pESXBJRDArSUh0Y2JseDBYSFJjZEdGemMyVnlkRVoxYm1OMGFXOXVLR1F4TG05d1pYSmhkR2x2Ym5OYmNGMHVkbUZzZFdVc0lDZGhablJsY2ljcE8xeHVYSFJjZEZ4MFlYQndiSGxUWldOdmJtUlViMFpwY25OMFZtRnNkV1VvWkRFc0lIQXNJR1F5S1R0Y2JseDBYSFI5S1R0Y2JseDBYSFIwYUdsekxsOWhaR1JEYjIxd2IzTnBkR2x2YmxKMWJHVW9KMmx1YzJWeWRDY3NJQ2RoWm5SbGNpY3NJR0Z3Y0d4NVUyVmpiMjVrVkc5R2FYSnpkRlpoYkhWbEtUdGNibHgwWEhSMGFHbHpMbDloWkdSRGIyMXdiM05wZEdsdmJsSjFiR1VvSjJGbWRHVnlKeXdnSjJsdWMyVnlkQ2NzSUdGd2NHeDVVMlZqYjI1a1ZHOUdhWEp6ZEZaaGJIVmxLVHRjYmx4MFhIUXZLaUJVVDBSUE9pQjBhR1VnWVdKdmRtVWdZMjl0Y0c5emFYUnBiMjV6SUc5bUlDZHBibk5sY25RbklHRnVaQ0FuWVdaMFpYSW5JR0Z5WlNCdWIzUWdZV04wZFdGc2JIa2dZMjl5Y21WamRDQW9aUzVuTGl3Z2JtOTBJR0Z6YzI5amFXRjBhWFpsS1M0Z0tpOWNibHh1WEc1Y2RGeDBMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dVhHNWNibHgwWEhSMllYSWdYMmR5WVhCb0lEMGdibVYzSUVwelIzSmhjR2dvS1RzZ0x5b2daR1ZzZEdGeklHbHVJR0VnYzNSeWFXTjBJSEJoY25ScFlXd2diM0prWlhJZ0tpOWNibHgwWEhSVkxtVjRkR1Z1WkNoMGFHbHpMQ0I3WEc1Y2RGeDBYSFF2THlCblpYUWdkR2hsSUdkeVlYQm9JRzltSUdSbGJIUmhjMXh1WEhSY2RGeDBaM0poY0dnb0tTQjdJSEpsZEhWeWJpQmZaM0poY0dnZ2ZWeHVYSFJjZEgwcE8xeHVYRzVjZEZ4MGRtRnlJRjlrWld4MFlVTnZibVJwZEdsdmJuTWdQU0I3ZlRzZ0x5b2dZWEp5WVhseklHOW1JR0Z5Y21GNWN6b2daR2x6YW5WdVkzUnBkbVVnYm05eWJXRnNJR1p2Y20xeklDb3ZYRzVjZEZ4MGRtRnlJRjl6WlhSMGJHVmtSR1ZzZEdGRGIyNWthWFJwYjI1eklEMGdlMzA3SUM4cUlFSnZiMnhsWVc1eklDb3ZYRzVjZEZ4MGRtRnlJRjlqYjI1a2FYUnBiMjV6Vlc1elpYUjBiR1ZrSUQwZ1ptRnNjMlU3WEc1Y2JseDBYSFJtZFc1amRHbHZiaUJmY21WbmFYTjBaWEpFYVhOcWRXNWpkQ2hrWld4MFlVNWhiV1VzSUdScGMycDFibU4wS1NCN1hHNWNkRngwWEhSZlkyOXVaR2wwYVc5dWMxVnVjMlYwZEd4bFpDQTlJSFJ5ZFdVN1hHNWNkRngwWEhScFppQW9aR2x6YW5WdVkzUWdQVDA5SUhSeWRXVXBJSHRjYmx4MFhIUmNkRngwWDNObGRIUnNaV1JFWld4MFlVTnZibVJwZEdsdmJuTmJaR1ZzZEdGT1lXMWxYU0E5SUhSeWRXVTdYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLR1JwYzJwMWJtTjBJRDA5UFNCbVlXeHpaU2tnZTF4dVhIUmNkRngwWEhRdkx5QmphR0Z1WjJVZ2JtOTBhR2x1WjF4dVhIUmNkRngwZlNCbGJITmxJR2xtSUNoZlpHVnNkR0ZEYjI1a2FYUnBiMjV6VzJSbGJIUmhUbUZ0WlYwZ0lUMDlJSFJ5ZFdVcElIdGNibHgwWEhSY2RGeDBWUzVoY25KaGVTaGZaR1ZzZEdGRGIyNWthWFJwYjI1ekxDQmtaV3gwWVU1aGJXVXBMbkIxYzJnb1pHbHphblZ1WTNRcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEdaMWJtTjBhVzl1SUY5elpYUjBiR1ZEYjI1a2FYUnBiMjV6S0NrZ2UxeHVYSFJjZEZ4MGFXWWdLRjlqYjI1a2FYUnBiMjV6Vlc1elpYUjBiR1ZrS1NCN1hHNWNkRngwWEhSY2RGOWpiMjVrYVhScGIyNXpWVzV6WlhSMGJHVmtJRDBnWm1Gc2MyVTdYRzVjZEZ4MFhIUmNkSFpoY2lCemIyMWxkR2hwYm1kRGFHRnVaMlZrTzF4dVhIUmNkRngwWEhSa2J5QjdYRzVjZEZ4MFhIUmNkRngwYzI5dFpYUm9hVzVuUTJoaGJtZGxaQ0E5SUdaaGJITmxPMXh1WEhSY2RGeDBYSFJjZEY5bmNtRndhQzVsWVdOb1ZtVnlkR1Y0S0Noa1pXeDBZVTVoYldVcElEMCtJSHRjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2hmYzJWMGRHeGxaRVJsYkhSaFEyOXVaR2wwYVc5dWMxdGtaV3gwWVU1aGJXVmRLU0I3SUhKbGRIVnliaUI5WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvVlM1cGMxVnVaR1ZtYVc1bFpDaGZaR1ZzZEdGRGIyNWthWFJwYjI1elcyUmxiSFJoVG1GdFpWMHBLU0I3SUhKbGRIVnliaUI5WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvWDJSbGJIUmhRMjl1WkdsMGFXOXVjMXRrWld4MFlVNWhiV1ZkTG5OdmJXVW9LR1JwYzJwMWJtTjBLU0E5UGx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmthWE5xZFc1amRDNWxkbVZ5ZVNnb1kyOXVhblZ1WTNRcElEMCtYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmZjMlYwZEd4bFpFUmxiSFJoUTI5dVpHbDBhVzl1YzF0amIyNXFkVzVqZEYwcEtTa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmZjMlYwZEd4bFpFUmxiSFJoUTI5dVpHbDBhVzl1YzF0a1pXeDBZVTVoYldWZElEMGdkSEoxWlR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwYzI5dFpYUm9hVzVuUTJoaGJtZGxaQ0E5SUhSeWRXVTdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBmU2s3WEc1Y2RGeDBYSFJjZEgwZ2QyaHBiR1VnS0hOdmJXVjBhR2x1WjBOb1lXNW5aV1FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhHNWNkRngwTHk4Z1lTQmpiR0Z6Y3lCdlppQmhJSE4wWVc1a1lYSmtJRzVoYldWa0lHUmxiSFJoSUhkcGRHZ2diV1YwWVMxa1lYUmhJSFJvWVhRZ2FYTWdjbVZuYVhOMFpYSmxaQ0JwYm5SdklIUm9aU0JrWld4MFlTQnRiMlJsYkZ4dVhIUmNkSFJvYVhNdVJHVnNkR0VnUFNCVkxtNWxkMU4xWW1Oc1lYTnpLRjl2Y0ZSNWNHVnpXeWR0YjJScFpua25YUzVFWld4MFlTd2dablZ1WTNScGIyNGdSR1ZzZEdFb2MzVndaWEpHYml3Z1pHVnNkR0ZPWVcxbExDQnZjSFJwYjI1eklEMGdlMzBwSUh0Y2JseDBYSFJjZEM4dklHTmhiR3dnZEdobElHTnZibk4wY25WamRHOXlJRzltSUhSb1pTQW5iVzlrYVdaNUp5QmtaV3gwWVZ4dVhIUmNkRngwYzNWd1pYSkdiaTVqWVd4c0tIUm9hWE1zSUc5d2RHbHZibk1wTzF4dVhHNWNkRngwWEhRdkx5QndaWEptYjNKdElITmhibWwwZVNCamFHVmphM05jYmx4MFhIUmNkRlV1WVhOelpYSjBLRzl3ZEdsdmJuTWdhVzV6ZEdGdVkyVnZaaUJQWW1wbFkzUXNYRzVjZEZ4MFhIUmNkRngwWUVFZ1pHVnNkR0VnYzJodmRXeGtJR0psSUdkcGRtVnVJR0Z6SUdGdUlHOWlhbVZqZEM1Z0tUdGNibHgwWEhSY2RDOHZJRlJQUkU4NklHTm9aV05ySUhWdWFYRjFaVzVsYzNNZ2IyWWdZR1JsYkhSaFRtRnRaV0JjYmx4dVhIUmNkRngwTHk4dkx5QnRZV3RsSUhSb2FYTWdaR1ZzZEdFZ1lTQk5iMlJwWm5sRVpXeDBZU3dnYzI4Z2NuVnVJR2wwY3lCamIyNXpkSEoxWTNSdmNseHVYSFJjZEZ4MEx5OWpiMjV6YjJ4bExteHZaeWgwYUdsekxDQnZjSFJwYjI1ektUdGNibHgwWEhSY2RDOHZYMjl3Vkhsd1pYTmJKMjF2WkdsbWVTZGRMa1JsYkhSaExuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1zSUc5d2RHbHZibk1wTzF4dVhHNWNkRngwWEhRdkx5QmpjbVZoZEdVZ1pHVnNkR0VnY0hKdmNHVnlkR2xsYzF4dVhIUmNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9kR2hwY3l3Z2UxeHVYSFJjZEZ4MFhIUnVZVzFsT2lCN0lHZGxkQ2dwSUhzZ2NtVjBkWEp1SUdSbGJIUmhUbUZ0WlNCOUlIMHNYRzVjZEZ4MFhIUmNkRzFoYm5WaGJHeDVVMlZzWldOMFlXSnNaVG9nZTF4dVhIUmNkRngwWEhSY2RHZGxkQ2dwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR2xtSUNoVkxtbHpSR1ZtYVc1bFpDaHZjSFJwYjI1eld5ZHRZVzUxWVd4c2VWTmxiR1ZqZEdGaWJHVW5YU2twSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJQ0VoYjNCMGFXOXVjMXNuYldGdWRXRnNiSGxUWld4bFkzUmhZbXhsSjEwN1hHNWNkRngwWEhSY2RGeDBYSFI5SUdWc2MyVWdhV1lnS0ZVdWFYTkVaV1pwYm1Wa0tHOXdkR2x2Ym5OYkozSmxjMjlzZG1WekoxMHBJQ1ltSUc5d2RHbHZibk5iSjNKbGMyOXNkbVZ6SjEwdWJHVnVaM1JvSUQ0Z01Da2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZEhKMVpUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjZEhObGJHVmpkR1ZrT2lCN1hHNWNkRngwWEhSY2RGeDBaMlYwS0NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWDNObGRIUnNaVU52Ym1ScGRHbHZibk1vS1R0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQWhJVjl6WlhSMGJHVmtSR1ZzZEdGRGIyNWthWFJwYjI1elcyUmxiSFJoVG1GdFpWMDdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOUxGeHVYSFJjZEZ4MFhIUnBaam9nZTF4dVhIUmNkRngwWEhSY2RHZGxkQ2dwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR2xtSUNodmNIUnBiMjV6V3lkcFppZGRJRDA5UFNCMGNuVmxJSHg4SUc5d2RHbHZibk5iSjJsbUoxMGdQVDA5SUdaaGJITmxLU0I3SUM4cUlHeHBkR1Z5WVd3Z0ozUnlkV1VuSUc5eUlDZG1ZV3h6WlNjZ0tpOWNibHgwWEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUc5d2RHbHZibk5iSjJsbUoxMDdYRzVjZEZ4MFhIUmNkRngwWEhSOUlHVnNjMlVnYVdZZ0tHOXdkR2x2Ym5OYkoybG1KMTBnZkh3Z2IzQjBhVzl1YzFzbmFXWm1KMTBnZkh3Z2IzQjBhVzl1YzFzbmNtVnpiMngyWlhNblhTa2dleUF2S2lCaGNuSmhlU0J2WmlCdVlXMWxjeUFxTDF4dVhIUmNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdXMTB1WTI5dVkyRjBLRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwYjNCMGFXOXVjMXNuYVdZblhTQjhmQ0JiWFN4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHOXdkR2x2Ym5OYkoybG1aaWRkSUh4OElGdGRMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwYjNCMGFXOXVjMXNuY21WemIyeDJaWE1uWFNCOGZDQmJYVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZTQmxiSE5sSUhzZ0x5b2daR1ZtWVhWc2REb2dabUZzYzJVZ0tpOWNibHgwWEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlN4Y2JseDBYSFJjZEZ4MGIyNXNlVWxtT2lCN1hHNWNkRngwWEhSY2RGeDBaMlYwS0NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tHOXdkR2x2Ym5OYkoyOXViSGxKWmlkZElEMDlQU0IwY25WbElIeDhJRzl3ZEdsdmJuTmJKMjl1YkhsSlppZGRJRDA5UFNCbVlXeHpaU2tnZXlBdktpQnNhWFJsY21Gc0lDZDBjblZsSnlCdmNpQW5abUZzYzJVbklDb3ZYRzVjZEZ4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCdmNIUnBiMjV6V3lkdmJteDVTV1luWFR0Y2JseDBYSFJjZEZ4MFhIUmNkSDBnWld4elpTQnBaaUFvYjNCMGFXOXVjMXNuYjI1c2VVbG1KMTBnZkh3Z2IzQjBhVzl1YzFzbmFXWm1KMTBnZkh3Z2IzQjBhVzl1YzFzblpYaHdaV04wY3lkZElIeDhJQ0J2Y0hScGIyNXpXeWR5WlhOdmJIWmxjeWRkS1NCN0lDOHFJR0Z5Y21GNUlHOW1JRzVoYldWeklDb3ZYRzVjZEZ4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCYlhTNWpiMjVqWVhRb1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnZjSFJwYjI1eld5ZHZibXg1U1dZblhTQjhmQ0JiWFN4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHOXdkR2x2Ym5OYkoybG1aaWRkSUh4OElGdGRMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwYjNCMGFXOXVjMXNuWlhod1pXTjBjeWRkSUh4OElGdGRMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwYjNCMGFXOXVjMXNuY21WemIyeDJaWE1uWFNCOGZDQmJYVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZTQmxiSE5sSUhzZ0x5b2daR1ZtWVhWc2REb2dkSEoxWlNBcUwxeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZEhKMVpUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjZEdGd2NHeHBaV1JCWm5SbGNqb2dlMXh1WEhSY2RGeDBYSFJjZEdkbGRDZ3BJSHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCYlhTNWpiMjVqWVhRb1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGIzQjBhVzl1YzFzbllYQndiR2xsWkVGbWRHVnlKMTBnZkh3Z1cxMHNYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBiM0IwYVc5dWMxc25aWGh3WldOMGN5ZGRJSHg4SUZ0ZExGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHOXdkR2x2Ym5OYkozSmxjMjlzZG1WekoxMGdmSHdnVzEwc1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGIzQjBhVzl1YzFzbmNtVnhkV2x5WlhNblhTQjhmQ0JiWFZ4dVhIUmNkRngwWEhSY2RGeDBLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMHNYRzVjZEZ4MFhIUmNkSE5sYkdWamRITTZJSHRjYmx4MFhIUmNkRngwWEhSblpYUW9LU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z1cxMHVZMjl1WTJGMEtGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHOXdkR2x2Ym5OYkozTmxiR1ZqZEhNblhTQjhmQ0JiWFN4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSdmNIUnBiMjV6V3lkeVpYRjFhWEpsY3lkZElIeDhJRnRkWEc1Y2RGeDBYSFJjZEZ4MFhIUXBPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZTazdYRzVjYmx4MFhIUmNkQzh2SUhWd1pHRjBaU0JqYjI1a2FYUnBiMjV6WEc1Y2RGeDBYSFJmWTI5dVpHbDBhVzl1YzFWdWMyVjBkR3hsWkNBOUlIUnlkV1U3WEc1Y2RGeDBYSFJwWmlBb1ZTNXBjMFJsWm1sdVpXUW9kR2hwY3k1cFppa3BJSHNnWDNKbFoybHpkR1Z5UkdsemFuVnVZM1FvWkdWc2RHRk9ZVzFsTENCMGFHbHpMbWxtS1NCOVhHNWNkRngwWEhSMGFHbHpMbk5sYkdWamRITXVabTl5UldGamFDZ29iM1JvWlhKRVpXeDBZVTVoYldVcElEMCtJSHRjYmx4MFhIUmNkRngwWDNKbFoybHpkR1Z5UkdsemFuVnVZM1FvYjNSb1pYSkVaV3gwWVU1aGJXVXNJRnRrWld4MFlVNWhiV1ZkS1R0Y2JseDBYSFJjZEgwcE8xeHVYRzVjZEZ4MFhIUXZMeUIxY0dSaGRHVWdkR2hsSUdkeVlYQm9YRzVjZEZ4MFhIUmZaM0poY0dndVlXUmtWbVZ5ZEdWNEtHUmxiSFJoVG1GdFpTd2dkR2hwY3lrN1hHNWNkRngwWEhSMGFHbHpMbUZ3Y0d4cFpXUkJablJsY2k1bWIzSkZZV05vS0NodmRHaGxja1JsYkhSaFRtRnRaU2tnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmZaM0poY0dndVkzSmxZWFJsUldSblpTaHZkR2hsY2tSbGJIUmhUbUZ0WlN3Z1pHVnNkR0ZPWVcxbEtUdGNibHgwWEhSY2RIMHBPMXh1WEhSY2RGeDBWUzVoYzNObGNuUW9JVjluY21Gd2FDNW9ZWE5EZVdOc1pTZ3BMRnh1WEhSY2RGeDBYSFJjZEdCVWFHVWdaR1ZzZEdFZ0pIdGtaV3gwWVU1aGJXVjlJR2x1ZEhKdlpIVmpaV1FnWVNCamVXTnNaU0JwYmlCMGFHVWdZWEJ3YkdsallYUnBiMjRnYjNKa1pYSXVZQ2s3WEc1Y2JseDBYSFI5S1R0Y2JseHVYRzVjZEZ4MFZTNWxlSFJsYm1Rb2RHaHBjeXdnZTF4dVhIUmNkRngwTHk4Z2MyVnNaV04wSUdFZ2JuVnRZbVZ5SUc5bUlHUmxiSFJoY3lCaWVTQnVZVzFsTENCemJ5QjBhR1Y1SUhkcGJHd2dZbVVnWVhCd2JHbGxaQ0IzYUdWdUlHRndjR3hwWTJGaWJHVmNibHgwWEhSY2RITmxiR1ZqZENndUxpNWtaV3gwWVU1aGJXVnpLU0I3WEc1Y2RGeDBYSFJjZEdSbGJIUmhUbUZ0WlhNdVptOXlSV0ZqYUNnb1pHVnNkR0ZPWVcxbEtTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFgzSmxaMmx6ZEdWeVJHbHphblZ1WTNRb1pHVnNkR0ZPWVcxbExDQjBjblZsS1R0Y2JseDBYSFJjZEZ4MGZTazdYRzVjZEZ4MFhIUjlMRnh1WEc1Y2RGeDBYSFF2THlCeVpXZHBjM1JsY2lCaElHNWhiV1ZrSUhaaGNtbGhkR2x2YmlCd2IybHVkQ0JwYmlCMGFHVWdZMjlrWlMxaVlYTmxYRzVjZEZ4MFhIUXZMeUFvYVM1bExpd2dZWEJ3YkhrZ1lXeHNJSEpsWjJsemRHVnlaV1FnWkdWc2RHRnpJR0Z1WkNCeVpYUjFjbTRnZEdobElISmxjM1ZzZEdsdVp5QjJZV3gxWlNsY2JseDBYSFJjZEhad0tIWndUbUZ0WlN3Z2RtRnNLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdZU0IwWlcxd2IzSmhjbmtnYjJKcVpXTjBJSFJ2SUdodmJHUWdkR2hsSUhaaGJIVmxJSGRvYVd4bElHbDBJR2x6SUhWdVpHVnlaMjlwYm1jZ1kyaGhibWRsWEc1Y2RGeDBYSFJjZEhaaGNpQnZZbW9nUFNCN2ZUdGNibHgwWEhSY2RGeDBiMkpxVzNad1RtRnRaVjBnUFNCMllXdzdYRzVjYmx4MFhIUmNkRngwTHk4Z1kyaGxZMnNnYVdZZ1lXNTVJQ2R2Ym14NVNXWW5JR052Ym1ScGRHbHZibk1nWVhKbElHSmxhVzVuSUhacGIyeGhkR1ZrWEc1Y2RGeDBYSFJjZEY5elpYUjBiR1ZEYjI1a2FYUnBiMjV6S0NrN1hHNWNkRngwWEhSY2RGOW5jbUZ3YUM1bFlXTm9WbVZ5ZEdWNEtDaHVZVzFsTENCa1pXeDBZU2tnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkRlV1WVhOelpYSjBLQ0ZrWld4MFlTNXpaV3hsWTNSbFpDQjhmQ0JrWld4MFlTNXZibXg1U1dZZ1BUMDlJSFJ5ZFdVZ2ZId2daR1ZzZEdFdWIyNXNlVWxtTG1WMlpYSjVLQ2hrS1NBOVBpQmZaM0poY0dndWRtVnlkR1Y0Vm1Gc2RXVW9aQ2t1YzJWc1pXTjBaV1FwTEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJnVkdobElDZHZibXg1U1dZbklHTnZibVJwZEdsdmJpQnZaaUJrWld4MFlTQW5KSHRrWld4MFlTNXVZVzFsZlNjZ2QyRnpJSFpwYjJ4aGRHVmtMbUFwTzF4dVhIUmNkRngwWEhSOUtUdGNibHh1WEhSY2RGeDBYSFF2THlCaGNIQnNlU0IwYUdVZ2NISnZjR1Z5SUdSbGJIUmhjMXh1WEhSY2RGeDBYSFJmWjNKaGNHZ3VkRzl3YjJ4dloybGpZV3hzZVNnb2JtRnRaU3dnWkdWc2RHRXBJRDArSUh0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvWkdWc2RHRXVjMlZzWldOMFpXUXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHUmxiSFJoTG5ObGJHVmpkR2wyWld4NVFYQndiSGxVYnlodlltb3NJSFp3VG1GdFpTazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOUtUdGNibHh1WEhSY2RGeDBYSFF2THlCeVpYUjFjbTRnZEdobElIUnlZVzV6Wm05eWJXVmtJSFpoYkhWbFhHNWNkRngwWEhSY2RISmxkSFZ5YmlCdlltcGJkbkJPWVcxbFhUdGNibHh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEc1Y2RIMHBPMXh1WEc1Y2JseDBMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNibHh1WEc1Y2RIWmhjaUJ5WlhOdmJIWmxVSEp2YldselpTQTlJRzUxYkd3N1hHNWNkRlV1WlhoMFpXNWtLRVJsYkhSaFRXOWtaV3dzSUh0Y2JseDBYSFJ5WldkcGMzUmxjbEJ5YjIxcGMyVlNaWE52YkhabGNpaHdjbTl0YVhObFVtVnpiMngyWlhKR2Jpa2dlMXh1WEhSY2RGeDBjbVZ6YjJ4MlpWQnliMjFwYzJVZ1BTQndjbTl0YVhObFVtVnpiMngyWlhKR2JqdGNibHgwWEhSOVhHNWNkSDBwTzF4dVhHNWNibHgwTHk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmx4dVhHNWNkQzhxSUhKbGRIVnliaUIwYUdVZ2JXRnBiaUJrWld4MFlTQnRiMlJsYkNCamJHRnpjeUFxTDF4dVhIUnlaWFIxY200Z1JHVnNkR0ZOYjJSbGJEdGNibHh1WEc1OUtUdGNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDJSbGJIUmhMbXB6WEc0Z0tpb3ZJaXdpYm5Wc2JGeHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUVCMGNtRmpaWFZ5TDJkbGJtVnlZWFJsWkM5VVpXMXdiR0YwWlZCaGNuTmxjaTh3WEc0Z0tpb3ZJaXdpYm5Wc2JGeHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUVCMGNtRmpaWFZ5TDJkbGJtVnlZWFJsWkM5VVpXMXdiR0YwWlZCaGNuTmxjaTh4WEc0Z0tpb3ZJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JmWDFkRlFsQkJRMHRmUlZoVVJWSk9RVXhmVFU5RVZVeEZYekZmWHp0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJR1Y0ZEdWeWJtRnNJSHRjSW5KdmIzUmNJanBjSWtwelIzSmhjR2hjSWl4Y0ltTnZiVzF2Ym1wek1sd2lPbHdpYW5NdFozSmhjR2hjSWl4Y0ltTnZiVzF2Ym1welhDSTZYQ0pxY3kxbmNtRndhRndpTEZ3aVlXMWtYQ0k2WENKcWN5MW5jbUZ3YUZ3aWZWeHVJQ29xSUcxdlpIVnNaU0JwWkNBOUlERmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUlzSW1SbFptbHVaU2dvS1NBOVBpQjdYRzVjZENkMWMyVWdjM1J5YVdOMEp6dGNibHh1WEhSMllYSWdWU0E5SUh0Y2JseHVYSFJjZEM4dklHTnlaV0YwWlNCaElHNWxkeUJqYkdGemN5d2daMmwyWlc0Z1lTQmpiMjV6ZEhKMVkzUnZjaUJoYm1RZ2NHOXpjMmxpYkdVZ2NISnZkRzkwZVhCbFhHNWNkRngwYm1WM1EyeGhjM01vWTI5dWMzUnlkV04wYjNJc0lIQnliM1J2ZEhsd1pTa2dlMXh1WEhSY2RGeDBjSEp2ZEc5MGVYQmxJRDBnY0hKdmRHOTBlWEJsSUh4OElIdDlPMXh1WEhSY2RGeDBkbUZ5SUdOc2N5QTlJR1oxYm1OMGFXOXVJQ2d1TGk1aGNtZHpLU0I3WEc1Y2RGeDBYSFJjZEdOdmJuTjBjblZqZEc5eUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcE8xeHVYSFJjZEZ4MGZUdGNibHgwWEhSY2RHTnNjeTV3Y205MGIzUjVjR1VnUFNCd2NtOTBiM1I1Y0dVN1hHNWNkRngwWEhSamJITXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5SUQwZ1kyeHpPMXh1WEhSY2RGeDBjbVYwZFhKdUlHTnNjenRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBMeThnWTNKbFlYUmxJR0VnYm1WM0lITjFZbU5zWVhOekxDQm5hWFpsYmlCaElITjFjR1Z5WTJ4aGMzTXNJR052Ym5OMGNuVmpkRzl5SUdGdVpDQndiM056YVdKc1pTQndjbTkwYjNSNWNHVmNibHgwWEhSdVpYZFRkV0pqYkdGemN5aHpkWEJsY2tOc1lYTnpMQ0JqYjI1emRISjFZM1J2Y2l3Z2NISnZkRzkwZVhCbEtTQjdYRzVjZEZ4MFhIUndjbTkwYjNSNWNHVWdQU0J3Y205MGIzUjVjR1VnZkh3Z2UzMDdYRzVjZEZ4MFhIUjJZWElnWTJ4eklEMGdablZ1WTNScGIyNGdLQzR1TG1GeVozTXBJSHRjYmx4MFhIUmNkRngwWTI5dWMzUnlkV04wYjNJdVlYQndiSGtvZEdocGN5d2dXM04xY0dWeVEyeGhjM011Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eVhTNWpiMjVqWVhRb1lYSm5jeWtwTzF4dVhIUmNkRngwZlR0Y2JseDBYSFJjZEdOc2N5NXdjbTkwYjNSNWNHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtITjFjR1Z5UTJ4aGMzTXVjSEp2ZEc5MGVYQmxMQ0J3Y205MGIzUjVjR1VwTzF4dVhIUmNkRngwWTJ4ekxuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaUE5SUdOc2N6dGNibHgwWEhSY2RISmxkSFZ5YmlCamJITTdYRzVjZEZ4MGZTeGNibHh1WEhSY2RDOHZJR1Y0ZEdWdVpDQjBhR1VnWm1seWMzUWdjR0Z6YzJWa0lHOWlhbVZqZENCM2FYUm9JSFJvWlNCd2NtOXdaWEowYVdWelhHNWNkRngwTHk4Z2IyWWdkR2hsSUc5MGFHVnlJRzlpYW1WamRITXNJR1p5YjIwZ2JHVm1kQ0IwYnlCeWFXZG9kQ3dnWVc1a0lISmxkSFZ5Ym5OY2JseDBYSFF2THlCMGFHVWdabWx5YzNRZ2NHRnpjMlZrSUc5aWFtVmpkRnh1WEhSY2RHVjRkR1Z1WkNodlltb3hMQ0F1TGk1eVpYTjBLU0I3WEc1Y2RGeDBYSFJ5WlhOMExtWnZja1ZoWTJnb0tHOWlhaWtnUFQ0Z2UxeHVYSFJjZEZ4MFhIUm1iM0lnS0haaGNpQnJaWGtnYVc0Z2IySnFLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLRzlpYWk1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzVjZEZ4MFhIUmNkRngwWEhSdlltb3hXMnRsZVYwZ1BTQnZZbXBiYTJWNVhUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwcE8xeHVYSFJjZEZ4MGNtVjBkWEp1SUc5aWFqRTdYRzVjZEZ4MGZTeGNibHh1WEhSY2RDOHZJR2RsZENCMGFHVWdZWEp5WVhrZ1lHOWlhbHR1WVcxbFhXQTdJR2xtSUdCdlltcGJibUZ0WlYxZ0lHbHpJRzV2ZEZ4dVhIUmNkQzh2SUdGdUlHRnljbUY1TENCdFlXdGxJR2wwSUdGdUlHVnRjSFI1SUdGeWNtRjVJR1pwY25OMFhHNWNkRngwWVhKeVlYa29iMkpxTENCdVlXMWxLU0I3WEc1Y2RGeDBYSFJwWmlBb1ZTNXBjMVZ1WkdWbWFXNWxaQ2h2WW1wYmJtRnRaVjBwS1NCN0lHOWlhbHR1WVcxbFhTQTlJRnRkSUgxY2JseDBYSFJjZEhKbGRIVnliaUJ2WW1wYmJtRnRaVjA3WEc1Y2RGeDBmU3hjYmx4dVhIUmNkQzh2SUdCR2RXNWpkR2x2Ymk1aWFXNWtZQ3dnWW5WMElIUmhhMmx1WnlCaGJpQmhjbkpoZVNCc2FXdGxJR0JHZFc1amRHbHZiaTVoY0hCc2VXQWdaRzlsYzF4dVhIUmNkR0pwYm1SQktHWnVMQ0JqZEhnc0lHRnlaM01wSUhzZ2NtVjBkWEp1SUdadUxtSnBibVF1WVhCd2JIa29abTRzSUZ0amRIaGRMbU52Ym1OaGRDaGhjbWR6S1NrZ2ZTeGNibHh1WEhSY2RDOHZJR0JHZFc1amRHbHZiaTVpYVc1a1lDd2dZblYwSUc5dWJIa2dhR0YyYVc1bklIUnZJSE53WldOcFpua2dkR2hsSUdOdmJuUmxlSFF0YjJKcVpXTjBJRzl1WTJWY2JseDBYSFJpYVc1a0tHOWlhaXdnYlN3Z0xpNHVZWEpuY3lrZ2V5QnlaWFIxY200Z1ZTNWlhVzVrUVNodlltcGJiVjBzSUc5aWFpd2dZWEpuY3lrZ2ZTeGNibHh1WEhSY2RDOHZJR0ZzYkc5M2N5QjBhR1VnUm5WdVkzUnBiMjRnWTI5dWMzUnlkV04wYjNJZ2RHOGdZbVVnZFhObFpGeHVYSFJjZEM4dklIZHBkR2dnWVc0Z1lYSnlZWGtnYjJZZ1ptOXliV0ZzSUhCaGNtRnRaWFJsY25OY2JseDBYSFJoY0hCc2VVTnZibk4wY25WamRHOXlLRU52Ym5OMGNuVmpkRzl5Um00c0lHRnlaM01wSUh0Y2JseDBYSFJjZEhaaGNpQk9aWGREYjI1emRISjFZM1J2Y2tadUlEMGdRMjl1YzNSeWRXTjBiM0pHYmk1aWFXNWtMbUZ3Y0d4NUtFTnZibk4wY25WamRHOXlSbTRzSUZ0dWRXeHNYUzVqYjI1allYUW9ZWEpuY3lrcE8xeHVYSFJjZEZ4MGNtVjBkWEp1SUc1bGR5Qk9aWGREYjI1emRISjFZM1J2Y2tadUtDazdYRzVjZEZ4MGZTeGNibHh1WEhSY2RDOHZJR0VnYzJsdGNHeGxJR0JoYzNObGNuUmdJR1oxYm1OMGFXOXVMQ0IwYnlCbGVIQnlaWE56SUdGY2JseDBYSFF2THlCamIyNWthWFJwYjI0Z2RHaGhkQ0JwY3lCbGVIQmxZM1JsWkNCMGJ5QmlaU0IwY25WbFhHNWNkRngwWVhOelpYSjBLR052Ym1ScGRHbHZiaXdnYldWemMyRm5aU2tnZTF4dVhIUmNkRngwYVdZZ0tDRmpiMjVrYVhScGIyNHBJSHNnZEdoeWIzY2dibVYzSUVWeWNtOXlLRzFsYzNOaFoyVWdmSHdnWENKQmMzTmxjblJwYjI0Z1ptRnBiR1ZrWENJcElIMWNibHgwWEhSOUxGeHVYRzVjZEZ4MEx5OGdkR1Z6ZENCcFppQmhJSFpoYkhWbElHbHpJR0IxYm1SbFptbHVaV1JnWEc1Y2RGeDBhWE5WYm1SbFptbHVaV1FvZG1Gc0tTQjdJSEpsZEhWeWJpQjBlWEJsYjJZZ2RtRnNJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5QjlMRnh1WEc1Y2RGeDBMeThnZEdWemRDQnBaaUJoSUhaaGJIVmxJR2x6SUdSbFptbHVaV1FnS0c1dmRDQmdkVzVrWldacGJtVmtZQ2xjYmx4MFhIUnBjMFJsWm1sdVpXUW9kbUZzS1NCN0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlCOVhHNWNkSDA3WEc1Y2JseDBjbVYwZFhKdUlGVTdYRzU5S1R0Y2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMzSmpMMjFwYzJNdWFuTmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0ltWnBiR1VpT2lKa1pXeDBZUzVxY3lKOVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYm93ZXJfY29tcG9uZW50cy9kZWx0YS5qcy9kaXN0L2RlbHRhLmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXG4vLyBVc2luZyB0aGUgVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uIGByZXR1cm5FeHBvcnRzLmpzYFxuLy8gdG8gc3VwcG9ydCBBTUQsIE5vZGUsIGFzIHdlbGwgYXMgYnJvd3NlciBnbG9iYWxzOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG4vL1xuKGZ1bmN0aW9uIChyb290LCBuYW1lLCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9IGVsc2Uge1xuXHRcdHJvb3RbbmFtZV0gPSBmYWN0b3J5KCk7XG5cdH1cbn0odGhpcywgJ0pzR3JhcGgnLCBmdW5jdGlvbiAoKSB7Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbi8vICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gIC8vIEpzR3JhcGggY2xhc3MgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cdGZ1bmN0aW9uIEpzR3JhcGgoKSB7XG5cblxuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXG4vLyAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgLy8gUHJpdmF0ZSBWYXJpYWJsZXMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuXHRcdHZhciBfdmVydGljZXMgPSB7fTsgICAgIC8vIGtleSAtPiB2YWx1ZVxuXG5cdFx0dmFyIF9lZGdlcyA9IHt9OyAgICAgICAgLy8gZnJvbSAtPiB0byAtPiB2YWx1ZVxuXG5cdFx0dmFyIF9yZXZlcnNlRWRnZXMgPSB7fTsgLy8gdG8gLT4gZnJvbSAtPiBudWxsIChfZWRnZXMgY29udGFpbnMgdGhlIHZhbHVlcylcblxuXHRcdHZhciBfdmVydGV4Q291bnQgPSAwO1xuXG5cdFx0dmFyIF9lZGdlQ291bnQgPSAwO1xuXG5cbi8vICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gICAgICAvLyBQcml2aWxlZ2VkIE1ldGhvZHMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFx0Ly8vLy8vLy8vLyBWZXJ0aWNlcyAvLy8vLy8vLy8vXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuXHRcdHZhciBfYWRkVmVydGV4Q2FsbGJhY2tzICAgID0gbmV3IENhbGxiYWNrcygpO1xuXHRcdHZhciBfcmVtb3ZlVmVydGV4Q2FsbGJhY2tzID0gbmV3IENhbGxiYWNrcygpO1xuXG5cblx0XHQvLy8vIGxpc3RlbmluZyBmb3IgdGhlbSAvLy8vXG5cdFx0Ly9cblx0XHR0aGF0Lm9uQWRkVmVydGV4ICAgID0gX2FkZFZlcnRleENhbGxiYWNrcy5hZGQ7XG5cdFx0dGhhdC5vblJlbW92ZVZlcnRleCA9IF9yZW1vdmVWZXJ0ZXhDYWxsYmFja3MuYWRkO1xuXG5cblx0XHQvLy8vIGNyZWF0aW5nIHRoZW0gLy8vL1xuXHRcdC8vXG5cdFx0dGhhdC5hZGROZXdWZXJ0ZXggPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKHRoYXQuaGFzVmVydGV4KGtleSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguVmVydGV4RXhpc3RzRXJyb3Ioa2V5LCBfdmVydGljZXNba2V5XSk7XG5cdFx0XHR9XG5cblx0XHRcdF92ZXJ0aWNlc1trZXldID0gdmFsdWU7XG5cdFx0XHRfZWRnZXNba2V5XSA9IHt9O1xuXHRcdFx0X3JldmVyc2VFZGdlc1trZXldID0ge307XG5cdFx0XHRfdmVydGV4Q291bnQgKz0gMTtcblx0XHRcdF9hZGRWZXJ0ZXhDYWxsYmFja3MuZmlyZShrZXksIHZhbHVlKTtcblx0XHR9O1xuXG5cdFx0dGhhdC5zZXRWZXJ0ZXggPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCF0aGF0Lmhhc1ZlcnRleChrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBKc0dyYXBoLlZlcnRleE5vdEV4aXN0c0Vycm9yKGtleSk7XG5cdFx0XHR9XG5cblx0XHRcdF92ZXJ0aWNlc1trZXldID0gdmFsdWU7XG5cdFx0fTtcblxuXHRcdHRoYXQuZW5zdXJlVmVydGV4ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmICghdGhhdC5oYXNWZXJ0ZXgoa2V5KSkge1xuXHRcdFx0XHR0aGF0LmFkZE5ld1ZlcnRleChrZXksIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhhdC5hZGRWZXJ0ZXggPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKHRoYXQuaGFzVmVydGV4KGtleSkpIHtcblx0XHRcdFx0dGhhdC5zZXRWZXJ0ZXgoa2V5LCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGF0LmFkZE5ld1ZlcnRleChrZXksIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cblx0XHQvLy8vIHJlbW92aW5nIHRoZW0gLy8vL1xuXHRcdC8vXG5cdFx0dGhhdC5yZW1vdmVFeGlzdGluZ1ZlcnRleCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghdGhhdC5oYXNWZXJ0ZXgoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgSnNHcmFwaC5WZXJ0ZXhOb3RFeGlzdHNFcnJvcihrZXkpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKE9iamVjdC5rZXlzKF9lZGdlc1trZXldKS5sZW5ndGgpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguSGFzQ29ubmVjdGVkRWRnZXNFcnJvcihrZXkpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKE9iamVjdC5rZXlzKF9yZXZlcnNlRWRnZXNba2V5XSkubGVuZ3RoKSB7XG5cdFx0XHRcdHRocm93IG5ldyBKc0dyYXBoLkhhc0Nvbm5lY3RlZEVkZ2VzRXJyb3Ioa2V5KTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHZhbHVlT2ZSZW1vdmVkVmVydGV4ID0gX3ZlcnRpY2VzW2tleV07XG5cdFx0XHRkZWxldGUgX3ZlcnRpY2VzW2tleV07XG5cdFx0XHRfdmVydGV4Q291bnQgLT0gMTtcblx0XHRcdF9yZW1vdmVWZXJ0ZXhDYWxsYmFja3MuZmlyZShrZXksIHZhbHVlT2ZSZW1vdmVkVmVydGV4KTtcblx0XHR9O1xuXG5cdFx0dGhhdC5kZXN0cm95RXhpc3RpbmdWZXJ0ZXggPSBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoIXRoYXQuaGFzVmVydGV4KGtleSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguVmVydGV4Tm90RXhpc3RzRXJyb3Ioa2V5KTtcblx0XHRcdH1cblxuXHRcdFx0dGhhdC5lYWNoVmVydGV4RnJvbShrZXksIGZ1bmN0aW9uICh0bykge1xuXHRcdFx0XHR0aGF0LnJlbW92ZUVkZ2Uoa2V5LCB0byk7XG5cdFx0XHR9KTtcblx0XHRcdHRoYXQuZWFjaFZlcnRleFRvKGtleSwgZnVuY3Rpb24gKGZyb20pIHtcblx0XHRcdFx0dGhhdC5yZW1vdmVFZGdlKGZyb20sIGtleSk7XG5cdFx0XHR9KTtcblx0XHRcdHRoYXQucmVtb3ZlRXhpc3RpbmdWZXJ0ZXgoa2V5KTtcblx0XHR9O1xuXG5cdFx0dGhhdC5yZW1vdmVWZXJ0ZXggPSBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAodGhhdC5oYXNWZXJ0ZXgoa2V5KSkge1xuXHRcdFx0XHR0aGF0LnJlbW92ZUV4aXN0aW5nVmVydGV4KGtleSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoYXQuZGVzdHJveVZlcnRleCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICh0aGF0Lmhhc1ZlcnRleChrZXkpKSB7XG5cdFx0XHRcdHRoYXQuZGVzdHJveUV4aXN0aW5nVmVydGV4KGtleSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFx0Ly8vLy8vLy8vLyBFZGdlcyAvLy8vLy8vLy8vXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuXHRcdHZhciBfYWRkRWRnZUNhbGxiYWNrcyAgICA9IG5ldyBDYWxsYmFja3MoKTtcblx0XHR2YXIgX3JlbW92ZUVkZ2VDYWxsYmFja3MgPSBuZXcgQ2FsbGJhY2tzKCk7XG5cblxuXHRcdC8vLy8gbGlzdGVuaW5nIGZvciB0aGVtIC8vLy9cblx0XHQvL1xuXHRcdHRoYXQub25BZGRFZGdlICAgID0gX2FkZEVkZ2VDYWxsYmFja3MuYWRkO1xuXHRcdHRoYXQub25SZW1vdmVFZGdlID0gX3JlbW92ZUVkZ2VDYWxsYmFja3MuYWRkO1xuXG5cblx0XHQvLy8vIGNyZWF0aW5nIHRoZW0gLy8vL1xuXHRcdC8vXG5cdFx0dGhhdC5hZGROZXdFZGdlID0gZnVuY3Rpb24gKGZyb20sIHRvLCB2YWx1ZSkge1xuXHRcdFx0aWYgKHRoYXQuaGFzRWRnZShmcm9tLCB0bykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguRWRnZUV4aXN0c0Vycm9yKGZyb20sIHRvLCB0aGF0LmVkZ2VWYWx1ZShmcm9tLCB0bykpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCF0aGF0Lmhhc1ZlcnRleChmcm9tKSkge1xuXHRcdFx0XHRpZiAodGhhdC5oYXNWZXJ0ZXgodG8pKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguVmVydGV4Tm90RXhpc3RzRXJyb3IoZnJvbSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguVmVydGV4Tm90RXhpc3RzRXJyb3IoZnJvbSkudih0byk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIXRoYXQuaGFzVmVydGV4KHRvKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgSnNHcmFwaC5WZXJ0ZXhOb3RFeGlzdHNFcnJvcih0byk7XG5cdFx0XHR9XG5cblx0XHRcdF9lZGdlc1tmcm9tXVt0b10gPSB2YWx1ZTtcblx0XHRcdF9yZXZlcnNlRWRnZXNbdG9dW2Zyb21dID0gbnVsbDtcblx0XHRcdF9lZGdlQ291bnQgKz0gMTtcblx0XHRcdF9hZGRFZGdlQ2FsbGJhY2tzLmZpcmUoZnJvbSwgdG8sIHZhbHVlKTtcblx0XHR9O1xuXG5cdFx0dGhhdC5jcmVhdGVOZXdFZGdlID0gZnVuY3Rpb24gKGZyb20sIHRvLCB2YWx1ZSkge1xuXHRcdFx0aWYgKHRoYXQuaGFzRWRnZShmcm9tLCB0bykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguRWRnZUV4aXN0c0Vycm9yKGZyb20sIHRvLCB0aGF0LmVkZ2VWYWx1ZShmcm9tLCB0bykpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGF0LmVuc3VyZVZlcnRleChmcm9tKTtcblx0XHRcdHRoYXQuZW5zdXJlVmVydGV4KHRvKTtcblx0XHRcdHRoYXQuYWRkTmV3RWRnZShmcm9tLCB0bywgdmFsdWUpO1xuXHRcdH07XG5cblx0XHR0aGF0LnNldEVkZ2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHZhbHVlKSB7XG5cdFx0XHRpZiAoIXRoYXQuaGFzRWRnZShmcm9tLCB0bykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguRWRnZU5vdEV4aXN0c0Vycm9yKGZyb20sIHRvKTtcblx0XHRcdH1cblxuXHRcdFx0X2VkZ2VzW2Zyb21dW3RvXSA9IHZhbHVlO1xuXHRcdH07XG5cblx0XHR0aGF0LnNwYW5FZGdlID0gZnVuY3Rpb24gKGZyb20sIHRvLCB2YWx1ZSkge1xuXHRcdFx0aWYgKCF0aGF0Lmhhc1ZlcnRleChmcm9tKSkge1xuXHRcdFx0XHRpZiAodGhhdC5oYXNWZXJ0ZXgodG8pKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguVmVydGV4Tm90RXhpc3RzRXJyb3IoZnJvbSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguVmVydGV4Tm90RXhpc3RzRXJyb3IoZnJvbSkudih0byk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIXRoYXQuaGFzVmVydGV4KHRvKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgSnNHcmFwaC5WZXJ0ZXhOb3RFeGlzdHNFcnJvcih0byk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhhdC5oYXNFZGdlKGZyb20sIHRvKSkge1xuXHRcdFx0XHR0aGF0LmFkZE5ld0VkZ2UoZnJvbSwgdG8sIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhhdC5hZGRFZGdlID0gZnVuY3Rpb24gKGZyb20sIHRvLCB2YWx1ZSkge1xuXHRcdFx0aWYgKHRoYXQuaGFzRWRnZShmcm9tLCB0bykpIHtcblx0XHRcdFx0dGhhdC5zZXRFZGdlKGZyb20sIHRvLCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGF0LmFkZE5ld0VkZ2UoZnJvbSwgdG8sIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhhdC5lbnN1cmVFZGdlID0gZnVuY3Rpb24gKGZyb20sIHRvLCB2YWx1ZSkge1xuXHRcdFx0aWYgKCF0aGF0Lmhhc0VkZ2UoZnJvbSwgdG8pKSB7XG5cdFx0XHRcdHRoYXQuY3JlYXRlTmV3RWRnZShmcm9tLCB0bywgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR0aGF0LmNyZWF0ZUVkZ2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHZhbHVlKSB7XG5cdFx0XHRpZiAodGhhdC5oYXNFZGdlKGZyb20sIHRvKSkge1xuXHRcdFx0XHR0aGF0LnNldEVkZ2UoZnJvbSwgdG8sIHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoYXQuY3JlYXRlTmV3RWRnZShmcm9tLCB0bywgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH07XG5cblxuXHRcdC8vLy8gcmVtb3ZpbmcgdGhlbSAvLy8vXG5cdFx0Ly9cblx0XHR0aGF0LnJlbW92ZUV4aXN0aW5nRWRnZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuXHRcdFx0aWYgKCF0aGF0Lmhhc0VkZ2UoZnJvbSwgdG8pKSB7XG5cdFx0XHRcdHRocm93IG5ldyBKc0dyYXBoLkVkZ2VOb3RFeGlzdHNFcnJvcihmcm9tLCB0byk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciB2YWx1ZU9mUmVtb3ZlZEVkZ2UgPSBfZWRnZXNbZnJvbV1bdG9dO1xuXHRcdFx0ZGVsZXRlIF9lZGdlc1tmcm9tXVt0b107XG5cdFx0XHRkZWxldGUgX3JldmVyc2VFZGdlc1t0b11bZnJvbV07XG5cdFx0XHRfZWRnZUNvdW50IC09IDE7XG5cdFx0XHRfcmVtb3ZlRWRnZUNhbGxiYWNrcy5maXJlKGZyb20sIHRvLCB2YWx1ZU9mUmVtb3ZlZEVkZ2UpO1xuXHRcdH07XG5cblx0XHR0aGF0LnJlbW92ZUVkZ2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcblx0XHRcdGlmICh0aGF0Lmhhc0VkZ2UoZnJvbSwgdG8pKSB7XG5cdFx0XHRcdHRoYXQucmVtb3ZlRXhpc3RpbmdFZGdlKGZyb20sIHRvKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cblx0XHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuXHRcdHRoYXQudmVydGV4Q291bnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gX3ZlcnRleENvdW50O1xuXHRcdH07XG5cblxuXHRcdHRoYXQuaGFzVmVydGV4ID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGtleSBpbiBfdmVydGljZXM7XG5cdFx0fTtcblxuXG5cdFx0dGhhdC52ZXJ0ZXhWYWx1ZSA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBfdmVydGljZXNba2V5XTtcblx0XHR9O1xuXG5cblx0XHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuXHRcdHRoYXQuZWRnZUNvdW50ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIF9lZGdlQ291bnQ7XG5cdFx0fTtcblxuXG5cdFx0dGhhdC5oYXNFZGdlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG5cdFx0XHRyZXR1cm4gdGhhdC5oYXNWZXJ0ZXgoZnJvbSkgJiZcblx0XHRcdCAgICAgICB0aGF0Lmhhc1ZlcnRleCh0bykgJiZcblx0XHRcdCAgICAgICBmcm9tIGluIF9lZGdlcyAmJlxuXHRcdFx0ICAgICAgIHRvIGluIF9lZGdlc1tmcm9tXTtcblx0XHR9O1xuXG5cblx0XHR0aGF0LmVkZ2VWYWx1ZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuXHRcdFx0cmV0dXJuIHRoYXQuaGFzRWRnZShmcm9tLCB0bykgPyBfZWRnZXNbZnJvbV1bdG9dIDogdW5kZWZpbmVkO1xuXHRcdH07XG5cblxuXHRcdHRoYXQuc3VjY2Vzc29ycyA9IGZ1bmN0aW9uIChmcm9tKSB7XG5cdFx0XHRpZiAoIXRoYXQuaGFzVmVydGV4KGZyb20pKSB7XG5cdFx0XHRcdHRocm93IG5ldyBKc0dyYXBoLlZlcnRleE5vdEV4aXN0c0Vycm9yKGZyb20pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIE9iamVjdC5rZXlzKF9lZGdlc1tmcm9tXSk7XG5cdFx0fTtcblxuXG5cdFx0dGhhdC5wcmVkZWNlc3NvcnMgPSBmdW5jdGlvbiAodG8pIHtcblx0XHRcdGlmICghdGhhdC5oYXNWZXJ0ZXgodG8pKSB7XG5cdFx0XHRcdHRocm93IG5ldyBKc0dyYXBoLlZlcnRleE5vdEV4aXN0c0Vycm9yKHRvKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBPYmplY3Qua2V5cyhfcmV2ZXJzZUVkZ2VzW3RvXSk7XG5cdFx0fTtcblxuXG5cdFx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cblx0XHR0aGF0LmVhY2hWZXJ0ZXggPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdFx0T2JqZWN0LmtleXMoX3ZlcnRpY2VzKS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdHZhciByID0gaGFuZGxlcihrZXksIF92ZXJ0aWNlc1trZXldKTtcblx0XHRcdFx0cmV0dXJuIChyICE9PSBmYWxzZSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cblx0XHR0aGF0LmVhY2hWZXJ0ZXhGcm9tID0gZnVuY3Rpb24gKGZyb20sIGhhbmRsZXIpIHtcblx0XHRcdGlmICghdGhhdC5oYXNWZXJ0ZXgoZnJvbSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguVmVydGV4Tm90RXhpc3RzRXJyb3IoZnJvbSk7XG5cdFx0XHR9XG5cblx0XHRcdE9iamVjdC5rZXlzKF9lZGdlc1tmcm9tXSkuZXZlcnkoZnVuY3Rpb24gKHRvKSB7XG5cdFx0XHRcdHZhciByID0gaGFuZGxlcih0bywgdGhhdC52ZXJ0ZXhWYWx1ZSh0byksIHRoYXQuZWRnZVZhbHVlKGZyb20sIHRvKSk7XG5cdFx0XHRcdHJldHVybiAociAhPT0gZmFsc2UpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXG5cdFx0dGhhdC5lYWNoVmVydGV4VG8gPSBmdW5jdGlvbiAodG8sIGhhbmRsZXIpIHtcblx0XHRcdGlmICghdGhhdC5oYXNWZXJ0ZXgodG8pKSB7XG5cdFx0XHRcdHRocm93IG5ldyBKc0dyYXBoLlZlcnRleE5vdEV4aXN0c0Vycm9yKHRvKTtcblx0XHRcdH1cblxuXHRcdFx0T2JqZWN0LmtleXMoX3JldmVyc2VFZGdlc1t0b10pLmV2ZXJ5KGZ1bmN0aW9uIChmcm9tKSB7XG5cdFx0XHRcdHZhciByID0gaGFuZGxlcihmcm9tLCB0aGF0LnZlcnRleFZhbHVlKGZyb20pLCB0aGF0LmVkZ2VWYWx1ZShmcm9tLCB0bykpO1xuXHRcdFx0XHRyZXR1cm4gKHIgIT09IGZhbHNlKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblxuXHRcdHRoYXQuZWFjaEVkZ2UgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdFx0T2JqZWN0LmtleXMoX2VkZ2VzKS5ldmVyeShmdW5jdGlvbiAoZnJvbSkge1xuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmtleXMoX2VkZ2VzW2Zyb21dKS5ldmVyeShmdW5jdGlvbiAodG8pIHtcblx0XHRcdFx0XHR2YXIgciA9IGhhbmRsZXIoZnJvbSwgdG8sIF9lZGdlc1tmcm9tXVt0b10pO1xuXHRcdFx0XHRcdHJldHVybiAociAhPT0gZmFsc2UpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblxuXHRcdHRoYXQuY2xlYXJFZGdlcyA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoYXQuZWFjaEVkZ2UodGhhdC5yZW1vdmVFZGdlKTtcblx0XHR9O1xuXG5cblx0XHR0aGF0LmNsZWFyID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhhdC5lYWNoVmVydGV4KHRoYXQuZGVzdHJveVZlcnRleCk7XG5cdFx0fTtcblxuXHRcdHRoYXQuaGFzQ3ljbGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgdmlzaXRlZCA9IHt9O1xuXHRcdFx0dmFyIGhhbmRsZWQgPSB7fTtcblxuXHRcdFx0dmFyIGN5Y2xlRm91bmQgPSBmYWxzZTtcblxuXHRcdFx0ZnVuY3Rpb24gdmlzaXQoYSkge1xuXHRcdFx0XHQvLy8vIGlmIGEgY3ljbGUgaXMgZm91bmQsIHJlY29yZCBpdCBhbmQgcmV0dXJuXG5cdFx0XHRcdC8vXG5cdFx0XHRcdGlmICh2aXNpdGVkW2FdKSB7XG5cdFx0XHRcdFx0Y3ljbGVGb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8vLyBpZiB0aGlzIHZlcnRleCB3YXMgYWxyZWFkeSBoYW5kbGVkLCBubyBjeWNsZSBjYW4gYmUgZm91bmQgaGVyZVxuXHRcdFx0XHQvL1xuXHRcdFx0XHRpZiAoaGFuZGxlZFthXSkgeyByZXR1cm4gfVxuXHRcdFx0XHRoYW5kbGVkW2FdID0gdHJ1ZTtcblxuXHRcdFx0XHQvLy8vIHJlY3Vyc2l2ZWx5IHZpc2l0IHN1Y2Nlc3NvcnMgdG8gY2hlY2sgZm9yIGN5Y2xlc1xuXHRcdFx0XHQvL1xuXHRcdFx0XHR2aXNpdGVkW2FdID0gdHJ1ZTtcblx0XHRcdFx0dGhhdC5lYWNoVmVydGV4RnJvbShhLCBmdW5jdGlvbiAoYikge1xuXHRcdFx0XHRcdHZpc2l0KGIpO1xuXHRcdFx0XHRcdGlmIChjeWNsZUZvdW5kKSB7IHJldHVybiBmYWxzZSB9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR2aXNpdGVkW2FdID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHRoYXQuZWFjaFZlcnRleChmdW5jdGlvbiAoYSkge1xuXHRcdFx0XHR2aXNpdChhKTtcblx0XHRcdFx0aWYgKGN5Y2xlRm91bmQpIHsgcmV0dXJuIGZhbHNlIH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gY3ljbGVGb3VuZDtcblx0XHR9O1xuXG5cblx0XHR0aGF0Lmhhc1BhdGggPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcblx0XHRcdGlmICghdGhhdC5oYXNWZXJ0ZXgoZnJvbSkgfHwgIXRoYXQuaGFzVmVydGV4KHRvKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHZhciB2aXNpdGVkID0ge307XG5cblx0XHRcdC8vLy8gUmVjdXJzaXZlIGF1eGlsaWFyeSBmdW5jdGlvbjogSXMgdGhlcmUgYSBwYXRoIGZyb20gJ2N1cnJlbnQnIHRvICd0byc/XG5cdFx0XHQvL1xuXHRcdFx0ZnVuY3Rpb24gaGFzUGF0aEF1eChjdXJyZW50KSB7XG5cdFx0XHRcdGlmICh0aGF0Lmhhc0VkZ2UoY3VycmVudCwgdG8pKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmlzaXRlZFtjdXJyZW50XSA9IHRydWU7XG5cdFx0XHRcdHZhciBmb3VuZCA9IGZhbHNlO1xuXHRcdFx0XHR0aGF0LmVhY2hWZXJ0ZXhGcm9tKGN1cnJlbnQsIGZ1bmN0aW9uIChuZXh0KSB7XG5cdFx0XHRcdFx0aWYgKCFmb3VuZCAmJiAhdmlzaXRlZFtuZXh0XSAmJiBoYXNQYXRoQXV4KG5leHQpKSB7XG5cdFx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZGVsZXRlIHZpc2l0ZWRbY3VycmVudF07XG5cdFx0XHRcdHJldHVybiBmb3VuZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGhhc1BhdGhBdXgoZnJvbSk7XG5cdFx0fTtcblxuXHRcdHRoYXQudG9wb2xvZ2ljYWxseSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdFx0XHR2YXIgdmlzaXRlZCA9IFtdO1xuXHRcdFx0dmFyIGhhbmRsZWQgPSB7fTtcblxuXHRcdFx0ZnVuY3Rpb24gdmlzaXQoYSkge1xuXHRcdFx0XHR2aXNpdGVkLnB1c2goYSk7XG5cblx0XHRcdFx0dmFyIGkgPSB2aXNpdGVkLmluZGV4T2YoYSk7XG5cdFx0XHRcdGlmIChpICE9PSB2aXNpdGVkLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHR2YXIgY3ljbGUgPSB2aXNpdGVkLnNsaWNlKGkgKyAxKS5yZXZlcnNlKCk7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEpzR3JhcGguQ3ljbGVFcnJvcihjeWNsZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIWhhbmRsZWRbYV0pIHtcblx0XHRcdFx0XHR0aGF0LmVhY2hWZXJ0ZXhUbyhhLCB2aXNpdCk7XG5cdFx0XHRcdFx0aGFuZGxlZFthXSA9IHsgcmV0dXJuZWQ6IGhhbmRsZXIoYSwgdGhhdC52ZXJ0ZXhWYWx1ZShhKSkgfTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZpc2l0ZWQucG9wKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoYXQuZWFjaFZlcnRleChmdW5jdGlvbiAoYSkge1xuXHRcdFx0XHRpZiAoIWhhbmRsZWRbYV0pIHtcblx0XHRcdFx0XHR2aXNpdChhKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHRoYXQudHJhbnNpdGl2ZVJlZHVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciByZXN1bHQgPSBuZXcgSnNHcmFwaCgpO1xuXHRcdFx0dGhhdC5lYWNoVmVydGV4KGZ1bmN0aW9uIChrZXksIHZhbCkge1xuXHRcdFx0XHRyZXN1bHQuYWRkVmVydGV4KGtleSwgdmFsKTtcblx0XHRcdH0pO1xuXHRcdFx0dGhhdC5lYWNoRWRnZShmdW5jdGlvbiAoZnJvbSwgdG8sIHZhbCkge1xuXHRcdFx0XHRyZXN1bHQuYWRkRWRnZShmcm9tLCB0bywgdmFsKTtcblx0XHRcdH0pO1xuXHRcdFx0cmVzdWx0LmVhY2hWZXJ0ZXgoZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0cmVzdWx0LmVhY2hWZXJ0ZXgoZnVuY3Rpb24gKHkpIHtcblx0XHRcdFx0XHRpZiAocmVzdWx0Lmhhc0VkZ2UoeCwgeSkpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5lYWNoVmVydGV4KGZ1bmN0aW9uICh6KSB7XG5cdFx0XHRcdFx0XHRcdGlmIChyZXN1bHQuaGFzUGF0aCh5LCB6KSkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5yZW1vdmVFZGdlKHgsIHopO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH07XG5cblx0fVxuXG5cbi8vICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gIC8vIFV0aWxpdHkgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cdGZ1bmN0aW9uIHNldDJkT2JqKEEsIG9uZSwgdHdvLCB2YWwpIHtcblx0XHRpZiAodHlwZW9mIEFbb25lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdEFbb25lXSA9IHt9O1xuXHRcdH1cblx0XHRBW29uZV1bdHdvXSA9IHZhbDtcblx0fVxuXG5cbi8vICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gIC8vIENhbGxiYWNrcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cdGZ1bmN0aW9uIENhbGxiYWNrcygpIHtcblxuXHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblxuXHRcdHRoaXMuYWRkID0gZnVuY3Rpb24gKGZuKSB7XG5cdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoZm4pID09PSAtMSkge1xuXHRcdFx0XHRjYWxsYmFja3MucHVzaChmbik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gcmVtb3ZlQ2FsbGJhY2soKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGZuKTtcblx0XHRcdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHR0aGlzLmZpcmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHRcdGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuXHRcdFx0XHRmbi5hcHBseShudWxsLCBhcmdzKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0fVxuXG5cbi8vICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gIC8vIEVycm9ycyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cdGZ1bmN0aW9uIG5ld0Vycm9yKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG5cdFx0Ly9ub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG5cdFx0Y29uc3RydWN0b3IucHJvdG90eXBlLl9fcHJvdG9fXyA9IEVycm9yLnByb3RvdHlwZTtcblx0XHRjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcblx0XHRjb25zdHJ1Y3Rvci5wcm90b3R5cGUubmFtZSA9IG5hbWU7XG5cdFx0cmV0dXJuIGNvbnN0cnVjdG9yO1xuXHR9XG5cblxuXHRKc0dyYXBoLlZlcnRleEV4aXN0c0Vycm9yID0gbmV3RXJyb3IoXCJWZXJ0ZXhFeGlzdHNFcnJvclwiLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdGZ1bmN0aW9uIHJlZnJlc2hNZXNzYWdlKCkge1xuXHRcdFx0dGhhdC5tZXNzYWdlID0gXCJUaGlzIGdyYXBoIGhhcyBcIiArXG5cdFx0XHQgICAgICAgICAgICAgICAodGhhdC52ZXJ0aWNlcyA9PT0gMSA/IFwiYSB2ZXJ0ZXhcIiA6IFwidmVydGljZXNcIikgK1xuXHRcdFx0ICAgICAgICAgICAgICAgXCIgJ1wiICsgT2JqZWN0LmtleXModGhhdC52ZXJ0aWNlcykuam9pbihcIicsICdcIikgKyBcIidcIjtcblx0XHR9XG5cblx0XHR0aGF0LnYgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0dGhhdC52ZXJ0aWNlc1trZXldID0gdmFsdWU7XG5cdFx0XHRyZWZyZXNoTWVzc2FnZSgpO1xuXHRcdFx0cmV0dXJuIHRoYXQ7XG5cdFx0fTtcblxuXHRcdHRoYXQudmVydGljZXMgPSB7fTtcblx0XHR0aGF0LnYoa2V5LCB2YWx1ZSk7XG5cblx0XHRyZWZyZXNoTWVzc2FnZSgpO1xuXHR9KTtcblxuXG5cdEpzR3JhcGguVmVydGV4Tm90RXhpc3RzRXJyb3IgPSBuZXdFcnJvcihcIlZlcnRleE5vdEV4aXN0RXJyb3JcIiwgZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdGZ1bmN0aW9uIHJlZnJlc2hNZXNzYWdlKCkge1xuXHRcdFx0dGhhdC5tZXNzYWdlID0gXCJUaGlzIGdyYXBoIGRvZXMgbm90IGhhdmUgXCIgK1xuXHRcdFx0ICAgICAgICAgICAgICAgKHRoYXQudmVydGljZXMgPT09IDEgPyBcImEgdmVydGV4XCIgOiBcInZlcnRpY2VzXCIpICtcblx0XHRcdCAgICAgICAgICAgICAgIFwiICdcIiArIE9iamVjdC5rZXlzKHRoYXQudmVydGljZXMpLmpvaW4oXCInLCAnXCIpICsgXCInXCI7XG5cdFx0fVxuXG5cdFx0dGhhdC52ID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0dGhhdC52ZXJ0aWNlc1trZXldID0gdW5kZWZpbmVkO1xuXHRcdFx0cmVmcmVzaE1lc3NhZ2UoKTtcblx0XHRcdHJldHVybiB0aGF0O1xuXHRcdH07XG5cblx0XHR0aGF0LnZlcnRpY2VzID0ge307XG5cdFx0dGhhdC52KGtleSk7XG5cblx0XHRyZWZyZXNoTWVzc2FnZSgpO1xuXHR9KTtcblxuXG5cdEpzR3JhcGguRWRnZUV4aXN0c0Vycm9yID0gbmV3RXJyb3IoXCJFZGdlRXhpc3RzRXJyb3JcIiwgZnVuY3Rpb24gKGZyb20sIHRvLCB2YWx1ZSkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdGZ1bmN0aW9uIHJlZnJlc2hNZXNzYWdlKCkge1xuXHRcdFx0dmFyIGVkZ2VzID0gW107XG5cblx0XHRcdE9iamVjdC5rZXlzKHRoYXQuZWRnZXMpLmZvckVhY2goZnVuY3Rpb24gKGZyb20pIHtcblx0XHRcdFx0T2JqZWN0LmtleXModGhhdC5lZGdlc1tmcm9tXSkuZm9yRWFjaChmdW5jdGlvbiAodG8pIHtcblx0XHRcdFx0XHRlZGdlcy5wdXNoKFwiKCdcIiArIGZyb20gKyBcIicsICdcIiArIHRvICsgXCInKVwiKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhhdC5tZXNzYWdlID0gXCJUaGlzIGdyYXBoIGhhcyBcIiArXG5cdFx0XHQgICAgICAgICAgICAgICAoZWRnZXMubGVuZ3RoID09PSAxID8gXCJhbiBlZGdlIFwiIDogXCJlZGdlcyBcIikgK1xuXHRcdFx0ICAgICAgICAgICAgICAgZWRnZXMuam9pbihcIiwgXCIpO1xuXHRcdH1cblxuXHRcdHRoYXQuZSA9IGZ1bmN0aW9uIChmcm9tLCB0bywgdmFsdWUpIHtcblx0XHRcdHNldDJkT2JqKHRoYXQuZWRnZXMsIGZyb20sIHRvLCB2YWx1ZSk7XG5cdFx0XHRyZWZyZXNoTWVzc2FnZSgpO1xuXHRcdFx0cmV0dXJuIHRoYXQ7XG5cdFx0fTtcblxuXHRcdHRoYXQuZWRnZXMgPSB7fTtcblx0XHR0aGF0LmUoZnJvbSwgdG8sIHZhbHVlKTtcblxuXHRcdHJlZnJlc2hNZXNzYWdlKCk7XG5cdH0pO1xuXG5cblx0SnNHcmFwaC5FZGdlTm90RXhpc3RzRXJyb3IgPSBuZXdFcnJvcihcIkVkZ2VOb3RFeGlzdEVycm9yXCIsIGZ1bmN0aW9uIChmcm9tLCB0bykge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdGZ1bmN0aW9uIHJlZnJlc2hNZXNzYWdlKCkge1xuXHRcdFx0dmFyIGVkZ2VzID0gW107XG5cblx0XHRcdE9iamVjdC5rZXlzKHRoYXQuZWRnZXMpLmZvckVhY2goZnVuY3Rpb24gKGZyb20pIHtcblx0XHRcdFx0T2JqZWN0LmtleXModGhhdC5lZGdlc1tmcm9tXSkuZm9yRWFjaChmdW5jdGlvbiAodG8pIHtcblx0XHRcdFx0XHRlZGdlcy5wdXNoKFwiKCdcIiArIGZyb20gKyBcIicsICdcIiArIHRvICsgXCInKVwiKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhhdC5tZXNzYWdlID0gXCJUaGlzIGdyYXBoIGRvZXMgbm90IGhhdmUgXCIgK1xuXHRcdFx0ICAgICAgICAgICAgICAgKGVkZ2VzLmxlbmd0aCA9PT0gMSA/IFwiYW4gZWRnZSBcIiA6IFwiZWRnZXMgXCIpICtcblx0XHRcdCAgICAgICAgICAgICAgIGVkZ2VzLmpvaW4oXCIsIFwiKTtcblx0XHR9XG5cblx0XHR0aGF0LmUgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcblx0XHRcdHNldDJkT2JqKHRoYXQuZWRnZXMsIGZyb20sIHRvLCB1bmRlZmluZWQpO1xuXHRcdFx0cmVmcmVzaE1lc3NhZ2UoKTtcblx0XHRcdHJldHVybiB0aGF0O1xuXHRcdH07XG5cblx0XHR0aGF0LmVkZ2VzID0ge307XG5cdFx0dGhhdC5lKGZyb20sIHRvKTtcblxuXHRcdHJlZnJlc2hNZXNzYWdlKCk7XG5cdH0pO1xuXG5cblx0SnNHcmFwaC5IYXNDb25uZWN0ZWRFZGdlc0Vycm9yID0gbmV3RXJyb3IoXCJIYXNDb25uZWN0ZWRFZGdlc0Vycm9yXCIsIGZ1bmN0aW9uIChrZXkpIHtcblx0XHR0aGlzLm1lc3NhZ2UgPSBcIlRoZSAnXCIgKyBrZXkgKyBcIicgdmVydGV4IGhhcyBjb25uZWN0ZWQgZWRnZXNcIjtcblx0XHR0aGlzLmtleSA9IGtleTtcblx0fSk7XG5cblxuXHRKc0dyYXBoLkN5Y2xlRXJyb3IgPSBuZXdFcnJvcihcIkN5Y2xlRXJyb3JcIiwgZnVuY3Rpb24gKGN5Y2xlKSB7XG5cdFx0dGhpcy5tZXNzYWdlID0gXCJUaGlzIGdyYXBoIGNvbnRhaW5zIGEgY3ljbGU6IFwiICsgY3ljbGU7XG5cdFx0dGhpcy5jeWNsZSA9IGN5Y2xlO1xuXHR9KTtcblxuXG4vLyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cdHJldHVybiBKc0dyYXBoO1xuXG5cbn0pKTsvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9ib3dlcl9jb21wb25lbnRzL2pzLWdyYXBoL2Rpc3QvanMtZ3JhcGguanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiIsImZpbGUiOiJleGFtcGxlMi5qcyJ9